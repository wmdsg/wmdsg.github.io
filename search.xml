<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java集合框架面试题整理（一）</title>
      <link href="/2021/12/11/java-ji-he-kuang-jia-mian-shi-ti-zheng-li-yi/"/>
      <url>/2021/12/11/java-ji-he-kuang-jia-mian-shi-ti-zheng-li-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架源码阅读ArrayList（一）</title>
      <link href="/2021/12/11/java-ji-he-kuang-jia-yuan-ma-yue-du-arraylist-yi/"/>
      <url>/2021/12/11/java-ji-he-kuang-jia-yuan-ma-yue-du-arraylist-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程volatile详解</title>
      <link href="/2021/12/11/java-bing-fa-bian-cheng-volatile-xiang-jie/"/>
      <url>/2021/12/11/java-bing-fa-bian-cheng-volatile-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>@<a href="volatile%E8%AF%A6%E8%A7%A3">TOC</a></p><p><a href="https://zhuanlan.zhihu.com/p/111559032">volatile参考</a></p><h3 id="并发三大特性"><a href="#并发三大特性" class="headerlink" title="并发三大特性"></a>并发三大特性</h3><ol><li>原子性：一个或一组操作要么一起执行成功，要么就全部不执行，不能被打断。</li><li>有序性：为了提高程序的执行效率，编译器和处理器都会对程序中的指令进行重排序。</li><li>可见性：即一个线程对一个变量的修改对所有线程都是可见的。</li></ol><p>volatile只具备这三大特性中的两种，不具备原子性。<br>我们知道基本数据类型的单次读，单次写是具有原子性的，因此对volatile变量的单次读，写也是具有原子性的例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">i<span class="token operator">==</span><span class="token number">1</span><span class="token comment">//单次读</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token comment">//单次写，赋值</span>i<span class="token operator">++</span><span class="token comment">//复合操作，不具有原子性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过分析字节码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0<span class="token comment">//将this引用推送至栈顶</span>       <span class="token number">1</span><span class="token operator">:</span> dup<span class="token comment">//复制栈顶值this应用，并将其压入栈顶，即此时操作数栈上有连续相同的this引用；</span>       <span class="token number">2</span><span class="token operator">:</span> getfield      #<span class="token number">2</span>   <span class="token comment">//  弹出栈顶的对象引用，获取其字段race的值并压入栈顶。第一次操作</span>       <span class="token number">5</span><span class="token operator">:</span> iconst_1<span class="token comment">//将int型(1)推送至栈顶</span>       <span class="token number">6</span><span class="token operator">:</span> iadd<span class="token comment">// 弹出栈顶两个元素相加（race+1），并将计算结果压入栈顶。第二次操作</span>       <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>   <span class="token comment">//  从栈顶弹出两个变量（累加值，this引用），将值赋值到this实例字段race上。第三次操作，赋值</span>      <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）线程A，线程B同时执行getfield指令将i值压栈<br><img src="https://img-blog.csdnimg.cn/78d6b839a5f8450a94645b1c5dfb5c95.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtMTIzNDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>（2）执行i_const1将int（1）压栈<br><img src="https://img-blog.csdnimg.cn/3522a5e1a2154eceb82c8fa67bdf17ca.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtMTIzNDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>（3） 线程A执行iadd，putfield后将主存中值更新，而此时B线程栈内值还是旧值。<br><img src="https://img-blog.csdnimg.cn/c49810a6253341f3b6eaea7c83851d54.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtMTIzNDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>（4）B线程执行后续指令，此时发生错误。<br><img src="https://img-blog.csdnimg.cn/b2c1ef171683459d8327c3a0321f5b86.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtMTIzNDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时用volatile显然是不合适的，这就要引入同步机制了。</p><h3 id="volatile可见性"><a href="#volatile可见性" class="headerlink" title="volatile可见性"></a>volatile可见性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//未使用了volatile</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonVolatileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//任务是否停止,普通变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>         <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//stop=false，不满足停止条件，继续执行</span>                <span class="token comment">//do someting</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stop=true，满足停止条件。"</span> <span class="token operator">+</span>                    <span class="token string">"停止时间："</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保证主线程修改stop=true，在子线程启动后执行。</span>        stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程设置停止标识 stop=true。"</span> <span class="token operator">+</span>                <span class="token string">"设置时间："</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们希望执行stop=true后线程停止，但实际上并没有停止，这是因为线程制启动后会把相关变量读入自己的栈内存中，在运行过程中就从栈内存中取值，故我们修改主存中stop后，这对于线程是不可见的。</p><p>volatile关键字是Java提供的轻量级的同步机制，他为字段的访问提供了一种免锁机制，使用他不会引起线程的上下文切换和调度，因此他比synchronized执行效率更高，那volatile是可以完全替代synchronized吗？<br>事实上不是，我们知道volatile不具有原子性。</p><h3 id="volatile正确使用姿势"><a href="#volatile正确使用姿势" class="headerlink" title="volatile正确使用姿势"></a>volatile正确使用姿势</h3><p>使用volatile主要是为了保证字段访问的一致性，如果只使用volatile就能保证线程安全，那当然没问题，但很多时候需要我们自己编写同步来实现线程安全。<br>通常在以下场景使用volatile比较好。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stop<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//volatile 变量，用于停止请求的状态标识</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//停止请求</span>    stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断是否需要停止</span>        <span class="token comment">// do Something  </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样只要任何一个线程调用了shutdown()，其他线程在执行doWork时都可以立即感知到stop变量的变化，这时就可以大胆的使用volatile。这种类型的状态标记的一个公共特性是：通常只有一种状态转换，如标志从false 转换为true。</p><h3 id="volatile实现原理"><a href="#volatile实现原理" class="headerlink" title="volatile实现原理"></a>volatile实现原理</h3><p>在了解原理之前，先了解一下cpu的相关术语</p><ol><li>内存屏障：一组处理器指令，用于实现内存操作的顺序限制。</li></ol><p>volatile是如何保证可见性的呢，通过查看汇编代码，可知有volatile修饰的共享变量进行写操作时会多出两行代码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x01a3deld: movb<span class="token punctuation">..</span>.0x01a3deld: lock<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查阅IA-32架构软件开发手册可知，Lock前缀指令在多核处理器会引发两件事情。<br>（1）将当前处理器缓存行数据协会系统内存。<br>（2）这个写回内存的操作会使其他cpu里缓存该内存地址的数据无效。<br>我们知道为了提高处理速度，处理器不直接和内存通信，而是先将内存数据读到内部缓存再操作，但操作完不知道何时会写入内存。如果对volatile变量写操作，则JVM对处理器发送Lock前缀的指令，将修改的值写入内存，但此时其他处理器缓存的值还是旧的，再次执行会有问题，因此，为了保存各个处理器缓存一致，就会实现一致性协议<br><a href="https://blog.csdn.net/zxp_cpinfo/article/details/53523697">缓存一致性协议</a><br>每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是否过期，当处理器发现缓存行对应的内存地址修改，就会将当前处理器缓存行设置成无效，当处理器再对数据修改时，会重新从系统内存中把数据读到缓存里。</p><h4 id="Lock前缀指令会引起处理器缓存写回内存"><a href="#Lock前缀指令会引起处理器缓存写回内存" class="headerlink" title="Lock前缀指令会引起处理器缓存写回内存"></a>Lock前缀指令会引起处理器缓存写回内存</h4><p>Lock前缀指令会导致在执行指令期间，声言处理器的LOCK#信号，在多处理环境中，Lock#信号确保在声言该信号期间。处理器可以独占任何共享内存。但LOCK#信号一般不锁总线，而是锁缓存，毕竟锁总线开销大，在锁操作时总是在总线上声明LOCK#信号，但在P6和目前的处理器上，如果访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号，相反，会锁定这块内存区域的缓存，并写回内存，并使用缓存一致性机制保证修改的原子性，此为“缓存锁定”。缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据。</p><h4 id="一个处理器缓存写到内存会导致其他处理器缓存无效"><a href="#一个处理器缓存写到内存会导致其他处理器缓存无效" class="headerlink" title="一个处理器缓存写到内存会导致其他处理器缓存无效"></a>一个处理器缓存写到内存会导致其他处理器缓存无效</h4><p>在多核处理器系统中进行操作时1，处理器能嗅探其他处理器访问系统内存和它们内部的缓存，处理器使用嗅探技术保证内部缓存，系统内存和其他处理器的缓存在总线上保持一致，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址处于共享状态，那么正在嗅探的处理器将使缓存行无效，下次访问相同内存地址时强制执行缓存行填充。</p><h3 id="volatile使用的优化"><a href="#volatile使用的优化" class="headerlink" title="volatile使用的优化"></a>volatile使用的优化</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程的艺术笔记（一）</title>
      <link href="/2021/12/11/java-bing-fa-bian-cheng-de-yi-zhu-bi-ji-yi/"/>
      <url>/2021/12/11/java-bing-fa-bian-cheng-de-yi-zhu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p>synchronized底层实现原理及java内存模型基础</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程笔记（二）</title>
      <link href="/2021/12/11/java-bing-fa-bian-cheng-bi-ji-er/"/>
      <url>/2021/12/11/java-bing-fa-bian-cheng-bi-ji-er/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC笔记</title>
      <link href="/2021/12/10/springmvc-bi-ji/"/>
      <url>/2021/12/10/springmvc-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1i541157T2?spm_id_from=333.999.0.0">孙哥说SpringMVC(Thymeleaf版) 2021年12月10日开始</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程总复习加深入理解笔记（一）</title>
      <link href="/2021/12/10/java-bing-fa-bian-cheng-zong-fu-xi-jia-shen-ru-li-jie-bi-ji-yi/"/>
      <url>/2021/12/10/java-bing-fa-bian-cheng-zong-fu-xi-jia-shen-ru-li-jie-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV16J411h7Rd?from=search&amp;seid=16873817666180498597&amp;spm_id_from=333.337.0.0">黑马程序员全面深入学习Java并发编程，JUC并发编程全套教程</a></p><p><a href="https://github.com/Seazean/JavaNotes">并发笔记</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>“密码学复习”</title>
      <link href="/2021/12/09/mi-ma-xue-fu-xi/"/>
      <url>/2021/12/09/mi-ma-xue-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="信息安全的目标"><a href="#信息安全的目标" class="headerlink" title="信息安全的目标"></a>信息安全的目标</h2><ul><li><p>机密性（Confidentiality）。</p><p>指保证信息不泄露给非授权的用户或者实体，确保保存的信息和被传输的信息仅能被授权的各方得到，而非授权用户即使得到信息也无法知晓信息的内容</p></li><li><p>完整性（Integrity）。</p><p>指消息未经授权不能进行篡改，要保证消息的一致性，即消息在生成、传输、存储和使用过程中不应发生人为或者非人为地非授权篡改（插入、修改、删除、重排序等）。</p></li><li><p>认证分为消息鉴别和实体认证。</p><p>消息鉴别是指接收方保证消息确实来自于所声称的源；实体认证指能确保被认证实体是所声称的实体，第三方不能假冒这两个合法方中的任何一方。</p></li><li><p>不可否认性（Non-Repudiation）。</p><p>指能保证用户无法事后否认曾经对信息进行的生成、签发、接收等行为。</p><p>当发送一个消息时，接收方能证实该消息确实是由既定的发送方发来的，称为源不可否认性；</p></li><li><p>可用性（Availability）。</p><p>指保障信息资源随时可提供服务的能力。即授权用户根据需要可以随时访问所需信息，保证合法用户对信息资源的使用不被非法拒绝。</p></li></ul><h2 id="对密码的攻击"><a href="#对密码的攻击" class="headerlink" title="对密码的攻击"></a>对密码的攻击</h2><ul><li>唯密文攻击（COA）。敌手（或密码分析者）只能通过考察密文，试图推到解密密钥或明文。</li><li>已知明文攻击（KPA）。敌手拥有一定量的明文和相应的密文。</li><li>选择明文攻击（CPA1）。敌手可以选择明文，接着得到相应的密文。之后，敌手使用所拥有的信息，恢复以前未见过的密文的相应明文。</li><li>自适应选择明文攻击（CPA2）。一种选择明文攻击，其中明文的选择可依赖于以前产生的密文。</li><li>选择密文攻击（CCA1）。敌手可以选择密文，接着得到相应的明文。这种攻击的一种方法是敌手设法获取解密设备的访问权（但不是解密密钥，它可能被安全地嵌入到设备中）。然后，在不访问该设备的情况下，推导出（先前未询问过解密设备的）密文的明文。</li><li>自适应选择密文攻击（CCA2）。一种选择密文攻击，其中密文的选择可依赖于以前输入所产生的明文。</li></ul><h2 id="伪随机生成器"><a href="#伪随机生成器" class="headerlink" title="伪随机生成器"></a>伪随机生成器</h2><ul><li>高效的区分算法 (敌手) 没有时间去尝试所有可能的种子s 。</li><li>种子的个数为2^n, 而高效区分算法是多项式时间算法，显然其运行时间要小于2^n.</li><li>伪随机数生成器的种子要秘密保存，且必须服从均匀分布。</li><li>尽管理论上来说，多项式时间敌手无法穷举整个种子空间，但在实际应用中还是要妥善选择种子的长度n.</li></ul><h2 id="分组密码工作模式"><a href="#分组密码工作模式" class="headerlink" title="分组密码工作模式"></a>分组密码工作模式</h2><p>① ECB：简单高效，可以实现并行操作。ECB有良好的差错控制，一个密文块（或明文块）的改变，在解密（或加密）时，只会引起相应的明文块（或密文块）的改变，不会影响其他明文块（或密文块）的改变。</p><p>ECB的最大特性是明文中相同的分组，在密文也是相同的。这也是其缺点，因为这样在加密长消息时，敌手可能得到多个明文密文对，进行已知明文攻击。</p><p>因此，ECB特别适合加密的数据随机且较短的情形，如加密一个会话密钥。</p><p>② <em><strong>*CBC*</strong></em>****：引入了反馈机制。****CBC不能自动恢复同步错误。如果密文中偶尔丢失或添加一些数据位，那么整个密文序列将不能正确的解密，除非有帧结构能够重新划分和排列分组的边界。</p><p>CBC对于加密长于64bits的消息非常合适。另外，CBC除了能获得保密性外，还能用于认证</p><p><em><strong>*③*</strong></em> <em><strong>*CFB*</strong></em>****：****可以将分组密码转变为序列密码，变成面向字符的流密码工作模式，与CBC一样，引入反馈机制，CFB的密文块是前面所有明文块的函数。</p><p>④ <em><strong>*OFB*</strong></em>****：****内部反馈，失去同步（即移位寄存器没有保持一致），将是致命的；如果密文某个位反转，则相应的明文那一位也反转。这一缺点有可能被攻击者利用</p><h3 id="ECB模式"><a href="#ECB模式" class="headerlink" title="ECB模式"></a>ECB模式</h3><ul><li>优点：简单高效，可以实现并行控制。有良好的差错控制，一个密文块的改变在解密时只会影响相应明文快的改变。</li><li>缺点：明文中相同的分组在密文中也是相同的，敌手获得多个明密文对后进行已知明文攻击。</li></ul><h3 id="CBC模式"><a href="#CBC模式" class="headerlink" title="CBC模式"></a>CBC模式</h3><p>为什么密文一起传输的IV要加密保护？</p><p>中间截获者可以改变IV来改变第一个明文分组的解密值，由于引入了反馈机制，一个分组的错误会影响其他分组，故会出现错误。</p><p>CBC是否有明文错误扩散和密文错误扩散？</p><ul><li>明文分组中发生的错误将影响对应密文分组及其后所有密文分组，但解密过程会反转这个过程，解密后的明文仍然只有那一个明文有错误。故没有明文错误扩散</li><li>由于信道噪声或存储介质损害，接收方密文某个分组出现错误，该错误分组只会影响对应的解密明文分组，和后一个明文分组，故密文错误扩散很小。</li></ul><h3 id="CFB模式"><a href="#CFB模式" class="headerlink" title="CFB模式"></a>CFB模式</h3><p>将分组密码变为序列密码，变为面向字符的流密码工作模式</p><p>解密时将收到的密文单元与加密函数的输出进行异或，这里仍然使用加密函数是因为：</p><p>加密函数只起到生成密钥的作用，故解密还是使用加密函数</p><p>CFB错误扩散如何</p><ul><li>明文分组一个比特反转会影响后面所有密文，但解密的明文还是只有哪一个分组出现错误，故没有明文错误扩散</li><li>密文分组出现一个bit反转，以此密文分组生成的密钥流解密出的明文都会错误一般认为明文会有d/s+1个分组错误，故事自同步的。</li></ul><h3 id="OFB模式"><a href="#OFB模式" class="headerlink" title="OFB模式"></a>OFB模式</h3><p>与CFB类似，只是反馈的不是密文，而是密钥流前s bit，</p><p>只要IV相同，就确保了密钥流一致，即使密文分组出现错误，也只影响对面明文分组。故任何OFB都应检查是否失去同步。</p><h3 id="CTR模式"><a href="#CTR模式" class="headerlink" title="CTR模式"></a>CTR模式</h3><p>计数器长度与明文分组长度相同，加密不同明文分组所用计数器值不同。</p><ul><li>优点：<ul><li>可以并行，具有较高软硬件效率；可以处理某个密文分组随机访问某个明文分组</li><li>可预处理，密钥流事先准备好</li><li>不需要分组密码解密算法，只需要加密算法</li></ul></li></ul><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>性质；</p><ul><li>用于任意长度的消息</li><li>产生定长的输出</li><li>对于给定的消息x，计算H（x）容易，软硬件实现均可</li><li>单向性：对于任意给定的h，找到满足H（x）=h的x在计算上不可行</li><li>抗弱碰撞性：对于任意给定的x，找到x‘使得H（x）=H（x`）在计算上不可行</li><li>抗强碰撞性：找到任何满足H（X’）=H（x）的偶对（x，x’）在计算上不可行</li></ul><p>单向性，抗强碰撞，抗弱碰撞三种安全性比较：</p><ul><li>如果哈希函数是抗强碰撞的，则一定是抗若碰撞的。</li></ul><p>证明看书。</p><ul><li><p>若H抗强碰撞，则不一定有H是单向的</p><p>证明看书</p></li><li><p>如果H存在压缩，且H是抗强碰撞的，则H是单向的。</p></li></ul><h3 id="哈希函数的应用"><a href="#哈希函数的应用" class="headerlink" title="哈希函数的应用"></a>哈希函数的应用</h3><ul><li>数据完整性：计算程序和文档散列值与原来保存的数字指纹比较来鉴别数据完整性</li><li>数字签名：先对消息进行散列再签名，提高签名速度，不泄露明文。</li><li>消息鉴别码：哈希函数与对称密码体制结合，用于消息完整性保护，对消息来源鉴别</li><li>基于口令的身份识别：系统中保留用户的ID对应的散列值</li></ul><p>生日攻击：看书</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（九）基于事件的并发</title>
      <link href="/2021/12/08/cao-zuo-xi-tong-dao-lun-bi-ji-jiu-ji-yu-shi-jian-de-bing-fa/"/>
      <url>/2021/12/08/cao-zuo-xi-tong-dao-lun-bi-ji-jiu-ji-yu-shi-jian-de-bing-fa/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/37804932">Threee easy pieces总结——并发(5)：基于事件的并发（event-based concurrency） - 知乎 (zhihu.com)</a></p><p><a href="https://www.zhihu.com/question/64727674">(11 封私信 / 80 条消息) 为什么基于事件驱动的服务器能实现高并发？ - 知乎 (zhihu.com)</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们目前所提到的并发似乎只能用线程来实现，实际上还有一种流行的并发方式是基于事件的并发。</p><p>基于事件的并发针对两方面的问题：</p><ul><li>多线程应用中，正确处理并发很有难度，如忘加锁，死锁等</li><li>开发者无法控制多线程在某一时刻的调度，程序员只是创建了线程，依赖操作系统合理地调度线程。要实现一个在不同负载下，都能良好运行的调度程序是很困难的。</li></ul><p>因此接下来的关键问题是：如何不用线程，同时又能保证对并发的控制，构建并发服务器呢？</p><h3 id="基本想法：事件循环"><a href="#基本想法：事件循环" class="headerlink" title="基本想法：事件循环"></a>基本想法：事件循环</h3><p>等待事件发生，当发生时，检查事件类型，然后对应处理。</p><pre class="line-numbers language-none"><code class="language-none">while(1){events=getEvents();for(e in events){processEvent(e);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主循环依次等待事件发生，依次处理。处理事件的代码叫事件处理程序。处理程序在处理事件时，它是系统中唯一发生的活动，因此调度决定接下来处理哪个事件。这是对调度的显示控制，是基于事件处理的优点。</p><p>但这也带来一个更大的问题：基于事件的服务器如何决定哪个事件发生，尤其是网络和磁盘I/O，事件服务器如何确定是否有它的消息到达？</p><h3 id="select-和poll"><a href="#select-和poll" class="headerlink" title="select()和poll()"></a>select()和poll()</h3><p>大多数系统提供API，即select和poll系统调用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> nfds<span class="token punctuation">,</span>          fd_set <span class="token operator">*</span>restrict readfds<span class="token punctuation">,</span>          fd_set <span class="token operator">*</span>restrict writefds<span class="token punctuation">,</span>          fd_set <span class="token operator">*</span>restrict errorfds<span class="token punctuation">,</span>          <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>restrict timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>select() 检查I/O描述符集合，他们的地址通过readfds，writefds，和errorfds传入，分别查看它们中某些描述符是否准备好读取，准备好写入，或有异常情况处理，在每个集合中检查前nfds个描述符即0-nfds-1，返回时，select() 用给定请求操作准备好的描述符组成的子集替换给定描述符集合，返回就绪描述符总数。</p><p>==关于select的注意==：</p><ul><li>它可以让你检查描述符是否可以读取或需写入，前者让服务器确定新数据包已到达，且需要处理，后者让服务器知道何时回复。</li><li>超时参数通常设置为NULL，这会导致select无限期阻塞，知道某个描述符准备就绪，更常见的技术是设置为0，让select立即返回。</li></ul><h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fd_set readFDS<span class="token punctuation">;</span>        <span class="token function">FD_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>readFDs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> fd<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>fd<span class="token operator">=</span>minFD<span class="token punctuation">;</span>fd<span class="token operator">&lt;</span>maxFD<span class="token punctuation">;</span>fd<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">FD_SET</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>readFDs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> rc<span class="token operator">=</span><span class="token function">select</span><span class="token punctuation">(</span>maxFD<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>readFDs<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> fd<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>fd<span class="token operator">=</span>midFD<span class="token punctuation">;</span>fd<span class="token operator">&lt;</span>maxFD<span class="token punctuation">;</span>fd<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FD_ISSET</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>readFDs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">processFD</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在循环内部，使用FD_ZERO清除文件描述符集合，使用FD_SET注册FD，表示服务器关注的所有网络套接字，最后调用select查看哪些连接有可用的数据，使用FD_ISSET，事件服务器可以查看哪些描述符准备好数据并处理传入的数据。</p><h3 id="一个问题：阻塞系统调用"><a href="#一个问题：阻塞系统调用" class="headerlink" title="一个问题：阻塞系统调用"></a>一个问题：阻塞系统调用</h3><p>假设某个事件要求你发出可能会阻塞系统调用，如一个请求从客户端进入服务器，要求从磁盘读取文件将其内容返回给发出请求的客户端，事件处理程序将不得不发出open系统调用打开文件，通过一系列read来读取文件。因此可能需要很长时间才能提高服务。使用基于线程的服务器时，这不是问题：在发出I/O请求的线程挂起，等待I/O完成，其他线程运行。</p><p>但基于事件的方法意味着必须等待阻塞，这将会造成巨大资源浪费，因此在基于事件的系统中必须遵守一条规则：阻止系统调用。</p><h3 id="解决方案：异步I-O"><a href="#解决方案：异步I-O" class="headerlink" title="解决方案：异步I/O"></a>解决方案：异步I/O</h3><p>异步I/O接口能发出请求并在I/O完成之前将控制权返回给调用者，另外的接口能确定各种I/O是否完成。</p><p>如macOS上的AIO控制块。</p><pre class="line-numbers language-none"><code class="language-none">struct aiocb {int aio_fildes;off_t aio_offset;volatile void *aio_buf;size_t aio_nbytes;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向文件发出异步读取，应用程序首先用相关信息填充此结构，要读取的文件描述符（aio_fildes），文件内偏移量（aio_offset），长度请求（aio_nbytes），最后是应该复制读取结果的目标内存位置（aio_buf）。</p><p>在填充此结构后，应用程序必须发出异步调用来读取文件<code>int&nbsp;aio_read(struct aiocb *aiocbp)</code>如果成功，它会立即返回应用程序。</p><p>然而这又带来一个问题，我们如何知道I/O何时完成？</p><p>可以利用<code>aio_error()</code>，它检查aiocbp引用的请求是否完成，若完成则返回0表示成功，若为完成则返回<code>EINPROGRESS</code>故，对每个未完成的异步IO，应用程序通过调用<code>aio_error()</code>周期性轮询，以确定I/O是否完成。</p><p>你可能注意到，当异步I/O变得很多时将会很影响效率，因为需要不断的轮询，故为了解决这个问题，系统提供了基于中断的方法。此方法使用signal在异步I/O完成时通知应用程序，从而消除轮询的开销。</p><h3 id="补充：UNIX信号"><a href="#补充：UNIX信号" class="headerlink" title="补充：UNIX信号"></a>补充：UNIX信号</h3><p>将信号传递给应用程序，让应用程序停止当前工作，处理信号处理程序，完成后将恢复先前的行为。</p><p>信号有如 HUP(挂断), INT(中断)，SEGV(段违规)等。例如当程序遇到段违规时，系统将发送SIGSEGV，如果程序配置为捕获信号，则可以运行一些代码来响应这个信号。若没有配置处理信号的程序，一些默认行为将生效。</p><pre class="line-numbers language-none"><code class="language-none">#include&lt;stdio.h&gt;#include&lt;signal.h&gt;void handle(int arg){printf("stop");}int main(){signal(SIGHUP,handle);while(1){;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="另一个问题：状态管理"><a href="#另一个问题：状态管理" class="headerlink" title="另一个问题：状态管理"></a>另一个问题：状态管理</h3><p>当事件处理程序发出异步IO后，必须打包一些程序的状态，以便下一个事件处理程序在IO完成时使用。这个额外的工作在基于线程的程序中不需要，因为需要的状态保存在线程栈中。我们通过下面的例子来了解如何状态管理。</p><pre class="line-numbers language-none"><code class="language-none">int rc=read(fd,buffer,size);rc=write(sd,buffer,size);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在一个多线程程序中，当read返回时，代码立即知道该写入哪个套接字，因为信息存储于线程堆栈中。</p><p>在基于事件的系统中，为了执行相同的任务，首先使用AIO异步读取，当调用告诉我们读取完成时，服务器该怎么做？</p><p>一种解决方案是：在某些数据结构中记录完成处理事件需要的信息，当事件发生时，查找信息处理事件。</p><p>例如，将套接字描述符记录在由文件描述符fd索引的某种数据结构中如散列表。</p><h3 id="依然存在的问题"><a href="#依然存在的问题" class="headerlink" title="依然存在的问题"></a>依然存在的问题</h3><p>具体可查阅书籍资料。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（八）常见并发问题</title>
      <link href="/2021/12/08/cao-zuo-xi-tong-dao-lun-bi-ji-ba-chang-jian-bing-fa-wen-ti/"/>
      <url>/2021/12/08/cao-zuo-xi-tong-dao-lun-bi-ji-ba-chang-jian-bing-fa-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="有哪些类型的缺陷"><a href="#有哪些类型的缺陷" class="headerlink" title="有哪些类型的缺陷"></a>有哪些类型的缺陷</h2><p>对于目前主流的开源应用，常见的有以下两类缺陷：非死锁缺陷和死锁缺陷</p><h3 id="非死锁缺陷"><a href="#非死锁缺陷" class="headerlink" title="非死锁缺陷"></a>非死锁缺陷</h3><p>非死锁缺陷占并发问题的大多数，我们主要讨论其中的两种：违反原子性缺陷和错误顺序缺陷</p><h4 id="违反原子性缺陷"><a href="#违反原子性缺陷" class="headerlink" title="违反原子性缺陷"></a>违反原子性缺陷</h4><p>下面是MySQL中的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Thread <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>thd<span class="token operator">-&gt;</span>proc_info<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">fputs</span><span class="token punctuation">(</span>thd<span class="token operator">-&gt;</span>proc_info<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>Thread <span class="token number">2</span><span class="token operator">:</span>thd<span class="token operator">-&gt;</span>proc_info<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个线程都要访问thd结构中的成员proc_info，第一个线程检查proc_info非空，打印，第二个线程设置为空，若出现当地一个线程，在调用fputs之前被中断，第二个线程运行将其置为空，当第一个线程恢复执行时，会出现程序崩溃。</p><p>这是违反了原子性，即检查proc_info非空和打印应该是原子的，但没有设计成原子的。我们可以考虑加锁来实现原子性。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pthread_mutex_t</span> proc_info_lock <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span>Thread <span class="token number">1</span><span class="token operator">:</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc_info_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>thd<span class="token operator">-&gt;</span>proc_info<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>thd<span class="token operator">-&gt;</span>proc_info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc_info_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>Thread <span class="token number">2</span><span class="token operator">:</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc_info_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>thd<span class="token operator">-&gt;</span>proc_info <span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc_info_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="违反顺序缺陷"><a href="#违反顺序缺陷" class="headerlink" title="违反顺序缺陷"></a>违反顺序缺陷</h4><p>看下面的例子</p><pre class="line-numbers language-none"><code class="language-none">Thread 1:void init(){...mThread=PR_CreatThread(mMain,...);...}Thread 2:void mMain(...){...mState=mThread-&gt;State;...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线程2已经假定mThread已经初始化了，但若按照这种顺序：线程1没有先执行而是2先执行，就会出现空指针引用崩溃，还可能产生更奇怪的问题如线程2读到任意内存。</p><p>违反顺序的定义是：两个内存访问的预期顺序被打破了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java源码级注解</title>
      <link href="/2021/12/08/java-yuan-ma-ji-zhu-jie/"/>
      <url>/2021/12/08/java-yuan-ma-ji-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="源码级注解处理"><a href="#源码级注解处理" class="headerlink" title="源码级注解处理"></a>源码级注解处理</h3><p>上面已经看到了如何分析正在运行的程序的注解，注解的另一种用法是自动处理源代码以产生更多源代码，配置文件，脚本等东西。</p><p>[java源码级注解处理+字节码级注解处理 - 开发者知识库 (itdaan.com)](<a href="https://www.itdaan.com/blog/2016/02/23/7fa3912a69d2f685b5529369f68df135.html#:~:text=%E3%80%901%E3%80%91%E6%BA%90%E7%A0%81%E7%BA%A7%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86">https://www.itdaan.com/blog/2016/02/23/7fa3912a69d2f685b5529369f68df135.html#:~:text=【1】源码级注解处理</a> 1）注解的用处之一： 就是自动生成包含程序额外信息的”附文件”。,Java EE 5使用注解极大地简化了编程模型。 2）源码级注解是将注解处理器添加到Java编译器中。)</p><p><a href="https://blog.csdn.net/u013815218/article/details/52432675">(168条消息) 源码级注解_walidake的博客-CSDN博客_源代码注释</a></p><p><a href="https://www.jianshu.com/p/6db8ad1b89c6">源码级注解 - 简书 (jianshu.com)</a></p><p>[java源码级注解处理+字节码级注解处理 - 开发者知识库 (itdaan.com)](<a href="https://www.itdaan.com/blog/2016/02/23/7fa3912a69d2f685b5529369f68df135.html#:~:text=%E3%80%901%E3%80%91%E6%BA%90%E7%A0%81%E7%BA%A7%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86">https://www.itdaan.com/blog/2016/02/23/7fa3912a69d2f685b5529369f68df135.html#:~:text=【1】源码级注解处理</a> 1）注解的用处之一： 就是自动生成包含程序额外信息的”附文件”。,Java EE 5使用注解极大地简化了编程模型。 2）源码级注解是将注解处理器添加到Java编译器中。)</p><p><a href="https://blog.csdn.net/u013815218/article/details/52432675">(168条消息) 源码级注解_walidake的博客-CSDN博客_源代码注释</a></p><p><a href="https://cn.bing.com/search?q=AbstractProcessor&amp;qs=n&amp;form=QBRE&amp;sp=-1&amp;pq=abstractprocessor&amp;sc=8-17&amp;sk=&amp;cvid=C637BA3626E842AA922E466431205927">AbstractProcessor - 国内版 Bing</a></p><p><a href="https://blog.csdn.net/Gaugamela/article/details/79694302">(168条消息) AbstractProcessor: 利用注解动态生成代码_ZhangJian的博客-CSDN博客_abstractprocessor</a></p><p><a href="https://blog.csdn.net/skycnlr/article/details/87869854">(168条消息) 注解处理器（Annoation Processor）_skycnlr的博客-CSDN博客_注解处理器</a></p><p><a href="https://www.jianshu.com/p/7af58e8e3e18">【Android】APT - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/github_35180164/article/details/52055994">(168条消息) Java注解处理器使用详解_Rukey7的博客-CSDN博客_注解处理器</a></p><p><a href="https://zhuanlan.zhihu.com/p/120718706">注解处理器（APT）了解一下 - 知乎 (zhihu.com)</a></p><p><a href="https://www.jianshu.com/p/d7567258ae85">注解处理器（Annotation Processor）简析 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/6db8ad1b89c6">源码级注解 - 简书 (jianshu.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="/2021/12/07/java8-xin-te-xing-yi-lamdar-biao-da-shi/"/>
      <url>/2021/12/07/java8-xin-te-xing-yi-lamdar-biao-da-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的静态代理与动态代理</title>
      <link href="/2021/12/07/java-zhong-de-jing-tai-dai-li-yu-dong-tai-dai-li/"/>
      <url>/2021/12/07/java-zhong-de-jing-tai-dai-li-yu-dong-tai-dai-li/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://www.bilibili.com/video/BV1F741157LA?p=6">【尚硅谷之Java基础】 动态代理与Java8新特性_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/qq_44715943/article/details/120785432">Java DynamicProxy【动态代理】_一只小菜鸡-CSDN博客</a></p><p><a href="https://www.cnblogs.com/zhai1997/p/12257150.html">设计模式（代理模式） - 怀梦想，致远方 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/techyc/p/3455950.html">Java的动态代理(dynamic proxy) - macemers - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/weixin_43320847/article/details/82938754">(167条消息) Java 中的代理(proxy)_lslxy1021的博客-CSDN博客_java proxy</a></p><p><a href="https://blog.csdn.net/yaomingyang/article/details/80981004">(167条消息) Java动态代理InvocationHandler和Proxy学习笔记_明洋的专栏-CSDN博客_invocationhandler</a></p><p><a href="https://www.jianshu.com/p/8ccdbe00ff06">Java代理（Proxy）模式 - 简书 (jianshu.com)</a></p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式是指：为其他对象提供一种代理以控制对这个对象的访问，在某些情况下，一个对象不适合或不能直接引用另一个对象，而代理对象可在客户类和目标对象间起到中介作用。</p><img src="https://s2.loli.net/2021/12/07/kosgqQvIX7mAnDP.png" alt="代理1.png" style="zoom:50%;"><p>使用代理模式的作用</p><ul><li>功能增强</li><li>控制访问：代理类不让你访问目标</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><ul><li>代理类是自己手工实现的，自己创建类</li><li>你要代理的目标类是确定的</li></ul><p>模拟用户购买u盘的行为，用户是客户端，商家是代理，厂家是目标类</p><p>商家和厂家都是卖u盘的，故创建接口定义抽象方法</p><p>步骤：</p><ul><li>创建接口定义卖u盘方法</li><li>创建厂家，商家类，实现接口</li><li>创建客户类，调用商家的方法买u盘</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">厂家类<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsbKingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>        <span class="token comment">//厂家</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">85.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">接口<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * @param amount:购买数量     * @return：价格     */</span>    <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Taobao</span> <span class="token keyword">implements</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment">//商家代理的厂家</span>    <span class="token keyword">private</span> <span class="token class-name">UsbKingFactory</span> factory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UsbKingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//向厂家发送订单，商家再卖给用户</span>        <span class="token keyword">float</span> initPrice <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        initPrice<span class="token operator">+=</span><span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">//增强功能</span>        <span class="token comment">//在目标类调用完之后添加功能都是增强功能</span>        <span class="token keyword">return</span> initPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Taobao</span> taobao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Taobao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> sell <span class="token operator">=</span> taobao<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过淘宝的代理购买u盘价格为："</span><span class="token operator">+</span>sell<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==缺点：==</p><ul><li>当目标类增加时，代理类可能成倍增加，数量过多</li><li>当接口中功能改变了，会影响众多的商家，厂家类</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在静态代理中，目标类很多时，可以使用动态代理，避免静态代理的缺点。</p><p>优点：</p><ul><li>代理类的数量可以很少</li><li>当你修改了接口中的方法，不会影响代理类</li><li>在程序执行过程中，使用jdk反射机制，创建代理对象，动态指定要代理的目标类</li></ul><p>使用jdk的Proxy实现代理，要求目标类与代理类实现相同的接口，若目标类不存在接口，则无法使用该方式。</p><p>对于无接口的类，要为其创建动态代理，使用CGLIB，其代理生成目标类的子类，且子类是增强的，子类对象就是代理对象，所以，使用CGLIB要求目标类能被继承，不能是final。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>反射包三个类：<code>InvocationHandler</code>，<code>Method</code>，<code>Proxy</code></p><ul><li><p><code>InvocationHandler</code>:其中的方法，invoke表示代理对象要执行的功能代码，代理类要完成的功能就写在invoke中，代理类完成的功能有 1：调用目标类方法  2：增强方法</p><ul><li>```<br>public Object invoke(Object proxy, Method method, Object[] args)<pre><code>    throws Throwable;    </code></pre>Object proxy: jdk创建的代理对象，<br>Method method：目标类的方法，jdk提供method对象<br>Object[] args: 目标类的方法参数，jdk提供<pre class="line-numbers language-none"><code class="language-none">- `Method`: 表示目标类的方法，通过Method执行某个目标类的方法- `Proxy`：创建的代理对象  - ```    public static Object newProxyInstance(ClassLoader loader,                                              Class&lt;?&gt;[] interfaces,                                              InvocationHandler h)            throws IllegalArgumentException        1.ClassLoader 类加载器    2.Class&lt;?&gt;[] interfaces:接口，目标对象实现的接口    3.InvocationHandler：自己写的代理功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>实现动态代理的步骤：</p><ul><li>创建接口，定义目标类要完成的功能</li><li>创建目标类实现接口</li><li>创建InvocationHandler接口实现类，在invoke方法中</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">UsbKingFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsbKingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MySellHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySellHandler</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UsbSell</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UsbSell</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> price <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理对象的价格为："</span><span class="token operator">+</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>将方法调用到远程服务器</li><li>在运行的程序中将用户界面事件与动作关联起来</li><li>跟踪方法调用</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络传输中byte是怎么存储的</title>
      <link href="/2021/12/05/wang-luo-chuan-shu-zhong-byte-shi-zen-me-cun-chu-de/"/>
      <url>/2021/12/05/wang-luo-chuan-shu-zhong-byte-shi-zen-me-cun-chu-de/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解信号量笔记</title>
      <link href="/2021/12/04/shen-ru-li-jie-xin-hao-liang-bi-ji/"/>
      <url>/2021/12/04/shen-ru-li-jie-xin-hao-liang-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/booksyhay/article/details/82692362">(165条消息) The Little Book of Semaphores 信号量小书 中文版_booksyhay的专栏-CSDN博客</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（七）:信号量如何取代锁和条件变量</title>
      <link href="/2021/12/04/cao-zuo-xi-tong-dao-lun-bi-ji-qi-xin-hao-liang-ru-he-qu-dai-suo-he-tiao-jian-bian-liang/"/>
      <url>/2021/12/04/cao-zuo-xi-tong-dao-lun-bi-ji-qi-xin-hao-liang-ru-he-qu-dai-suo-he-tiao-jian-bian-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="信号量简述"><a href="#信号量简述" class="headerlink" title="信号量简述"></a>信号量简述</h2><p>信号量初始值能决定其行为，首先要初始化信号量，才能与其他函数交互。</p><p>在POSIX中，可以用两个函数来操纵：<code>sem_wait(),sem_post()</code></p><p><code>sem_wait()</code>要么立刻返回，要么会让调用线程挂起，知道一个<code>post</code>调用，也可能多个调用线程都调用<code>sem_wait()</code>,这些线程都在队列中等待唤醒。</p><p><code>sem_post()</code>并没有等待某些条件满足，它直接增加信号量的值，如果有等待线程，将唤醒其中一个。</p><p>当信号量为负数时，这就是等待线程的个数。</p><h3 id="二值信号量"><a href="#二值信号量" class="headerlink" title="二值信号量"></a>二值信号量</h3><p>信号量第一种用法是作为锁。</p><pre class="line-numbers language-none"><code class="language-none">sem_t m;sem_init(&amp;m,0,1);sem_wait(&amp;m);//critical section heresem_post(&amp;m);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种用法也叫作二值信号量。</p><h3 id="信号量作条件变量"><a href="#信号量作条件变量" class="headerlink" title="信号量作条件变量"></a>信号量作条件变量</h3><p>信号量也可用在一个线程暂停执行，等待某一条件成立场景。如一个线程要等待一个链表非空才能删除一个元素。此时通常一个线程等待条件成立，另一个线程修改条件，并发信号唤醒等待线程。</p><pre class="line-numbers language-none"><code class="language-none">sem_t s;void *child(void *arg){printf("child");sem_post(&amp;s);return NULL;}int main(){sem_init(&amp;s,0,x);printf("parent:begin");pthread_t c;Pthread_create(c,NULL,child,NULL);sem_wait(&amp;s);printf("parent:end");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">我们希望看到这样的输出parent:beginchildparent:end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一种：父线程创建子线程，但是子线程没有运行，父线程调用sem_wait会先于子线程调用，我们希望父线程等待子线程运行，故信号量初值设为0.父线程运行，信号量-1，睡眠等待，子线程运行，调用sem_post信号量增为0，唤醒父线程，完成。</li><li>子线程在父线程调用sem_wait之前结束，在这种情况下，子线程会先调用sem_post，信号量到1，然后父线程有机会运行，调用sem_wait,信号量到0，直接返回。</li></ul><h3 id="生产者-消费者"><a href="#生产者-消费者" class="headerlink" title="生产者/消费者"></a>生产者/消费者</h3><h4 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h4><p>用两个信号量empty和full表示缓冲区状态</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> buffer<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fill<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> use<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>buffer<span class="token punctuation">[</span>fill<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>fill<span class="token operator">=</span><span class="token punctuation">(</span>fill<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAX<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> tmp<span class="token operator">=</span>buffer<span class="token punctuation">[</span>use<span class="token punctuation">]</span><span class="token punctuation">;</span>use<span class="token operator">=</span><span class="token punctuation">(</span>use<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAX<span class="token punctuation">;</span><span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">sem_t</span> empty<span class="token punctuation">;</span><span class="token class-name">sem_t</span> full<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设有两个线程，一个生产者，一个消费者，在一个CPU上，消费者先运行，调用sem_wait(&amp;full)，full初值为0，wait调用，睡眠，等待sem_post(），符合预期。</p><p>假设生产者先运行，执行到P1，调用sem_wait（&amp;empty）生产者继续运行，向缓冲区加入数据，调用sem_post(&amp;full),把full变为0，唤醒消费者。</p><p>当容量为1时，你可以发现更多的线程也是可以正常工作的，但容量增加，就会出现异常。</p><p>假设MAX=10，多个生产者，消费者，假设两个生产者几乎同时调用put，当第一个生产者添加数据，在更新fill之前被中断，第二个生产者将覆盖第一个生产者的数据，这显然不行，我们不能让数据丢失。</p><h4 id="增加互斥"><a href="#增加互斥" class="headerlink" title="增加互斥"></a>增加互斥</h4><p>向缓冲区加入元素和增加缓冲区索引是临界区，需要互斥。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">sem_t</span> empty<span class="token punctuation">;</span><span class="token class-name">sem_t</span> full<span class="token punctuation">;</span><span class="token class-name">sem_t</span> mutex<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仔细思考一下上述代码真的正确吗？会有什么问题？</p><p>我们来看这样一个场景，假设两个线程，一个生产者，一个消费者，消费者先运行，获得锁，然后对full信号量执行sem_wait()，此时没有数据，所以消费者阻塞，让出CPU，但消费者仍然持有锁，然后生产者运行，假设他能运行，将唤醒消费者，但锁被占用，此时发生死锁。</p><p>上面的场景发生循环等待，消费者持有互斥量，等待在full变量上，生产者可以发送full信号，但却在等待互斥变量。</p><h4 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">sem_t</span> empty<span class="token punctuation">;</span><span class="token class-name">sem_t</span> full<span class="token punctuation">;</span><span class="token class-name">sem_t</span> mutex<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读者-写者锁"><a href="#读者-写者锁" class="headerlink" title="读者-写者锁"></a>读者-写者锁</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java_NIO补充：Files和Path介绍</title>
      <link href="/2021/12/01/java-nio-bu-chong-files-he-path-jie-shao/"/>
      <url>/2021/12/01/java-nio-bu-chong-files-he-path-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="NIO中的Files，Paths"><a href="#NIO中的Files，Paths" class="headerlink" title="NIO中的Files，Paths"></a>NIO中的Files，Paths</h2><p><a href="https://zhuanlan.zhihu.com/p/166218014">Java8中的Files和Paths - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnblogs.com/devilwind/p/8623098.html">java Files类和Paths类的用法 (转) - devilwind - 博客园 (cnblogs.com)</a></p><p><a href="https://www.jianshu.com/p/3cb5ca04e3c8">Java NIO 教程(十五) Java NIO Files - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/17b8e042a90b">Java NIO 教程(十四) Java NIO Path - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/dnc8371/article/details/106702332">(160条消息) 了解java.nio.file.Path – 1_最佳 Java 编程-CSDN博客</a></p><p><a href="https://blog.csdn.net/u010889616/article/details/52694061">java Files类和Paths类的用法</a></p><p><a href="https://blog.csdn.net/zzzgd_666/article/details/88061390">java7后使用Files和Paths类来简单的实现文件的读取和写入和拷贝</a></p><p><a href="https://www.cnblogs.com/niumoo/p/13742641.html">和低效 IO 说再见，回头补一波 Java 7 的 NIO.2 特性 </a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span>相关API<span class="token class-name">Path</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Path</span> other<span class="token punctuation">)</span> 如果other是绝对路径，返回other，否则返回<span class="token keyword">this</span>和other的组合路径<span class="token class-name">Path</span> <span class="token function">resolveSibling</span><span class="token punctuation">(</span><span class="token class-name">Path</span> other<span class="token operator">/</span><span class="token class-name">String</span> other<span class="token punctuation">)</span> 如果other是绝对路径，那返回other，否则返回<span class="token keyword">this</span>的父路径和other获得的路径<span class="token class-name">Path</span> <span class="token function">relative</span><span class="token punctuation">(</span><span class="token class-name">Path</span> other<span class="token punctuation">)</span> 返回other相对于<span class="token keyword">this</span>的相对路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><pre class="line-numbers language-none"><code class="language-none">byte[] bytes=Files.readAllBytes(Path);List&lt;String&gt; lines=Files.readAllLines(Path,charset);但Files类中的相关方法适合处理中等长度的文件，若文件较大，则用输入输出InputStream in=Files.newInputStream(path);OutputStream out=Files.newOutputStream(path);Reader in=Files.newBufferedReader(path,charset);Writer out=Files.newBufferedWriter(path,charset);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NIO中的Filelock文件加锁"><a href="#NIO中的Filelock文件加锁" class="headerlink" title="NIO中的Filelock文件加锁"></a>NIO中的Filelock文件加锁</h3><p>文件锁在 OS 中很常见，如果多个程序同时访问、修改同一个文件，很容易因为文件 </p><p>数据不同步而出现问题。给文件加一个锁，同一时间，只能有一个程序修改此文件， </p><p>或者程序都只能读此文件，这就解决了同步问题。 </p><p>文件锁是进程级别的，不是线程级别的。文件锁可以解决多个进程并发访问、修改同 </p><p>一个文件的问题，但不能解决多线程并发访问、修改同一文件的问题。使用文件锁时， </p><p>同一进程内的多个线程，可以同时访问、修改此文件</p><p>文件锁是当前程序所属的 JVM 实例持有的，一旦获取到文件锁（对文件加锁），要调 </p><p>用 release()，或者关闭对应的 FileChannel 对象，或者当前 JVM 退出，才会释放这 </p><p>个锁。 </p><p>一旦某个进程（比如说 JVM 实例）对某个文件加锁，则在释放这个锁之前，此进程不 </p><p>能再对此文件加锁，就是说 JVM 实例在同一文件上的文件锁是不重叠的（进程级别不 </p><p>能重复在同一文件上获取锁）</p><h4 id="文件锁分类"><a href="#文件锁分类" class="headerlink" title="文件锁分类"></a>文件锁分类</h4><ul><li>排它锁：又叫独占锁。对文件加排它锁后，该进程可以对此文件进行读写，该进程独 </li></ul><p>占此文件，其他进程不能读写此文件，直到该进程释放文件锁。 </p><ul><li>共享锁：某个进程对文件加共享锁，其他进程也可以访问此文件，但这些进程都只能 </li></ul><p>读此文件，不能写。线程是安全的。只要还有一个进程持有共享锁，此文件就只能读， </p><p>不能写。 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//对整个文件加锁，默认为排它锁。</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> booean shared<span class="token punctuation">)</span> <span class="token comment">//自定义加锁方式。前 2 个参数 指定要加锁的部分（可以只对此文件的部分内容加锁），第三个参数值指定是否是共 享锁。</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//对整个文件加锁，默认为排它锁</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> booean shared<span class="token punctuation">)</span> <span class="token comment">//自定义加锁方式。 如果指定为共享锁，则其它进程可读此文件，所有进程均不能写此文件，如果某进程 试图对此文件进行写操作，会抛出异常。</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>lock 是阻塞式的，如果未获取到文件锁，会一直阻塞当前线程，直到获取文件锁 tryLock 和 lock 的作用相同，只不过 tryLock 是非阻塞式的，tryLock 是尝试获取文 件锁，获取成功就返回锁对象，否则返回 <span class="token keyword">null</span>，不会阻塞当前线程。<span class="token keyword">boolean</span> <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//此文件锁是否是共享锁</span><span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//此文件锁是否还有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要锁定一个文件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileChannel</span><span class="token operator">=</span><span class="token class-name">FileChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileLock</span> lock<span class="token operator">=</span>channel<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>或channel<span class="token punctuation">.</span><span class="token function">trylock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一个调用会阻塞直至可获得锁，第二个调用会立即返回，要么返回锁，或null。这个文件将保持锁定直至通道关闭或调用==release()==,</p><pre class="line-numbers language-none"><code class="language-none">还可以：FileLock lock(long start,long size,boolean shared)FileLock trylock(long start,long size,boolean shared)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>shared为false，则锁定文件目的是读写，如果为true，则这个是共享锁，允许多个进程读。</p><p>要确保在操作完成后释放锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Filelock</span> lock<span class="token operator">=</span>channel<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>==注意事项：==</p><ul><li>在网络文件系统上锁定文件高度依赖于系统，因尽量避免。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记（一）</title>
      <link href="/2021/11/29/spring-xue-xi-bi-ji-yi/"/>
      <url>/2021/11/29/spring-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1hN411X77N?p=8&amp;spm_id_from=pageDriver">Spring框架最新版视频教程_深入浅出spring框架【idea版】【通俗易懂】_哔哩哔哩_bilibili</a></p><p><a href="https://search.bilibili.com/all?keyword=Spring%E6%95%99%E7%A8%8B">Spring教程 _ 搜索结果_哔哩哔哩_Bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1gW411W7wy?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_session_id=52dff96c-c291-4225-8975-e70ddd6248a5&amp;share_source=QQ&amp;share_tag=s_i&amp;timestamp=1638179665&amp;unique_k=rjXu9xD">尚硅谷Spring注解驱动教程(雷丰阳源码级讲解)_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV185411477k?from=search&amp;seid=12185457074531684690&amp;spm_id_from=333.337.0.0">孙哥说Spring5 </a></p><p><a href="https://www.bilibili.com/video/BV1gX4y1g7Ec?from=search&amp;seid=12185457074531684690&amp;spm_id_from=333.337.0.0">Spring5入门到精通IDEA教学余胜军通俗易懂版本</a></p><p><a href="https://www.bilibili.com/video/BV1Yv411x7D2?from=search&amp;seid=12185457074531684690&amp;spm_id_from=333.337.0.0">Spring5 最完整最全面最详细教学乐字节</a></p><p><a href="https://www.bilibili.com/video/BV1WE411d7Dv?from=search&amp;seid=12185457074531684690&amp;spm_id_from=333.337.0.0">狂神说JavaSpring5最新完整教程IDEA版通俗易懂</a></p><p><a href="https://www.bilibili.com/video/BV1aR4y1H75S?from=search&amp;seid=14926798907123427269&amp;spm_id_from=333.337.0.0">2021吃透这些Java手写框架源码（Spring、Hashmap、Tomact、Mybatis、分布式）</a></p><p><a href="https://www.bilibili.com/video/BV1Vf4y127N5?from=search&amp;seid=14926798907123427269&amp;spm_id_from=333.337.0.0">尚硅谷Spring5框架教程（idea版）</a></p><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?from=search&amp;seid=14926798907123427269&amp;spm_id_from=333.337.0.0">黑马程序员最全SSM框架教程|Spring+SpringMVC+MyBatis全套教程(</a></p><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><p>IoC，Inversion of Control ： 控制反转， 是一个理论，一个指导思想。  指导开发人员如何使用对象，管理对象的。 把对象的创建，属性赋值，对象的声明周期都交给代码之外的容器管理。</p><p>IOC分为控制和反转</p><p>控制：对象创建，属性赋值，对象生命周期管理</p><p>反转：把开发人员管理对象的权限转移给代码之外的容器实现，由容器完成对象管理</p><p>正转：开发人员在代码中使用new创建对象，开发人员掌握了对象的创建，属性赋值，开始到销毁的全部过程</p><h3 id="IOC实现：依赖注入（DI）"><a href="#IOC实现：依赖注入（DI）" class="headerlink" title="IOC实现：依赖注入（DI）"></a>IOC实现：依赖注入（DI）</h3><p>程序只需提供对象的名称即可，对象如何创建，如何从容器中查找，获取都由容器自己实现</p><h3 id="Spring的配置文件"><a href="#Spring的配置文件" class="headerlink" title="Spring的配置文件"></a>Spring的配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>spring标准配置文件1）根标签是beans2）beans后面是约束文件说明，可查看xml介绍3）beans里面是bean的声明4）bean是有spring容器管理的java对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DI：给属性赋值"><a href="#DI：给属性赋值" class="headerlink" title="DI：给属性赋值"></a>DI：给属性赋值</h3><p>spring调用无参构造函数创建对象，</p><p>给属性赋值可以使用    1）xml配置文件中的标签和属性  2）使用注解</p><p>DI分类：</p><ol><li><p>set注入 设值注入</p><pre><code>         2. 构造注入。</code></pre></li></ol><h4 id="基于xml的DI"><a href="#基于xml的DI" class="headerlink" title="基于xml的DI"></a>基于xml的DI</h4><p>在xml配置文件中使用标签和属性，完成对象创建</p><p>spring调用类的set方法，在set方法中完成属性赋值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--       DI：给属性赋值       1.set注入：spring调用类的set方法           java中简单类型：基本数据类型和String           简单类型的set注入：               &lt;bean id="xxx" class="xxx"&gt;                   &lt;property name="属性名" value="简单类型属性值" /&gt;                   ...               &lt;/bean&gt;       2.set注入           引用类型的赋值               &lt;bean id="xxx" class="xxx"&gt;                   &lt;property name="属性名" ref="bean的id"&gt;                   ...               &lt;/bean&gt;   --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case01.Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case01.School<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京大学<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京海淀区<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><p>spring调用类的有参构造方法，在创建对象时，给属性赋值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        构造注入：Spring调用类的有参构造，创建对象同时赋值            &lt;bean id="xxx" class="xxx"&gt;                &lt;constructor-arg&gt; 表示构造方法的一个形参                标签有属性：name：形参名                           index：索引                           value:简单类型形参值                           ref：引用类型值            &lt;/bean&gt;    --&gt;</span>    <span class="token comment">&lt;!--构造注入：使用name属性    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case02.Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--构造注入：使用index属性 ,Index属性可省略，但参数顺序需注意   --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case02.Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>26<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--构造注入声明File     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.io.File<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:\\现代密码学<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>192191-文明作业.txt<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case02.School<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京大学<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京海淀区<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引用类型的自动注入"><a href="#引用类型的自动注入" class="headerlink" title="引用类型的自动注入"></a>引用类型的自动注入</h4><p>spring可根据某些规则，给引用类型赋值，规则<code>byName</code>,<code>byType</code></p><ul><li>byName: java类中引用类型属性名称和spring容器中bean的id名称一样，且类型一样，则这些bean会赋值给引用类型。</li><li>byType： java类中引用类型数据和spring容器中bean的class是同源关系，这样的bean赋值给引用类型</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 引用类型自动注入：        1.byName            &lt;bean id="xxx" class="xxx" autowire="byName"&gt;        2.byType            同源关系：                1.java中引用数据类型和bean的class值是一样的                2.java中引用数据类型和bean的class值是父子类关系                3.java中引用数据类型和bean的class值是接口和实现类关系            &lt;bean id="xxx" class="xxx" autowire="byType"&gt;            注意：在xml配置文件中符合条件的对象只能有一个，否则报错    --&gt;</span>    <span class="token comment">&lt;!--byName 自动注入    --&gt;</span><span class="token comment">&lt;!--    &lt;bean id="myStudent" class="com.wm.case03.Student" autowire="byName"&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="name" value="李四"/&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="age" value="20"/&gt;--&gt;</span><span class="token comment">&lt;!--&amp;lt;!&amp;ndash;        &lt;property name="school" ref="myschool"/&gt;&amp;ndash;&amp;gt;--&gt;</span><span class="token comment">&lt;!--    &lt;/bean&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;bean id="school" class="com.wm.case03.School"&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="name" value="清华大学"/&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="address" value="北京海淀区"/&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;/bean&gt;--&gt;</span>    <span class="token comment">&lt;!--byType:自动注入 -相同class   --&gt;</span><span class="token comment">&lt;!--    &lt;bean id="myStudent" class="com.wm.case03.Student" autowire="byType"&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="name" value="张三"/&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="age" value="26"/&gt;--&gt;</span><span class="token comment">&lt;!--        &amp;lt;!&amp;ndash;        &lt;property name="school" ref="myschool"/&gt;&amp;ndash;&amp;gt;--&gt;</span><span class="token comment">&lt;!--    &lt;/bean&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;bean id="myschool" class="com.wm.case03.School"&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="name" value="航空大学"/&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="address" value="北京海淀区"/&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;/bean&gt;--&gt;</span>    <span class="token comment">&lt;!--byType:自动注入 -父子类关系   --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case03.Student<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>26<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--        &lt;property name="school" ref="myschool"/&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primarySchool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case03.PrimarySchool<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京大兴区<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京小学<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目中使用多个配置文件"><a href="#项目中使用多个配置文件" class="headerlink" title="项目中使用多个配置文件"></a>项目中使用多个配置文件</h3><p>分多个配置文件方式：</p><ul><li>按功能模块分，一个模块一个配置文件</li><li>按类的功能分：数据库相关操作的类在一个文件，service类一个配置文件，配置redis，事务等一个配置文件。</li></ul><h4 id="spring管理多个配置文件"><a href="#spring管理多个配置文件" class="headerlink" title="spring管理多个配置文件"></a>spring管理多个配置文件</h4><p>常用的是包含关系的配置文件，项目中有一个总的文件，里面有import包含其他配置文件</p><p>语法：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>其他文件的路径1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>其他文件的路径2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>例如： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:beans4/spring-school.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:beans4/spring-student.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>关键字：“classpath:”表示类路径，也就是类文件所在的目录，spring到类路径中加载文件什么时候用classpath：在一个文件要使用其他文件时需要使用classpath<span class="token comment">&lt;!--   包含关系的配置文件可以使用通配符，     --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:beans4/spring-*.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于注解的DI"><a href="#基于注解的DI" class="headerlink" title="基于注解的DI"></a>基于注解的DI</h3><p>使用spring提供的注解完成java对象的创建 </p><p><a href="https://blog.csdn.net/Thinkingcao/article/details/71171222">(167条消息) @Component注解的含义_Thinkingcao的专栏-CSDN博客_component注解</a></p><p><a href="https://blog.csdn.net/tiantangdizhibuxiang/article/details/81784878">(167条消息) spring的@component注解的理解_天堂地址不详-CSDN博客</a></p><p><a href="https://www.cnblogs.com/clwydjgs/p/9255083.html">@Component注解的解析 - Dawnzhang - 博客园 (cnblogs.com)</a></p><h4 id="Component注解"><a href="#Component注解" class="headerlink" title="@Component注解"></a>@Component注解</h4><ul><li>对象类上加入注解：@Component</li><li>在spring配置文件中加上组件扫描器</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--    扫描多个包的三种方式：--&gt;</span>    <span class="token comment">&lt;!--第一：使用多次组件扫描器    --&gt;</span>    <span class="token comment">&lt;!--第二：使用分隔符（；或，）指定多个包--&gt;</span>    <span class="token comment">&lt;!--第三：使用父包    --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若没有声明对象名称，框架会默认生成名称为：类名首字母小写</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--读取外部的属性配置文件：    &lt;peoperty-placeholder: 读取properties这样的文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:AnnotationBean/myconf.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>//    @Value(value = "李四)    //使用外部属性文件的值：${"key"}      @Value("${myname}")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/** * 和Component注解相同的： * 1）@Repository  ：放在DAO接口的实现类上的表示创建DAO对象，持久层对象，能访问数据库 * 2）@Service  ：放在业务层接口的实现类上，表示创建业务层对象，具有事务的功能 * 3）@Controller  ：放在控制器类上，创建控制器对象，属于表示层对象， *                  控制器能接受请求，把请求处理结果显示给用户 *  以上四个注解都是创建对象，但后三个有角色说明，表示对象时分层的，具有额外的功能。 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/** * 简单类型属性赋值：@Value * @Value： * 位置：1）在属性定义上，无需set方法 *      2）在set方法上，得有set方法 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AutoWired"><a href="#AutoWired" class="headerlink" title="@AutoWired"></a>@AutoWired</h4><pre class="line-numbers language-none"><code class="language-none">/** * 引用类型 * @Autowired: spring提供的给引用类型赋值的使用自动注入 *              支持byname，byType，默认是byType *           位置 1）在属性定义上面，无需set方法 *               2）在set方法上面 * 属性：required：boolean类型，默认为true     *                true：spring在启动时创建容器对象时会检查引用类型是否赋值成功，     *                      若失败则终止程序运行，并报错     *                false：引用类型赋值失败，程序不报错，继续执行，引用类型为null * byname自动注入： *    1）@Autowired：给引用类型赋值 *    2）@Qualifer(Value="bean的id")：从容器中找到指定名称的对象 *                                    把这个对象赋给引用类型 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><pre class="line-numbers language-none"><code class="language-none">/** * @Resource : 来自jdk中给引用类型赋值的支持byName，byType，默认是byName *          spring支持使用 * 默认使用byName注入，先使用byName，若失败，再使用ByType  * 只用byName注入：     * name属性=bean的id      @Resource(name="mySchool") */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h2><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><ul><li>Aspect：切面，给业务方法增加的功能，叫切面，一般是非业务功能，可复用。例如日志功能，事务提交，权限检查，参数检查等。</li></ul><p>==怎么理解AOP：==</p><ul><li>设计项目时，找出切面的功能</li><li>安排切面的执行时间，执行位置。</li></ul><h3 id="AOP的作用"><a href="#AOP的作用" class="headerlink" title="AOP的作用"></a>AOP的作用</h3><ul><li>让切面功能复用</li><li>让开发人员专注业务逻辑，提高效率</li><li>实现业务功能和非业务功能的解耦合</li><li>给存在的业务方法新增功能，不改源代码</li></ul><h3 id="AOP中的术语"><a href="#AOP中的术语" class="headerlink" title="AOP中的术语"></a>AOP中的术语</h3><ul><li>Aspect：切面，给业务方法增加的功能</li><li>JoinPoint：连接点，链接切面的业务方法，在这个业务方法执行时会同时切面的功能</li><li>Pointcut：切入点，是一个或多个连接点集合，表示这些方法执行时都会执行切面的功能</li><li>Target Object：给哪个对象增加切面功能，这个对象就是目标对象</li><li>Advice：通知增强处理，表示切面执行时间</li></ul><p>AOP是一个动态的思想，在程序运行期间创建代理，使用代理执行方法，增加切面功能，代理对象是在内存中的。</p><h3 id="Aspectj实现AOP"><a href="#Aspectj实现AOP" class="headerlink" title="Aspectj实现AOP"></a>Aspectj实现AOP</h3><h4 id="通知：基于注解"><a href="#通知：基于注解" class="headerlink" title="通知：基于注解"></a>通知：基于注解</h4><ul><li>@Before：前置通知</li><li>@AfterReturning：后置通知</li><li>Around：环绕通知</li><li>AfterThrowing：异常通知</li><li>After：最终通知</li></ul><h4 id="Pointcut位置"><a href="#Pointcut位置" class="headerlink" title="Pointcut位置"></a>Pointcut位置</h4><p><a href="https://blog.csdn.net/zl1zl2zl3/article/details/85066576">AspectJ的切入点表达式—execution表达式详解</a></p><p><a href="https://blog.csdn.net/gavin_john/article/details/80278284">AspectJ——基于注解的开发方式</a></p><p><a href="https://zhuanlan.zhihu.com/p/138187927">Spring5参考指南-AspectJ注解</a></p><p><a href="https://blog.csdn.net/u010502101/article/details/78823056">AspectJ 切面注解中五种通知注解：@Before、@After、@AfterRunning、@AfterThrowing、@Around</a></p><p><a href="https://www.yiibai.com/spring_aop/annotation_before_advice.html">Spring AOP基于注解的Before Advice</a></p><p><a href="https://codeantenna.com/a/A3mmhBqiV0">基于注解的Spring AOP注解用法详解</a></p><p><a href="https://segmentfault.com/a/1190000040208023">[Spring AOP使用篇：熟悉使用前置通知、后置通知、返回通知、异常通知，并了解其相关特性]</a></p><p><a href="https://cloud.tencent.com/developer/article/1661336">@Aspect 5种通知详解 | Spring系列第35篇</a></p><h1 id="Aspect-5种通知详解-Spring系列第35篇"><a href="#Aspect-5种通知详解-Spring系列第35篇" class="headerlink" title="@Aspect 5种通知详解 | Spring系列第35篇"></a>@Aspect 5种通知详解 | Spring系列第35篇</h1><p><strong>execution(&lt;修饰符模式&gt;? &lt;返回类型模式&gt; &lt;方法名模式&gt;(&lt;参数模式&gt;) &lt;异常模式&gt;?)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span>modifiers<span class="token operator">-</span>pattern<span class="token operator">?</span> ret<span class="token operator">-</span>type<span class="token operator">-</span>pattern declaring<span class="token operator">-</span>type<span class="token operator">-</span>pattern<span class="token operator">?</span>name<span class="token operator">-</span><span class="token function">pattern</span><span class="token punctuation">(</span>param<span class="token operator">-</span>pattern<span class="token punctuation">)</span>            <span class="token keyword">throws</span><span class="token operator">-</span>pattern<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="https://s2.loli.net/2021/12/09/ouqOZkahgWPlxFj.png" alt="Aspectj1.png" style="zoom:67%;"><p> <img src="https://s2.loli.net/2021/12/09/Df4oveItBc3iMsK.png" alt="Aspectj2.png"></p><h4 id="Before前置通知"><a href="#Before前置通知" class="headerlink" title="@Before前置通知"></a>@Before前置通知</h4><p>使用切面注解步骤：</p><pre class="line-numbers language-none"><code class="language-none">实现步骤：1.新建Maven项目2.加依赖：①spring-context  ②spring-aspectjs3.创建业务接口和实现类4.创建切面类，    1）在类上面加@Aspect    2)在类中定义方法，表示切面功能        在方法上加Aspect通知注解，如@Before(value="切入表达式")5.创建spring配置文件    1）声明目标对象    2）声明切面类对象    3）声明自动代理生成器6.测试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切面类：</p><pre class="line-numbers language-none"><code class="language-none">/** * @Aspect: 切面类注解 * 位置：放在某个类上， * 作业：表示当前类是切面类 */@Aspectpublic class MyAspect {    //定义方法，表示切面功能//1.方法是public  2.方法返回值是void    /**     * @Before前置通知     *      属性：value，切入点表达式，表示切面的执行位置。在这个方法执行时     *                  同时执行切面的功能     *       特点：     *       1）在目标方法之前执行     *       2）不影响目标方法执行     */    //execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)    //            throws-pattern?)    @Before(value = "execution(* *..SomeServiceImpl.do*(..))")    public void myBefore(){    //    System.out.println("前置通知："+new Date());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--声明目标对象--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode1.service.Impl.SomeServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--声明切面类对象    --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode1.handler.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--声明自动代理生成器，目的是创建目标对象的代理      调用aspectj框架的功能，寻找spring容器的所有目标对象      把每个目标对象加入切面类的功能，生成代理，      这个代理对象就是修改内存的目标对象，这个目标对象就是代理对象    --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="JoinPoint获取方法相关信息"><a href="#JoinPoint获取方法相关信息" class="headerlink" title="JoinPoint获取方法相关信息"></a>JoinPoint获取方法相关信息</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 切面类的通知方法是可以有参数的    * JoinPoint：表示你正在执行的业务方法，相当于反射中的Method    * 使用要求：必须是参数列表第一个    * 作用：获取方法执行时的信息，如方法名称，方法参数集合    */</span>   <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.do*(..))"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore2</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法的定义："</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法名："</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法参数："</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标对象:"</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> name <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"doSomething"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSomething通知方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doOtherthing通知方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AfterRuterning后置通知"><a href="#AfterRuterning后置通知" class="headerlink" title="@AfterRuterning后置通知"></a>@AfterRuterning后置通知</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment">//定义方法，表示切面功能</span>    <span class="token comment">//方法定义：</span>    <span class="token number">1.</span>方法时<span class="token keyword">public</span>        <span class="token number">2.</span>返回值是<span class="token keyword">void</span>        <span class="token number">3.</span>方法有参数，最好是<span class="token class-name">Object</span>    <span class="token comment">/**     * @AfterRuterning:后置通知     *       属性：value：切入点表达式     *             returning：自定义的变量，表示目标方法的返回值     *                          自定义名称必须和通知方法的形参名一样     *   方法的参数：     *   Object res：表示目标方法的返回值使用res接收     *   类似于Object res =doOther()     *     *   1.在doOther返回值时String，Integer，Long等基本类型时，     *         在后置通知中，修改返回值，不会影响目标方法的最后调用结果     *   2.doOther返回值是对象类型时，在后置通知中修改，会影响目标方法最后调用结果。     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doOtherthing(..))"</span><span class="token punctuation">,</span>    returning <span class="token operator">=</span> <span class="token string">"res"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterRuterning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">,</span><span class="token class-name">Object</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法的定义："</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法名："</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法参数："</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标对象:"</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> result<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>res<span class="token punctuation">;</span>        result<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面方法中的返回值："</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Around通知"><a href="#Around通知" class="headerlink" title="@Around通知"></a>@Around通知</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 环绕方法定义：     *  1.方法是public     *  2.方法必须要返回值，是Object     *  3.方法必须有参数，是ProceedingJoinPoint     *     */</span>    <span class="token comment">/**     * 返回值：Object，表示调用目标方法希望得到的返回值，不一定是目标方法自己的返回值     * 参数：ProceedingJoinPoint：相当于反射中的Method     *          作用：执行目标方法，类似Method.invoke()     *特点：     *  1.在目标方法的前后都增强功能     *  2.能控制目标方法是否指向     *  3.修改目标方法的返回结果     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doFirstthing(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token class-name">MyAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around方法执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>args<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Object</span> arg <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arg<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                name<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">Object</span> proceed<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            proceed <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于Method.invoke()</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AfterThrowing异常通知"><a href="#AfterThrowing异常通知" class="headerlink" title="@AfterThrowing异常通知"></a>@AfterThrowing异常通知</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 异常通知     * 1.方法是public     * 2.方法没有返回值     * 3.方法有参数时，Exception     */</span>    <span class="token comment">/**     * 属性：     *  1.value：切入点表达式     *  2.throwing：自定义变量，表示目标方法抛出的异常     *              变量名必须和通知方法的形参名一样     * 特点：     *  1.在目标方法抛出异常后执行，没有异常不执行     *  2.能获取到目标方法的异常信息     *  3.不是异常处理程序，可以得到异常的通知，从而发送邮件通知开发人员     *  4.看做是目标方法的监控程序     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doSecondthing(..))"</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">MyAfterThrowing</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知,异常原因是："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 异常发生可以做         * 1.记录依次发送位置，时间，         * 2.发送邮件，通知开发人员         */</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="After最终通知"><a href="#After最终通知" class="headerlink" title="After最终通知"></a>After最终通知</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 最终通知方法定义： *  1.方法是public *  2.方法没要返回值 *  3.方法没有参数 */</span><span class="token comment">/** * 特点： * 1.在目标方法之后执行 * 2.总是会被执行 * 3.可以用来做程序的最后收尾工作例如清除临时变量 */</span><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doThirdthing(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">MyAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Pointcut定义和管理切入点注解"><a href="#Pointcut定义和管理切入点注解" class="headerlink" title="@Pointcut定义和管理切入点注解"></a>@Pointcut定义和管理切入点注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"mypt()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">MyAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * @Pointcut：定义和管理切入点的，不是通知注解 *  位置：在一个自定义方法上面，这个方法看做是切入点表达式的别名， *          其他通知注解中，可以使用方法别名就表示使用了切入点表达式 * */</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doThirdthing(..))"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java7新特性总结</title>
      <link href="/2021/11/27/java7-xin-te-xing-zong-jie/"/>
      <url>/2021/11/27/java7-xin-te-xing-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/6bc2e4c82f6b">Java 7的新特性</a></p><p><a href="https://blog.csdn.net/u014209205/article/details/79718689">java7新特性总结</a></p><p><a href="https://blog.csdn.net/hjm4702192/article/details/30078877">java7 新特性 总结版</a></p><p> <a href="https://www.cnblogs.com/leo-lsw/articles/java7new.html">Java7 新特性回顾</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis深入理解笔记（一）</title>
      <link href="/2021/11/27/redis-shen-ru-li-jie-bi-ji-yi/"/>
      <url>/2021/11/27/redis-shen-ru-li-jie-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484966&amp;idx=1&amp;sn=86495501e12ad0c62476d98985d43c85&amp;source=41#wechat_redirect">面试中关于Redis的问题看这篇就够了 (qq.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unix网络编程笔记（一）I/O复用：select和poll</title>
      <link href="/2021/11/25/unix-wang-luo-bian-cheng-bi-ji-yi-select-he-epoll/"/>
      <url>/2021/11/25/unix-wang-luo-bian-cheng-bi-ji-yi-select-he-epoll/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/722819425dbd">Select、Poll、Epoll详解 - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/272891398">一文搞懂select、poll和epoll区别 - 知乎 (zhihu.com)</a></p><p><a href="https://www.itqiankun.com/article/select-poll-epoll">搞懂Select，Poll，Epoll的区别-IT乾坤技术博客 (itqiankun.com)</a></p><p><a href="https://www.cnblogs.com/Anker/p/3265058.html">select、poll、epoll之间的区别总结整理] - Rabbit_Dale - 博客园 (cnblogs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/367591714">深入浅出理解select、poll、epoll的实现 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/129089001">select、poll、epoll 是什么？有什么作用？ - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/wteruiycbqqvwt/article/details/90299610">(168条消息) 深入理解select、poll和epoll及区别_$好记性还是要多记录$-CSDN博客_epoll和select的区别</a></p><p><a href="https://www.cnblogs.com/kuotian/p/13199625.html">I/O多路复用之select、poll、epoll详解(+Redis) - kuotian - 博客园 (cnblogs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/126278747">IO复用之select、poll、epoll模型 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-NIO补充整理（一）</title>
      <link href="/2021/11/23/java-nio-bu-chong-zheng-li-yi/"/>
      <url>/2021/11/23/java-nio-bu-chong-zheng-li-yi/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://tech.meituan.com/2016/11/04/nio.html">美团技术团队Java NIO浅析</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-Netty笔记</title>
      <link href="/2021/11/23/java-nettty-bi-ji/"/>
      <url>/2021/11/23/java-nettty-bi-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-io-RandomAccessFile类详解</title>
      <link href="/2021/11/22/java-io-randomaccessfile-lei-xiang-jie/"/>
      <url>/2021/11/22/java-io-randomaccessfile-lei-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/360e37539266">Java IO流详解（三）——RandomAccessFile - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/qq_31615049/article/details/88562892">(158条消息) RandomAccessFile简介与使用_LJHSkyWalker的博客-CSDN博客_randomaccessfile</a></p><p><a href="https://www.cnblogs.com/jyy599/p/12076662.html">RandomAccessFile 详解 - 一场屠夫的战争 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java尚硅谷+黑马NIO笔记</title>
      <link href="/2021/11/21/java-shang-huo-gu-hei-ma-nio-bi-ji/"/>
      <url>/2021/11/21/java-shang-huo-gu-hei-ma-nio-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1E64y1h7Z4?p=2&amp;spm_id_from=pageDriver">【尚硅谷】2021新版Java NIO详细教程（一套带你掌握IO API/javanio）_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/donkeyboy001/article/details/86842029">(158条消息) Java NIO 的实现原理解析_donkeyboy001的博客-CSDN博客_java nio实现原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/65340485">Java NIO原理 图文分析及代码实现 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/348973425">Java Socket NIO解析 - 知乎 (zhihu.com)</a></p><p><a href="https://ifeve.com/overview/">Java NIO系列教程（一） Java NIO 概述 | 并发编程网 – ifeve.com</a></p><p><a href="https://blog.csdn.net/luliuliu1234/article/details/61915000">(158条消息) NIO核心框架介绍_Jessy-CSDN博客_nio框架</a></p><p><a href="https://blog.csdn.net/u011381576/article/details/79876754">(158条消息) Java NIO？看这一篇就够了！_u011381576的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/7fff40637683">彻底搞懂NIO效率高的原理 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/3b2a15374aab">Java高级主题（三）下——NIO体系结构 - 简书 (jianshu.com)</a></p><p><a href="https://vimsky.com/examples/usage/bytebuffer-allocatedirect-method-in-java-with-examples.html">Java ByteBuffer allocateDirect()用法及代码示例 - 纯净天空 (vimsky.com)</a></p><p><a href="https://www.cnblogs.com/woshijpf/articles/3723364.html">java.nio.Buffer flip()方法的用法详解 - woshijpfgg - 博客园 (cnblogs.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1409261">Java 中的伪异步 IO - 云+社区 - 腾讯云 (tencent.com)</a></p><p><a href="https://www.jianshu.com/p/eb02699ecd11">java 伪异步通信模型详解 - 简书 (jianshu.com)</a></p><p><a href="https://www.cnblogs.com/Joanna-Yan/p/7723174.html">Java IO编程全解（三）——伪异步IO编程 - Joanna.Yan - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/afan249/article/details/78305499">(159条消息) 伪异步I/O_afan249的博客-CSDN博客_伪异步</a></p><p><a href="https://blog.csdn.net/jiaomingliang/article/details/46012185">(159条消息) javaNIO原理（含代码）及与 同步阻塞IO 、伪异步IO比较_jiaomingliang的专栏-CSDN博客</a></p><h2 id="伪异步IO"><a href="#伪异步IO" class="headerlink" title="伪异步IO"></a>伪异步IO</h2><p>采用线程池封装客户端socket，这种架构虽然不会造成服务端线程栈溢出，崩溃，但同时能支持的并发访问量不大，因为采用了线程池。</p><h2 id="发送任意类型文件"><a href="#发送任意类型文件" class="headerlink" title="发送任意类型文件"></a>发送任意类型文件</h2><p>利用DataOutputStream封装</p><h2 id="前面的概述，介绍等总览后期再补上"><a href="#前面的概述，介绍等总览后期再补上" class="headerlink" title="前面的概述，介绍等总览后期再补上"></a>前面的概述，介绍等总览后期再补上</h2><p>课件笔记博客版</p><p><a href="https://blog.csdn.net/weixin_46633487/article/details/114223239">(159条消息) NIO深入剖析_芜湖芜香蛋的博客-CSDN博客</a></p><p><a href="https://gitee.com/yjp245/bio-learning/blob/master/BIO%E3%80%81NIO%E3%80%81AIO.md#%E7%AC%AC%E5%9B%9B%E7%AB%A0-java-nio%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90">BIO、NIO、AIO.md · 收破烂/BIO学习 - Gitee.com</a></p><p><a href="https://www.bilibili.com/video/BV1vA411F7Rh?from=search&amp;seid=16528409923812190783&amp;spm_id_from=333.337.0.0">【动力节点】2021新版Java NIO精品教程-轻松解决I/O难题-NIO菜鸟入门系列视频教程_哔哩哔哩_bilibili</a></p><h2 id="NIO三大核心部分"><a href="#NIO三大核心部分" class="headerlink" title="NIO三大核心部分"></a>NIO三大核心部分</h2><p>NIO 有三大核心部分：<strong>Channel( 通道) ，Buffer( 缓冲区), Selector( 选择器)</strong></p><h3 id="Buffer缓冲区"><a href="#Buffer缓冲区" class="headerlink" title="Buffer缓冲区"></a>Buffer缓冲区</h3><p>缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。相比较直接对数组的操作，Buffer API更加容易操作和管理。</p><h3 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h3><p>Java NIO的通道类似流，但又有些不同：既可以从通道中读取数据，又可以写数据到通道。但流的（input或output)读写通常是单向的。 通道可以非阻塞读取和写入通道，通道可以支持读取或写入缓冲区，也支持异步地读写。</p><h3 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h3><p>Selector是 一个Java NIO组件，可以能够检查一个或多个 NIO 通道，并确定哪些通道已经准备好进行读取或写入。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接，提高效率</p><ul><li>每个 channel 都会对应一个 Buffer</li><li>一个线程对应Selector ， 一个Selector对应多个 channel(连接)</li><li>程序切换到哪个 channel 是由事件决定的</li><li>Selector 会根据不同的事件，在各个通道上切换</li><li>Buffer 就是一个内存块 ， 底层是一个数组</li><li>数据的读取写入是通过 Buffer完成的 , BIO 中要么是输入流，或者是输出流, 不能双向，但是 NIO 的 Buffer 是可以读也可以写。</li><li>Java NIO系统的核心在于：通道(Channel)和缓冲区 (Buffer)。通道表示打开到 IO 设备(例如：文件、 套接字)的连接。若需要使用 NIO 系统，需要获取 用于连接 IO 设备的通道以及用于容纳数据的缓冲 区。然后操作缓冲区，对数据进行处理。简而言之，Channel 负责传输， Buffer 负责存取数据</li></ul><h2 id="NIO核心一：缓冲区（Buffer）"><a href="#NIO核心一：缓冲区（Buffer）" class="headerlink" title="NIO核心一：缓冲区（Buffer）"></a>NIO核心一：缓冲区（Buffer）</h2><p>一个用于特定基本数据类 型的容器。由 java.nio 包定义的，所有缓冲区 都是 Buffer 抽象类的子类.。Java NIO 中的 Buffer 主要用于与 NIO 通道进行 交互，数据是从通道读入缓冲区，从缓冲区写入通道中的</p><p><strong>Buffer</strong> 就像一个数组，可以保存多个相同类型的数据。根 据数据类型不同 ，有以下 Buffer 常用子类：</p><ul><li>ByteBuffer</li><li>CharBuffer</li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">XxxBuffer</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token operator">:</span> 创建一个容量为capacity 的 <span class="token class-name">XxxBuffer</span> 对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="缓冲区的基本属性"><a href="#缓冲区的基本属性" class="headerlink" title="缓冲区的基本属性"></a>缓冲区的基本属性</h3><ul><li><strong>容量（capacity）</strong>:作为一个内存块，Buffer具有一定的固定大小，也称为容量，常见后不能更改</li><li><strong>限制（limit）</strong>：表示缓冲区可以操纵的数据的大小，写入模式下，限制等于buffer容量，读取模式下限制等于写入的数据量。</li><li><strong>位置（position）</strong>：下一个要读取或写入的数据索引，</li><li><strong>标记（mark）与重置（reset）</strong>：标记是一个索引，通过Buffer中的mark方法指定buffer中特定的position做标记，之后可通过reset恢复到这个标记位置</li></ul><p><img src="https://i.loli.net/2021/11/23/CQgD9bf1dikt8cZ.png" alt="allocate.png"></p><p><img src="https://i.loli.net/2021/11/23/2WZTcXrmPM4jFUd.png" alt="put方法.png"></p><p><img src="https://i.loli.net/2021/11/23/b7K1YS6TwBfRsg3.png" alt="flip方法.png"></p><p>==flip方法将position置为初始位置，将limit置为此时已经写入的位置，常用于读模式==</p><h3 id="Buffer常见API"><a href="#Buffer常见API" class="headerlink" title="Buffer常见API"></a>Buffer常见API</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Buffer</span> clear（）清空缓冲区并返回对缓冲区的引用<span class="token class-name">Buffer</span> flip（）将缓冲区的界限设置为当前位置，并将当前位置设置为<span class="token number">0</span><span class="token keyword">int</span> capacity（）返回<span class="token class-name">Buffer</span>的容量<span class="token keyword">boolean</span> hasRemaining（）判断缓冲区是否还有元素<span class="token keyword">int</span> limit（）返回<span class="token class-name">Buffer</span>界限<span class="token class-name">Buffer</span> mark（）对缓冲区做标记<span class="token keyword">int</span> position（）返回缓冲区当前位置<span class="token class-name">Buffer</span> position（<span class="token keyword">int</span> n）将设置当前缓冲区当前位置为n<span class="token keyword">int</span> remaining（）返回position和limit之间元素的个数<span class="token class-name">Buffer</span> reset（）将位置position转到以前设置的mark<span class="token class-name">Buffer</span> rewind将位置设为<span class="token number">0</span>，取消设置的mark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓冲区数据操作"><a href="#缓冲区数据操作" class="headerlink" title="缓冲区数据操作"></a>缓冲区数据操作</h3><pre class="line-numbers language-none"><code class="language-none">Buffer所有子类提供两个用于数据操作的方法：get（）put（）获取Buffer中数据：get（）：读取单个字节get（byte[] dst）批量读取多个字节到dstget（int index）：读取指定索引位置字节放入数据到Buffer中put（byte b）：将给定单个字节写入缓冲区当前位置put（byte[] src）:将src中字节写入缓冲区当前位置put（int index，byte b）：将指定字节写入缓冲区中索引位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="直接缓冲区与非直接缓冲区"><a href="#直接缓冲区与非直接缓冲区" class="headerlink" title="直接缓冲区与非直接缓冲区"></a>直接缓冲区与非直接缓冲区</h3><p>byte buffer可以使两种类型，一种是基于直接内存的（非堆内存，是系统IO的直接内存），另一种是非直接内存，即进程内的堆内存，对于直接内存，JVM将会在IO操作上具有更高的性能，它直接作用与本地操作系统的IO操作，而非直接内存，即堆内存，如果要进行IO操作，会先从本进程内的堆内存复制到直接内存，再利用本地IO处理。</p><p>数据流向：</p><p>==本地IO–&gt;写入直接内存–&gt;复制到非直接内存–&gt;复制到直接内存–&gt;本地IO==</p><p>在做IO处理时，比如网络发送大量数据时，直接内存具有更高效率，使用<code>allocateDirect</code>创建，但它比申请普通堆内存耗费更多性能，不过这部分数据是在JVM之外的，不会占用应用内存，所有当有很大数据要缓存时，且生命周期长，比较适合使用直接内存，一般来说如果不是能带来明显性能提升，推荐使用堆内存，字节缓冲区是直接内存还是非直接内存可通过调用isDirect确定。</p><ul><li>有很大的数据存储，且生命周期很长</li><li>频繁的IO操作，如网络并发场景时</li></ul><p>以上两种推荐使用直接内存。</p><h2 id="NIO核心二：通道（Channel）"><a href="#NIO核心二：通道（Channel）" class="headerlink" title="NIO核心二：通道（Channel）"></a>NIO核心二：通道（Channel）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>通道表示IO源与目标打开的连接，Channel类似于传统的流，只不过Channel本身不能直接访问数据，只能与Buffer进行交互。</p><p>类似于流但又有区别</p><ul><li>通道可以同时进行读写，而流只能进行读或写。</li><li>通道可以实现异步读写数据</li><li>通道可以从缓冲区读数据也可以写数据</li><li>BIO的stream是单向的，如FileInputStream只能进行读，而NIO通道是双向的，可以读也可以写。</li></ul><h3 id="常见的Channel"><a href="#常见的Channel" class="headerlink" title="常见的Channel"></a>常见的Channel</h3><ul><li>==FileChannel：==用于读取写入，映射，和操作文件的通道</li><li>==DatagramChannel：==通过UDP读写网络数据</li><li>==SocketChannel：==通过TCP读写网络数据</li><li>==ServerSocketChannel：==监听新进来的TCP连接，对每一个连接都会创建一个==socketChannel==</li></ul><h3 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h3><p>获取通道方式调用支持通道的对象的getChannel</p><ul><li>FileInputChannel</li><li>FileOutputChannel</li><li>RandomAccessFile</li><li>DatagramSocket</li><li>Socket</li><li>ServerSocket</li><li>其它方式是使用Files类的静态方法newByteChannel（）</li></ul><h4 id="FileChannel常用方法"><a href="#FileChannel常用方法" class="headerlink" title="FileChannel常用方法"></a>FileChannel常用方法</h4><pre class="line-numbers language-none"><code class="language-none">int read（ByteBuffer dst）从Channel读取数据到ByteBufferlong read（ByteBuffer[] dsts）将Channel中的数据分散到ByteBuffer【】int write（ByteBuffer src）将ByteBuffer中的数据写到Channel中long write（ByteBuffer[] srcs）将ByteBuffer[]中的数据写到Channellong position（）返回此通道的文件位置FileChannel position(long p)设置通道的文件位置，long size（）返回此通道文件当前大小FileChannel truncate（long s）将此通道的文件截取为给定大小void force（boolean metaData）强制将通道的数据存入磁盘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><h4 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h4><p><a href="https://zhuanlan.zhihu.com/p/27679281">内存映射(memory map) - 知乎 (zhihu.com)</a></p><h2 id="字符集Charset"><a href="#字符集Charset" class="headerlink" title="字符集Charset"></a>字符集Charset</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Charset常用静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Charset</span> <span class="token function">forName</span><span class="token punctuation">(</span><span class="token class-name">String</span> charsetName<span class="token punctuation">)</span><span class="token comment">//通过编码类型获取Charset对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Charset</span><span class="token punctuation">&gt;</span></span> <span class="token function">availableCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 获取系统支持的所有编码<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Charset</span> <span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 获取虚拟机默认的编码方式<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSupported</span><span class="token punctuation">(</span><span class="token class-name">String</span> charserName<span class="token punctuation">)</span> 判断是否支持该编码类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//Charset常用普通方法public final String name() 获得charset对象的编码类型（String）public abstract CharsetEncoder newEncoder() 获得编码器对象public abstract CharsetDecoder newDecoder() 获取解码器对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ServerSocketChannel"><a href="#ServerSocketChannel" class="headerlink" title="ServerSocketChannel"></a>ServerSocketChannel</h3><p><a href="https://zhuanlan.zhihu.com/p/34523023">NIO ServerSocketChannel监听端口问题 - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnblogs.com/yueweimian/p/6262211.html">ServerSocketChannel实现多Selector高并发server - 魔方爸爸 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.jianshu.com/p/2b658824ed76">Java NIO 教程(九) ServerSocketChannel - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/083350b63d92">ServerSocketChannel - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/yhl_jxy/article/details/79335692">(160条消息) 【NIO】ServerSocketChannel_yhl_jxy的博客-CSDN博客</a></p><p><a href="http://tutorials.jenkov.com/java-nio/server-socket-channel.html#closing-a-serversocketchannel">Java NIO ServerSocketChannel (jenkov.com)</a></p><h3 id="SocketChannel"><a href="#SocketChannel" class="headerlink" title="SocketChannel"></a>SocketChannel</h3><p><a href="https://www.jianshu.com/p/eeed1c7aec2d">Java NIO 教程(八) SocketChannel - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/ba3bf3c62018">探究socketChannel原理 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/billluffy/article/details/78036998">(160条消息) SocketChannel—各种注意点_billluffy的博客-CSDN博客_socketchannel</a></p><p><a href="https://blog.csdn.net/dingshuo168/article/details/106288202">(160条消息) 深入理解NIO - Selector、ServerSocketChannel、SocketChannel底层原理_javaThinker的专栏-CSDN博客</a></p><p><a href="https://www.cnblogs.com/Jack-Blog/p/12061595.html">NIO-SocketChannel源码分析 - 杰哥很忙 - 博客园 (cnblogs.com)</a></p><h3 id="DatagramChannel"><a href="#DatagramChannel" class="headerlink" title="DatagramChannel"></a>DatagramChannel</h3><p><a href="https://www.cnblogs.com/qjm201000/p/10296012.html">java-NIO-DatagramChannel（UDP） - qjm201000 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/mjorcen/p/4199289.html">DatagramChannel - mjorcen - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/skh2015java/article/details/106694626">(160条消息) Java NIO之Channel详细理解_skh2015java的博客-CSDN博客</a></p><h2 id="NIO核心三：选择器（selector）"><a href="#NIO核心三：选择器（selector）" class="headerlink" title="NIO核心三：选择器（selector）"></a>NIO核心三：选择器（selector）</h2><p><a href="https://www.cnblogs.com/snailclimb/p/9086334.html">Java NIO之Selector（选择器） - SnailClimb - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/jjzhk/article/details/39553613">(160条消息) Java NIO之多个Selector的实现_JJZHK-CSDN博客_java nio 多个selector</a></p><p><a href="https://zhuanlan.zhihu.com/p/27434028">Java NIO(6): Selector - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/u010412719/article/details/52809669">(160条消息) 《Java 源码分析》：Java NIO 之 Selector(第一部分Selector.open())_wojiushimogui的博客-CSDN博客_selector.open()</a></p><p><a href="https://cloud.tencent.com/developer/article/1648648">Java NIO实现原理之Selector - 云+社区 - 腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/u010412719/article/details/52819191">(160条消息) 《Java 源码分析》：Java NIO 之 Selector(第二部分selector.select())_wojiushimogui的博客-CSDN博客_selector.select()</a></p><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><img src="https://i.loli.net/2021/11/24/Qt1A6oOEUxaYqWT.png" alt="selectableChannel.png" style="zoom:67%;"><p>选择器selector是SelectableChannel对象的多路复用器，Selector可以同时监控多个SelectableChannel的IO状况，也就是说，Selector可使一个线程管理多个Channel，Selector是非阻塞的核心。</p><ul><li>Java的NIO用非阻塞的IO，可用一个线程处理多个客户端的连接，就会使用Selector</li><li>Selector能检测多个注册通道上是否有事件发生，（多个Channel以事件的方式注册到同一个Selector上）如果有事件发生，便获取事件然后对事件进行相应处理，这样就可以对每个事件进行相应处理，只用一个单线程管理多个管道即多个连接请求。</li><li>只有在连接/通道真正有读写事件时，才会进行读写，大大减少系统开销，不必为每个连接创建一个线程，不用维护多个线程。</li><li>避免多线程间上下文切换的开销。</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">创建<span class="token class-name">Selector</span> 调用<span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>创建<span class="token class-name">Selector</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>向选择器注册通道，SelectableChannel.register(Selector sel，int ops);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServerSocketChannel</span> ssChannel<span class="token operator">=</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ssChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ssChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9898</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Selector</span> selector <span class="token operator">=</span><span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ssChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调用register（Selector sel，int ops）将通道注册选择器时，选择器对通道内的事件监听，需要通过第二个参数ops指定，如下：</p><ul><li>读：<code>SelectionKey.OP_READ</code></li><li>写：<code>SelectionKey.OP_WRITE</code></li><li>连接：<code>SelectionKey.OP_CONNECT</code></li><li>接收：<code>SelectionKey.OP_ACCEPT</code></li><li>若监听不止一个事件，可用<code>|</code>连接</li></ul><h4 id="轮询获取“准备就绪事件”"><a href="#轮询获取“准备就绪事件”" class="headerlink" title="轮询获取“准备就绪事件”"></a>轮询获取“准备就绪事件”</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlen</span><span class="token punctuation">(</span><span class="token string">"一轮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取当前选择器中所有注册通道中已经准备就绪的事件集</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> it<span class="token operator">=</span>selector<span class="token punctuation">.</span><span class="token function">selectedKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SelectionKey</span> sk<span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//是接收事件就绪</span>            <span class="token class-name">SocketChannel</span> sChannel ssChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">SocketChannel</span> sChannel <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteBuffer</span> buf<span class="token operator">=</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>sChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buf<span class="token punctuation">.</span>clear<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端流程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SocketChannel</span> sChannel<span class="token operator">=</span><span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ByteBuffer</span> buf<span class="token operator">=</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> str<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDataFormate</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单群聊"><a href="#简单群聊" class="headerlink" title="简单群聊"></a>简单群聊</h3><p>==服务端代码==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token comment">//定义一些属性</span>    <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ServerSocketChannel</span> serverChannel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverChannel<span class="token operator">=</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> sk <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> serverChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>socketChannel<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dassvf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">readClientData</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @Description: 接收当前客户端数据，并转发给其他客户端     * @param sk     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readClientData</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> sk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SocketChannel</span> socketChannel<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            socketChannel<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建缓冲区</span>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> read <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>read<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到客户端："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">sendMsgToAllClient</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//            e.printStackTrace();</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 离线了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                socketChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>                exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @Description: 把信息转给所有客户端     * @param msg     * @param socketChannel     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendMsgToAllClient</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端转发消息：当前处理线程："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过selector.keys()可获得所有注册在此选择器的时间，进而获得所有通道</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> sk<span class="token operator">:</span> selector<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">SelectableChannel</span> channel <span class="token operator">=</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>channel <span class="token keyword">instanceof</span> <span class="token class-name">SocketChannel</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>channel<span class="token operator">==</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">ByteBuffer</span> wrap <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span>channel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>wrap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==客户端代码==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token comment">//用于客户端也要接收消息故需要selector监听事件</span>    <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SimpleDateFormat</span> simpleDateFormat<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            simpleDateFormat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy.MM.dd 'at' HH:mm:ss z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            selector<span class="token operator">=</span><span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token operator">=</span><span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//定义一个线程专门用来接收消息，不可能一个线程既进行读又进行写</span>        <span class="token class-name">Client</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    client<span class="token punctuation">.</span><span class="token function">readInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> c<span class="token operator">=</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">sendToServer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendToServer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"说："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> sk <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> channel<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span>sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.iteye.com/blog/shift-alt-ctrl-1841324">NIO-SelectableChannel详解 - 深入一点,你会更加快乐 - ITeye博客</a></p><h2 id="SelectionKey应用"><a href="#SelectionKey应用" class="headerlink" title="SelectionKey应用"></a>SelectionKey应用</h2><p><a href="https://blog.csdn.net/lhxaiee123/article/details/76375338">(160条消息) Java NIO学习（二）SelectionKey详解_lhxaiee123的博客-CSDN博客_selectionkey</a></p><h2 id="NIO中的Pipe"><a href="#NIO中的Pipe" class="headerlink" title="NIO中的Pipe"></a>NIO中的Pipe</h2><p><a href="https://blog.csdn.net/qq_38989232/article/details/76238167">(160条消息) Java NIO-之管道Pipe的用法_清风竹雨-CSDN博客_java nio pipe</a></p><p><a href="https://cloud.tencent.com/developer/article/1369329">第九节 netty前传-NIO pipe - 云+社区 - 腾讯云 (tencent.com)</a></p><p><a href="https://www.cnblogs.com/mjorcen/p/4199583.html">管道Pipe - mjorcen - 博客园 (cnblogs.com)</a></p><p>Java NIO 管道是 2 个线程之间的单向数据连接。Pipe 有一个 source 通道和一个 sink </p><p>通道。数据会被写到 sink 通道，从 source 通道读取。 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（六）条件变量,睡眠/唤醒机制</title>
      <link href="/2021/11/21/cao-zuo-xi-tong-dao-lun-bi-ji-liu-tiao-jian-bian-liang-shui-mian-huan-xing-ji-zhi/"/>
      <url>/2021/11/21/cao-zuo-xi-tong-dao-lun-bi-ji-liu-tiao-jian-bian-liang-shui-mian-huan-xing-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h1><p>我们之前讨论了锁，然而锁不是并发程序设计所需的唯一原语，本章我们来讨论条件变量。</p><p>很多情况下线程需要检查某一条件满足后才能继续运行，例如父线程需要等待子线程是否执行完毕。该如何实现呢？</p><p>下面我提供一种自旋检查的方法。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">volatile</span> <span class="token keyword">int</span> done<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">child</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    done<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent:begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> c<span class="token punctuation">;</span>    <span class="token function">Pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>child<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>done<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显这种自旋的方案效率不高，因为父线程自旋会浪费CPU时间。我们希望能让父线程休眠直到满足条件再运行。</p><h3 id="初识条件变量"><a href="#初识条件变量" class="headerlink" title="初识条件变量"></a>初识条件变量</h3><p>线程可以使用条件变量等待一个条件成真。条件变量是一个显示队列，当某些条件不满足时，线程将自己加入队列，另外某个线程，当他改变上述状态时，就可以唤醒一个或多个等待线程。</p><p>线程要睡眠是调用<code>wait（）</code>，当线程想唤醒等待在某个条件变量上的线程时，调用==signal（）==，如下所示。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> done<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">pthread_mutex_t</span> m<span class="token operator">=</span>PTHREAD_MUTES_INITIALIZER<span class="token punctuation">;</span>pthread_cond_c c<span class="token operator">=</span>PTHREAD_COND_INITIALIZER<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">thr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    done<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">thr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">thr_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>done<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent:begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> p<span class="token punctuation">;</span>    <span class="token function">Pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>child<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">thr_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent:end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wait调用有一个参数，是互斥量，它假定wait调用时，这个互斥量是已经上锁的，wait的职责是释放锁，并让调用线程休眠，当线程被唤醒时，必须重新获得锁。这样的步骤是为了在线程休眠时，防止产生一些竞态条件。下面我们来评价一下这段代码。</p><ul><li>第一种情况是：父线程创建出子线程，但自己继续运行，然后马上调用thr_join等待子线程，这种情况下父线程会先获得锁，检查子线程还没有完成，调用wait休眠，子线程最终得以运行，调用thr_exit()，唤醒父线程，并将done设置为1.最后父线程得以运行，从wait调用返回获得锁，释放锁，打印最后的话。</li><li>第二种情况是：子线程创建后立刻运行，设置变量为done，调用signal（），唤醒其他线程，但此时没有其他休眠线程，因此直接结束，然后父线程运行，调用join，发现条件满足，直接结束。</li><li>最后一点要说明的是你可能注意到代码中是用while来循环检查条件变量，这是因为在线程唤醒过程中会出现假唤醒情况。</li></ul><p>为了更好理解上面这段代码中每一部分的重要性，我们来看下面的例子。</p><ul><li>你可能会怀疑done变量是否需要，你会觉得只要条件变量不就行了吗？</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">thr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">thr_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设父线程创建子线程后，子线程立刻运行，执行唤醒，但此时没有休眠线程，于是直接结束，然后父线程调用join，调用wait，此时将永久休眠下去。</p><ul><li>再来看如果在发送信号时不加锁会怎样？</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">thr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    done<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">thr_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>done<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果父线程在调用join，执行if，判断done==0之后被中断了，于是子线程执行，调用signal，唤醒线程，此时没有休眠线程，然后换父线程运行，那父线程将永久休眠下去。</p><blockquote><p>注意：发信号时应总是持有锁。</p><p>简单有效的做法是在使用条件变量发送信号时应持有锁，即调用signal时。这不是建议而是wait语义的强制要求，wait调用总是假设你已经持有锁了，调用者睡眠之前会释放锁，以及返回前会持有锁。</p></blockquote><h2 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h2><p>有界缓冲区是共享资源，我们需要通过同步机制来访问，以免产生竞态条件。</p><h3 id="有问题的方案"><a href="#有问题的方案" class="headerlink" title="有问题的方案"></a>有问题的方案</h3><p>假设只有一个生产者一个消费者，显然put和get之中会有临界区，故此时给代码加锁没用，我们还需借助条件变量。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">cond_t</span> cond<span class="token punctuation">;</span><span class="token class-name">mutex_t</span> mutex<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当只有一个生产者和消费者时，上述代码能正常运行，但如果超过一个线程，这个方案会有严重问题。</p><p>先来看第一个问题：</p><p>假设两个消费者Tc1和Tc2，一个生产者Tp，首先一个消费者先开始执行，获得锁，检查缓冲区是否可以消费，等待释放锁。</p><p>接着生产者运行，获取锁，检查缓冲区是否满，没满，给缓冲区加数字，然后发送信号，关键的是这让第一个消费者不再睡在条件变量上，进入就绪队列，此时它可以运行，但还未运行，生产者继续运行，发现环翠区满，睡眠。这时问题发生了，另一个消费者Tc2抢先执行，消费了缓冲区里面的值，然后睡眠，现在假设Tc1运行，在从wait返回前它获取锁，，然后调用get（），但此时缓冲区无法消费，出现错误。</p><p>原因很简单，Tc1被唤醒后，在它运行前，缓冲区的状态已经改变，发信号只是唤醒他们，但并不保证在它运行前一直是所期望的状态。</p><h3 id="较好的但仍有问题的方案，用while代替if"><a href="#较好的但仍有问题的方案，用while代替if" class="headerlink" title="较好的但仍有问题的方案，用while代替if"></a>较好的但仍有问题的方案，用while代替if</h3><p>为防止出现假唤醒，当消费者Tc1被唤醒后，再次检查共享变量。</p><p>但仍有问题，我们只用了一个条件变量。</p><p>来看这样一种情况，假设两个消费之Tc1和Tc2，都睡眠了此时生产者开始运行，唤醒一个消费者，假设是Tc1，并开始睡眠，Tc1开始运行，，发现缓冲区是满的，于是消费，然后开始唤醒一个线程，那他应该唤醒谁呢？很显然应该唤醒生产者，但是如果它唤醒了消费者，那三个线程最终会永久休眠下去，这很可怕。</p><p>因此，我们应让信号具有指向性，即消费者唤醒生产者，生产者唤醒消费者。</p><h3 id="单缓冲区的生产者-消费者方案"><a href="#单缓冲区的生产者-消费者方案" class="headerlink" title="单缓冲区的生产者/消费者方案"></a>单缓冲区的生产者/消费者方案</h3><p>使用两个条件变量以便正确发送信号。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">cond_t</span> empty<span class="token punctuation">,</span>fill<span class="token punctuation">;</span><span class="token class-name">mutex_t</span> mutex<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fill<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fill<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最终的生产者-消费者方案"><a href="#最终的生产者-消费者方案" class="headerlink" title="最终的生产者/消费者方案"></a>最终的生产者/消费者方案</h3><p>我们现在有了可用的方案，但不太通用，我们进行修改，提高并发和效率。具体来说就是增加更多缓冲区，这样在睡眠之前可以生产多个值。同样在睡眠之前可以多消费几个值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> buffer<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fill_ptr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> use_ptr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    buffer<span class="token punctuation">[</span>fill_ptr<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>    fill_ptr<span class="token operator">=</span>fill_ptr<span class="token operator">+</span><span class="token number">1</span><span class="token operator">%</span>MAX<span class="token punctuation">;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp<span class="token operator">=</span>bufffer<span class="token punctuation">[</span>use_ptr<span class="token punctuation">]</span><span class="token punctuation">;</span>    use_ptr<span class="token operator">=</span>use_ptr<span class="token operator">+</span><span class="token number">1</span><span class="token operator">%</span>MAX<span class="token punctuation">;</span>    count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span>voidvoid <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span>MAX<span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fill<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fill<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="覆盖条件"><a href="#覆盖条件" class="headerlink" title="覆盖条件"></a>覆盖条件</h3><p>下面的例子摘自Lampson和Redell关于操作系统的论文。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> bytesLeft<span class="token operator">=</span>MAX_HEAP_SIZE<span class="token punctuation">;</span><span class="token comment">//need lock and condition too</span><span class="token class-name">cond_t</span> c<span class="token punctuation">;</span><span class="token class-name">mutex_t</span> m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>byteLeft<span class="token operator">&lt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    bytesLeft<span class="token operator">-=</span>size<span class="token punctuation">;</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    bytesLeft<span class="token operator">+=</span>size<span class="token punctuation">;</span>    <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当分配内存时可能会因为内存不足而等待，相应的，线程释放内存时，会发信号说有更多内存空间，但代码中有一个问题，该唤醒那个等待线程？</p><p>假设目前没有空闲内存，线程Ta调用allocate（100），接着线程Tb请求较少内存allocate（10），他们都等待在条件上睡眠，没有足够空闲内存来分配。</p><p>假定第三个线程调用了free（50），遗憾的是当他发信号唤醒等待线程时，可能不会唤醒申请10字节的线程，而唤醒申请100字节的线程，那这样就存在问题。</p><p>Lampson和Redell的方案很直接，用Pthread_cond_broadcast()唤醒所有线程，当然不利的一面是会影响性能，因为不必要的唤醒了其他等待线程，但这些等待线程马上会再次睡眠。</p><p>Lampson和Redell把这种条件变量叫做覆盖条件，，他能覆盖所有需要唤醒线程的场景。</p><p>一般来说如果你发现程序只有改成广播信号才能正常工作（但你认为不需要），可能是程序有缺陷，修复它。但对于上述内存分配的例子，只能使用广播信号，因为你无法确定那些线程该唤醒，线程所申请的内存空间是千变万化的，无法定义相应条件变量，那干脆唤醒所有线程。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（五）基于锁的并发数据结构</title>
      <link href="/2021/11/21/cao-zuo-xi-tong-dao-lun-bi-ji-wu-ji-yu-suo-de-bing-fa-shu-ju-jie-gou/"/>
      <url>/2021/11/21/cao-zuo-xi-tong-dao-lun-bi-ji-wu-ji-yu-suo-de-bing-fa-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用查找算法总结</title>
      <link href="/2021/11/20/chang-yong-cha-zhao-suan-fa-zong-jie/"/>
      <url>/2021/11/20/chang-yong-cha-zhao-suan-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_39241397/article/details/79344179">(158条消息) 七大查找算法_Jibert的博客-CSDN博客_查询算法</a></p><p><a href="https://www.jianshu.com/p/3445be2d9956">常用查找算法 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/hejun_haitao/article/details/52663040">(158条消息) 常用查找算法总结_hjhomw的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/liudemeng/p/11387369.html">常见的查找算法 - liudemeng - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（四）并发介绍及锁</title>
      <link href="/2021/11/20/cao-zuo-xi-tong-dao-lun-bi-ji-si-bing-fa-jie-shao-ji-suo/"/>
      <url>/2021/11/20/cao-zuo-xi-tong-dao-lun-bi-ji-si-bing-fa-jie-shao-ji-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>本部分将为单个运行进程通过新的抽象即：线程。一个程序一般只有一个执行点，但多线程程序有多个执行点，多个程序计数器。但与进程不同的是，线程共享地址空间，因此他们可以访问相同的数据。</p><p>每个线程私有程序计数器，如果两个线程在同一个处理器上运行，则从一个线程切换到另一个线程时必定发生上下文切换，对于进程，上下文切换是将状态保存到PCB中，而对于线程，是将状态保存到TCB中，但是与进程相比，线程切换有一点主要的区别：就是地址空间不变，即不需要切换当前使用的页表。看如下地址空间分布：</p><img src="https://i.loli.net/2021/11/21/4EZQY2GUkTr9gVf.jpg" alt="线程地址空间.jpg" style="zoom:67%;"><p>两个栈跨越了进程的地址空间，所有位于栈上的变量，参数，返回值和其他东西，都将被放在相关线程的栈中。</p><h3 id="不可控的调度"><a href="#不可控的调度" class="headerlink" title="不可控的调度"></a>不可控的调度</h3><p>我们知道在多线程程序中若修改共享变量很容易发生错误，究其原因还是因为调度策略和中断所引起的多线程进入临界区，即不可控调度和不合时宜的中断引起了错误。下面我们来看一个例子。如我们想给counter加一个数字，在计算机中这个执行一般分三步</p><pre class="line-numbers language-none"><code class="language-none">mov 0x8049a1c,eaxadd 0x1,eaxmov eax,0x8049a1c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从内存地址中取出值放入寄存器，再给寄存器加1，然后再存入寄存器。假设有两个线程，一个线程此时将counter加载进了eax，并加1，此时假设为51，不幸的是发生了中断，操作系统进行线程切换，保存状态到TCB（程序计数器，寄存器包括eax），切换到第二个线程，他从内存地址中加载值为50，加1为51，然后存入地址，执行完毕，此时发生时钟中断，切换回原来那个线程，他此时应该执行存储，但他存储的也将是51，这就不对了，本来该是52啊</p><p>这种情况即竞态条件，多个线程争夺同一个资源且对访问顺序敏感时，就存在竞态条件。要解决这个问题，我们需要互斥。即只能有一个线程进入临界区（产生竞态条件的代码片段）</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>问题产生的原因是发生了不合时宜的中断，我们要做的是消除这种中断，方式是是上述操作以原子性方式执行，即不能在指令中间中断。</p><h3 id="睡眠-唤醒"><a href="#睡眠-唤醒" class="headerlink" title="睡眠/唤醒"></a>睡眠/唤醒</h3><p>除了访问共享变量，还有一种交互即在一个线程继续之前必须等待另一个线程完成某些操作，如进程执行磁盘IO，进入睡眠，当IO完成时，进程从睡眠中唤醒，继续执行。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>通过对并发的介绍，我们了解到并发的一个基本问题，我们希望原子方式执行一系列指令，但由于但处理器中断和多处理器并发执行，这个就难以实现，我们故引入锁</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>锁就是一个变量，他保存了锁在某一时刻的状态，要么是可用的表示线程表示线程不持有锁，要么是被占用的表示线程持有锁。</p><p>lock和unlock。lock尝试获取锁，如果没有其他线程持有锁，该线程获得锁，进入临界区；如果另一个线程对相同的锁变量调用lock，他不会获得锁，不能进入临界区。锁的持有者一旦调用unlock（），锁就可用。其他等待线程便会注意到锁状态的变化，便会获取该锁。</p><h3 id="评价锁"><a href="#评价锁" class="headerlink" title="评价锁"></a>评价锁</h3><p>在实现锁之前得先确定目标，先建立一些标准</p><ul><li>第一是：能否提供互斥</li><li>第二是公平性：当锁可用时，是否每一个竞争线程有公平得到锁的机会，或是否有竞争锁的线程会饿死</li><li>第三是性能：使用锁之后增加的时间开销。<ul><li>①没有竞争时，只有一个线程抢锁，释放锁的开支如何</li><li>②单CPU上多个线程竞争，性能如何？</li><li>③多CPU，多线程时性能如何</li></ul></li></ul><h3 id="控制中断"><a href="#控制中断" class="headerlink" title="控制中断"></a>控制中断</h3><p>最早提供的互斥解决方案是在临界区关闭中断，这是为单处理器设计的方案。</p><p>使用特殊的硬件指令关闭中断，保证临界区的代码不会被中断，结束后打开中断。但这种方式存在较大安全问题，这种方法允许所有线程执行特权操作，即信任这种机制不会滥用，众所周知，信任每一个程序这必然导致危险。</p><ul><li>第一：可能存在贪婪程序，在关闭中断后一直霸占控制权。</li><li>第二：不支持多处理器。多个线程运行在不同的CPU上，每个线程试图进入同一临界区，关闭中断也没有，因为他可以运行在其他处理器上。</li><li>第三：关闭中断可能导致中断丢失，可能导致严重的系统问题。如磁盘完成了IO，但CPU错失了这一事实，那操作系统如何唤醒等待IO的进程呢？</li></ul><p>最后就是与正常指令相比，执行速度慢，效率低</p><p>因此只有在很有限的情况下才会用关闭中断实现互斥原语。在某些情况下操作系统本身会采用屏蔽中断的方式，保证自己数据结构的原子性。因为操作系统内部不存在信任问题。</p><h2 id="实现锁的尝试"><a href="#实现锁的尝试" class="headerlink" title="实现锁的尝试"></a>实现锁的尝试</h2><h3 id="测试并设置指令（原子交换）"><a href="#测试并设置指令（原子交换）" class="headerlink" title="测试并设置指令（原子交换）"></a>测试并设置指令（原子交换）</h3><p>因为关闭中断的方式无法工作在多处理器上，系统设计者开始让硬件支持锁。</p><p>最简单的硬件支持是测试并设置指令，也叫原子交换。</p><p>思想很简单：用一个变量标记锁是否被持有。第一个线程进入临界区，调用lock，检查标志，然后设置标志，占用锁，解释后，调用unlock，清除标志释放锁。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lock_t</span> <span class="token punctuation">{</span><span class="token keyword">int</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token class-name">lock_t</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">{</span>    mutex<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    mutex<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">{</span>    mutex<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==评价：==</p><p><img src="https://i.loli.net/2021/11/21/SaMgjCuNG56hQLn.jpg" alt="testandset.jpg"></p><p>不合时宜的中断可能两个线程都进入临界区；除了这个还有线程等待时采用了自旋的技术，这会浪费时间，尤其在单处理器上，一个等待线程等待的目标线程甚至无法运行。</p><h3 id="实现可用的自旋锁"><a href="#实现可用的自旋锁" class="headerlink" title="实现可用的自旋锁"></a>实现可用的自旋锁</h3><p>上面的问题在于可能出现不可控的中断，于是将测试并设置指令合并为原子操作。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">testAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>old_ptr<span class="token punctuation">,</span><span class="token keyword">int</span> new<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> old<span class="token operator">=</span><span class="token operator">*</span>old_ptr<span class="token punctuation">;</span><span class="token operator">*</span>old_ptr<span class="token operator">=</span>new<span class="token punctuation">;</span><span class="token keyword">return</span> old<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lock_t</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">lock_t</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    lock<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>flag<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    lock<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看一下这个锁为什么能工作。</p><p>场景一：当一个线程进入临界区时调用lock，没有其他线程持有锁，返回0，跳出while循环，获取锁，当线程进入离开临界区时，调用unlock清除flag</p><p>场景二：当一个线程持有锁，另一线程调用lock进入自旋，当持有锁的线程释放锁后，本线程退出循环获得锁进人临界区。</p><p>可以看到当把测试并设置合并为原子操作后就实现了一个互斥原语。在单处理器上需要抢占式调度，不然自旋锁将永远不会放弃CPU。</p><h3 id="评价自旋锁"><a href="#评价自旋锁" class="headerlink" title="评价自旋锁"></a>评价自旋锁</h3><ul><li>正确性是满足了，即实现了互斥</li><li>公平性：自旋锁能保证不产生线程饥饿吗，事实上他不提供任何公平性保证，是否产生饥饿取决于调度策略。</li><li>性能：我们分一下情况<ul><li>单CPU：性能开销巨大，假设锁被抢占，那调度器会挨个运行其他线程，且其他线程都自旋一个时间片，这显然不合适，浪费大量CPU周期</li><li>多CPU：自旋锁性能不错（线程数大致等于CPU），因为临界区一般很短，自旋的线程很快就能得到调度，没有浪费过多CPU。</li></ul></li></ul><h3 id="比较并交换原语"><a href="#比较并交换原语" class="headerlink" title="比较并交换原语"></a>比较并交换原语</h3><p>某些系统提供了另一个硬件原语即比较并交换。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">CompareAndSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">int</span> expected<span class="token punctuation">,</span><span class="token keyword">int</span> new<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> actual<span class="token operator">=</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>actual<span class="token operator">==</span>expected<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>ptr<span class="token operator">=</span>new<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> actual<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>flag<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能发现他与测试并设置十分类似，确实，如果只用它实现自旋锁，它的行为等价于自旋锁。</p><p>但你稍后将会发现这条指令的强大之处。</p><h3 id="链接并加载和条件式存储指令"><a href="#链接并加载和条件式存储指令" class="headerlink" title="链接并加载和条件式存储指令"></a>链接并加载和条件式存储指令</h3><p>一些平台提供了实现临界区的一对指令。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">LoadLinked</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">StoreConditional</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>no one has updated <span class="token operator">*</span>ptr since the LoadLinked to this adress<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>ptr<span class="token operator">=</span>value<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">LoadLinked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>flag<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">StoreConditional</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>flag<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    lock<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有上一次加载的地址在此期间没有更新，才会返回1成功。</p><p>我们来看看它是如何防止不合时宜中断的。</p><p>此时flag=0；当一个线程调用lock，进入加载，返回0，在执行条件式存储之前被中断了，此时另一线程也进入加载，此时两个线程都将执行条件式存储，但只有一个线程能成功进入临界区，另一个线程必须重新尝试获取锁。</p><h3 id="自旋过多怎么办？"><a href="#自旋过多怎么办？" class="headerlink" title="自旋过多怎么办？"></a>自旋过多怎么办？</h3><p>基于硬件的锁简单，有效，但在某些场景下这种解决方案效率会很低下。</p><p>以两个线程运行在单处理器上为例：当一个线程持有锁时，被中断，另一个线程去获取锁，开始自旋，然后必须等到另一个线程再次运行释放锁，他才会不自旋，即不浪费CPU周期。</p><p>在类似场景下，若有N个线程抢占锁，就会浪费N-1个时间片。</p><p>因此我们发现只有硬件支持是不够的，还需更多支持。</p><h3 id="让出CPU"><a href="#让出CPU" class="headerlink" title="让出CPU"></a>让出CPU</h3><p>我们接下来要解决的问题是如何减少浪费的CPU周期。</p><p>一种简单的办法是当要自旋是直接放弃CPU。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flag<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        yield<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yield原语是线程主动放弃CPU，使得线程由运行变为就绪。</p><p>直接考虑许多线程的情况（100个线程），同时抢占一把锁时，这99个线程会一直处于让出CPU状态，知道持有锁线程释放锁。虽然比原来执行自旋减少了成本，但上下文切换的成本是实实在在存在的，仍然不够理想。除此之外，还可能造成线程饿死，一个线程可能一直处于让出状态。</p><h3 id="使用队列，休眠代替自旋"><a href="#使用队列，休眠代替自旋" class="headerlink" title="使用队列，休眠代替自旋"></a>使用队列，休眠代替自旋</h3><p>前面的方法如果调度不合理，线程可能一直自旋或一直处于让出状态，都会造成浪费，不能防止饿死。</p><p>我们必须添加某种控制，释放锁时，谁能抢到锁，为了做到这一点，我们需要操作系统提供更多的支持，并需要队列来保存等待的线程。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lock_t</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span>    <span class="token keyword">int</span> guard<span class="token punctuation">;</span>   <span class="token class-name">queue_t</span> <span class="token operator">*</span>q<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">lock_t</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">lock_init</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>    m<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    m<span class="token operator">-&gt;</span>guard<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">queue_init</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-&gt;</span>guard<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        m<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        m<span class="token operator">-&gt;</span>guard<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">queue_add</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">,</span><span class="token function">gettid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token operator">-&gt;</span>guard<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-&gt;</span>guard<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">queue_empty</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>        m<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">unpark</span><span class="token punctuation">(</span><span class="token function">queue_remove</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token operator">-&gt;</span>guard<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>guard基本起到了自旋锁的作用，线程在获取锁和释放锁时但可能被中断，从而导致其他线程自旋，但自旋等待时间是很有限的，因为每次获取锁时都会将m-guard置为0，只会自旋一次，即使在讲guard置为1后发生了中断，下一个线程也会将guard置为0，从而使得后来线程不会过多地自旋。</li><li>在lock中，如果线程不能获取锁，线程会把自己加入队列，然后休眠，让出CPU</li><li>当要唤醒另一个线程时flag并没有设置为0，而是直接把锁从释放线程传递给下一个获得锁的线程</li><li>在park调用之前如果一个线程在调用park之前，此时另一个线程执行了park，假定他睡到锁可用之前，然后切换到另一个线程，释放锁，那第一个线程可能会永远睡下去，称为唤醒/等待竞争。</li></ul><p>为了唤醒/等待，采用setpark系统调用，表明一个线程马上要被park，如果刚好另一个线程被调度，且调用了unpark，那么后续的park会直接返回，而不是一直睡眠。</p><p><a href="https://blog.csdn.net/lovesummerforever/article/details/78556737">(158条消息) （一 附）多进程 多线程 与 cpu 、操作系统_Xinghf-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/2cfd551055d7">启动一个最简单的Java main程序时，有多少个线程被创建 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/u012780337/article/details/105342122">(158条消息) 程序计数器（PC ） 详解_u012780337的专栏-CSDN博客_程序计数器pc</a></p><p><a href="https://www.cnblogs.com/enjoyitlife/p/12093960.html">面试题：线程A打印1-10数字，打印到第5个数字时，通知线程B - 进击的大兵 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.codeleading.com/article/75282740092/">面试题：线程A打印1-10数字，打印到第5个数字时，通知线程B - 代码先锋网 (codeleading.com)</a></p><p><a href="https://www.codeleading.com/article/81165961440/">Thread.sleep()为什么要抛出中断异常 - 代码先锋网 (codeleading.com)</a></p><p><a href="http://ifeve.com/">并发编程网 – ifeve.com | 让天下没有难学的技术</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>“反射详解”</title>
      <link href="/2021/11/19/java-zhong-de-fan-she/"/>
      <url>/2021/11/19/java-zhong-de-fan-she/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中的注解</title>
      <link href="/2021/11/19/java-zhong-de-zhu-jie/"/>
      <url>/2021/11/19/java-zhong-de-zhu-jie/</url>
      
        <content type="html"><![CDATA[<p>[java注解的使用 - chenweicool - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/chentang/p/13959831.html#:~:text=Java%E6%B3%A8%E8%A7%A3%E6%98%AF%E9%99%84%E5%8A%A0%E5%9C%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%83%E4%BF%A1%E6%81%AF%EF%BC%8C%E7%94%A8%E4%BA%8E%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%B5%B7%E5%88%B0%E8%AF%B4%E6%98%8E%E3%80%81%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8A%9F%E8%83%BD%E3%80%82">https://www.cnblogs.com/chentang/p/13959831.html#:~:text=Java注解是附加在代码中的一些元信息，用于编译和运行时进行解析和使用，起到说明、配置的功能。</a> 注解不会影响代码的实际逻辑，仅仅起到辅助性的作用。 包含在java.lang.annotation包中。,注解的定义类似于接口的定义，使用%40interface来定义，定义一个方法即为注解类型定义了一个元素，方法的声明不允许有参数或throw语句，返回值类型被限定为原始数据类型、字符串String、Class、enums、注解类型，或前面这些的数组，方法可以有默认值。 注解并不直接影响代码的语义，但是他可以被看做是程序的工具或者类库。 它会反过来对正在运行的程序语义有所影响。 注解可以从源文件、class文件或者在运行时通过反射机制多种方式被读取。)</p><p><a href="https://zhuanlan.zhihu.com/p/37701743">java注解-最通俗易懂的讲解 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/85612062">Java注解总结（史上最全，有这一篇就够了） - 知乎 (zhihu.com)</a></p><p><a href="https://www.yiibai.com/java/java-annotation-tutorial.html">Java注解 - Java教程™ (yiibai.com)</a></p><p><a href="https://www.jianshu.com/p/28edf5352b63">Java:Annotation(注解)–原理到案例 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/javazejian/article/details/71860633">(167条消息) 深入理解Java注解类型(@Annotation)_zejian的博客-CSDN博客_java注解</a></p><p><a href="https://www.bilibili.com/video/BV16Q4y1S7vJ?p=28">达内Java反射与注解_2021新版精讲教程，小白也能听懂的底层实现原理_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/qq_30347133/article/details/83686068">(167条消息) JAVA注解开发（精讲）_林夕_影的博客-CSDN博客_java注解</a></p><h2 id="注解概述"><a href="#注解概述" class="headerlink" title="注解概述"></a>注解概述</h2><p>注解是那些插入到源代码中，使用其他工具对其进行处理的标签，工具可以在源代码层次上操作，或处理编译器在其中放了注解的类文件。</p><p>注解不会改变程序编译方式，包含与不包含注解的代码生成相同的虚拟机指令。</p><p>下面是一些可能的注解用法：</p><ul><li>附属文件的自动生成，例如部署描述符或bean信息类</li><li>测试，日志，事务语义等代码自动生成。</li></ul><h3 id="注解的小例子"><a href="#注解的小例子" class="headerlink" title="注解的小例子"></a>注解的小例子</h3><p>在详细了解注解前，我们先通过一个示例来体会他的作用。</p><p>在Java中注解当做一个修饰符，注解中的元素会被工具读取，除了注解类，成员，局部变量，注解可放置在许多地方。后面将一一列举。</p><p>在用户界面编程中，一件令人讨厌的事就是组装事件源上的监听器，我们设计一个注解来免除这个差事。<code>@ActionListenerFor(source="button")</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActionListenerInstaller</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">processAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cl<span class="token operator">=</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span>cl<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ActionListenerFor</span> a<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ActionListenerFor</span> <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">Field</span> f<span class="token operator">=</span>cl<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">addListener</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>obj<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveOperationException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span><span class="token keyword">final</span> <span class="token class-name">Object</span> param<span class="token punctuation">,</span><span class="token keyword">final</span> <span class="token class-name">Method</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> handler<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span><span class="token class-name">Method</span> mm<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token class-name">Object</span> listener<span class="token operator">=</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">ActionListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> adder<span class="token operator">=</span>source<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"addActionListener"</span><span class="token punctuation">,</span><span class="token class-name">ActionListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adder<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ActionListenerFor</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在你的界面代码中，将调用ActionListenerInstaller.processAnnotations(this)；</p><p>其可以枚举某个对象的所有方法，首先获取其ActionListenerFor注解，利用AnnotationElement接口中的getAnnotation方法，Method，Constructor，Field，Class，Package都实现了这个接口。</p><p>然后可以通过source方法查找成员域。</p><p>对于每一个被注解的方法，都会生成<code>ActionListener</code>接口的代理对象，其<code>actionPerformed</code>方法将调用这个被注解的方法。</p><p>注解是在运行时被处理的，另外也可以在源码级别上进行处理，这样源代码生成器将产生用于添加监听器的代码，注解也可以在字节码级别被处理。</p><h2 id="注解语法"><a href="#注解语法" class="headerlink" title="注解语法"></a>注解语法</h2><pre class="line-numbers language-none"><code class="language-none">利用@interface定义<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个元素声明都以这种形式：<code>type&nbsp;elementName();</code>或<code>type elementName()&nbsp;default&nbsp;value</code></p><p>所有注解接口都隐式扩展自<code>java.lang.annotation.Annotation接口</code>换句话说，你无法扩展注解接口</p><p>注解元素的类型为下列之一：</p><ul><li>基本类型</li><li>String</li><li>Class</li><li>enum</li><li>注解类型</li><li>由前面所属的类型组成的数组</li></ul><pre class="line-numbers language-none"><code class="language-none">public @interface BugReport{enum Status {1,2,3,4};boolean showStopper() default false;String assigned() default "none";Class&lt;?&gt; testCase();Status status();Reference ref()  //一个注解类型String[] report();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><p>类型注解可出现在下列地方：</p><p><img src="https://s2.loli.net/2021/12/08/JBDyordsqgVERbM.jpg" alt="类型注解.jpg"></p><h3 id="标准注解"><a href="#标准注解" class="headerlink" title="标准注解"></a>标准注解</h3><table><thead><tr><th>注解接口</th><th>应用场合</th><th>目的</th></tr></thead><tbody><tr><td>Deprecated</td><td>全部</td><td>将项标记为过时</td></tr><tr><td>SuppressWarnings</td><td>除包和注解之外所有情况</td><td>阻止给定类型的警告信息</td></tr><tr><td>FunctionalInterface</td><td>接口</td><td>将接口标记为只有一个抽象方法的函数式接口</td></tr><tr><td>Resource</td><td>类，接口，方法，域</td><td>为注入而标记</td></tr><tr><td>Generated</td><td>全部</td><td></td></tr><tr><td>Target</td><td>注解</td><td>指明可以应用这个注解的那些项</td></tr><tr><td>Retention</td><td>注解</td><td>指明这个注解可以保留多久</td></tr><tr><td>Doucumented</td><td>注解</td><td>指明这个注解应该包含在注解项文档中</td></tr><tr><td>Inherited</td><td>注解</td><td>指明这个注解应用于一个类时，能自动被其子类继承</td></tr><tr><td>Repeatable</td><td>注解</td><td>指明这个注解可以在同一项应用多次</td></tr></tbody></table><p>用于管理资源的注解</p><p>@PostConstruct和@PreDestory注解用于控制对象生命周期的环境中，如Web容器，应用服务器标记了这些注解的方法应该在对象被构建之后或移除之前被调用。</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>@Target元注解应用于一个注解，可限制注解应用到哪些项上。</p><pre class="line-numbers language-none"><code class="language-none">@Target({ElementType.TYPE,ElementType.METHOD})public @interface BugReport<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下图显示了枚举类型ElementType</p><table><thead><tr><th>元素类型</th><th>注解适合场合</th><th>元素类型</th><th>注解适用场合</th></tr></thead><tbody><tr><td>ANNOTATION_TYPE</td><td>注解类型</td><td>FIELD</td><td>成员域包括enum常量</td></tr><tr><td>PACKAGE</td><td>包</td><td>PARAMETER</td><td>方法或构造器参数</td></tr><tr><td>TYPE</td><td>类，接口，注解类型，enum</td><td>LOCAL_VARIABLE</td><td>局部变量</td></tr><tr><td>METHOD</td><td>方法</td><td>TYPE_PARAMETER</td><td>用于类型参数</td></tr><tr><td>CONSTRUCTOR</td><td>构造器</td><td>TYPE_USE</td><td>任何地方</td></tr></tbody></table><p>@Retention元注解制定一条注解应该保留多长时间，默认值是<code>RetentionPolicy.CLASS</code></p><table><thead><tr><th>保留规则</th><th>描述</th></tr></thead><tbody><tr><td>SOURCE</td><td>不包含在类文件中的注解</td></tr><tr><td>CLASS</td><td>包含在类文件中的注解，但虚拟机不需要将他们载入</td></tr><tr><td>RUNTIME</td><td>包含在类文件中的注解，由虚拟机载入，通过反射API获取</td></tr></tbody></table><p>@Documented元注解为像Jacadoc这样的归档工具提供提示。应该像处理其他修饰符一样来处理归档注解。其他注解不会纳入归档范围。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ActionListenerFor</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在被其标注过的方法将会在归档中出现这条注解。如果某个注解是暂时的，就不该对其进行归档。</p><p>@Inherited元注解只能应用于对类的注解，如果一个类具有继承注解，它所有子类都自动带有同样的注解，这使得创建一个与Serializable这样的标记接口具有相同运行方式的注解变得容易。</p><p>假设定义了一个继承注解<code>@Persistent</code>来指明一个类对象可以存储到数据库中，那该持久类的子类就会自动被注解为持久性的。</p><pre class="line-numbers language-none"><code class="language-none">@Inheritedpublic @interface Persistent{}@Persistentclass Employee{...}class Manager extends Employee{...}  //这个子类也自动标注为@Persistent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在持久化机制去查找存储在数据库中的对象时，就会同时探测到Employee对象和Manager对象。</p><p>@Repeatable元注解。对于jdk8来说，将同类型的注解多次应用到某一项是合法的，为了向后兼容，可重复注解的实现者需要提供一个容器注解，将这些重复注解存储到数组中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">TestCases</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">TestCase</span><span class="token punctuation">{</span><span class="token class-name">String</span> <span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stirng</span> <span class="token function">expected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">TestCases</span><span class="token punctuation">{</span><span class="token class-name">TestCase</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论何时，只要用户提供两个或多个@TestCase注解，他们就会自动包装到@TestCases注解中。即需要在可重复注解中声明注解数组类。</p><p>==注意：==</p><p>在处理可重复注解必须仔细，如果调用getAnnotation来查找某个可重复注解，而该注解又确实重复了，就会得到null，这是因为重复注解被包装到容器注解中了，此时调用getAnnotationByType，这会遍历容器注解，并给出一个可重复注解的数组。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（三）进程调度</title>
      <link href="/2021/11/19/cao-zuo-xi-tong-dao-lun-bi-ji-san-jin-cheng-diao-du/"/>
      <url>/2021/11/19/cao-zuo-xi-tong-dao-lun-bi-ji-san-jin-cheng-diao-du/</url>
      
        <content type="html"><![CDATA[<h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><p>在讨论操作系统中进程调度前，我们先做出如下假设：</p><ul><li>每个工作运行相同的时间</li><li>所有工作同时到达</li><li>一旦开始，每个工作保持运行直到完成</li><li>所有工作只是用CPU，不执行IO操作</li><li>每个工作运行时间已知</li></ul><h3 id="先进先出（FIFO）"><a href="#先进先出（FIFO）" class="headerlink" title="先进先出（FIFO）"></a>先进先出（FIFO）</h3><p>看一个例子：</p><p>3个工作A,B,C大致在相同时间到达系统，假设A比B早，B比C早一点点。每个工作运行10s，看周转时间：（110+20+30）/3=20；现在我们放宽假设1，即A运行100s，B,C运行10s，令人不快的是系统平均周转时间是比较高的，这通常被称为护航效应，一些耗时较少的潜在资源消费者被排在重量级消费者后。这很明显让人感觉这个调度策略不太好，那怎么办呢？这个策略的问题在于运行时间较短的任务被迫需要等待较长的时间，我们看下一个策略。</p><h3 id="最短任务优先（SJF）"><a href="#最短任务优先（SJF）" class="headerlink" title="最短任务优先（SJF）"></a>最短任务优先（SJF）</h3><p>从名字也很容易看出这个调度策略的思想，事实上，在所有任务同时到达时，SJF确实是一个最优的调度算法。但显示情况很难做到任务同时到达，我们假设A先到达，B,C在A运行10s后到达，这种情况下周转时间反而不会提升多少，性能没有较大提升。</p><p>这个调度策略的问题在于它是非抢占式调度，导致轻量级的任务被迫等待重量级任务完成后再执行。那我们设计一种抢占式调度策略。</p><h3 id="最短完成时间优先-STCF"><a href="#最短完成时间优先-STCF" class="headerlink" title="最短完成时间优先(STCF)"></a>最短完成时间优先(STCF)</h3><p>这是一种抢占式调度，当新工作进入系统时，确定新工作和正在运行的工作谁的剩余时间少就执行谁，即可能设计进程上下文切换。此时周转时间能大大提升，可以看到当所有工作同时到达时，SJF最优，不同时到达时STCF最优。</p><p>但用户在使用系统时也希望交互性好，即当用户发动请求时能立刻得到响应，于是引入响应时间这个指标。前面的调度策略虽然周转时间好，但响应时间性能不太好，这很明显。于是有以下新的调度策略</p><h3 id="轮转"><a href="#轮转" class="headerlink" title="轮转"></a>轮转</h3><p>即在一个时间片里运行一个工作，然后切换到运行队列中下一个任务循环往复，知道所有任务完成。这个时间片需是时钟中断周期的整数倍，这样才能完成进程切换。很明显这种调度策略的性能依赖于时间片的设置，太短不好，因为会进行过多的上下文切换，这是要付出代价的，通常会使其设置的较长，以便摊销上下文切换的成本，而又不影响系统及时响应。但你是否注意到响应时间是保证了，那周转时间呢？假设A,B,C每个运行5s，RR为1s，那平均周转时间是14，很糟糕。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件安全复习</title>
      <link href="/2021/11/14/ruan-jian-an-quan-fu-xi/"/>
      <url>/2021/11/14/ruan-jian-an-quan-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="攻击模式"><a href="#攻击模式" class="headerlink" title="攻击模式"></a>攻击模式</h3><ul><li>被动攻击<ul><li>信息泄露</li><li>流量分析</li></ul></li><li>主动攻击<ul><li>伪装攻击</li><li>重放攻击</li><li>消息篡改</li><li>拒绝服务</li></ul></li></ul><h3 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a>恶意软件</h3><p>未被授权的情况下以破坏软硬件设备，窃取用户信息，干扰用户正常使用为目的的软件或代码</p><p>什么是软件漏洞：</p><ul><li>漏洞是信息系统自身具有的弱点或缺陷</li><li>漏洞存在环境通常是特定的</li><li>漏洞具有可利用性，若攻击者利用了这些漏洞将给信息系统安全带来严重威胁和经济损失</li></ul><p>安全漏洞的定义：</p><p>安全漏洞是产品的缺陷，可能使攻击者破坏该产品的完整性，可用性，机密性</p><p>漏洞威胁：</p><ul><li>非法获取访问权限</li><li>拒绝服务</li><li>恶意代码植入</li><li>数据丢失泄露</li></ul><p>漏洞产生原因：</p><ul><li>技术因素：<ul><li>输入验证错误，访问验证错误</li><li>设计错误，配置错误</li></ul></li><li>非技术因素：<ul><li>缺乏软件开发规范</li><li>缺乏安全测试，安全维护</li></ul></li></ul><p>缓冲区移除漏洞利用：</p><p>修改内存数据，改变程序执行流程，执行恶意代码获取权限</p><h3 id="web漏洞-OWASP"><a href="#web漏洞-OWASP" class="headerlink" title="web漏洞-OWASP"></a>web漏洞-OWASP</h3><ul><li>A1-注入：将不受信任的数据作为命令或查询的一部分发送到解析器，产生SQL注入等；攻击者的恶意数据可以诱使解析器没有适当权限情况下执行命令</li><li>A2-失效的身份认证：通过错误的使用应用程序的身份认证和会话管理功能，攻击者能破译密码，密钥或会话令牌或利用其他开发缺陷暂时性或永久性冒充其他用户身份</li><li>A3-敏感数据泄露：对敏感数据加密</li><li>A4-XML外部实体：配置错误的XML处理器评估了XML文件中的外部实体引用。攻击者利用外部实体窃取使用URI文件处理器内部文件，从而实施攻击</li><li>A5-失效的访问控制：未对通过身份验证的用户实施恰当的访问控制。攻击者利用这些缺陷操作敏感数据。</li><li>A6-安全配置错误：由于不完整的临时配置，错误的HTTP标头配置等造成。我们需要对操作系统，框架，应用程序进行安全配置，并及时修补。</li><li>A7-跨站脚本：当应用程序的网页包含不信任的数据时，或使用能创建HTML或JavaScript的浏览器API更新网页时，会出现XSS，攻击者在受害者浏览器中执行脚本等</li><li>A8-不安全的序列化：不安全的序列化导致远程代码执行，或利用来进行攻击</li><li>A9-使用包含已知漏洞的组件：含有已知漏洞的组件被攻击者利用，造成严重数据丢失或服务器接管，同时破坏应用程序防御，造成影响。</li></ul><h4 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h4><p>应用描述：</p><p>几乎任何数据都能成为注入载体，攻击者可像解释器发送恶意数据，注入漏洞产生</p><p>普遍性：</p><p>注入漏洞很普遍，通常在SQL，Nosql查询语句，OS命令中，</p><p>技术：</p><p>导致数据丢失，泄露给无授权方，甚至主机被完全接管</p><p>应用程序脆弱：</p><ul><li>用户提供的数据没有经过应用程序验证，或过滤</li><li>动态查询语句或非参数化调用，在没有上下文感知转义情况下被用于解析器</li><li>恶意数据直接被使用，如SQL语句中包含恶意数据</li></ul><p>常见的注入：</p><p>SQL注入，OS命令，ORM</p><p>代码评审是最有效的检测应用程序注入的办法之一，其次是对参数，字段等的DAST扫描。</p><p>如何防止？</p><p>将数据与语句隔开</p><ul><li>使用安全的API，完全避免使用解释器，或提供参数化界面的接口，或迁移到ORM</li><li>使用正确的具有恰当规范化的输入验证方法</li><li>对任何剩余的动态查询使用该解释器特定的转义语法转义特殊字符。</li></ul><h4 id="失效的身份认证"><a href="#失效的身份认证" class="headerlink" title="失效的身份认证"></a>失效的身份认证</h4><p>应用描述：攻击者可获得数百万有效用户名和密码组合</p><p>普遍性：</p><p>大多数身份认证和访问管理系统设计与实现存在身份认证失效问题</p><p>技术：</p><p>攻击者只需访问几个账户，或只需管理员账户就可以破坏系统</p><p>应用程序脆弱：</p><ul><li>允许凭证填充，使得攻击者获得有效用户名和密码列表</li><li>允许默认的弱的众所周知的密码</li><li>使用明文，弱散列密码</li><li>当用户不活跃时，用户会话或认证令牌没有正确注销或失效。</li></ul><p>防止：</p><ul><li>实现多因素身份认证，防止自动，凭证填充</li><li>执行弱密码检查</li><li>将密码长度，复杂性，循环策略与现代基于证据的密码策略相一致</li><li>使用服务端安全内置会话管理器，登录后生成高度复杂的新随机会话ID</li></ul><h4 id="敏感数据泄露"><a href="#敏感数据泄露" class="headerlink" title="敏感数据泄露"></a>敏感数据泄露</h4><p>应用描述：攻击者不直接攻击密码，而是在传输过程中获取密钥，窃取数据等</p><p>常见的问题是不对敏感信息加密。在数据加密过程中，常见的问题是不安全的密钥生成管理，及使用弱加密算法等。</p><p>应用程序脆弱吗？</p><ul><li>在数据传输过程中是否使用明文传输，验证所有内部通信。</li><li>当数据被长期存储时，无论存在哪，是否被加密，包含备份</li><li>无论默认条件还是源代码中，是否还在使用任何脆弱的加密算法。</li><li>是否强制加密敏感数据。</li></ul><p>如何防止：</p><ul><li>对系统处理，存储或传输的数据分类，并进行访问控制</li><li>没必要保存的敏感数据，尽快删除</li><li>确保敏感数据加密，使用了最新的及加密算法</li><li>禁止缓存对包含敏感数据的响应</li></ul><h2 id="漏洞利用与发现"><a href="#漏洞利用与发现" class="headerlink" title="漏洞利用与发现"></a>漏洞利用与发现</h2><p>Exploit：</p><ul><li>漏洞利用的详细说明或漏洞利用程序，可以使软件，数据块等</li></ul><p>PayLoad：</p><ul><li>触发漏洞完成攻击的装载执行</li></ul><p>Shellcode：</p><ul><li>攻击代码</li></ul><p>Poc：</p><ul><li>漏洞利用机理说明</li></ul><p>Exploit：劫持目标控制权并跳转执行Shellcode</p><p>==漏洞利用过程==</p><ul><li>定位溢出点</li><li>编写Shellcode</li><li>修改/覆盖溢出点，执行Shellcode</li></ul><p>修改有以下分类：</p><ul><li>修改内存变量：影响程序执行的重要标志变量</li><li>修改代码逻辑：修改重要函数的关键逻辑</li><li>修改函数返回地址：调用Shellcode</li><li>攻击异常处理机制：SEH,FVEH</li><li>修改函数入口地址</li></ul><p>Shellcode典型功能：</p><ul><li>连接：正向反向连接</li><li>下载文件，执行代码</li><li>生成并运行</li></ul><p>漏洞挖掘技术：</p><ul><li><p>静态分析：不运行软件，通过对目标程序语法语义分析软件安全漏洞</p><ul><li>重点检查函数调用，返回状态，输入，缓冲区操作</li></ul></li><li><p>基于源代码：不安全的：文件结构，命名规则，堆栈指针</p><ul><li>基于反汇编：程序–》脚本语言</li></ul></li><li><p>优点</p><ul><li>不需要了解程序实现，较全面覆盖软件代码</li><li>易集成，自动化程度高</li></ul></li><li><p>局限：无法对潜在漏洞确认</p></li><li><p>动态分析：</p><ul><li>动态加载并运行调试器</li><li>输入追踪测试，堆栈比较</li><li>主要技术：<ul><li>植入：不影响程序语义，关键位置插入代码</li><li>动态切片：动态的数据流和控制流分析方式</li></ul></li><li>优点：<ul><li>运行时分析，准确率高</li><li>有针对检查，能确定相关模块表现</li></ul></li><li>局限：<ul><li>不容易找到分析点，效率不高</li><li>要求高，难以自动化</li></ul></li></ul></li><li><p>Fuzzing技术：黑盒模糊性测试，不关注软件功能业务和逻辑流程，重点关注软件健壮性。基于缺陷注入自动化测试，输入半随机数据，检测程序运行，记录并进一步分析程序发送的异常</p><ul><li>优点：不对源代码和二进制代码分析，自动化程度高，且发现的漏洞真正存在</li><li>缺点：不能发现访问控制漏洞，逻辑缺陷等</li><li>模糊测试过程：<ul><li>识别目标，识别输入，测试用例，异常监视，漏洞确认</li></ul></li><li>测试用例生成技术：<ul><li>预先输出测试用例：研究目标软件输入数据规约，依据知识生成用例</li><li>随机生成测试用例：生成随机数据，输入目标软件使其崩溃或异常</li><li>自动协议生成：研究目标软件输入数据规约，创建描述协议规约的方法，依据方法，修改数据，生成用例</li></ul></li></ul></li><li><p>Fuzzing技术：</p><ul><li>提高测试数据有效性，基于知识发现，了解目标软件所使用的文件格式，协议等，生成满足规约关系的测试数据</li><li>提高数据畸形度：简单变异技术和智能变异技术，</li><li>提高模糊测试的自动化程度</li></ul></li><li><p>二进制逆向分析：</p><ul><li>二进制代码–&gt;汇编或中间代码</li><li>一般方式：程序流程或数据格式逆向</li><li>分析技术：动态，静态分析，输入追踪测试</li><li>补丁比对：字节变化结构变化等。</li></ul></li></ul><h3 id="恶意软件-1"><a href="#恶意软件-1" class="headerlink" title="恶意软件"></a>恶意软件</h3><p>恶意代码分类：</p><ul><li>计算机病毒：一组能进行自我传播需要用户干预触发执行的破坏性程序代码</li><li>网络蠕虫：一组进行自我传播，不需要用户干预即可触发的破坏性程序代码</li><li>木马：看起来具有正常功能，但实际上隐藏很多用户不希望功能的程序，通常由控制端和被控制端组成。</li></ul><h4 id="计算机病毒"><a href="#计算机病毒" class="headerlink" title="计算机病毒"></a>计算机病毒</h4><p>传染性：修改别的程序将自身复制品传导到其他无毒对象上</p><p>破坏性：可能导致程序无法运行，删除计算机内文件</p><p>潜伏性：依附其他媒体寄生，到条件成熟才发作</p><p>==什么叫感染：==</p><p>在不影响目标程序正常功能的前提下使其具有病毒自己的功能即感染模块，触发模块，破坏模块</p><p>==什么是PE病毒==</p><p>​    以windowsPE程序为载体，寄生于PE文件，或windows系统的病毒程序</p><h5 id="传统文件感染病毒"><a href="#传统文件感染病毒" class="headerlink" title="传统文件感染病毒"></a>传统文件感染病毒</h5><p><img src="/../../../leetcode%E5%8A%A8%E5%9B%BE/%E6%96%87%E4%BB%B6%E7%97%85%E6%AF%92.png" alt="文件病毒"></p><ul><li>优点：被感染后的程序主体依然是目标程序，隐蔽性好</li><li>缺点：对病毒代码编写要求高，难以成功感染自校验程序</li></ul><h6 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h6><p>技术一：病毒重定位：</p><p>为什么需要重定位：程序编译后某些变量地址已经以二进制代码固定</p><p>重定位本质：修改实际地址与预期地址差异</p><p>解决方案：病毒运行过程中自我重定位</p><p>技术二：API函数地址自获取：</p><p>如何获取API函数地址：</p><ol><li>DLL文件引出函数节</li><li>kernel32.dll文件</li></ol><p>如何获取kernel32.dll中的API函数地址？</p><ol><li>获得kernel32.dll模块加载基地址</li><li>通过kernel32.dll引出目录表结构定位具体函数地址</li></ol><p>如何获取kernel32.dll模块基地址？</p><p>定位kernel32模块中任何一个地址，然后按照模块首地址特征，向低地址遍历定位PE文件头</p><p>引出函数节定位函数地址：</p><ol><li>通过函数名称查找函数地址</li></ol><p>技术三：目标程序遍历搜索：</p><p>通常以PE文件格式的的文件为感染目标，对目标搜索时，调用API</p><p>技术四：感染模块：</p><p>文件感染：</p><p>感染的关键：1. 病毒代码能够执行，在合适位置插入病毒，控制权交给病毒；2. 程序正常功能不被破坏。</p><p>添加新节点感染方式:</p><ol><li>判断文件开始两字节是否为MZ</li><li>判断PE文件标记</li><li>判断感染标记</li><li>获得目录个数</li><li>得到节表起始位置和最后节表末尾偏移</li><li>写入节表和病毒节</li><li>修正文件信息</li></ol><p>系统感染型：</p><ol><li>如何再次获得控制权：自启动</li><li>如何传播：可移动存储介质，网络共享，电子邮件</li></ol><p>熊猫烧香：</p><p>自启动方式：将自身拷贝至系统目录，修改注册表将自身设置为开机启动</p><p>感染与传播：感染可执行文件，搜索系统特定目录的可执行文件，将自身捆绑同时查找网页文件1插入代码；通过弱口令传播，访问局域网内共享文件夹，将病毒拷贝至此</p><p>自我隐藏：禁用安全软件，关闭进程，</p><p>破坏功能：开线程下载ddos程序发动恶意攻击，同时删除文件</p><h5 id="宏病毒"><a href="#宏病毒" class="headerlink" title="宏病毒"></a>宏病毒</h5><p>存在于数据文件中，使用宏语言编写，利用宏语言功能寄生其他数据文件</p><p>宏病毒传播：单个office文档-office模板，多个office文档</p><p>宏病毒的自我保护：</p><ul><li>禁止提示信息</li><li>屏蔽命令菜单</li><li>隐藏真实代码</li></ul><p>VBS病毒：使用VBScript编写，进行自我传播的破坏性程序，需要人工干预</p><p>VBS如何感染：自我复制感染文件，病毒中大部分代码可以直接附加在同类程序中</p><p>VBS自我保护：</p><ul><li>自变换与加密</li><li>巧用Execute函数</li><li>改变某些对象声明方法</li><li>尝试关闭反病毒软件</li></ul><h4 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h4><p>通过欺骗方式安装，在用户计算机中隐蔽运行，进行信息窃取，远程控制等破坏功能</p><p>远程控制型木马，信息获取型木马，破坏型木马</p><p>木马植入方式</p><ul><li>网页挂马植入：自动下载安装</li><li>电子邮件植入：附件形式</li><li>文档捆绑植入</li><li>U盘植入等</li></ul><p>木马结构：木马配置程序，控制端和被控制端</p><p>木马常见功能：</p><ul><li>文件管理：获取目标文件系统信息</li><li>进程管理：查看或暂停系统进程</li><li>服务管理：查看并管理目标系统服务</li><li>屏幕控制与截取</li><li>语音视频截获</li><li>远程Shell</li></ul><p>如何检测木马：静态文件特征，系统行为特征</p><p>软件著作权：</p><p>基本原则：创意和表达分离，保护创意的表达，不保护创意本身</p><p>保护对象：保护计算机程序，相关文档，不保护思想，概念发现等</p><p>软件专利权：</p><p>通过申请专利对软件的设计思想进行保护，而非对软件本身保护</p><p>著作权保护形式，专利保护内容</p><p>软件商业秘密权：</p><p>不为公众知悉，能为拥有者带来经济利益或竞争优势，并为拥有者采取保密措施的计算机软件或其他非专利成果</p><p>对象：源程序清单，开发计划等</p><p>软件商标权：Logo，图案，文字</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络是怎样连接的读书笔记（一）</title>
      <link href="/2021/11/12/wang-luo-shi-zen-yang-lian-jie-de-du-shu-bi-ji-yi/"/>
      <url>/2021/11/12/wang-luo-shi-zen-yang-lian-jie-de-du-shu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络复习笔记（一）</title>
      <link href="/2021/11/12/ji-suan-ji-wang-luo-fu-xi-bi-ji-yi/"/>
      <url>/2021/11/12/ji-suan-ji-wang-luo-fu-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（二）虚拟化：进程及API</title>
      <link href="/2021/11/12/cao-zuo-xi-tong-dao-lun-bi-ji-er-xu-ni-hua-jin-cheng-qie-huan-ji-api/"/>
      <url>/2021/11/12/cao-zuo-xi-tong-dao-lun-bi-ji-er-xu-ni-hua-jin-cheng-qie-huan-ji-api/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象：进程"><a href="#抽象：进程" class="headerlink" title="抽象：进程"></a>抽象：进程</h1><p>进程的非正式定义很简单：即运行中的程序，程序本身是没有生命周期的，知识存在磁盘上的指令，操作系统将这些字节运行起来，让程序发挥作用。</p><p>要让操作系统能同时运行多个程序我们的挑战是如何提供有许多CPU的假象？</p><p>操作系统通过虚拟化CPU，通过让一个进程只运行一个时间片，然后切换到其他进程，这就是时分共享技术，允许用户运行多个CPU，潜在开销是CPU共享，每个进程运行会慢一点。</p><p>那自然会引出多个程序运行时该选择那个程序先运行的问题。==调度策略==会做出决定。</p><h2 id="进程的构成"><a href="#进程的构成" class="headerlink" title="进程的构成"></a>进程的构成</h2><p>要理解进程构成就必须理解机器状态。</p><ul><li>进程的机器状态有一个明显的组成部分，即内存，指令在内存中，程序读取和写入的数据也在内存中，因此进程可以访问的内存也是进程的组成部分</li><li>机器状态的另一部分是寄存器，许多指令明确的读取或更新寄存器</li><li>特殊的寄存器也构成了机器状态的一部分，例如程序计数器PC，指示即将执行哪条指令，栈指针，帧指针等。</li></ul><h2 id="进程创建细节"><a href="#进程创建细节" class="headerlink" title="进程创建细节"></a>进程创建细节</h2><p>运行程序首先要将代码和静态数据加载进内存，加载到进程的地址空间。</p><p>早期操作系统中加载过程尽早完成，现代操作系统惰性加载，即尽在程序运行期间需要加载的代码或数据片段才会加载。</p><p>将代码和静态数据加载进内存后还需为程序运行时栈分配内存，栈用来存放局部变量，函数参数和返回地址。操作系统也可能会用参数来初始化栈，将参数填入main()，即argc，argv</p><p>操作系统也会为程序的堆分配内存，堆用于显示请求的动态数据分配。例如利用malloc（）</p><p>操作系统还将执行其他初始化任务，特别是输入输出，例如在Unix中默认情况下每个进程都有三个打开的文件描述符用于标准输入，输出，错误。</p><p>最后os为执行程序搭好了舞台，最后跳转到main例程，将CPU控制权交给新的进程。</p><h2 id="进程API"><a href="#进程API" class="headerlink" title="进程API"></a>进程API</h2><p>本部分将讲解一些关于进程的系统调用</p><h3 id="fork系统调用"><a href="#fork系统调用" class="headerlink" title="fork系统调用"></a>fork系统调用</h3><p>fork用于创建新进程</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"helloworld %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rc<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rc<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello i am child%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello i am parent%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fork调用新创建的进程几乎与调用进程完全一样，这时有两个完全一样的进程在运行（可能共享内存），并且都从fork（）系统调用返回，新创建的进程叫子进程，原来的进程是父进程，子进程不会从main开始执行，直接从fork（）处返回。</p><p>子进程并不是完全拷贝父进程，它拥有自己的私有内存，寄存器，程序计数器等，但它从fork返回的值不同，父进程返回的是子进程的pid，子进程返回0,。同时还会涉及到cpu调度问题，决定哪个进程先执行。</p><h3 id="wait系统调用"><a href="#wait系统调用" class="headerlink" title="wait系统调用"></a>wait系统调用</h3><p>父进程调用wait，延迟自己的执行，知道子进程执行完毕，当子进程执行完毕后，wait才返回父进程。</p><h3 id="exec系统调用"><a href="#exec系统调用" class="headerlink" title="exec系统调用"></a>exec系统调用</h3><p>fork调用只是在你想运行相同程序拷贝时有用，但当想运行不同程序时，exec族便可做这些事。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"helloworld %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rc<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rc<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello i am child%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>myargs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        myargs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">strdup</span><span class="token punctuation">(</span><span class="token string">"wc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myargs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">strdup</span><span class="token punctuation">(</span><span class="token string">"p3.c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myargs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">execvp</span><span class="token punctuation">(</span>myargs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>myargs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> wc<span class="token operator">=</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello i am parent%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给定可执行程序的名称（如wc），和需要的参数（p3.c）exec会从可执行程序加载代码和静态数据，用它覆写自己的代码段，堆，栈及其他内存空间会被重新初始化，然后操作系统就执行改程序，将参数通过argv传递给该进程，它并没有创建新的进程，而是直接将当前进程转为另一个运行程序。</p><h1 id="机制-受限直接执行"><a href="#机制-受限直接执行" class="headerlink" title="机制:受限直接执行"></a>机制:受限直接执行</h1><p>构建虚拟化机制时存在挑战，第一是性能，第二是控制权。</p><h2 id="直接执行"><a href="#直接执行" class="headerlink" title="直接执行"></a>直接执行</h2><p>为了使程序尽快运行，只需使其在cpu上直接执行。当os希望程序启动时，其在进程列表中创建一个进程条目，为其分配内存，将程序代码和数据加载进内存，找到main，跳转到那里，开始运行用户的代码。执行完后再返回到内核。</p><p><img src="https://i.loli.net/2021/11/12/suqLKJUl45ZnfbG.jpg" alt="直接运行.jpg"></p><p>但这种协议存在问题：</p><ul><li>如何确保程序不做任何我们不希望他做的事呢？</li><li>当运行进程时操作系统如何让它停止并切换到另一个进程，从而实现时分共享呢？</li></ul><h2 id="受限制运行"><a href="#受限制运行" class="headerlink" title="受限制运行"></a>受限制运行</h2><p>基于上述问题，我们提出另一种协议</p><p>直接执行优点是快速，但如果进程希望执行某种受限操作，如磁盘发出I/O请求获取更多系统资源怎么办？</p><p>对于I/O或其他相关操作，一种方法是让所有进程直接执行任何事情，但这样做明显很不安全，因此我们引入==用户模式和内核模式==。</p><ul><li>在用户模式下运行的代码受到限制，其不能发出I/O请求或其他受限操作，否则会引发异常，从而终止程序。</li><li>在内核模式下，操作系统就以这种模式运行，在此模式下，代码可以做任何事情，包括特权操作，如发出I/O请求。</li></ul><p>基于此我们如何实现用户模式和内核模式的切换呢？</p><p>提供系统调用！几乎所有现代硬件都提供用户程序执行系统调用的能力，他允许内核小心地暴露某些关键功能，如访问文件系统，创建销毁进程分配内存等。</p><p>要执行系统调用，程序必须执行陷阱指令，该指令使得陷入内核并将特权级别提升为内核模式，此时系统可以执行任何特权操作，执行完系统调用后，操作系统执行一个特殊的从陷阱返回的指令，回到用户模式，将特权级别降为用户模式。</p><p>你可能会感觉切换是不是太简单了，实际上要完成切换，必须确保储存足够的调用者寄存器以便在操作系统发出陷阱返回指令时能正确返回。例如在x86上处理器会将程序计数器，标志和其他寄存器推入每个进程的内核栈，返回陷阱时从栈中弹出这些值来恢复寄存器和程序计数器等的值。</p><p>除此之外我们还有一个细节没讨论：当执行陷阱指令进入内核模式后，操作系统如何知道此时该执行的代码在什么地方。显然这不能由用户程序直接指定要跳转的地址，这很危险，这样做程序可以跳转到任意位置。因此我们通过设置陷阱表来实现。</p><p>在内核启动时，初始化陷阱表，即在内核模式下告诉硬件发生某些异常事件时该运行哪些代码，如当发生硬盘中断时，该运行哪里的代码。操作系统通常通过特殊指令通知硬件陷阱处理程序的位置。一旦硬件被通知，它们就会记住这些处理程序的位置，直到下一次重新启动。</p><p>下图在时间线内总结了该协议，我们假设每个进程有一个内核栈，在进入内核和离开内核时，寄存器和程序计数器等被保存和恢复。</p><img src="https://i.loli.net/2021/11/12/bar5jF1O3EAi2Q8.jpg" alt="受限运行.jpg" style="zoom:80%;"><ul><li>第一个阶段：内核初始化陷阱表，CPU记住它们的位置以供随后使用。内核通过特权指令执行此操作</li><li>第二个阶段：在执行陷阱返回指令时，内核会设置一些内容，如在进程列表中创建条目，分配内存，从而CPU切换到用户模式并开始运行该进程。当进程发出系统调用时重新陷入内核，然后再次从陷阱返回用户模式。</li></ul><p>但你是否注意到上述协议只适合运行单个进程，当需要运行多个进程时我们该如何实现进程之间的切换呢？在思考这个问题之前我们需明白一个事实即：CPU在执行进程时，操作系统是没有运行的，那他怎么做事情例如调度进程呢？</p><h2 id="在进程之间切换"><a href="#在进程之间切换" class="headerlink" title="在进程之间切换"></a>在进程之间切换</h2><p>此处我们要解决的关键问题是如何让操作系统有效地获取CPU控制权？</p><h3 id="协作方式：等待系统调用"><a href="#协作方式：等待系统调用" class="headerlink" title="协作方式：等待系统调用"></a>协作方式：等待系统调用</h3><p>大多数进程通过系统调用将CPU控制权返回给操作系统，以这种方式运行的系统通常包含一个显示的<code>yield</code>系统调用，他什么都不干，只是将控制权交给操作系统。</p><p>如果程序执行了某些非法操作，也会将控制权移交给操作系统，如除数为0，或访问无法访问的内存。但你是否想过会有这种流氓程序：他进入无限循环，且从不进行系统调用，那操作系统该如何获得控制权呢？</p><h3 id="非协作方式：操作系统进行控制"><a href="#非协作方式：操作系统进行控制" class="headerlink" title="非协作方式：操作系统进行控制"></a>非协作方式：操作系统进行控制</h3><p>事实证明，没有硬件的帮助，如果进程不进行系统调用，操作系统将无法获得控制权，那他就不能做任何事。</p><p>因此我们提供一种时钟中断机制，来定时产生中断，此时正在运行的进程停止运行，操作系统中预先设置的中断处理程序运行，操作系统获得CPU控制权，做他想做的事。</p><p>和之前的受限运行协议一样，操作系统也需要通知硬件在发生时钟中断时该运行哪些代码，因此在启动时，操作系统还需做这步操作。其次在启动操作系统时也必须启动时钟，一旦启动时钟，操作系统最终总会得到控制权。这是并发的核心。</p><h3 id="保存和恢复上下文"><a href="#保存和恢复上下文" class="headerlink" title="保存和恢复上下文"></a>保存和恢复上下文</h3><p>既然操作系统已经获得控制权，此时必须决定是继续执行正在运行的程序，还是切换进程执行，这个决定由调度程序做出。</p><p>如果决定切换，OS会执行一些底层代码，即上下文切换：操作系统要做的是为当前正在执行的进程保存一些寄存器的值，例如保存到它的内核栈，并为即将执行的进程恢复一些寄存器的值，从他的内核栈，这就可以确保在执行返回陷阱指令时，是返回到即将执行的进程，而不是上一个进程。</p><p>具体来说就是：为保存进程的上下文，操作系统会执行一些底层汇编代码，保存通用寄存器，程序计数器以及当前正在执行进程的内核栈指针，然后从另一个进程结构中恢复寄存器，程序计数器，并切换内核栈，供即将运行的程序使用。通过切换栈，内核在执行切换代码调用时是一个进程的上下文，在返回时，是另一个进程的上下文。</p><p>下图展示了整个过程的时间线，在这个例子中，进程A在运行，然后被中断时钟中断，硬件保存进程A的用户寄存器，程序计数器到内核栈中，进入内核，执行中断处理程序。在中断处理程序中，操作系统决定切换进程执行，此时调用switch例程，该例程仔细保存当前内核寄存器的值到进程A的进程结构，然后从b的进程结构恢复进程b的内核寄存器，最后通过陷阱返回，从内核栈恢复寄进程B的用户寄存器，跳到B的程序计数器，执行B。</p><p><img src="https://i.loli.net/2021/11/12/JSidW7uBs3LeE6A.jpg" alt="中断.jpg"></p><p>注意在此协议中，有两种类型的寄存器被保存/恢复，第一种是执行时钟中断时运行进程的用户寄存器由硬件隐式保存，使用该进程的内核栈；第二种是当操作系统决定从A切换到B时，进程A的内核寄存器被显示地保存在该进程的进程结构中。</p><h1 id="面试题：进程切换时是如何保存上下文的？"><a href="#面试题：进程切换时是如何保存上下文的？" class="headerlink" title="面试题：进程切换时是如何保存上下文的？"></a>面试题：进程切换时是如何保存上下文的？</h1><p>这个问题首先要说一下进程是如何运行的，运行一个线程有两种选择即直接运行或受限运行，很明显，直接运行很不安全，于是我们引入用户模式和内核模式使进程受限运行。在用户模式下进程不能执行一些特权操作如磁盘IO等，在内核模式下可以进行任何特权操作。此时如果进程想要进行一些IO操作怎么办呢？我们提供了系统调用，当用户进程想要进行一些特权操作时通过系统调用陷入内核模式，特权级别提升，于是系统执行磁盘IO执行完成之后从陷阱返回指令返回，要想正确的返回，就必须保存足够的调用者寄存器，程序计数器以便返回。通常每个进程都有一个内核栈，当进入内核模式时，将相关寄存器和程序计数器的值压入内核栈，当cpu返回用户模式时则从栈中恢复这些值。那当进入内核模式时硬件得知道执行哪里的代码，于是内核模式下启动时操作系统会初始化陷阱表，来告诉硬件发生某些异常事件时该执行哪里的代码，于是协议可以概括为，内核模式下启动，设置陷阱表，进程列表上创建进程条目，为进程分配内存，加载代码，初始化栈堆等，跳转到main例程，当执行系统调用时，将寄存器值，程序计数器等压入内核栈，跳转到硬件处理程序，操作系统完成操作，调用陷阱返回指令，从内核栈中弹出相关寄存器值，跳到下一个程序计数器，然后main执行完毕，释放内存。</p><p>这是一个进程运行的情况，单cpu下，进程运行时，操作系统是没有运行的，那如何让操作系统重新获得控制权呢？以前是进程通过系统调用进入内核模式，但可能存在流氓程序，于是只能单独设置时钟中断程序，同理，当发生中断时，得让时钟知道执行哪里的代码，即中断处理程序，故也得在启动时通知时钟。通过时钟我们保证了操作系统定能获得控制权，那获得了控制权就该作出决定了，继续执行当前进程还是切换进程，如果是切换进程，则将当前进程用户寄存器，程序计数器，内核栈指针压入内核栈，转向内核模式，执行switch例程，此时再将当前进程的内核寄存器保存到进程结构中，同时从另一个进程结构中恢复他的寄存器，从陷阱返回，在从他的内核栈中弹出值，恢复相关用户寄存器，程序计数器，然后执行另一个进程，至此就完成了进程切换。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论读书笔记（一）附面试题整理</title>
      <link href="/2021/11/11/cao-zuo-xi-tong-dao-lun-du-shu-bi-ji-yi-fu-mian-shi-ti-zheng-li/"/>
      <url>/2021/11/11/cao-zuo-xi-tong-dao-lun-du-shu-bi-ji-yi-fu-mian-shi-ti-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 本系列将记录本人学习阅读《操作系统导论》这本书时的一些感受和学到的新知识。</p><hr><h1 id="操作系统介绍"><a href="#操作系统介绍" class="headerlink" title="操作系统介绍"></a>操作系统介绍</h1><p>操作系统的三个核心思想便是：虚拟化，并发，持久性，在学习操作系统时必须要深刻理解这三个概念在操作系统设计中的体现。</p><h2 id="由程序运行过程引入"><a href="#由程序运行过程引入" class="headerlink" title="由程序运行过程引入"></a>由程序运行过程引入</h2><p>程序在运行时会发生什么？非常简单，处理器从内存中读取一条指令，进行解码，然后执行，例如两数相加，访问内存，跳转函数等，但随着软件的发展，我们为了让系统更易于使用，我们希望在运行一个程序的同时，其他事情也能同步进行，于是被我们称为操作系统的软件应运而生。他能让程序共享内存，程序与设备交互，甚至同时运行多个程序，那我们开始思考，他是怎么实现的呢？</p><h3 id="虚拟化CPU"><a href="#虚拟化CPU" class="headerlink" title="虚拟化CPU"></a>虚拟化CPU</h3><p>事实证明，在硬件帮助下，操作系统将但个CPU转换成看似无限数量的CPU，让多个程序看似同时运行。</p><h3 id="虚拟化内存"><a href="#虚拟化内存" class="headerlink" title="虚拟化内存"></a>虚拟化内存</h3><p>每个进程访问自己的私有虚拟地址空间，操作系统以某种方式映射到机器的物理内存上，一个运行的程序的内存不会影响其他进程的地址空间。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>事实证明，在并发程序中会出现一些奇怪的问题，这些问题与指令如何执行有关，例如加值：需要三条指令，将值从内存加载进寄存器，再递增，在将其保存回内存。这不是以原子方式执行，所有奇怪的事情会发生。</p><h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中ResourceBundle类使用</title>
      <link href="/2021/11/11/java-zhong-resourcebundle-lei-shi-yong/"/>
      <url>/2021/11/11/java-zhong-resourcebundle-lei-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/mupengfei6688/article/details/79060014">(150条消息) JAVA中ResourceBundle使用详解_OovEver的专栏-CSDN博客_resourcebundle</a></p><p><a href="https://blog.csdn.net/Afflatus_f/article/details/97814026">(150条消息) Redis连接池工具类并加载配置文件以及测试_狗凡的博客-CSDN博客</a></p><p><a href="https://www.w3cschool.cn/intellij_idea_doc/intellij_idea_doc-zpft2er5.html">使用ResourceBundle_w3cschool</a></p><p><a href="https://jishuin.proginn.com/p/763bfbd286cc">java.util.ResourceBundle用法详解-技术圈 (proginn.com)</a></p><p><a href="https://www.w3cschool.cn/intellij_idea_doc/intellij_idea_doc-zpft2er5.html">使用ResourceBundle_w3cschool</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap七大遍历方式</title>
      <link href="/2021/11/11/hashmap-qi-da-bian-li-fang-shi/"/>
      <url>/2021/11/11/hashmap-qi-da-bian-li-fang-shi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1623343">HashMap 的 7 种遍历方式与性能分析！(强烈推荐) - 云+社区 - 腾讯云 (tencent.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jedis使用教程</title>
      <link href="/2021/11/08/jedis-shi-yong-jiao-cheng/"/>
      <url>/2021/11/08/jedis-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/a1038eed6d44">https://www.jianshu.com/p/a1038eed6d44</a></p><p><a href="https://blog.csdn.net/top_code/article/details/51292240">https://blog.csdn.net/top_code/article/details/51292240</a></p><p><a href="https://tool.oschina.net/uploads/apidocs/">https://tool.oschina.net/uploads/apidocs/</a></p><p><a href="https://blog.csdn.net/CYY941027/article/details/109110455">https://blog.csdn.net/CYY941027/article/details/109110455</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Type接口</title>
      <link href="/2021/11/08/java-zhong-de-type-jie-kou/"/>
      <url>/2021/11/08/java-zhong-de-type-jie-kou/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/linghu-java/p/8067886.html">Java中的Type - linghu_java - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中json转换--&gt;Gson工具包的使用</title>
      <link href="/2021/11/07/java-yu-json-zhuan-huan-gson-gong-ju-bao-de-shi-yong/"/>
      <url>/2021/11/07/java-yu-json-zhuan-huan-gson-gong-ju-bao-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yiguang_820/article/details/105930458">(145条消息) gson.jar包免费下载_yiguang_820的博客-CSDN博客_gson jar包</a></p><p><a href="https://blog.csdn.net/zhuwukai/article/details/82884419">(145条消息) Gson的介绍和使用_zhuwukai的博客-CSDN博客_gson使用</a></p><p><a href="https://www.cnblogs.com/yixiu868/p/8401938.html">Java创建和解析Json数据方法（五）——Google Gson包的使用 - yixiu868 - 博客园 (cnblogs.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1662930">https://cloud.tencent.com/developer/article/1662930</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java网盘项目总结</title>
      <link href="/2021/11/07/java-wang-pan-xiang-mu-zong-jie/"/>
      <url>/2021/11/07/java-wang-pan-xiang-mu-zong-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中代码块，静态代码快，构造代码块等的执行顺序</title>
      <link href="/2021/11/07/java-zhong-dai-ma-kuai-jing-tai-dai-ma-kuai-gou-zao-dai-ma-kuai-deng-de-zhi-xing-shun-xu/"/>
      <url>/2021/11/07/java-zhong-dai-ma-kuai-jing-tai-dai-ma-kuai-gou-zao-dai-ma-kuai-deng-de-zhi-xing-shun-xu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：java中Static静态代码快，构造代码块，普通代码块，构造函数的执行顺序本篇博客将带大家一起探究</p></blockquote><h2 id="代码块的分类"><a href="#代码块的分类" class="headerlink" title="代码块的分类"></a>代码块的分类</h2><p>基本上代码块分为三种，<em>静态代码快</em>，<em>构造代码块</em>，<em>普通代码块</em></p><p>代码块执行顺序：==静态代码快== —&gt; ==构造代码块== —&gt; ==普通代码块==</p><p>继承中代码块执行顺序：==父类静态代码快== —&gt; ==子类静态代码快== —&gt; ==父类构造代码块== —&gt;==父类构造器== —&gt; ==子类构造代码块== —&gt; ==子类构造器==</p><h3 id="静态代码快"><a href="#静态代码快" class="headerlink" title="静态代码快"></a>静态代码快</h3><p>Java静态代码块中的代码会在类加载JVM时运行，且只被执行一次，即这些代码不需要实例就能被调用，静态代码块常用来执行类属性的初始化。</p><p><strong>关于Static静态代码块的五个小结点</strong></p><ul><li>Java静态代码块中的代码会在类加载JVM时运行，且只被执行一次</li><li>静态块常用来执行类属性的初始化</li><li>静态块优先于各种代码块以及构造函数，如果一个类中有多个静态代码块，会按照书写顺序依次执行</li><li>静态代码块可以定义在类的任何地方中除了方法体中【这里的方法体是任何方法体】</li><li>静态代码块不能访问普通变量</li></ul><h3 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h3><ul><li>构造代码块在创建对象时被调用，每次创建对象都会调用一次</li><li>构造代码块优先于构造函数执行，同时构造代码块的运行依赖于构造函数</li><li><strong>构造代码块在类中定义</strong></li></ul><h3 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h3><ul><li>普通代码块定义在方法体中</li><li>普通代码块与构造代码块的格式一致都是<code>{}</code></li><li>普通代码块与构造代码块唯一能直接看出的区别是<strong>构造代码块是在类中定义的，而普通代码块是在方法体中定义的</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Initializationblock</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> intA<span class="token punctuation">;</span>    <span class="token keyword">int</span> intB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Initializationblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造器00000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Initializationblock</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个参数的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        intA <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        intB <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造初始化块11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造初始化块22222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造初始化块33333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//静态初始化块</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态初始化块01010101"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态初始化块0202020202"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token comment">/* 初始化块一 * 因为静态块是在类的初始化阶段完成的， * 因此在创建某个类的第二个对象时，该类的静态块就不会执行了 *  * 在单个类中，静态初始化块，初始化块，构造器 * 多个类的继承中初始化块、静态初始化块、构造器的执行顺序在继承中，先后执行父类A的静态块，父类B的静态块，最后子类的静态块，然后再执行父类A的非静态块和构造器，然后是B类的非静态块和构造器，最后执行子类的非静态块和构造器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Initializationblock</span> initializationblock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Initializationblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initializationblock<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多打印几个对象的目的是：好看出Static静态代码块只执行一次！！！</span>        <span class="token class-name">Initializationblock</span> initializationblock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Initializationblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//因为静态块是在类的初始化阶段完成的，因此在创建某个类的第二个对象时，该类的静态块就不会执行了</span>        initializationblock2<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Initializationblock</span> initializationblock3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Initializationblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initializationblock3<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">静态初始化块<span class="token number">01010101</span>静态初始化块<span class="token number">0202020202</span>构造初始化块<span class="token number">11111</span>构造初始化块<span class="token number">22222</span>构造初始化块<span class="token number">33333</span>无参构造器<span class="token number">00000000</span>普通初始化块<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>构造初始化块<span class="token number">11111</span>构造初始化块<span class="token number">22222</span>构造初始化块<span class="token number">33333</span>无参构造器<span class="token number">00000000</span>普通初始化块构造初始化块<span class="token number">11111</span>构造初始化块<span class="token number">22222</span>构造初始化块<span class="token number">33333</span>无参构造器<span class="token number">00000000</span>普通初始化块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得出结论：执行顺序 <strong>静态代码块 &gt; 构造代码块 &gt; 构造函数 &gt; 普通代码块</strong></p><h2 id="继承中各代码块的执行顺序"><a href="#继承中各代码块的执行顺序" class="headerlink" title="继承中各代码块的执行顺序"></a>继承中各代码块的执行顺序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseOne</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">BaseOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseOne构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseOne初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseOne静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseTwo</span> <span class="token keyword">extends</span> <span class="token class-name">BaseOne</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">BaseTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseTwo构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseTwo初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseTwo静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseThree</span> <span class="token keyword">extends</span> <span class="token class-name">BaseTwo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">BaseThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseThree构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseThree初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseThree静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token comment">/*     注：这里的ABC对应BaseOne、BaseTwo、BaseThree  * 多个类的继承中初始化块、静态初始化块、构造器的执行顺序     在继承中，先后执行父类A的静态块，父类B的静态块，最后子类的静态块，     然后再执行父类A的非静态块和构造器，然后是B类的非静态块和构造器，最后执行子类的非静态块和构造器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BaseThree</span> baseThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BaseThree</span> baseThree2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BaseOne</span>静态初始化块<span class="token class-name">BaseTwo</span>静态初始化块<span class="token class-name">BaseThree</span>静态初始化块<span class="token class-name">BaseOne</span>初始化块<span class="token class-name">BaseOne</span>构造器<span class="token class-name">BaseTwo</span>初始化块<span class="token class-name">BaseTwo</span>构造器<span class="token class-name">BaseThree</span>初始化块<span class="token class-name">BaseThree</span>构造器<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">BaseOne</span>初始化块<span class="token class-name">BaseOne</span>构造器<span class="token class-name">BaseTwo</span>初始化块<span class="token class-name">BaseTwo</span>构造器<span class="token class-name">BaseThree</span>初始化块<span class="token class-name">BaseThree</span>构造器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个类的继承中初始化块、静态初始化块、构造器的执行顺序为：先后执行父类A的静态块，父类B的静态块，最后子类的静态块，然后再执行父类A的非静态块和构造器，然后是B类的非静态块和构造器，最后执行子类的非静态块和构造器【注：这里的ABC对应BaseOne、BaseTwo、BaseThree 】</p><p>结论：多个类的继承中初始化块、静态初始化块、构造器的执行顺序为：父类静态块——&gt;子类静态块——&gt;父类代码块——&gt;父类构造器——&gt;子类代码块——&gt;子类构造器</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中的正则表达式</title>
      <link href="/2021/11/07/java-zhong-de-zheng-ze-biao-da-shi/"/>
      <url>/2021/11/07/java-zhong-de-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.w3cschool.cn/java/java-regex-character-classes.html">Java 正则表达式元字符_w3cschool</a></p><p><a href="https://cn.bing.com/search?q=java%E4%B8%ADMatche%E5%BA%95%E5%B1%82%E5%8C%B9%E9%85%8D%E6%9C%BA%E5%88%B6r&amp;qs=n&amp;form=QBRE&amp;sp=-1&amp;pq=java%E4%B8%ADmatche%E5%BA%95%E5%B1%82%E5%8C%B9%E9%85%8Djizhir&amp;sc=0-21&amp;sk=&amp;cvid=B49BD899CAF1463B97E363E4CC0EE1B7">java中Matche底层匹配机制r - 搜索 (bing.com)</a></p><p><a href="https://blog.csdn.net/lxcnn">(156条消息) 雁过无痕_-过客-_CSDN博客-正则基础,.NET正则,Javascript正则领域博主</a></p><p><a href="https://www.yiibai.com/java/java_regular_expressions.html">Java正则表达式 - Java教程™ (yiibai.com)</a></p><p><a href="https://blog.csdn.net/weixin_43860260/article/details/91417485">(156条消息) Java 正则表达式的用法和实例_Lemon-CSDN博客_java 正则表达式</a></p><p><a href="https://www.yiibai.com/java/java_regular_expressions.html">Java正则表达式 - Java教程™ (yiibai.com)</a></p><p>1.正则在线测试网站：<a href="https://regexr-cn.com/">https://regexr-cn.com/</a><br>2.正则练习：<a href="https://codejiaonang.com/">https://codejiaonang.com/</a></p><h1 id="Java中正则表达式相关API介绍"><a href="#Java中正则表达式相关API介绍" class="headerlink" title="Java中正则表达式相关API介绍"></a>Java中正则表达式相关API介绍</h1><p>利用正则表达式通常会有以下形式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token class-name">RegExp</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">Pattern</span> pattern<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">RegExp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Matcher</span> matcher<span class="token operator">=</span>pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sout<span class="token punctuation">.</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看这个例子：</p><p><img src="https://i.loli.net/2021/11/16/EvURYnGDtaOr47m.png" alt="RegExp1.png"></p><p>当RegExp只有一个分组时：</p><p><code>matcher.find()</code>完成的任务：</p><ol><li>根据指定的规则，定位满足的子字符串如（1998）</li><li>找到后，将子字符串开始的索引记录到matcher对象的group数组中<ol><li><code>group[0]=0</code>,把该子字符串的结束索引+1，记录到<code>group[1]=4</code></li></ol></li><li>同时记录<code>oldLast</code>值记为子字符串的解释+1即为4，下次find时，就从oldLast开始匹配</li></ol><p>group源码如下：</p><p><img src="https://i.loli.net/2021/11/16/byo8qMrOzRAX5lm.png" alt="group.png"></p><p>截取时，根据<code>group[0]=0</code>,和<code>group[1]=4</code>从content截取</p><p>再次找到时将<code>group[0]和group[1]</code>刷新，记录新的匹配串。</p><p>当RegExp有分组时，即有括号时：</p><p>例如<code>(\\d\\d)(\\d\\d)</code></p><ol><li><p>根据指定的规则，定位满足的子字符串如（1998）</p></li><li><p>找到后，将子字符串开始的索引记录到matcher对象的group数组中</p><ol><li>总的子字符串<code>group[0]=0</code>,<code>group[1]=4</code>，</li><li>第一组字符串：<code>group[2]=0</code>，<code>group[3]=2</code>，第二组字符串：<code>group[4]=2</code>，<code>group[5]=4</code></li><li>更多的分组继续往后记</li></ol></li></ol><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><h3 id="字符匹配符"><a href="#字符匹配符" class="headerlink" title="字符匹配符"></a>字符匹配符</h3><p><img src="https://i.loli.net/2021/11/16/n6tCioms4gRTDbO.png" alt="字符匹配符.png"></p><p><img src="https://i.loli.net/2021/11/16/cd9CJSlzra4PT5s.png" alt="字符匹配符2.png"></p><p><img src="https://i.loli.net/2021/11/16/hzLyf6Tsbw8logY.png" alt="case_insentive.png"></p><p><img src="https://i.loli.net/2021/11/16/cE3GKW7q6JoySQO.png" alt="Reg2.png"></p><h3 id="选择匹配符"><a href="#选择匹配符" class="headerlink" title="选择匹配符"></a>选择匹配符</h3><p><img src="https://i.loli.net/2021/11/16/TmLh23OxG7JziCp.png" alt="选择匹配.png"></p><h3 id="正则限定符"><a href="#正则限定符" class="headerlink" title="正则限定符"></a>正则限定符</h3><p><img src="https://i.loli.net/2021/11/16/pgBaoI84Pl3fQiA.png" alt="限定符.png"></p><p><img src="https://i.loli.net/2021/11/16/cueMfsv62QmqHRY.png" alt="限定符2.png"></p><h3 id="正则定位符"><a href="#正则定位符" class="headerlink" title="正则定位符"></a>正则定位符</h3><p><img src="https://i.loli.net/2021/11/16/QUIiLd92gXNbkR8.png" alt="定位符1.png"></p><h3 id="捕获分组"><a href="#捕获分组" class="headerlink" title="捕获分组"></a>捕获分组</h3><p><img src="https://i.loli.net/2021/11/16/316rpGqjxYFyUVI.png" alt="正则分组2.png"></p><p><img src="https://i.loli.net/2021/11/16/71Klw3AYQFdEWG8.png" alt="正则分组1.png"></p><h3 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h3><p><img src="https://i.loli.net/2021/11/19/3nONTwHqCLZdEze.png" alt="非捕获分组1.png"></p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> content<span class="token operator">=</span><span class="token string">"韩顺平教育，韩顺平学习，韩顺平同学"</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"韩顺平(?:教育|学习|同学)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//返回结果：</span>韩顺平教育韩顺平学习韩顺平同学    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> content<span class="token operator">=</span><span class="token string">"韩顺平教育，韩顺平学习，韩顺平同学"</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"韩顺平(?:教育|学习)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//返回结果</span>韩顺平韩顺平<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h3><p><img src="https://i.loli.net/2021/11/19/SAhYVZMs2BDEFL5.png" alt="非贪婪匹配1.png"></p><h3 id="匹配URL"><a href="#匹配URL" class="headerlink" title="匹配URL"></a>匹配URL</h3><p><img src="https://i.loli.net/2021/11/20/4YBvR3G8feOqWI5.png" alt="匹配url.png"></p><h3 id="Matcher类"><a href="#Matcher类" class="headerlink" title="Matcher类"></a>Matcher类</h3><p><img src="https://i.loli.net/2021/11/20/TJjSsYLR1kobfQD.png" alt="matches类.png"></p><p><img src="https://i.loli.net/2021/11/20/KPqr3ugkSVd8CZ7.png" alt="matcher的startend.png"></p><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p><img src="https://i.loli.net/2021/11/20/hI7oAgfdnEyMzlq.png" alt="方向引用.png"></p><p><img src="https://i.loli.net/2021/11/20/d7YnXoTxP86hHKy.png" alt="反向引用案例.png"></p><h4 id="结巴去重案例"><a href="#结巴去重案例" class="headerlink" title="结巴去重案例"></a>结巴去重案例</h4><p><img src="https://i.loli.net/2021/11/20/Zi3uestfkrlWOFJ.png" alt="去重.png"></p><h4 id="String中spilt"><a href="#String中spilt" class="headerlink" title="String中spilt"></a>String中spilt</h4><p><img src="https://i.loli.net/2021/11/22/GkBINs6owydMiuh.png" alt="spilt.png"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://i.loli.net/2021/11/22/J8plCIBv3x7MDTa.png" alt="RegExp练习1.png"></p><p><img src="https://i.loli.net/2021/11/22/wEgCI7TLxfhtnPl.png" alt="answer1.png"></p><p><img src="https://i.loli.net/2021/11/22/WQYkTUis6uj3Ba8.png" alt="exercise2.png"></p><p><img src="https://i.loli.net/2021/11/22/1FY7SnchAJse4Rk.png" alt="answer2.png"></p><p><img src="https://i.loli.net/2021/11/22/DLGQOKrmj26NVoe.png" alt="练习3.png"></p><p><img src="https://i.loli.net/2021/11/22/LqAufQeEY9zdThO.png" alt="answer3.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法详解</title>
      <link href="/2021/11/02/kmp-suan-fa-xiang-jie/"/>
      <url>/2021/11/02/kmp-suan-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>位图bitmap</title>
      <link href="/2021/10/30/wei-tu-bitmap/"/>
      <url>/2021/10/30/wei-tu-bitmap/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u012491646/article/details/103302704#:~:text=%E4%BD%8D%E5%9B%BE%E5%85%B6%E6%9C%AC%E8%B4%A8%E5%B0%B1%E6%98%AF%E5%88%A9%E7%94%A8hash%E5%87%BD%E6%95%B0%E6%98%A0%E5%B0%84%E7%9A%84%E4%B8%80%E7%A7%8D%20map%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9F%A5%E9%81%93java%E4%B8%AD%E7%9A%84hashmap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%B6%E5%BA%95%E5%B1%82%E4%BB%8D%E7%84%B6%E6%98%AF%E4%BB%A5hash%E5%87%BD%E6%95%B0%E6%98%A0%E5%B0%84%E7%9A%84%E6%95%B0%E5%AD%97%E4%BD%9C%E4%B8%BAkey%EF%BC%8C%E5%85%B6value%E6%98%AF%E4%BB%A5%20%E9%93%BE%E8%A1%A8,or%20%E6%95%B0%E7%BB%84%20%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%EF%BC%8C%E4%B8%80%E6%97%A6%E4%BD%BF%E7%94%A8%E4%BA%86hash%E5%87%BD%E6%95%B0%EF%BC%8C%E5%B0%B1%E6%84%8F%E5%91%B3%E7%9D%80%E5%AD%98%E5%9C%A8hash%E7%A2%B0%E6%92%9E%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7%E3%80%82.%20%E4%BD%8D%E5%9B%BE%E7%9A%84%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%85%B6%E6%9C%AC%E8%B4%A8%E5%B0%B1%E6%98%AF%E5%AF%B9hashMap%E7%9A%84%E4%B8%80%E7%A7%8D%E6%9B%B4%E5%8A%A0%E8%8A%82%E7%BA%A6%E5%86%85%E5%AD%98%E7%9A%84%E4%BC%98%E5%8C%96%EF%BC%8C%E5%85%B6%E7%9B%AE%E7%9A%84%E5%B0%B1%E6%98%AF%E6%A3%80%E6%B5%8B%E4%B8%80%E4%B8%AA%E5%80%BC%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%88%96%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%9C%A8%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%8C%E6%AF%94%E5%A6%82%E7%88%AC%E8%99%AB%E7%BB%93%E6%9E%84%E4%B8%AD%E7%9A%84url%E5%8E%BB%E9%87%8D%E5%8A%9F%E8%83%BD%EF%BC%8C%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%AD%89%E7%AD%89%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%AF%B4%E5%9C%A8%E5%AD%98%E5%9C%A8%E6%80%A7%E5%91%BD%E9%A2%98%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B8%AD%E4%BC%9A%E7%BB%8F%E5%B8%B8%E7%A2%B0%E5%88%B0%E4%BD%8D%E5%9B%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C.">位图</a></p><p><a href="https://cloud.tencent.com/developer/article/1455213">位图redis</a></p><p><a href="https://www.cnblogs.com/zzm96/p/12822537.html">位图操作</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记</title>
      <link href="/2021/10/30/redis-xue-xi-bi-ji/"/>
      <url>/2021/10/30/redis-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Nosql：泛指非关系型数据库，作为关系型数据库的补充<br>    作用：应对基于海量用户和海量数据前提下的数据处理问题<br>特征：</p><ul><li>可扩容</li><li>大数据量下高性能</li><li>灵活的数据模型</li><li>高可用</li></ul><p>常见的Nosal数据库</p><ul><li>redis</li><li>HBase</li><li>MongDB</li></ul><h2 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h2><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><h4 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h4><ol><li>添加数据：<code>set&nbsp;key&nbsp;value</code></li><li>获取数据：<code>get&nbsp;key</code></li><li>删除数据：<code>del&nbsp;key&nbsp;[key...]</code>     注：成功则返回1，失败返回0</li><li>获取多个数据：<code>mget&nbsp;key1&nbsp;key2...</code></li><li>添加多个数据：<code>mset&nbsp;key1&nbsp;value1&nbsp;key2&nbsp;value2...</code></li><li>追加信息到原始信息后部：<code>append&nbsp;key&nbsp;value</code></li><li>字符串长度：<code>strlen&nbsp;key</code></li></ol><h4 id="扩展操作"><a href="#扩展操作" class="headerlink" title="扩展操作"></a>扩展操作</h4><h5 id="类型一：数据库分表"><a href="#类型一：数据库分表" class="headerlink" title="类型一：数据库分表"></a>类型一：数据库分表</h5><p><img src="https://i.loli.net/2021/11/05/eWgncitCkrOGbLD.png" alt="redis-分表.png"></p><p>利用redis生成主键</p><p>解决方案：</p><ul><li>设置数值增加指定范围<ul><li><code>incr&nbsp;key</code></li><li><code>incrby key increment</code></li><li><code>incrbyfloat key&nbsp;increment&nbsp;</code></li></ul></li><li>设置数值减少指定范围<ul><li><code>decr&nbsp;key</code></li><li><code>decrby&nbsp;key&nbsp;increment</code></li></ul></li></ul><blockquote><p>说明:string在redis内部默认是字符串，当遇到增减类操作incr，decr时会转成数值型进行计算</p><p>redis的所有操作都是原子性的，采用单线程处理所有业务，命令是一个个执行的，无需考虑并发带来的数据影响。</p></blockquote><p>==redis用于控制数据库表主键id，为数据库表主键提供生成策略，保证数据库表主键的唯一性==</p><p>==此方案适用于所有数据库，支持数据库集群==</p><h5 id="类型二：数据时效性场景"><a href="#类型二：数据时效性场景" class="headerlink" title="类型二：数据时效性场景"></a>类型二：数据时效性场景</h5><p><img src="https://i.loli.net/2021/11/05/ySDmIZbcolC7fO9.png" alt="redis时效性.png"></p><p>解决方案：</p><ul><li>设置数据具有指定生命周期：<ul><li><code>setex&nbsp;key&nbsp;seconds&nbsp;value</code></li><li><code>pset&nbsp;key&nbsp;milliseconds&nbsp;value</code></li></ul></li></ul><p>==redis控制数据的生命周期，通过数据是否过期控制业务行为，适用于所有具有时效性的控制操作==</p><h5 id="类型三：数据怎么存放到redis中—key的命名规范"><a href="#类型三：数据怎么存放到redis中—key的命名规范" class="headerlink" title="类型三：数据怎么存放到redis中—key的命名规范"></a>类型三：数据怎么存放到redis中—key的命名规范</h5><img src="https://i.loli.net/2021/11/07/73dCQfSEb9eFhc8.png" alt="大V.png" style="zoom:50%;"><p><em>解决方案</em></p><ul><li>在redis中为大v设定信息，以用户主键，属性作为key，后台设定定时刷新</li></ul><pre class="line-numbers language-none"><code class="language-none">eg:  user:id:3506728370:fans    --&gt; 12210993 user:id:3509430234:blogs   --&gt; 6164 user:id:3523823428:focus   --&gt; 83<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在redis中以json格式存储大V用户信息，定时刷新（也可使用hash类型）</li></ul><pre class="line-numbers language-none"><code class="language-none">eg  user:id:4656115656  -&gt; {id:2324,name:春晚,fans:122,blogs:6164}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==redis用于各种结构型高热度数据的访问加速==</p><p><strong>key的设置约定</strong></p><pre class="line-numbers language-none"><code class="language-none">表名：主键名：主键值：字段名eg1：   order：id：13133242：namenews：id：2344335：type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="string类型补充操作"><a href="#string类型补充操作" class="headerlink" title="string类型补充操作"></a>string类型补充操作</h4><ul><li>设置不存在的键值对,若key已经存在则不起作用：<code>setnx&nbsp;key&nbsp;value</code></li><li>设置多个已存在的键值对：<code>msetnx&nbsp;key&nbsp;value&nbsp;[key value...]</code></li><li>获取子字符串，截取字符串：<code>getrange&nbsp;key&nbsp;start&nbsp;end</code></li><li>为键值对设置新值并返回旧值：<code>getset&nbsp;key&nbsp;value</code></li></ul><h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h3><p>对象类数据存储如果具有频繁的更新需求就会显得笨重</p><img src="https://i.loli.net/2021/11/07/WdzpG3UtlsOy89I.png" alt="hash类型.png" style="zoom:50%;"><ul><li>新的存储需求：对一系列存储数据进行编组，方便管理，存储对象信息</li><li>需要存储结构：一个存储空间保存多个键值对</li></ul><p>==hash存储结构优化==</p><ul><li>如果field数量较少，存储结构优化为类数组结构</li><li>field较多时，存储结构使用hashMap结构</li></ul><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加/修改数据：<code>hset&nbsp;key&nbsp;field&nbsp;value</code></li><li>获取数据：<code>hget&nbsp;key&nbsp;field</code></li><li>获取全部数据：<code>hgetall&nbsp;key</code></li><li>删除数据：<code>hdel&nbsp;key&nbsp;field1&nbsp;[field2...]</code></li><li>添加/修改多个数据：<code>hmset&nbsp;key&nbsp;field1&nbsp;value&nbsp;[field2 value...]</code></li><li>获取多个数据：<code>hmget&nbsp;key&nbsp;field1&nbsp;[field2...]</code></li><li>获取哈希表中字段个数：<code>hlen&nbsp;key</code></li><li>获取哈希表中是否存在指定字段：<code>hexists&nbsp;key&nbsp;field</code></li></ul><h4 id="扩展操作-1"><a href="#扩展操作-1" class="headerlink" title="扩展操作"></a>扩展操作</h4><ul><li>获取哈希表中所有字段名或字段值 <code>hkeys&nbsp;key</code>, <code>hvals&nbsp;key</code></li><li>设置指定字段的数值数据增加指定范围：<code>hincrby&nbsp;key&nbsp;field&nbsp;increment</code>, <code>hincrbyfloat&nbsp;key&nbsp;field&nbsp;incrment</code></li></ul><h5 id="应用场景一"><a href="#应用场景一" class="headerlink" title="应用场景一"></a>应用场景一</h5><p><img src="https://i.loli.net/2021/11/08/7NOP5Xvhdr1EKBI.png" alt="hash-cart.png"></p><p>解决方案：</p><ul><li>以客户id作为key，每位客户创建一个hash存储结构存储对象</li><li>以商品编号作为field，购买数量作为value</li><li>添加商品：追加全新的field和value</li><li>浏览：遍历hash</li><li>更改数量：自增/自减，设置value</li><li>删除商品：删除field</li><li>清空：删除key</li></ul><p>==思考：当前仅仅将数据存到了redis，并没有起到加速作业，商品信息还需二次查询数据库==</p><p>改进：</p><ul><li>每条购物车中商品记录保存成两条field</li><li>field1专用于保存购买数量 <ul><li>命名格式：商品id：nums</li><li>保存数据：数值</li></ul></li><li>field2用于保存购物车显示的信息，包含文字描述，图片地址，商家信息等<ul><li>命名格式：商品id：info</li><li>保存数据：json</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">hmset 001 g01:nums 100 g01:info {...}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但不同用户存在info大量信息重复，此时将==商品信息独立成一个hash==</p><p>为了防止已存在的商品信息重复添加，采用<code>hsetnx&nbsp;key&nbsp;field&nbsp;value</code></p><h5 id="应用场景二"><a href="#应用场景二" class="headerlink" title="应用场景二"></a>应用场景二</h5><p><img src="https://i.loli.net/2021/11/08/XysfURZd7wlSAKO.png" alt="hash-phone.png"></p><p>解决方案：</p><ul><li>以商家id作为key</li><li>将参与抢购的商品作为field</li><li>参与抢购的商品数量作为value</li></ul><p>==哈希类型可用于抢购，限购，限量发放优惠券等数据存储设计==</p><h3 id="lsit类型"><a href="#lsit类型" class="headerlink" title="lsit类型"></a>lsit类型</h3><ul><li>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分</li><li>需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序</li><li>list类型：保存多个数据，底层使用双向链表存储结构</li></ul><h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加/修改数据：<code>lpush&nbsp;key&nbsp;value1&nbsp;[value2...]</code><ul><li><code>rpush&nbsp;key&nbsp;value1&nbsp;[value2]</code></li></ul></li><li>获取数据：<code>lrange&nbsp;key&nbsp;start&nbsp;stop</code><ul><li><code>lindex&nbsp;key&nbsp;index</code></li><li><code>llen&nbsp;key</code></li></ul></li><li>获取并移除数据：<code>lpop&nbsp;key</code>，<code>rpop&nbsp;key</code></li><li>插入一个值到列表中，这个值在pivot之前或之后，，在列表key中，当pivot这个值不存在时，执行改名了无效，当key不存在时，key被看做空列表，该命令无效；该命令返回插入后列表的长度，如果pivot不存在，返回-1，key不存在或是空列表，返回0：<ul><li><code>linsert&nbsp;key&nbsp;AFTER|BEFORE&nbsp;pivot&nbsp;value</code></li></ul></li><li>修改列表指定元素的值：<code>lset&nbsp;key&nbsp;index&nbsp;value</code></li></ul><h4 id="扩展操作-2"><a href="#扩展操作-2" class="headerlink" title="扩展操作"></a>扩展操作</h4><ul><li>在固定时间内获取并移除数据，将按参数key出现的先后顺序依次检查各个列表，弹出第一个非空列表头元素。<ul><li><code>BLPOP&nbsp;key&nbsp;[key...]&nbsp;timeout</code></li><li><code>BRPOP&nbsp;key&nbsp;[key...]&nbsp;timeout</code></li></ul></li></ul><h5 id="业务场景一：朋友圈点赞"><a href="#业务场景一：朋友圈点赞" class="headerlink" title="业务场景一：朋友圈点赞"></a>业务场景一：朋友圈点赞</h5><img src="https://i.loli.net/2021/11/09/CpNmMTxDsIGPqow.png" alt="list1.png" style="zoom:50%;"><p>==解决方案==</p><ul><li>移除指定个数的元素，删除列表中与value相等的元素，当count等于0时，表示删除列表key中所有与value相等的元素；当count大于0时，删除count个；当count小于0时，删除count绝对值个<ul><li><code>lrem&nbsp;key&nbsp;count&nbsp;value</code></li></ul></li></ul><h5 id="场景二：实现安全列表"><a href="#场景二：实现安全列表" class="headerlink" title="场景二：实现安全列表"></a>场景二：实现安全列表</h5><blockquote><p>list用于在不同程序之间有序交换消息，一个客户端通过LPUSH命令将一条消息放入队/列，然后开启另一客户端等待数据，这个队列是不安全的，当一个客户端出现错误时，会导致其他客户端崩溃，数据丢失，此时可以用下面命令解决</p></blockquote><ul><li>为了保证未处理完的消息不丢失，使用RPOPLPUSH解决，返回一条消息后同时将这条消息保存到另一个列表<ul><li><code>RPOPLPUSH&nbsp;source&nbsp;destination</code> </li><li><code>BRPOPLPUSH&nbsp;source&nbsp;destination&nbsp;timeout</code></li></ul></li></ul><blockquote><p>使用以上命令也可以实现循环列表，将source和destination设为一样</p></blockquote><h5 id="list类型注意事项"><a href="#list类型注意事项" class="headerlink" title="list类型注意事项"></a>list类型注意事项</h5><ul><li>list保存的数据都是string类型</li><li>list具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈</li></ul><h5 id="场景三：用户的关注列表顺序展示等"><a href="#场景三：用户的关注列表顺序展示等" class="headerlink" title="场景三：用户的关注列表顺序展示等"></a>场景三：用户的关注列表顺序展示等</h5><p><img src="https://i.loli.net/2021/11/09/EZAxS37aeVWpjhb.png" alt="list2.png"></p><h3 id="set（集合）类型"><a href="#set（集合）类型" class="headerlink" title="set（集合）类型"></a>set（集合）类型</h3><ul><li>新的存储需求，存储大量数据，在查询方面听过更高的效率</li><li>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</li></ul><img src="https://i.loli.net/2021/11/09/5becsYELkXnRW4r.png" alt="set.png" style="zoom:50%;"><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><ul><li>添加数据：<code>sadd&nbsp;key&nbsp;member1&nbsp;[member2...]</code></li><li>获取全部数据：<code>smembers&nbsp;key</code></li><li>删除数据：<code>srem&nbsp;key&nbsp;member1&nbsp;[member2...]</code></li><li>获取集合数据总量：<code>scard&nbsp;key</code></li><li>判断集合中是否包含指定数据：<code>sismember&nbsp;key&nbsp;member</code></li></ul><h4 id="扩展操作-3"><a href="#扩展操作-3" class="headerlink" title="扩展操作"></a>扩展操作</h4><h5 id="场景一：set主要就是集合操作"><a href="#场景一：set主要就是集合操作" class="headerlink" title="场景一：set主要就是集合操作"></a>场景一：set主要就是集合操作</h5><p><img src="https://i.loli.net/2021/11/09/5qokrUCOscd13Jt.png" alt="set集合.png"></p><p>==解决方案==</p><ul><li>随机获取集合中指定数量的数据，当count为正数，返回数组，且各个元素不同，当为负数时，返回绝对值个元素数组，且元素可能重复：<ul><li><code>srandmember&nbsp;key&nbsp;[count]</code></li></ul></li><li>随机获取集合某个数据，并将该数据移出集合：<code>spop&nbsp;key&nbsp;[count]</code></li></ul><p>==redis用于随机推荐信息，例如热点歌单，热点新闻推荐==</p><h5 id="场景②：各个用户之间的好友共享，即朋友集合之间的操作"><a href="#场景②：各个用户之间的好友共享，即朋友集合之间的操作" class="headerlink" title="场景②：各个用户之间的好友共享，即朋友集合之间的操作"></a>场景②：各个用户之间的好友共享，即朋友集合之间的操作</h5><img src="https://i.loli.net/2021/11/09/1knSx3KDmsutdFE.png" alt="set.png" style="zoom:50%;"><img src="https://i.loli.net/2021/11/09/LUuk7A9shZS8DdC.png" alt="set.png" style="zoom:50%;"><p>==解决方案==</p><ul><li>求两个集合的交，并，差集<ul><li><code>sinter&nbsp;key1&nbsp;[key2...]</code></li><li><code>sunion&nbsp;key1&nbsp;[key2...]</code></li><li><code>sdiff&nbsp;key1&nbsp;[key2...]</code></li></ul></li><li>求两个集合的交，并，差集并存储到指定集合<ul><li><code>sinterstore&nbsp;destination&nbsp;key1&nbsp;[key2...]</code></li><li><code>sunionstore&nbsp;destination&nbsp;key1&nbsp;[key2...]</code></li><li><code>sdiffstore&nbsp;destination&nbsp;key1&nbsp;[key2...]</code></li></ul></li><li>将指定数据从原始集合移动到目标集合中<ul><li><code>smove&nbsp;source&nbsp;destination&nbsp;member</code></li></ul></li></ul><h5 id="场景三：权限校验"><a href="#场景三：权限校验" class="headerlink" title="场景三：权限校验"></a>场景三：权限校验</h5><img src="https://i.loli.net/2021/11/09/AU2Xq7kxj89NR1m.png" alt="set权限校验1.png" style="zoom:50%;"><p>==解决方案==</p><ul><li>依赖set集合数据不重复的特征，实现数据过滤</li><li>根据用户id获取用户所有角色</li><li>获取各个角色的操作权限集合并合并，得到用户的操作权限</li></ul><img src="https://i.loli.net/2021/11/09/JvFWo37sGk1lxE5.png" alt="set权限校验实例.png" style="zoom:80%;"><blockquote><p>校验工作：redis是提供基础数据还是校验结果？</p><p>在开发中最好是提供基础数据，不要把校验业务融入到redis中，而在业务层做</p></blockquote><h4 id="set注意事项"><a href="#set注意事项" class="headerlink" title="set注意事项"></a>set注意事项</h4><ul><li>set类型不允许数据重复</li><li>set虽然与hash存储结构相同，但无法启用hash中储值的空间</li></ul><h3 id="sorted-set类型"><a href="#sorted-set类型" class="headerlink" title="sorted_set类型"></a>sorted_set类型</h3><ul><li>新的存储需求：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序</li><li>需要的存储结构：即能排序，又能存储大量数据</li><li>sorted_set类型：在set的存储结构基础上添加可排序字段</li></ul><h4 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li><p>添加数据：<code>zadd&nbsp;key&nbsp;score1&nbsp;member1&nbsp;[score2 member2...]</code></p></li><li><p>获取全部数据(默认从小到大)：<code>zrange&nbsp;key&nbsp;start&nbsp;stop&nbsp;[withscores]</code></p><ul><li>逆序：<code>zrevrange&nbsp;key&nbsp;start&nbsp;stop&nbsp;[withscores]</code></li></ul></li><li><p>删除数据：<code>zrem&nbsp;key&nbsp;member&nbsp;[member2...]</code></p></li><li><p>按条件获取数据：</p><ul><li><code>zrangebyscore&nbsp;key&nbsp;min&nbsp;max&nbsp;[withscores]&nbsp;[limit]</code></li><li><code>zrevrangebyscore&nbsp;key&nbsp;max&nbsp;min&nbsp;[withscores]&nbsp;[limit]</code></li></ul></li><li><p>按条件删除数据：</p><ul><li><code>zremrangebyrank&nbsp;key&nbsp;start&nbsp;stop</code></li><li><code>zremrangebyscore key min max</code></li></ul></li></ul><blockquote><p>注意：</p><ul><li>min与max用于限定搜索查询的条件</li><li>start与stop限定查询范围，作用于索引</li><li>offset与count用于限定查询范围，作用域查询结果，表示分页</li></ul></blockquote><ul><li><p>获取集合数据总量：</p><ul><li><code>zcard&nbsp;key</code></li><li><code>zcount&nbsp;key&nbsp;min&nbsp;max</code></li></ul></li><li><p>集合的交，并操作：</p><ul><li>```<br>zinterstore destination numkeys key [key…] [weights weight [weight…]] [aggregate sum|min|max]<pre class="line-numbers language-none"><code class="language-none">  `zinterstore`默认情况下结果集中某个元素score是所有给定有序集合中该元素score的和。  使用weights选项来为每个给定的有序集合分别制定一个乘数，每个给定的有序集合所有元素的score在传递给聚合函数前都乘以这个数，不指定时默认为1  使用aggregate指定计算结果集的聚合方式  - sum：score求和  - min：所有有序集合中某个元素最小值作为结果集中该元素的score  - max：所有有序集合中某个元素最大值作为结果集中该元素的score- ```  zunionstore destination numkeys key [key...] [weights weight [weight...]] [aggregate sum|min|max]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="业务场景一：对网站热度排序，对直播间热度排序等"><a href="#业务场景一：对网站热度排序，对直播间热度排序等" class="headerlink" title="业务场景一：对网站热度排序，对直播间热度排序等"></a>业务场景一：对网站热度排序，对直播间热度排序等</h4><img src="https://i.loli.net/2021/11/11/U2muAVIf4c1lhZC.png" alt="zsort-1.png" style="zoom:67%;"><p>==解决方案==</p><ul><li>获取数据对应的排名：<ul><li><code>zrank&nbsp;key&nbsp;member</code></li><li><code>zrevrank&nbsp;key&nbsp;member</code></li></ul></li><li>获取或修改score值：<ul><li><code>zscore&nbsp;key&nbsp;member</code></li><li><code>zincrby&nbsp;key&nbsp;increment&nbsp;member</code></li></ul></li></ul><h4 id="场景二：时效性管理"><a href="#场景二：时效性管理" class="headerlink" title="场景二：时效性管理"></a>场景二：时效性管理</h4><p><img src="https://i.loli.net/2021/11/11/HmDjwWazZtXSgrh.png" alt="zsetex.png"></p><p>==解决方案==</p><p><img src="https://i.loli.net/2021/11/11/NsSQXIVbgPtB8xy.png" alt="zsetex2.png"></p><h4 id="场景三：带有权值的任务队列"><a href="#场景三：带有权值的任务队列" class="headerlink" title="场景三：带有权值的任务队列"></a>场景三：带有权值的任务队列</h4><p><img src="https://i.loli.net/2021/11/11/x1urKZRMXbSQNPk.png" alt="zsetweight.png"></p><p>==解决方案==</p><ul><li>对于带有权重的任务，优先处理权重高的任务，采用score记录权值</li></ul><h4 id="sorted-set注意事项"><a href="#sorted-set注意事项" class="headerlink" title="sorted_set注意事项"></a>sorted_set注意事项</h4><ul><li>score保存的是double类型</li><li>zsorted_set底层还是基于set结构，数据不能重复，如果重复添加数据，score会被反复覆盖</li></ul><h3 id="综合案例一"><a href="#综合案例一" class="headerlink" title="综合案例一"></a>综合案例一</h3><p><img src="https://i.loli.net/2021/11/11/GIB4tLYougXCTDO.png" alt="overall_case1.png"></p><p>==初级解决方案==</p><p><img src="https://i.loli.net/2021/11/11/GodHrsRKm16bgQM.png" alt="case1_solu1.png"></p><p>==改良解决方案==</p><p><img src="https://i.loli.net/2021/11/11/5eW7ATHauKcIpdn.png" alt="case1_solu2.png"></p><h3 id="综合案例二"><a href="#综合案例二" class="headerlink" title="综合案例二"></a>综合案例二</h3><p><img src="https://i.loli.net/2021/11/11/jYnKfLrBQH7kOeh.png" alt="case2.png"></p><p>==解决方案==</p><p><img src="https://i.loli.net/2021/11/11/cukYF5Gh1IvTHeK.png" alt="case2_solu1.png"></p><p><img src="https://i.loli.net/2021/11/11/lzMjuN9RvXHIOWg.png"></p><h3 id="linux中启动redis"><a href="#linux中启动redis" class="headerlink" title="linux中启动redis"></a>linux中启动redis</h3><ul><li><p>进入src指定端口启动：<code>./redis-server&nbsp;--port&nbsp;6380</code></p><ul><li>连接redis：<code>./redis-cli&nbsp;-h&nbsp;127.0.0.1&nbsp;-p&nbsp;6380</code></li></ul></li><li><p>使用配置文件启动：进入创建redis-6379.conf，输入：</p><ul><li><pre><code>port 6379daemonize yes//后台进程方式启动logfile “6379.log”//日志文件名dir /root/redis/redis-stable/data</code></pre><p>然后输入<code>./redis-server&nbsp;redis-6379.conf</code>启动redis。</p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>八大排序算法解析附代码</title>
      <link href="/2021/10/28/ba-da-pai-xu-suan-fa-jie-xi-fu-dai-ma/"/>
      <url>/2021/10/28/ba-da-pai-xu-suan-fa-jie-xi-fu-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="1-基本思想"><a href="#1-基本思想" class="headerlink" title="1.基本思想"></a>1.基本思想</h2><p>在插入第<code>i</code>个记录时，<code>R1,R2,R3...</code>,已经排好序，这时将<code>Ri</code>，的关键字<code>ki</code>，依次与之前排好序的关键字比较，找到合适的位置插入即可，插入位置及其后的记录依次向后移动。</p><h2 id="2-性能"><a href="#2-性能" class="headerlink" title="2.性能"></a>2.性能</h2><ul><li>平均时间复杂度<code>O(n^2)</code></li><li>最差时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(1)</code></li><li>稳定性：稳定</li></ul><p>如果插入排序的目标是把n个元素的序列升序排列，采用插入排序在最好情况和最差情况如下</p><ul><li>最好情况：序列已经是升序，这种情况下，需要进行的比较操作为n-1次</li><li>最坏情况：序列是降序，需要比较<code>n(n-1)/2</code></li></ul><h2 id="代码实现-数组"><a href="#代码实现-数组" class="headerlink" title="代码实现-数组"></a>代码实现-数组</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> len<span class="token operator">=</span>a<span class="token punctuation">.</span>length<span class="token punctuation">,</span>insertNum<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        insertNum<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>insertNum<span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向后移</span>            <span class="token operator">--</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>insertNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p><a href="https://leetcode-cn.com/problems/insertion-sort-list/">147。对链表进行插入排序</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span><span class="token class-name">ListNode</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">insertionSortList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> lastSorted<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>lastSorted<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lastSorted<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                lastSorted<span class="token operator">=</span>lastSorted<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                lastSorted<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur<span class="token operator">=</span>lastSorted<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-改进思路"><a href="#4-改进思路" class="headerlink" title="4.改进思路"></a>4.改进思路</h2><p><a href="https://zhuanlan.zhihu.com/p/122293204">改进</a></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="1-基本思想-1"><a href="#1-基本思想-1" class="headerlink" title="1.基本思想"></a>1.基本思想</h2><p>通过一趟排序将待排序的记录被一个基准关键字划分为独立的两部分，关键字前半区均小于这个关键字，后半区均大于这个关键字，然后再分别对这两部分继续排序。其使用分治法。</p><p>实现逻辑：</p><ul><li>附设两个位置指示变量，初始分别指向第一个记录和最后一个记录</li><li>从序列中找出一个基准元素，通常是第一个，首先从<code>j</code>位置向前搜索，找到第一个关键字小于<code>pivot</code>的记录，将该记录移至<code>i</code>所指的位置，然后从<code>i</code>向后搜索，找到小于<code>pivot</code>的记录将其移到<code>j</code>所指的位置，重复此过程直到<code>i==j</code>。</li><li>递归搜寻前半区和后半区</li></ul><h2 id="2-性能-1"><a href="#2-性能-1" class="headerlink" title="2.性能"></a>2.性能</h2><p>快速排序的性能取决于递归的深度，可以用递归树描述递归算法执行情况。<code>[50,10,90,31,70,40,80,60,20]</code>，的递归树：</p><p><img src="https://image.51cto.com/files/uploadimg/20110826/222536597.jpg"></p><p>在最优情况下，Partiton每次都划分很均匀，那递归树的深度就是<code>logn+1</code>，故最优情况下快排的时间复杂度是<code>O(nlogn)</code></p><p>在最坏情况下，即待排序的序列正好是逆序或正序，那每次划分只得到一个比上一次划分少一个记录的子序列，另一个为空，如果递归树画出来就是一颗斜树，需要执行<code>n-1</code>次调用，故时间复杂度为<code>O(n</code></p><p><code>^2)</code></p><p>平均情况时为<code>O(nlogn)</code>。</p><h2 id="代码实现-数组-1"><a href="#代码实现-数组-1" class="headerlink" title="代码实现-数组"></a>代码实现-数组</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pivot<span class="token operator">=</span>data<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span>low<span class="token punctuation">,</span>j<span class="token operator">=</span>high<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;=</span>pivot<span class="token punctuation">)</span> <span class="token operator">--</span>j<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>pivot<span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pivot<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>low<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> smallHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> largeHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> small<span class="token operator">=</span>smallHead<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> large<span class="token operator">=</span>largeHead<span class="token punctuation">;</span>        <span class="token keyword">int</span> pivot<span class="token operator">=</span>head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>pivot<span class="token punctuation">)</span><span class="token punctuation">{</span>                small<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                small<span class="token operator">=</span>small<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                large<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                large<span class="token operator">=</span>large<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        large<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        small<span class="token punctuation">.</span>next<span class="token operator">=</span>largeHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> right<span class="token operator">=</span><span class="token function">quickSort</span><span class="token punctuation">(</span>largeHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        largeHead<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> left<span class="token operator">=</span><span class="token function">quickSort</span><span class="token punctuation">(</span>smallHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>left<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur<span class="token punctuation">.</span>next<span class="token operator">=</span>right<span class="token punctuation">;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode关于单调栈题解</title>
      <link href="/2021/10/28/leetcode-guan-yu-dan-diao-zhan-ti-jie/"/>
      <url>/2021/10/28/leetcode-guan-yu-dan-diao-zhan-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="496-下一个更大元素I"><a href="#496-下一个更大元素I" class="headerlink" title="496.下一个更大元素I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496.下一个更大元素I</a></h1><h2 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h2><p>之前已经通过剖析单调栈的特性总结出了对于单调栈找出Next Greater Number高效率的模板，但此题的问题做了变化。此题有两个数组，第一个数组是第二个数组的子集，且两个数组相同元素在各自数组的索引不同，故在应用单调栈模板时得先解决对应元素在答案数组中的索引问题。</p><p>很朴素的思路是：</p><p>遍历<code>nums2</code>数组的每个元素，同时对于每个元素找其在<code>nums1</code>中的位置，若存在则返回其在<code>nums1</code>中的索引，进而利用这个索引存入答案数组的对应位置；若不存在，则略过此元素，为了保证正确性，还是要每个元素入栈。==很明显这个思路效率不高，因为每找一个元素都要遍历nums1，时间复杂度为O（mn）==代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n1<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n2<span class="token operator">=</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>time<span class="token operator">=</span>n1<span class="token punctuation">;</span>time<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token function">isExists</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">--</span>time<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">isExists</span><span class="token punctuation">(</span><span class="token keyword">int</span> goal<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>goal<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/28/u7iXQOUz8wT6lgv.png" alt="下一个更大元素I.png"></p><p>果然！！！</p><h2 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h2><p>基于以上问题，导致上述思路效率不高的主要问题是重复遍历，那我们想能不能不要每次都遍历<code>nums1</code>? 连接两个数组的桥梁是相等元素，一种呼之欲出的想法是我们把nums2中每个元素对应的Next Greater Number存起来，然后只遍历一次num1，直接查表不就行了，故我们借助哈希表来完成我们的思路。</p><ul><li>遍历nums2，将每个元素的Next Greater Number 存入哈希表</li><li>遍历nums1，查表得出结果，存入ans数组</li></ul><p>以空间换时间，立即将<code>O(mn)</code>的复杂度降到了<code>O(m+n)</code>，去除冗余操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n2<span class="token operator">=</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n1<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="503-下一个更大的元素II"><a href="#503-下一个更大的元素II" class="headerlink" title="503.下一个更大的元素II"></a><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503.下一个更大的元素II</a></h1><p>循环数组，我们在单调栈剖析篇已经详细详解了循环数组该如何处理，故此题应该来说是很简单的。思路就赘述了。</p><h2 id="思路一：-1"><a href="#思路一：-1" class="headerlink" title="思路一："></a>思路一：</h2><p>我们可以使用单调栈解决本题。单调栈中保存的是下标，从栈底到栈顶的下标在数组 nums 中对应的值是单调不升的。</p><p>每次我们移动到数组中的一个新的位置 ii，我们就将当前单调栈中所有对应值小于 nums[i] 的下标弹出单调栈，这些值的下一个更大元素即为 nums[i]（证明很简单：如果有更靠前的更大元素，那么这些位置将被提前弹出栈）。随后我们将位置 ii 入栈。</p><p>但是注意到只遍历一次序列是不够的，例如序列 [2,3,1][2,3,1]，最后单调栈中将剩余 [3,1][3,1]，其中元素 [1][1] 的下一个更大元素还是不知道的。</p><p>一个朴素的思想是，我们可以把这个循环数组「拉直」，即复制该序列的前 n-1n−1 个元素拼接在原序列的后面。这样我们就可以将这个新序列当作普通序列，用上文的方法来处理。</p><p>而在本题中，我们不需要显性地将该循环数组「拉直」，而只需要在处理时对下标取模即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//把等于的也pop，留下的都是严格大于的，此为单增栈</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment">//s里存的是值</span>            ans<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下四道题采用相同的思想</p><h1 id="316-去除重复字母"><a href="#316-去除重复字母" class="headerlink" title="316.去除重复字母"></a><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">316.去除重复字母</a></h1><h2 id="思路一：贪心-单调栈"><a href="#思路一：贪心-单调栈" class="headerlink" title="思路一：贪心+单调栈"></a>思路一：贪心+单调栈</h2><p>这题与402.移除k位数字类似，贪心策略一样，只不过这题没有一个全局的删除次数k，而是删除重复字母，即对于每个字符c都有一个k值，即出现的次数</p><p>对于字符串建立一个字典，保存每个字母出现的次数，除此之外还需要额外的数组，判断当前字母是否已经进栈了。</p><ul><li>从左向右遍历字符串，对于每一个字符，其未被访问过，则开始判断是否满足单调栈，若不满足单调栈，则判断当前字符在剩余字符串中出现的次数是否大于0，即是否还有该字符，若大于0，则循环出栈顶，同时对于每个出栈的元素，其要重新被标记为未访问</li><li>每次循环后字典对应字符出现次数减1</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> vis<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用于记录是否访问过</span>        <span class="token comment">//如果不借助额外空间判断是否重复，则需在每次循环中判断栈中所有元素，显然效率不高</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录每个字母出现的次数</span>        <span class="token keyword">int</span> size<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//开始维护单调递减栈，从栈底到栈顶单增</span>        <span class="token class-name">StringBuilder</span> sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>ch<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> n<span class="token operator">=</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        vis<span class="token punctuation">[</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                        sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                vis<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//这个数字一定要在括号外面写，因为这个数字表示的是后续的字符串每个字符出现的次数</span>            num<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="402-移掉k位数字"><a href="#402-移掉k位数字" class="headerlink" title="402.移掉k位数字"></a><a href="https://leetcode-cn.com/problems/remove-k-digits/">402.移掉k位数字</a></h1><h2 id="思路一：贪心-单调栈-1"><a href="#思路一：贪心-单调栈-1" class="headerlink" title="思路一：贪心+单调栈"></a>思路一：贪心+单调栈</h2><p>对于两个相同长度的数字序列，最左边的数字决定了这两个数字的大小，故要使剩下的数字最小，需要保证靠前的数字尽可能小。给定一个长度为n的数字序列<code>[D0D1D2...]</code>，从左往右找到第一个位置 i 使得<code>Di-1&gt;Di</code>,并删去Di-1，如果不存在，说明整个数字序列单调递增，删去最后的数字即可。</p><p>基于此很容易想到单调栈。</p><p>对于每个数字，如果该数字小于栈顶元素，就不断弹出栈顶元素，直到</p><ul><li>栈为空</li><li>新的栈顶元素小于当前数字</li><li>已经删除了k位数字</li></ul><p>上述步骤处理完后我们要做一些额外的处理</p><ul><li>如果我们删除的数字数目m&lt;k,则此时要从数字序列尾部继续删除剩下的数目</li><li>如果最终数字序列存在前导0，应删除</li><li>最终的数字序列为空，则应返回0</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeKdigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//利用StringBuilder模拟栈的行为</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>num<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//如果原始字符数字本身就是单增的，再循环过程中一个也没移除，则从最后一位开始移除</span>        <span class="token comment">//能保证整体最小</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="456-132-模式"><a href="#456-132-模式" class="headerlink" title="456. 132 模式"></a><a href="https://leetcode-cn.com/problems/132-pattern/">456. 132 模式</a></h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>分析132的特性，在确定一个数之后，如何快速的找到另外两个数</p><p>枚举i ：由于i是132结构中最小的数，那么相当于要在i后找一个对数（j，k），使得（j，k）都满足比i大，同时 j&gt;k，由于遍历是单向的，问题可以转化成先找k，找到之后判断[i,k]之间存在比k大的数即可</p><p>过程：</p><p>我们从后向前处理，维护一个单调递减的栈，同时使用k记录所有出栈元素的最大值，当我们遍历到i，只要满足发现<code>nums[i]&lt;k</code>，说明我们找到了132模式。这个k很关键，初始时我们将k初始化我<code>Integer.MIN_VALUE</code>，因此若要满足<code>nums[i]&lt;k</code>是不可能的，只有一种情况是，只要k值改变了，就代表出现了一个比栈顶元素大的元素，此时开始出栈；这之后，我们就只需要找<code>i</code>，因为满足条件的<code>j,k</code>已经找到了，即只要k有值，那<code>[i,k]</code>之间一定存在一个元素比k大，i又比k小，故满足132模式</p><p>举个例子：<code>[3,1,4,2]</code></p><ul><li>枚举到2，栈内元素<code>[2]</code>,<code>k=MIN_VALUE</code></li><li>枚举到4，不能进栈，2出栈更新k，4入栈，栈内元素<code>[4]</code>,k=2</li><li>枚举到 1：满足 nums[i] &lt; k，说明对于 i 而言，后面有一个比其大的元素（满足 i &lt; k 的条件），同时这个 k 的来源又是因为维护「单调递减」而弹出导致被更新的（满足 i 和 k 之间，有比 k 要大的元素）。因此我们找到了满足 132 结构的组合。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">find132pattern</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                k<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//nums[i]比栈内k之前的所有元素都大</span>            <span class="token punctuation">}</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="769-最多能完成排序的块"><a href="#769-最多能完成排序的块" class="headerlink" title="769.最多能完成排序的块"></a><a href="https://leetcode-cn.com/problems/max-chunks-to-make-sorted/">769.最多能完成排序的块</a></h1><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>个人感觉leetcode可能测试用例不够完善，评论区那些用暴力解法的都能过，但其实对于一些特殊数据例如<code>[2,0,3,4,5]</code>，暴力解法的答案是<code>0</code>，错误的，这题最标准的做法还应该是单调栈。</p><p>基于单调栈的特性我们来分析一下怎么应用到这题上。这题是要找数组所有的分块，很明显，对于某个索引<code>i</code>,他必须大于前面的分段的最大值，才能被重新划分到一个新段里。否则，这个索引<code>i</code>就必须划分到之前的段中，不一定是前一个段，可能这个<code>i</code>比前面所有的段的最大值都小，就代表前面的分段都不正确，要把这个<code>i</code>加进去后重新分段，那怎么体现分段的数目呢?—-栈内元素的个数~，为什么？</p><p>因为我们查找的规则是维护了一个单增栈，即碰到比当前栈顶元素大的元素，就入栈，表示找到一个新分段，但若碰到比栈顶元素小的元素，代表之前的分段不正确，要出栈，把当前元素加入到属于他那个段中，出栈的标准就是栈顶元素大于当前元素，直到碰到一个栈顶元素小于当前元素，此时代表栈内剩余元素的分段是正确的，而出栈的那些元素分段都不正确，要将当前元素加进来后分为整体一段，故此时需要把这整体一段的最大值入栈，代表当前段，至于为什么是最大值，看上面。</p><p>总的来说就是：</p><ul><li>如果当前元素大于栈顶元素说明找到了一个新的分段</li><li>如果当前元素小于栈顶元素，保存栈顶元素，然后将大于当前元素的所有元素出栈后，将之前保存的栈顶元素压入栈中，代表了一个分段。</li><li>最后返回栈中元素的个数即可，即每一段的最大值代表了当前段</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxChunksToSorted</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将第一个元素入栈代表此时将第一个元素分为一段</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>s<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> max<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列详解</title>
      <link href="/2021/10/27/dan-diao-dui-lie-xiang-jie/"/>
      <url>/2021/10/27/dan-diao-dui-lie-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java集合ArrayList,LinkedList,Queue,Deque,ArrayDeque常用API</title>
      <link href="/2021/10/27/java-ji-he-arraylist-linkedlist-queue-deque-arraydeque-chang-yong-api/"/>
      <url>/2021/10/27/java-ji-he-arraylist-linkedlist-queue-deque-arraydeque-chang-yong-api/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java判断字符串是否为整数</title>
      <link href="/2021/10/27/java-pan-duan-zi-fu-chuan-shi-fou-wei-zheng-shu/"/>
      <url>/2021/10/27/java-pan-duan-zi-fu-chuan-shi-fou-wei-zheng-shu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/BlueLoveyyt/article/details/45424167">判断整数</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解:2021/10/26</title>
      <link href="/2021/10/26/leetcode-ti-jie-2021-10-26/"/>
      <url>/2021/10/26/leetcode-ti-jie-2021-10-26/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串解码"><a href="#字符串解码" class="headerlink" title="字符串解码"></a><a href="https://leetcode-cn.com/problems/decode-string/">字符串解码</a></h1><p>这种类型的题很明显不是递归就是栈，但这题有许多细节需要考虑，我在做这题的时候开始思路确实很明确，但由于一些细节问题忽略，导致多花了一些时间。</p><h2 id="解法一-：单栈解法"><a href="#解法一-：单栈解法" class="headerlink" title="解法一 ：单栈解法"></a>解法一 ：单栈解法</h2><p>我们把字母，数字，左括号，右括号，看成是独立的TOKEN，用一个辅助栈来维护，做法如下：</p><ul><li>当前字符为数字则取连续数位（这个坑一定要主要）组成一个字符串后进栈</li><li>当前字符为字母或左括号则直接进栈</li><li>当前字符为右括号，则一直出栈，知道遇到左括号，且出左括号后，此时栈顶一定为数字，只需倍长得到的括号内的字符序列。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ptr<span class="token punctuation">;</span><span class="token comment">//全局字符指针，设为全局是因为获取数字是在单独的一个函数中获取的</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ptr<span class="token operator">&lt;</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">String</span> digits<span class="token operator">=</span><span class="token function">getDigits</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'['</span><span class="token operator">||</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">StringBuilder</span> sub<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> ch<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sub<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">String</span> tmp<span class="token operator">=</span>sub<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> time<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>time<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sub<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ptr<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/2sWjGnmd7Stli6r.png" alt="单栈.png"></p><h2 id="解法二：双栈解法"><a href="#解法二：双栈解法" class="headerlink" title="解法二：双栈解法"></a>解法二：双栈解法</h2><p>一个栈用来保存数字，一个栈用来保存字符串，保存字符串的栈的栈顶始终是左括号左边的字符串，括号内的字符串用一个单独的String变量保存。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> multi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//保存数位的变量</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack_int<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stack_str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                multi<span class="token operator">=</span>multi<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">chatAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//把之前的字符串入栈</span>                stack_str<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>                <span class="token comment">//数字入栈</span>                stack_int<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>multi<span class="token punctuation">)</span><span class="token punctuation">;</span>                multi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//出数字栈</span>                <span class="token keyword">int</span> repTime<span class="token operator">=</span>stack_int<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>repTime<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res<span class="token operator">+=</span>res<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res<span class="token operator">=</span>stack_str<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+=</span>res<span class="token punctuation">;</span><span class="token comment">//res保存单独是当前的完整字符串，栈顶保存的是括号左边的</span>                <span class="token comment">//之后若还是字母，就会直接加到res后，若是左括号，就会被压入字符栈，作为上一层的运算</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token operator">+=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/bTfc68yPNm7i5xj.png" alt="双栈.png"></p><h2 id="解法三：递归"><a href="#解法三：递归" class="headerlink" title="解法三：递归"></a>解法三：递归</h2><p>对于这种不知道有多少个子串的情况，即在不确定次数的情况下，使用递归非常合适</p><ul><li>如果当前位置是数字位，那么后面一定包含一个子串，采用递归得出这个子串的内容，再循环加入全局StringBuilder</li><li>如果是左括号，不需要做什么</li><li>如果是右括号，则退出递归</li><li>如果是字母，则直接加入全局的StringBuilder</li></ul><p>在递归中设置一个全局的循环，遍历整个字符串，这样可以搜寻到所有的子串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">recurve</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用stringBuilder来拼接全部的字符串</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//转成数字，其后一定跟着一个子串</span>                <span class="token keyword">int</span> repTime<span class="token operator">=</span><span class="token function">getDigits</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> sub<span class="token operator">=</span><span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>repTime<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">s<span class="token punctuation">.</span></span>CharAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回子串</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/uN89XfY1D6QipSd.png" alt="递归.png"></p><h1 id="迷你语法分析器"><a href="#迷你语法分析器" class="headerlink" title="迷你语法分析器"></a><a href="https://leetcode-cn.com/problems/mini-parser/">迷你语法分析器</a></h1><p>这题同样耗费了我许多时间，（我太菜了！）</p><h2 id="解法一：栈迭代"><a href="#解法一：栈迭代" class="headerlink" title="解法一：栈迭代"></a>解法一：栈迭代</h2><p>此题题目确实有点绕，但逻辑思路其实与上题一样，也是括号匹配。由于保证输入都是正确的，最后输出的一定是一个<code>NestedInteger</code>对象，故他要么是以 ‘[‘ 开头，要么是全为数字，在正是开始迭代前，可以做这样的判断。</p><ul><li>如果ch为<code>[</code> ，则代表有一个嵌套，此时创建一个空嵌套对象入栈。</li><li>如果ch为数字或<code>-</code>，则将连续数位的字符转成整数，同时加入栈顶的<code>NestedInteger</code>对象</li><li>如果ch为<code>,</code>，直接略过，不影响结果</li><li>如果ch为<code>]</code>，代表一个嵌套结束了，此时将栈顶的嵌套出栈，若出栈后不为空，则代表有上一层嵌套，将此层嵌套加入上一层，继续向后遍历；若为空则表示此层嵌套即为答案。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NestedInteger</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NestedInteger</span> ans<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">&gt;</span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token operator">||</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> j<span class="token operator">=</span>index<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                index<span class="token operator">=</span>j<span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/zygaeFTSsIDYEW4.png" alt="迷你语法分析2.png"></p><h2 id="解法二：递归"><a href="#解法二：递归" class="headerlink" title="解法二：递归"></a>解法二：递归</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NestedInteger</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">NestedInteger</span> <span class="token function">recurve</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">NestedInteger</span> ni<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token operator">||</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> j<span class="token operator">=</span>index<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                index<span class="token operator">=</span>j<span class="token punctuation">;</span>                ni<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ni<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ni<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/thkOPoi3wD5VSrg.png" alt="迷你语法分析.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈模板</title>
      <link href="/2021/10/26/dan-diao-zhan-mo-ban/"/>
      <url>/2021/10/26/dan-diao-zhan-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h2 id="单调栈是什么？"><a href="#单调栈是什么？" class="headerlink" title="单调栈是什么？"></a>单调栈是什么？</h2><p>单调栈是一种特殊的栈，单调栈要求栈中的元素时单调递增或递减的</p><p>==是否严格递减或一般递减可以根据实际情况来==</p><p>这里我用<code>[a,b,c]</code>表示一个栈，其中左侧为栈底，右侧为栈顶，单调增还是单调减取决于出栈顺序，如果出栈顺序是单调增的，那就是单调递增栈，出栈元素时单调减的，那就是单调递减栈。</p><p>例如：</p><ul><li><code>[1,2,3,4]</code>是一个单调递减栈，<code>[1,3,2]</code>就不是一个合法的单调栈</li></ul><p>那定义一个这样的特性有什么用呢？这种限制能解决什么问题呢？</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>单调栈的用途不太广泛，只处理一种典型的问题，叫做<code>Next&nbsp;Greater&nbsp;Number</code>的原始问题，即给你一个数组，你返回一个等长数组，对应索引存储这下一个更大或更小元素，如果没有满足要求的，就存-1,。例：</p><p>数组<code>[2,1,2,4,3]</code>，你返回<code>[4,2,4,-1,-1]</code>。即第一个2后面的比2大的数字是4；1后面比比它大的数组是2. …。</p><p>这道题的暴力解法很容易想到，即对每个元素都向后扫描，找到第一个更大的元素即可，但这种解法的时间复杂度是<code>O(n^2)</code>，明显差强人意，那我们可以这样思考，把数组元素想象成并列站立的人，元素大小想象成人的身高，这些人站成一列，如何求元素<code>[2]</code>的Next Greater Number呢？，向后看去，第一个露出来的人即是满足要求的</p><p><img src="https://i.loli.net/2021/10/28/WdaFhKtm7OkfBYS.png" alt="单调栈1.png"></p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//此为求单调增栈模板</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存放答案</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//既然是找后面的满足要求的，很明显</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//矮个子都走开，此处为大于则是单增栈，小于则是单减栈</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//由于是从后遍历，故栈顶一定是最近满足要求的</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进栈，之后身高判断,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述算法的复杂度只有<code>O(n)</code>，每个元素只被push一次，pop一次。</p><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><p>数组T <code>[73,74,75,71,69,72,76,73]</code>，（华氏度）这个数组存放的是近几天的天气气温，返回一个数组，计算：对于每一天，你至少还要等多少天才能等到更暖和的气温？，如果等不到那一天，则填0。</p><p>分析：此题实际上也是求Next Greater Number，只不过答案数组存的不是索引了，而是满足要求的数和当前的索引之间的差。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">NextGreaterTemp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token class-name">T</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token class-name">T</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token class-name">T</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="场景二："><a href="#场景二：" class="headerlink" title="场景二："></a>场景二：</h3><p>除了解决Next Greater Number问题外，还有一种场景就是==怎么保证删除之后整体最小==的问题。通常对于这类问题，我们采用一种维护单调栈的算法流程来使得整体最小，（以下对应的是单调递减栈）算法流程如下：</p><p>我们给定一个数组<code>[1,3,4,5,2,9,6]</code></p><ol><li>首先压入 1，此时的栈为：[1]</li><li>继续压入 3，此时的栈为：[1,3]</li><li>继续压入 4，此时的栈为：[1,3,4]</li><li>继续压入 5，此时的栈为：[1,3,4,5]</li><li><strong>如果</strong>继续压入 2，此时的栈为：[1,3,4,5,2] 不满足单调递减栈的特性， 因此需要调整。如何调整？由于栈只有 pop 操作，因此我们只好不断 pop，直到满足单调递减为止。</li><li>上面其实我们并没有压入 2，而是先 pop，pop 到压入 2 依然可以保持单调递减再 压入 2，此时的栈为：[1,2]</li><li>继续压入 9，此时的栈为：[1,2,9]</li><li><strong>如果</strong>继续压入 6，则不满足单调递减栈的特性， 我们故技重施，不断 pop，直到满足单调递减为止。此时的栈为：[1,2,6]</li></ol><p>此时我们得到了整体最小的栈，但这样可能还是有点抽象，你还是无法体会这个整体最小的概念，我们把这种算法思想放到具体的题目中去。</p><h4 id="例一："><a href="#例一：" class="headerlink" title="例一："></a>例一：</h4><p>给定一个字符串表示的非负整数和一个整数k，移除这个数中的k个数字，使得剩下的数字最小如</p><p>输入<code>num="1432219",k=3</code>,输出1219，很明显，这里要维护一个单减栈，才能保证数字最小。</p><ol><li>输入1，此时栈为<code>[1]</code></li><li>输入4，满足单减栈特性，此时栈为<code>[1,4]</code></li><li>输入3，破坏了单减栈，故pop出数字4，此时栈<code>[1]</code>,3进栈满足单减栈</li><li>输入2，破坏了单减栈，pop出数字3，此时栈为<code>[1]</code>,2进栈，此时栈为<code>[1,2]</code></li><li>输入2，可以接受，此时栈为<code>[1,2,2]</code></li><li>输入1，pop出数字2，此时栈为<code>[1,2]</code>,由于已经到达k的上限，故后续数字依次入栈，栈最终为<code>[1,2,1,9]</code></li></ol><p>这样即得到了”整体最小“，另外，对于设计到字符串的整体最小，通常可以利用StringBuilder模拟栈的行为。</p><p><font color="red">但此题存在一个bug就是，如果字符序列本身就是单增的，那按上面的逻辑将一个也移除不了，那怎么此时决定移除策略呢？很明显从最后一位开始移除，能保证整体数字最小</font>&gt;</p><h4 id="例二："><a href="#例二：" class="headerlink" title="例二："></a>例二：</h4><p><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">316.去除重复字母</a></p><h2 id="如何处理循环数组"><a href="#如何处理循环数组" class="headerlink" title="如何处理循环数组"></a>如何处理循环数组</h2><p>同样是Next Greater Number，现在假设给你的数组是环形的，<code>[2,1,2,4,3]</code>,你返回数组<code>[4,2,4,-1,4]</code>,拥有了环形属性后，最后一个元素3饶了一大圈找到了比自己大的元素4.</p><p>我们知道计算机内存都是线性的，没有真正意义的环形数组，一般是通过<code>%</code>，来模拟环形。回到最初的问题，增加了环形属性后，问题的难点在于Next不一定是当前元素右边了，也有可能出现在左边，为了能判断左边的元素，我们考虑这样的思路==将原始数组翻倍，在后面接一个原始数组==，这样每个元素不仅可以比较自己右边的元素，也可以和左边的元素比较。</p><img src="https://i.loli.net/2021/10/28/ZCF12cYeoQlEItu.png" alt="单调栈循环数组.png" style="zoom:50%;"><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">circuleNextGreaterNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> size<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token operator">%</span>size<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">%</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哨兵技巧"><a href="#哨兵技巧" class="headerlink" title="哨兵技巧"></a>哨兵技巧</h2><p>有些时候会用到数组全部元素，即栈中的元素最后都要出栈，很可能因为没有考虑边界问题而无法通过，所以可以使用哨兵法，例如在<code>[1,3,4,5,2,9,6]</code>末尾添加一个比数组元素都大或都小的元素如-1，此时可以简化代码逻辑。</p><h2 id="leetcode例题"><a href="#leetcode例题" class="headerlink" title="leetcode例题"></a>leetcode例题</h2><table><thead><tr><th align="center"><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496.下一个更大元素I</a></th></tr></thead><tbody><tr><td align="center"><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503.下一个更大的元素II</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/create-maximum-number/">321.拼接最大数</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">316.去除重复字母</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/remove-k-digits/">402.移掉k位数字</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters/">1081.不同字符最小序列</a></td></tr></tbody></table><p>参考：<a href="https://lucifer.ren/blog/2020/11/03/monotone-stack/">单调栈</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据机构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayDeque详解</title>
      <link href="/2021/10/25/arraydeque-xiang-jie/"/>
      <url>/2021/10/25/arraydeque-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/2f633feda6fb">ArrayDeque</a></p><p><a href="https://blog.csdn.net/skh2015java/article/details/74840513">ArrayDeque操作</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中的fail-fast机制</title>
      <link href="/2021/10/25/java-zhong-de-fail-fast-ji-zhi/"/>
      <url>/2021/10/25/java-zhong-de-fail-fast-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>fast-fail机制即快速失败机制，是java集合中的一种错误检测机制，当迭代集合过程中在该集合结构发生改变时，就可能会发生fail-fast，抛出ConcurrentModificationException，fail机制并不保证在不同步情况下修改一定会抛出异常，只是尽最大努力抛出。</p><h2 id="fail-fast出现场景"><a href="#fail-fast出现场景" class="headerlink" title="fail-fast出现场景"></a>fail-fast出现场景</h2><p>在ArrayList，HashMap等集合中在单线程和多线程环境下都有可能出现fail-fast</p><h3 id="单线程环境下："><a href="#单线程环境下：" class="headerlink" title="单线程环境下："></a>单线程环境下：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Iterator</span> iterator<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hashNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用迭代器遍历的过程中，利用集合的remove方法时，会发生fail-fast</p><p>HashMap发生的fail-fast</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Iterator</span> it<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hashNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程环境下："><a href="#多线程环境下：" class="headerlink" title="多线程环境下："></a>多线程环境下：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Mythread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                                    <span class="token punctuation">}</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> atgs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Mythread1</span> th1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mythread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mythread2</span> th2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mythread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fail-fast出现的原理："><a href="#fail-fast出现的原理：" class="headerlink" title="fail-fast出现的原理："></a>fail-fast出现的原理：</h2><p>fail-fast是如何抛出ConcurrentModification，又是在什么情况下抛出的? 对于集合list ，map 都可以用迭代器遍历，而Iterator就是一个接口，具体实现还是要看集合类里的内部类去实现Iterator实现相关方法。这里以ArrayList为例：</p><p>当调用list.iterator()时其源码是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>       <span class="token comment">// index of next element to return</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// index of last element returned; -1 if no such</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> size <span class="token operator">&amp;&amp;</span> modCount <span class="token operator">==</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// update once at end of iteration to reduce heap write traffic</span>            cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>            lastRet <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中有三个属性</p><pre class="line-numbers language-none"><code class="language-none">int cursor;   //index of next element to returnint lastRet=-1 //index of last element returned int expectedModCount=modCount;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>cursor是集合遍历过程中即将遍历的元素的索引，lastRet是cursor-1，默认为-1，它主要记录刚刚遍历过从元素的索引，expectedModCount是fail-fast判断的关键变量，初始值为ArrayList中的modcount（记录了对于几个操作中的修改次数，与size不一样）</p><p>首先看看next方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次调用next之前都会执行<code>checkForComdification()</code>，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到当<code>modcount!=expectedModCount</code>时抛出异常，但在一开始时，expectedModCount等于modCount，为什么会出现modCount！=expectedModCount ？ 对于expectedModCount在整个迭代过程中没有再发生改变，故可能发生改变的只有modCount ，我们知道当对ArrayList进行add，remove，clear时就会改变modCount，故当另一线程并发修改或同一线程遍历过程中，使modCount改变，就会抛出异常。</p><h2 id="避免fail-fast："><a href="#避免fail-fast：" class="headerlink" title="避免fail-fast："></a>避免fail-fast：</h2><h3 id="单线程解决"><a href="#单线程解决" class="headerlink" title="单线程解决"></a>单线程解决</h3><p>在单线程遍历过程中，如果进行remove操作，可以调用迭代器的remove方法而不是集合类的remove方法，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代器的remove方法不会使得expectedModCount!=modCount，故不会对遍历产生影响，但该方法不能指定remove的元素，故有局限性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Iterator</span> it<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程解决："><a href="#多线程解决：" class="headerlink" title="多线程解决："></a>多线程解决：</h3><p>使用java并发包中的类代替ArrayList，hashmap</p>]]></content>
      
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ聊天室项目</title>
      <link href="/2021/10/24/qq-liao-tian-shi-xiang-mu/"/>
      <url>/2021/10/24/qq-liao-tian-shi-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://gitee.com/xiaoclgitee/imitation-qq-chat-room">https://gitee.com/xiaoclgitee/imitation-qq-chat-room</a><br>项目提升：基于NIO，AIO 模型的群聊实现<a href="https://gitee.com/xiaoclgitee/chat-room">https://gitee.com/xiaoclgitee/chat-room</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap理解与解析</title>
      <link href="/2021/10/22/hashmap-li-jie-yu-jie-xi/"/>
      <url>/2021/10/22/hashmap-li-jie-yu-jie-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DDL语法总结</title>
      <link href="/2021/10/18/ddl-yu-fa-zong-jie/"/>
      <url>/2021/10/18/ddl-yu-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack,ArrayDeque,LinkedList详解</title>
      <link href="/2021/10/18/stack-arraydeque-linkedlist-xiang-jie/"/>
      <url>/2021/10/18/stack-arraydeque-linkedlist-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的浅拷贝与深拷贝</title>
      <link href="/2021/10/18/java-zhong-de-qian-kao-bei-yu-shen-kao-bei/"/>
      <url>/2021/10/18/java-zhong-de-qian-kao-bei-yu-shen-kao-bei/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>链表,二叉树,二分查找,排序,搜索相关代码模板</title>
      <link href="/2021/10/17/lian-biao-er-cha-shu-er-fen-cha-zhao-pai-xu-sou-suo-xiang-guan-dai-ma-mo-ban/"/>
      <url>/2021/10/17/lian-biao-er-cha-shu-er-fen-cha-zhao-pai-xu-sou-suo-xiang-guan-dai-ma-mo-ban/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据机构与算法专栏：跳表</title>
      <link href="/2021/10/13/shu-ju-ji-gou-yu-suan-fa-zhuan-lan-tiao-biao/"/>
      <url>/2021/10/13/shu-ju-ji-gou-yu-suan-fa-zhuan-lan-tiao-biao/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL实战专栏（三）索引</title>
      <link href="/2021/10/13/mysql-shi-zhan-zhuan-lan-san-suo-yin/"/>
      <url>/2021/10/13/mysql-shi-zhan-zhuan-lan-san-suo-yin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法专栏：散列表及其在密码学和MySQL中的应用（一）</title>
      <link href="/2021/10/12/shu-ju-jie-gou-yu-suan-fa-zhuan-lan-san-lie-biao-ji-qi-zai-mi-ma-xue-he-mysql-zhong-de-ying-yong-yi/"/>
      <url>/2021/10/12/shu-ju-jie-gou-yu-suan-fa-zhuan-lan-san-lie-biao-ji-qi-zai-mi-ma-xue-he-mysql-zhong-de-ying-yong-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此专栏用于本人完整全面地复习在面试及工作中常用的算法与数据结构，会辅以代码和基础知识讲解，包括刷题练习，解题思路等等。大致内容包括10个数据结构和10个算法：</p><p>数据结构：数组，链表，栈，队列，散列表，二叉树，堆，跳表，图，Trie树</p><p>算法：递归，排序，二分查找，搜索，哈希算法，贪心算法，分治算法，回溯，动态规划，字符串匹配</p><hr><h1 id="散列表及其在密码学中的应用"><a href="#散列表及其在密码学中的应用" class="headerlink" title="散列表及其在密码学中的应用"></a>散列表及其在密码学中的应用</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><p>面试题：你对哈希表的理解</p><p>我对哈希表的理解主要有这几个方面</p><p>一。哈希表怎么使用</p><p>二。为什么会出现哈希表</p><p>三。哈希表的安全性，效率等</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL实战专栏番外篇：索引详解（一）</title>
      <link href="/2021/10/11/mysql-shi-zhan-zhuan-lan-fan-wai-pian-suo-yin-xiang-jie-yi/"/>
      <url>/2021/10/11/mysql-shi-zhan-zhuan-lan-fan-wai-pian-suo-yin-xiang-jie-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL实战专栏（一）基础架构</title>
      <link href="/2021/10/10/mysql-shi-zhan-zhuan-lan-yi-ji-chu-jia-gou/"/>
      <url>/2021/10/10/mysql-shi-zhan-zhuan-lan-yi-ji-chu-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近再看mysql45讲，想着光听和光看确实记忆不够深刻，于是有了这个念头：何不趁这个机会建立一个自己的复习专栏，不仅能复习，输出，还能在写作的过程中增更多的思考，于是这个系列诞生了</p><h1 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="Mysql总体逻辑架构"><a href="#Mysql总体逻辑架构" class="headerlink" title="Mysql总体逻辑架构"></a>Mysql总体逻辑架构</h2><p><img src="https://img2018.cnblogs.com/blog/1202638/201908/1202638-20190808003551255-429891607.png"></p><p>整体上看我们可以把Mysql架构分为Server层和存储引擎层两部分。Server层有连接器，查询缓存，分析器，优化器，执行器等，涵盖Mysql大多数核心服务功能，以及所有内置函数，所有跨存储引擎的功能都在这一层实现。如存储过程，触发器，视图等。</p><p>存储引擎的架构模式是插件式的，在Mysql5.5.5版本之后InnoDB存储引擎成为默认存储引擎。当然不同的存储引擎有不同的特性，对应不同的应用场景，我们可以在建表<code>create&nbsp;table</code>时通过在最末尾添加<code>engine=memory</code>来制定存储引擎。</p><p>不难看出所有存储引擎公用Server层。</p><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>连接器负责跟客户端建立连接，获取权限，维持和管理连接。连接命令如下</p><p><code>mysql&nbsp;-h$ip&nbsp;-p$port&nbsp;-u$user&nbsp;-p</code>输完命令后可以在交互对话里输入密码，尽管可以直接在-p后加密码，但这很不安全，如果连的是生产服务器。强烈建议不要这样做。</p><p>==连接Mysql的几种方式：==</p><p>连接Mysql是一个连接进程和Mysql数据库实例进行通信。本质上是进程通信，我们常见的进程通信有管道，命名管道，TCP/IP套接字，UNIX域套接字等。</p><ul><li>TCP/IP：</li></ul><p>在密码认证通过后连接器会到权限表里查出当前用户的权限，之后在这个连接里面的操作都会基于此权限。判断逻辑。<strong>这就意味着一个用户成功建立连接后，即使你之后对这个用户权限做了改变，也不会影响已经读到的权限，只有新建立的连接才会使用新的权限。</strong></p><p>对于连接操作是十分耗费资源的操作，客户端如果太长时间没有向数据库进行操作，连接器会自动断开，这个时间由参数<code>wait_timeout</code>控制，默认8小时</p><p>当连接被断开后如果客户端再次发送请求，会受到错误提示，“Lost Connection to MySQL server during query”。此时只能进行重连。</p><ul><li>长连接：连接成功后客户端持续有请求，则一直使用同一个连接。</li><li>短连接：执行完一次或很少几次操作后便断开连接，使用时再重连。</li></ul><p>我们知道建立连接的过程不仅复杂而且耗费资源，因此我们应尽量减少建立连接的次数。</p><p>但有时使用长连接后，MySQL占用内存涨的特别快，这是因为执行过程中临时使用的内存时管理在连接对象里的，这些资源会在断开连接后释放，所以累积下来，导致内存占用过大，被系统强行杀掉OOM了，即Mysql异常重启了。</p><p>解决方案：</p><ul><li>定期断开长连接，或在执行一个占用内存过大的大查询后断开连接。</li><li>如果你使用的是MySQL5.7之后的版本，可以执行<code>mysql_request_cnnection</code>初始化资源，即释放，这样不需要重连和验证权限，之后恢复到初始连接状态。</li></ul><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>连接建立后便可以执行语句了，查询缓存中保存之前执行的语句和结果集，可能会议key-value的形式存储在内存中，key是查询的语句，value是返回的结果，当拿到一个语句后若能在缓存中找到key，则直接返回结果，否则进行后续操作。</p><p>==但大多数情况下建议不要使用查询缓存，因为弊往往大于利==</p><p>弊端：<strong>即这些缓存是针对于一张原表的查询结果，即意味着一旦更新表，这些缓存全部作废，因此对于更新压力大的表，查询缓存命中的效率非常低，除非业务有一张静态表，很长时间才更新，例如系统配置表，那在这张表上使用查询缓存是比较合适的</strong></p><p>需要注意的是MySQL8.0之后的版本直接将查询缓存的整块功能删除了。</p><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>如果没有命中缓存就要开始分析语句了。</p><ul><li>词法分析：分析器会先进行词法分析，识别出SQL语句里面的字符串分别是什么。例如把输入的select关键字识别出来，也要把字符串“T”识别成表名T，把字符串“ID”识别成“列ID”。<ul><li>你可能会问分析器是如何把这些关键字和字段名识别的？最直接的做法是对它做一个只读的查找树，Mysql在此出做了优化。然后对于字段，mysql实例中有一个数据库<code>INFORMATION_SCHEMA</code>保存其他数据库的信息，即元数据，如数据库或表名称，列数据类型访问权限等。</li></ul></li></ul><p>==ps：对于词法分析的内容应还有地方剖析，请参考google上博客==</p><ul><li>语法分析：词法分析后进行语法分析。判断是否符合MySQL语法。如果不对，则会受到错误提示。</li></ul><p>==ps：此处可查看博客关于语法分析的内容==</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>此时MySQL已经知道你要做什么了，但执行之前还要进行优化器处理。优化器是在表中存在多个索引时决定是用哪个索引；或在一个语句中有多表关联的时候，决定各个表的连接顺序。</p><p><code>select&nbsp;*&nbsp;from&nbsp;t1&nbsp;join&nbsp;t2&nbsp;on&nbsp;t1.c=10&nbsp;and&nbsp;t2.d=20</code></p><ul><li>既可先从表t1取出c=10的记录ID值，在根据ID关联到t2，判断t2的ID是否有等于20的。</li><li>也可以先从表t2取出ID=20的记录，再关联到t1，判断t1里的c是否等于10.</li></ul><p>两种策略执行结果是一样的，但执行效率不同，优化器就是决定选择哪一个方案的。</p><p>例如假设 t1上的扫描了 100 个数据行，t2 上扫描 50个数据行。</p><p>先根据A会有100个数据行，接着进行匹配找到其中的 30 个与 B 中的值匹配记录，其中就有 70 次是失败了。</p><p>先根据 B会有 50 个数据行，接着进行匹配找到其中的 30 个与 A中的值匹配的记录，只有 20次是失败的，很显然需要的计算和磁盘 I/O 更少。</p><p>因此MySQL的优化器主要干如下几个重要事情：</p><ul><li>选择最合适的索引</li><li>选择表扫还是走索引</li><li>选择表关联顺序</li><li>优化where子句</li><li>决定order by 和group by 是否走索引</li><li>尝试使用inner join 替换outer join</li><li>简化子查询，决定结果缓存</li></ul><p>==ps：此处应对每个事情进行扩展，可看博客==</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>此阶段开始执行语句。开始执行前先判断用户对表T有没有执行权限，若没有，就会返回以下错误提示。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> T <span class="token keyword">where</span> ID<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>ERROR <span class="token number">1142</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: <span class="token keyword">SELECT</span> command denied <span class="token keyword">to</span> <span class="token keyword">user</span> <span class="token string">'b'</span><span class="token variable">@'localhost'</span> <span class="token keyword">for</span> <span class="token keyword">table</span> <span class="token string">'T'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有权限，在打开表，执行器会根据表引擎的定义，使用引擎提供的接口。例如下面这个例子。</p><p>ID字段没有索引，执行流程如下：</p><ol><li>调用InnoDB引擎接口去表第一行，判断ID是否为10，不是则跳过，是则将结果存在结果集</li><li>调用引擎接口取下一行，重复相同的判断逻辑，知道取这个表的最后一行。</li><li>执行器将结果集返回给客户端。</li></ol><p>对于有索引的表，逻辑也差不多。</p><p>在慢查询日志中你能看到rows_examined的字段，表示这个语句执行时调用引擎扫描了多少行。</p><p>在有些场景下，执行器调用一次，内部存储引擎扫描多行，故引擎扫描行数可能跟此字段不完全相同。</p><p>==ps：此处对于慢查询，mysql技术内幕上有介绍，建议查看并总结，也可看博客==</p><h3 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h3><p>前面了解了一条查询语句是经过连接器，分析器，优化器，执行器等模块最后到达存储引擎的。那么一条更新语句的执行流程是怎样的呢？我们知道MySQL可以恢复到半个月内任意一秒的状态，可你思考过这的原理是什么吗？</p><p>前面说过当表更新时，关于这个表的查询缓存会失效，与查询流程不一样的是更新流程还涉及两个重要的日志模块。即redo log（重做日志）和binlog（归档日志）。</p><p>==ps：此处只讲两种日志，关于其他日志文件及特性会在后续文章继续剖析==</p><h4 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h4><p>当前事务数据库系统普片都采用WAL技术，即<code>Write&nbsp;Ahead&nbsp;Log</code>策略，即当事务提交时先写重做日志，在修改页，并在适当的时候将修改页刷新到磁盘。这样当用于发生宕机(⊙o⊙)而导致的数据丢失时，通过重做日志可以完成数据的恢复，这也满足了ACID事务的D持久性的要求。</p><p>那么redo log是什么样的呢？</p><p>InnoDB中的redo log 是固定大小的，比如可以配置一组4个文件，每个文件大小1GB，那redo log大小可以记录4GB的操作，关于redo log是怎样记录的呢，事实上它是一个循环记录的过程，这也决定了它是固定大小的。从头开始写，写到末尾再开头循环。如图：</p><img src="https://img2018.cnblogs.com/blog/1202638/201908/1202638-20190810005247368-1074922371.png" style="zoom:67%;"><p>write pos 是当前记录的位置，一边写一边后移，checkpoint是当前要擦除的位置，一边擦除一边后移，擦除记录前要把记录更新到磁盘数据库表中。checkpoint之前的空间是已经擦除的空闲空间。</p><p>==ps：后续文章会详细讲解这个checkpoint技术怎么回事，具体参考MySQL技术内幕==</p><p>前面我们讲到有了redo log即使数据库宕机了，之前提交的记录都不会丢失。这被称为crash-safe</p><h5 id="redo-log如何刷新到磁盘"><a href="#redo-log如何刷新到磁盘" class="headerlink" title="redo log如何刷新到磁盘"></a>redo log如何刷新到磁盘</h5><p>我们知道InnoDB存储引擎内存除了缓冲池，还有重做日志缓冲，如图。InnoDB存储引擎先将重做日志信息放入缓冲区，然后按一定频率刷新到磁盘，一般情况下是每秒都会刷新到重做日志文件，因此混充没必要很大，只要在每秒提交的事务在缓冲大小之内即可。可通过参数<code>innodb_log_buffer_size</code>控制。那么在什么情况下重做日志缓冲会刷新到磁盘文件中呢？（注意这里的刷新只是刷新日志文件，并没有更新表数据，涉及表数据的更新还需要LRU列表和Flush列表）</p><p>==ps：这里提到LRU列表和Flush列表，后续文章会详细讲解这个技术==</p><p>==ps：包括接下来提到的Master&nbsp;Thread，也会详细讲解它的作用==</p><ul><li>Master Thread每一秒会将重做日志缓冲刷新到重做日志文件</li><li>每个事务提交时会将重做日志缓冲刷新到重做日志文件</li><li>当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲便刷新到日志文件</li></ul><p><img src="https://i.loli.net/2021/10/11/eM17tpBJnlFrxIC.jpg"></p><p>很重要的一点是redo log是何时写盘的，前面的描述可以猜测出是在事务开始之后逐步写盘的</p><p>之所以是逐步写入日志文件，而不是事务提交后才写入日志文件，原因在于上文讲的重做日志缓冲，默认是8M，InnoDB先将日志记录写入缓冲，再通过以上三种方式写入磁盘文件，然后再通过checkpoint技术在适当的时候将日志文件里的记录更新到数据库表中，并后移checkpoint，擦除当前记录。故写盘是随着事务的开始逐步进行的</p><blockquote><p>即使事务还没有提交，InnoDB仍会每秒将重做日志缓存刷新到日志文件，这也可以很好解释再大的事务提交，时间也很短暂。</p></blockquote><h4 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h4><p>MySQL整体其实就两块，一块是Server层，主要做MySQL功能层面的事，还有一块引擎层，负责存储相关。redo log是InnoDB引擎特有的日志，Server层也有自己的日志，binlog（归档日志）</p><p>你可能会问，为什么会有两份日志呢？</p><p>最开始的时候MySQL里并没有InnoDB引擎，其自带的是MyISAM，但它没有crash-safe的能力，binlog日志只能用于归档，InnoDB是以插件引入MySQL的，既然binlog没有crash-safe能力，那就让InnoDB单独使用一套日志系统。</p><p>两份日志有以下三点不同：</p><ul><li>redo log 是InnoDB引擎特有的，binlog是MySQL的Server层实现的，所有引擎都可以用</li><li>redo log 是物理日志，binlog是逻辑日志</li><li>redo log 是循环写的，空间固定，binlog可追加写，即文件写完后会切换到下一个文件，不会覆盖之前的日志</li></ul><p>了解以上后，我们来看看一条update语句的内部流程。</p><ol><li>执行器先找到引擎去ID=2这一行，ID是主键，引擎直接用树搜索找到这一行，如果ID=2这一行所在数据页本来就在内存中（LRU列表）就直接返回给执行器，否则先从磁盘读入内存，再返回</li><li>执行器拿到引擎给的数据行，再值加1，得到新数据，再调用引擎接口写入新数据</li><li>引擎将新数据更新到内存中，同时将这个更新操作记录到redo log日志中，此时redo log处于prepare状态，然后告知执行器执行完成，随时可以提交事务</li><li>执行器生成这个操作的binlog，并把binlog写入磁盘</li><li>执行器调用引擎接口提交事务，引擎则把redo log改成commit状态，更新完成</li></ol><p>过程如图：</p><img src="https://i.loli.net/2021/10/11/ek6pg2aFytU7rQ9.png" alt="redo log写入过程.png" style="zoom:80%;"><p>你可能注意到了redo log的写入拆成了两个步骤，prepare和commit。</p><h5 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h5><p>为什么有两阶段提交？这是为了让两份日志逻辑一致，这又回到了开头那个问题，怎么让数据库恢复到半个月内的任意一秒？</p><p>binlog会记录所有的逻辑操作，并且采用追加写，如果DBA说半个月内的都可以恢复，那备份系统中一定保存最近半月的所有binlog，同时系统定期做整库备份，定期取决于系统的重要性，可能一天一备，也可能一月一备。</p><p>例如需要恢复到某一秒，某天下午发现中午12点有一次误删表，需要找回数据，那可以这样做：</p><ul><li>首先找到最近的一次备份，如果运气好，可能是昨天晚上的备份，从这个备份恢复到临时库</li><li>然后从备份时间点开始，将备份的binlog依次取出。</li></ul><p>这样临时库就跟误删之前的库一样了，然后将临时库数据恢复到线上库中。</p><p>那回到两阶段提交问题本身，</p><p>用于redo log和binlog是两个独立逻辑，如果不用两阶段提交，就是谁先写的问题。</p><ol><li><strong>先写redo log再写binlog</strong>：假设redo log写完，事务提交，binlog还没写完就MySQL宕机了，用于前面所说，redo log写完之后，系统即使崩溃，仍能把数据恢复过来，因此此时恢复的是正确的，但由于binlog没写完就crash了，binlog里没有这个操作，因此之后备份日志时，存起来的binlog里面就没有这条语句，因此当需要用binlog恢复临时库时，用于binlog语句丢失，临时库就会少一次更新，恢复出来的值就不正确了</li><li><strong>先写binlog再写redo log</strong>：如果在binlog写完之后crash，用于redo log没写，崩溃恢复以后这个事务无效，但binlog里面已经记录了这个事务，故之后用binlog恢复库时就会多一个事务，恢复出来的值与原库不同。</li></ol><p>故如果不使用两阶段提交，那么数据库状态有可能和用它的日志恢复出来的库的状态不一样。</p><p>你可能会说，这个概率是不是太低了，平时也没有动不动就要恢复临时库的场景啊。</p><p>事实上，不只是误操作后要恢复数据，当需要扩容，即搭建一些备库来增加系统的读能力时，常见的做法就是全量备份加上应用binlog实现的，这个不一致会导致线上主从数据库不一致情况。</p><p>简单点说就是redo log和binlog都可以表示事务的提交状态，而两阶段的提交是让两个状态保持逻辑上的一致。</p><p><strong>redo log用于保证crash-safe能力。innodb_flush_log_at_trx_commit这个参数设置成1的时候，表示每次事务的redo log都直接持久化到磁盘。这个参数我建议你设置成1，这样可以保证MySQL异常重启之后数据不丢失。</strong></p><p><strong>sync_binlog这个参数设置成1的时候，表示每次事务的binlog都持久化到磁盘。这个参数我也建议你设置成1，这样可以保证MySQL异常重启之后binlog不丢失。</strong></p><p>==ps：关于日志，缓冲这块，在阅读mysql技术内幕之后会继续添加更多细节剖析==</p><h3 id="问答环节"><a href="#问答环节" class="headerlink" title="问答环节"></a>问答环节</h3><ol><li>如果表T中没有字段k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？</li></ol><p><strong>答：是在分析器的语法分析阶段报错的，在做词法分析时，把字符串切分成token流，这个过程主要依靠关键字如select，delete,这些关键字被采用树的结构存储起来，在这些关键字中间的token是不可区分的，切分万token之后，做语法检查，构建ast，做语义分析之后每个token’就有了自己的类型，这个类型便是通过查询数据库中保有的各个表的元数据得到的，故在做语义分析时就会得知这个字段不存在，故报错。</strong></p><ul><li>词法分析：从左到右一个一个字符读入程序，，对字符流进行扫描，根据构词规则识别单词</li><li>语法分析：在词法分析的基础上，将单词序列组合成各类语法短语，如程序，语句，表达式，语法分析程序判断源程序在结构上是否正确。</li><li>语义分析：此阶段任务是对结构上正确的源程序进行上下文有关性质的审查，进行类型审查。</li></ul><p>==ps：关于token流，ast等学了编译原理再来补充吧==</p><ol start="2"><li>前面我说到定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢？或者说，它影响了这个数据库系统的哪个指标？</li></ol><p><strong>答：在一天一备模式下，最坏情况也只需要应用一天的binlog，好处是“最长恢复时间”更短，一周一备最坏情况要应用一周的binlog，对应的系统指标是恢复目标时间(RTO)，要优化RTO就要付出成本，消耗更多存储空间，故这个指标需要根据业务重要性评估了。</strong></p><h3 id="物理日志与逻辑日志"><a href="#物理日志与逻辑日志" class="headerlink" title="物理日志与逻辑日志"></a>物理日志与逻辑日志</h3><p>【informix的逻辑日志和物理日志分析_freebile的技术博客_51CTO博客】<img src="file:///C:\Users\FL8700F\AppData\Roaming\Tencent\QQTempSys%W@GJ$ACOF(TYDYECOKVDYB.png" alt="img"><a href="https://mbd.baidu.com/ma/s/8M5Z73jt">https://mbd.baidu.com/ma/s/8M5Z73jt</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql技术内幕读书笔记（一）</title>
      <link href="/2021/10/10/mysql-ji-zhu-nei-mu-du-shu-bi-ji-yi/"/>
      <url>/2021/10/10/mysql-ji-zhu-nei-mu-du-shu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面试篇：异常</title>
      <link href="/2021/10/09/java-mian-shi-pian-yi-chang/"/>
      <url>/2021/10/09/java-mian-shi-pian-yi-chang/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq635785620/article/details/7781026">(45条消息) 常见的几种RuntimeException_我是谁的专栏-CSDN博客_runtimeexception</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器</title>
      <link href="/2021/10/06/bu-long-guo-lu-qi/"/>
      <url>/2021/10/06/bu-long-guo-lu-qi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/43263751">详解布隆过滤器的原理，使用场景和注意事项 - 知乎 (zhihu.com)</a></p><p><a href="https://developer.aliyun.com/article/773205">布隆过滤器，这一篇给你讲的明明白白-阿里云开发者社区 (aliyun.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC学习（二）</title>
      <link href="/2021/10/05/jdbc-xue-xi-er/"/>
      <url>/2021/10/05/jdbc-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC学习"><a href="#JDBC学习" class="headerlink" title="JDBC学习"></a>JDBC学习</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="事务问题"><a href="#事务问题" class="headerlink" title="事务问题"></a>事务问题</h2><p>将一组语句构建成事务，当所有语句顺利执行后，事务可以被提交，否则如果某个语句遇到错误，事务将被回滚。这样可以保证数据库的完整性。</p><ul><li>默认情况下数据库处于自动提交模式，那么哪些操作会导致自动提交呢？<ul><li><code>DDL</code>操作一旦执行，都会自动提交，<code>setAutoCommit=false</code>语句对DDL操作无效</li><li><code>DML</code>操作可通过<code>setAutoCommit=false</code>设置取消自动提交</li><li>在关闭连接时也会自动提交</li></ul></li><li>保存点<code>Savepoint</code>：使用保存点可以细粒度的控制回滚操作，创建保存点意味着回滚只需返回这个点，而非放弃整个事务</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">excuteUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Savepoint</span> point<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">setSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">excuteUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当不需要保存点时，释放保存点</span>conn<span class="token punctuation">.</span><span class="token function">releaseSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PreparedStatement批量更新"><a href="#PreparedStatement批量更新" class="headerlink" title="PreparedStatement批量更新"></a>PreparedStatement批量更新</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//提高效率的关键在于客户端与服务器的数据交互次数要尽可能少</span>    <span class="token comment">//思路是缓存sql语句</span>    <span class="token comment">/**     * addBatch(),executeBatch(),clearBatch()     * mysql服务器默认是关闭批处理服务的，需要通过一个参数让mysql开启对批处理的支持     * 即：?rewriteBatchedStatements=true   写下配置文件的url后     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//数据库是会自动提交数据的，因此先将sql缓存，在批量提交</span>        conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into goods(Name)values(?)"</span><span class="token punctuation">;</span>        ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">500</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token operator">:</span>throwables<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务ACID属性即并发问题"><a href="#事务ACID属性即并发问题" class="headerlink" title="事务ACID属性即并发问题"></a>事务ACID属性即并发问题</h3><p>尽管之前在mysql中讲解了一些关于事务的问题，为了加强记忆与理解，在这里再次重复一遍。</p><ul><li>原子性：事务是一个不可分割的工作单位。</li><li>一致性：事务必须使数据库从一个一致性状态转换到另一个一致性状态</li><li>隔离性：一个事务的执行，不能被其他事物干扰，即在一个事务内部的操作及使用对并发的其他事务是隔离的。</li><li>持久性：事务一旦被提交，则其对数据库的影响是永久的。</li></ul><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="Druid（德鲁伊）数据库连接池"><a href="#Druid（德鲁伊）数据库连接池" class="headerlink" title="Druid（德鲁伊）数据库连接池"></a>Druid（德鲁伊）数据库连接池</h3><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDruid</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">TestDruid</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataSource</span> ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//其中，src下的配置文件为：【druid.properties】</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test<span class="token operator">?</span>rewriteBatchedStatements<span class="token operator">=</span><span class="token boolean">true</span>username<span class="token operator">=</span>rootpassword<span class="token operator">=</span><span class="token number">123456</span>driverClassName<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>initialSize<span class="token operator">=</span><span class="token number">10</span>maxActive<span class="token operator">=</span><span class="token number">20</span>maxWait<span class="token operator">=</span><span class="token number">1000</span>filters<span class="token operator">=</span>wall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>详细配置参数</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="Apache-DBUtils实现CRUD操作"><a href="#Apache-DBUtils实现CRUD操作" class="headerlink" title="Apache-DBUtils实现CRUD操作"></a>Apache-DBUtils实现CRUD操作</h2><ul><li>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</li><li><img src="https://img-blog.csdnimg.cn/201905241930412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llcmVueXVhbl9wa3U=,size_16,color_FFFFFF,t_70"></li></ul><p>用ScalarHandler类处理特殊值，也可以自己实现ResultSetHandler接口来满足需求。</p><p><a href="https://www.cnblogs.com/yezhenhan/archive/2011/01/11/1932556.html">DButils详解</a></p><p>啊–不想写了，直接看文档吧，这儿挺简单的</p><p><img src="https://img.pcdown.net/uploadfile/2021/0604/20210604091338423.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向接口编程思想</title>
      <link href="/2021/10/05/mian-xiang-jie-kou-bian-cheng-si-xiang/"/>
      <url>/2021/10/05/mian-xiang-jie-kou-bian-cheng-si-xiang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ResultSet详解</title>
      <link href="/2021/10/05/resultset-xiang-jie/"/>
      <url>/2021/10/05/resultset-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PreparedStatement详解</title>
      <link href="/2021/10/05/preparedstatement-xiang-jie/"/>
      <url>/2021/10/05/preparedstatement-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC学习（一）</title>
      <link href="/2021/10/04/jdbc-xue-xi-yi/"/>
      <url>/2021/10/04/jdbc-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC学习（一）"><a href="#JDBC学习（一）" class="headerlink" title="JDBC学习（一）"></a>JDBC学习（一）</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="JDBC架构"><a href="#JDBC架构" class="headerlink" title="JDBC架构"></a>JDBC架构</h2><p>JDBC API支持用于数据库访问的两层和三层处理模型，通常使用两层</p><ul><li>JDBC API：提供应用程序到JDBC Manager的连接</li><li>JDBC Driver API ：支持JDBC Manager到驱动程序的连接</li></ul><p>JDBC API使用驱动程序管理器和特定于数据库的驱动程序来提供与异构数据库的透明连接。</p><p>JDBC驱动程序管理器确保使用正确的驱动程序访问每个数据源。 驱动程序管理器能够支持连接到多个异构数据库的多个并发驱动程序。</p><h3 id="常见的JDBC组件"><a href="#常见的JDBC组件" class="headerlink" title="常见的JDBC组件"></a>常见的JDBC组件</h3><ul><li>DriverManager：此类管理数据库驱动程序列表。 使用通信子协议匹配来自Java应用程序的连接请求和正确的数据库驱动程序。 识别JDBC下某个子协议的第一个驱动程序将用于建立数据库连接。</li><li>Driver：此接口处理与数据库服务器的通信。 您将很少直接与Driver对象进行交互。 而是使用DriverManager对象来管理此类对象。 它还抽象了与使用Driver对象相关的细节。</li><li>Connection：此接口包含用于联系数据库的所有方法。 连接对象表示通信上下文，即，与数据库的所有通信仅通过连接对象。</li><li>PreStatement&amp;Statement：您使用从此接口创建的对象将SQL语句提交到数据库。 除执行存储过程外，某些派生接口还接受参数。</li><li>ResultSet：在使用Statement对象执行SQL查询后，这些对象保存从数据库检索的数据。 它充当迭代器，允许您遍历其数据。</li><li>SQLException：此类处理数据库应用程序中发生的任何错误。</li></ul><img src="https://i.loli.net/2021/10/05/WYjGMfszQPlNSAO.png" alt="jdbc.png" style="zoom:60%;"><h3 id="JDBC获取数据库连接"><a href="#JDBC获取数据库连接" class="headerlink" title="JDBC获取数据库连接"></a>JDBC获取数据库连接</h3><ul><li>导入驱动包</li></ul><p><img src="https://i.loli.net/2021/10/05/iNmW4sgXyO657Fz.png" alt="jdbcDriver.png"></p><ul><li><p>注册驱动程序：</p><ul><li><code>Class.forname()</code>:注册驱动程序最常用的方法是使用Java的**Class.forName()**方法，将驱动程序的类文件动态加载到内存中，自动注册它。 此方法是首选，因为它允许您使驱动程序注册可配置和可移植。</li><li><code>DriverManager.registerDriver()</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>   <span class="token class-name">Driver</span> myDriver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span> myDriver <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error: unable to load driver class!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>DriverManager.getConnection()</code>：</p><ul><li>通常使用``getConnection（String url，Properties prop）`</li><li>对于mysql的url，格式为：``jdbc:mysql://hostname:[port]/databaseName?`?号后面可跟一些配置属性。</li><li>通常我们会使用一个配置文件如<code>jdbc.properties</code>,里面写上连接mysql的一些配置信息</li><li><img src="https://i.loli.net/2021/10/05/ZdNPnpAfKrOkVuD.png" alt="jdcbpro.png"></li></ul></li><li><p>关闭JDBC连接：在JDBC程序结束时，需要显式关闭与数据库的所有连接以结束每个数据库会话。 但是，如果您忘记了，Java的垃圾收集器将在清除过时对象时关闭连接。</p><p>依赖垃圾收集，特别是在数据库编程中，是一种非常糟糕的编程习惯。 您应该养成始终使用与连接对象关联的close（）方法关闭连接的习惯。</p><p>要确保关闭连接，您可以在代码中提供“finally”块。 无论是否发生异常，始终执行<em>finally</em>块。</p></li><li><p>最后附上完整代码：</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.实现了数据与代码的解耦</span><span class="token comment">//2.如果修改程序配置信息，只需修改文件不改代码，避免程序重新打包</span><span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment">//获取系统类加载器，自定义类都是系统类加载器加载</span>        <span class="token comment">//读取配置信息</span>        <span class="token class-name">InputStream</span> rs<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getClassLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> pro<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> user<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> driver<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> con<span class="token operator">=</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC数据库交互"><a href="#JDBC数据库交互" class="headerlink" title="JDBC数据库交互"></a>JDBC数据库交互</h2><table><thead><tr><th align="center">接口</th><th align="center">推荐用途</th></tr></thead><tbody><tr><td align="center">Statement</td><td align="center">使用对数据库的通用访问。 在运行时使用<strong>静态SQL语句</strong>时很有用。 Statement接口不能接受参数。</td></tr><tr><td align="center">PreparedStatement</td><td align="center">当您计划多次使用SQL语句时使用。 <code>PreparedStatement</code>接口在运行时接受输入参数。预编译的特性</td></tr><tr><td align="center">CallableStatement</td><td align="center">使用何时访问数据库存储过程。 <code>CallableStatement</code>接口也可以接受运行时输入参数。</td></tr></tbody></table><h3 id="PreparedStatement用法实例"><a href="#PreparedStatement用法实例" class="headerlink" title="PreparedStatement用法实例"></a>PreparedStatement用法实例</h3><p><code>PreparedStatement</code>:预编译SQL语句，存储在此对象中，可以高效多次执行该语句。，可传入带占位符的SQL语句，<code>String sql="insert into exam values(?,?,?)"</code>,也提供了填充占位符的方法，<code>setXxx(int index,Object val)</code>,index从1开始。当再次使用该语句时可调用<code>clearParameters()</code>清除参数，再重新设置参数。</p><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token comment">//对customers插入数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> user <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password<span class="token operator">=</span>info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> driverClass <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into customers(name,email,birth) values(?,?,?)"</span><span class="token punctuation">;</span><span class="token comment">//问号将数据参数化</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"凡凡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"179566@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> sd<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2000-01-12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>       <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"update customers set name=? where id=?"</span><span class="token punctuation">;</span>       <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"热巴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通用的增删改"><a href="#通用的增删改" class="headerlink" title="通用的增删改"></a>通用的增删改</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//version1.0 后面可以加上事务</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">xiugai</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Connection</span> con<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lines<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lines<span class="token operator">=</span>ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lines<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select id,name,email,birth from customers where id=?"</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> id<span class="token operator">=</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> email <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//利用专门类处理不同的属性值</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ORM编程思想</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通用的查询操作"><a href="#通用的查询操作" class="headerlink" title="通用的查询操作"></a>通用的查询操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对某个表的通用查询操作，封装到JavaBean中</span><span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">testQueryForCustomer</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">PrepareStatement</span> ps<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">ResultSet</span> rs<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rs<span class="token operator">=</span>ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取元数据，列数</span>        <span class="token class-name">ResultSetMetaData</span> metaData<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columns<span class="token operator">=</span>metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> cus<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>columns<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Object</span> columnval<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> columnName<span class="token operator">=</span>metaData<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Field</span> declaredField <span class="token operator">=</span> <span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//属性有可能是私有的</span>                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span>columnval<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>             <span class="token punctuation">}</span>        <span class="token keyword">return</span> cus<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询操作思想流程"><a href="#查询操作思想流程" class="headerlink" title="查询操作思想流程"></a>查询操作思想流程</h4><p><img src="https://i.loli.net/2021/10/05/l9QgxkqbrJE5KOA.png" alt="jdcbquery.png"></p><h4 id="针对于所有表的通用查询操作"><a href="#针对于所有表的通用查询操作" class="headerlink" title="针对于所有表的通用查询操作"></a>针对于所有表的通用查询操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//参数中提供JavaBean的类对象</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Object</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PrepareStatement</span> ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ResultSet</span> rs<span class="token operator">=</span>ps<span class="token punctuation">.</span><span class="token function">excuteQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResultSetMetaData</span> metaData <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">T</span> t<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>columnCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Object</span> val<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnLable</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//返回多条记录时的通用查询操作</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getListForQuery</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSetMetaData</span> metaData <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//            Order order=new Order();</span>            <span class="token class-name">T</span> t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//                String columnName = metaData.getColumnName(i + 1);  不推荐使用</span>                <span class="token class-name">String</span> columnLabel <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果没有起别名，则返回列名</span>                <span class="token class-name">Field</span> declaredField <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> object <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arrayList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在使用完ResultSet，Statement，Connection对象后应立即调用close，这对象会占用规模较大的数据结构，占用数据库服务器上的有限资源。Statement对象的close方法将自动关闭与其所有相关联的结果集，同样Connection对象的close也将关闭该连接上的所有语句对象</strong></p><h4 id="SQLException"><a href="#SQLException" class="headerlink" title="SQLException"></a>SQLException</h4><p>SQLException有一个由多个SQLException对象构成的链，由于SQLException实现的Iterable<throwable>接口，故可遍历该链</throwable></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token operator">:</span>sqlException<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="插入Blog数据"><a href="#插入Blog数据" class="headerlink" title="插入Blog数据"></a>插入Blog数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>       <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into customers(name,email,birth,photo) values(?,?,?,?)"</span><span class="token punctuation">;</span>       <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张宇豪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"1710515@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">SimpleDateFormat</span> sd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Date</span> date <span class="token operator">=</span> sd<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1990-10-14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">FileInputStream</span> fis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"images/mahuateng.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>       fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="读入Blob数据"><a href="#读入Blob数据" class="headerlink" title="读入Blob数据"></a>读入Blob数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReadBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select id,name,email,birth,photo from customers where id=?"</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Customer</span> customer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>email<span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Blob</span> blob<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getBlob</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">InputStream</span> inblob <span class="token operator">=</span> blob<span class="token punctuation">.</span><span class="token function">getBinaryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileOutputStream</span> fos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"images/mahuateng2.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>inblob<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps：在设置了Blob类型之后，若仍报too large错误，则可尝试在mysql的my.ini文件中修改配置参数：max_allowed_packet=16M;</p><p>在相关Connection对象关闭后，PreparedStatement对象就无效了，但数据库会自动缓存预备语句，相同的查询被执行多次后，再次执行时会重用查询策略，无需过多考虑PreparedStatement的开销</p>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式学习</title>
      <link href="/2021/10/03/zheng-ze-biao-da-shi-xue-xi/"/>
      <url>/2021/10/03/zheng-ze-biao-da-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat学习（一）</title>
      <link href="/2021/10/01/tomcat-xue-xi-yi/"/>
      <url>/2021/10/01/tomcat-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> tomcat原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机JVM（一）</title>
      <link href="/2021/09/30/java-xu-ni-ji-jvm-yi/"/>
      <url>/2021/09/30/java-xu-ni-ji-jvm-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java虚拟机JVM（一）"><a href="#Java虚拟机JVM（一）" class="headerlink" title="Java虚拟机JVM（一）"></a>Java虚拟机JVM（一）</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由LSB算法所引发的对byte类型的思考</title>
      <link href="/2021/09/29/you-lsb-suan-fa-suo-yin-fa-de-dui-byte-lei-xing-de-si-kao/"/>
      <url>/2021/09/29/you-lsb-suan-fa-suo-yin-fa-de-dui-byte-lei-xing-de-si-kao/</url>
      
        <content type="html"><![CDATA[<h1 id="Byte类型详解"><a href="#Byte类型详解" class="headerlink" title="Byte类型详解"></a>Byte类型详解</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><blockquote><p>参考文章：<a href="https://cloud.tencent.com/developer/article/1499063?from=14588">从强转Byte说起</a></p></blockquote><p>最近在写LSB算法时，遇到了许多字节运算与位运算，在byte与int之间的转换中一直出bug，百思不得其解，还以为代码逻辑有问题，最终在查找资料得知没想到Java中的byte类型有大学问，故通过这篇文章来剖析一下Java中的byte。</p><p><strong>前言：</strong></p><p>在计算机存储中以字节为单位，8bit组成一个字节，在网络数据传输中，大部分协议都是按字节一位位解析的，故搞清楚byte很有必要</p><h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><p>在java中除了boolean和char是无符号的，其余的基本数据类型都是有符号的，故最高位用来标识符号。我们通常以为若byte为正数，其最大值为<code>01111111</code>即127，若byte为负数其最小值为<code>11111111</code>即-127，但实际上真的是这样吗，这与许多教程中-128到127的结论不太吻合啊！！那这-128哪来的呢？我们可以试验一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>-128表示为10000000，这不是-0嘛</p><p>实际上将-127打印出来你会发现也不是-127，而是-1</p><pre class="line-numbers language-none"><code class="language-none">byte b1 = (byte)-127 ;System.out.println(b1);//结果10000001//最后八位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会这样呢？经过查询得知==：计算机中存储的都是补码，输出的都是原码==，即是以补码形式存储数值的，负数的补码是取反加1，正数的补码是本身，正如-127的存储形式转变过程是<code>11111111-》10000000+1=10000001</code>转成int就是<code>11111111111111111111111110000001</code></p><p>故对于int类型的-127转成byte直接截去前24位，存储后八位进去<code>10000001</code>,但这是补码，输出的时候转成原码还是-127。<font color="red">注意：若直接采用二进制或十六进制赋值，即byte b=0b11111111，则计算机会直接把这个二进制码存进去，即当成这就是补码，故你在输出的时候会发现这个值变为了-1</font></p><h2 id="运算机制"><a href="#运算机制" class="headerlink" title="运算机制"></a>运算机制</h2><p>在java中两个变量只要参与了运算，就可能会进行类型转变，即只要比int小的类型自动转成int，通常表达式中出现的最大数据类型决定了表达式最终结果的数据类型，例如int+long，结果为long</p><p>在通信中发送的byte数组是哪些bit接受到的就是哪些bit，没有符号位这一说。但在输出的时候就会考虑符号位了。</p><h2 id="byte转int为什么要-amp-oxff"><a href="#byte转int为什么要-amp-oxff" class="headerlink" title="byte转int为什么要&amp;oxff"></a>byte转int为什么要&amp;oxff</h2><p>在介绍这个内容之前我们先讲一些前置知识</p><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>面试时你可能遇到过诸如写出2*8最有效率的运算方法，无非就是考察对底层二进制的熟悉程度，不用说，当然是用位运算，所以掌握位运算在一些问题上会有高效率的解法。</p><ul><li><p>按位与 &amp;</p><ul><li><p>相同二进制位同为1，不同为0，利用这个特性，我们可以得知判断奇偶数不在用传统的n%2的方式了，直接用n&amp;1，结果为0即为偶数，为1就是奇数，为什么？</p><p>对于正数和0，补码与原码相同，1的前面都为0，故我们只关心最后以为，奇数肯定是1,1&amp;1则为1，故为奇数；</p><p>对于负数，原码转补码，奇数最后一位取反加1后仍为1，故也可以判断，</p></li></ul></li><li><p>按位异或 ^</p><ul><li>相同的二进制位数数字不同则为1，否则为0，异或有个特性是任何数与0异或，结果都是其本身，利用这个特性可解决一些特定的问题。</li></ul></li><li><p>取反 ~ :按位取反</p></li><li><p>左移 &lt;&lt;  :形如a&lt;&lt;b，将a的二进制位整体左移b位，高位溢出则移除，低位补0，因为位运算是cpu直接支持的，故是最有效率的运算。</p></li><li><p>右移 &gt;&gt;  : 前面讲到计算机中是以补码形式存储数值的，在在右移的时候要考虑符号位，若右移的是负数，则在高位补1，若为整数，则在高位补0.</p></li><li><p>无符号右移 &gt;&gt;&gt;  : 与右移唯一的不同在于无论什么数，移动都是高位补0，==没有无符号左移，因为符号位在左边，不存在补符号位的问题==</p></li></ul><p>学习了前面的知识后我们来讲讲我们的主题！！！</p><p>我们可以明白长字节数要往短转，直接强来肯定是不行的，而且搞清楚这个问题很有必要。在javaIO包中各种输入输出流的读写方法，很多参数都是字节数组，为了保证不同通讯终端数据兼容，发送和接收的都是字节序列，搞清楚很有必要。</p><p>在Java中怎么将int转换成byte还能成功还原呢，我们知道一个int占4个byte，即需要一个byte数组，直接上代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">int2Bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/09/30/G1t4dzLsE2rPUxV.png" alt="byte转int.png"></p><p>其实很简单，只需要右移就好了，但是装进去了怎么还原呢，很明显想到左移，但真这么简单吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bytes2Int</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 左移将原来的数先还原到对应的位置，再 按位或 将几个数进行合并</span>        <span class="token keyword">return</span> 　　bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>                <span class="token operator">|</span> bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>                <span class="token operator">|</span> bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span>                <span class="token operator">|</span> bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果真这样搞，那就等着大bug吧。我们知道计算机是以补码形式存储数值的，当我们进行以为运算时，byte，short，char类型会提升为32位的int，这时候就需要用0或1补位，如果是负数会补1，正数补0，为保证拼接起来的byte补码形式与原来int的补码形式相同，我们要先进行byte &amp; 0xff，提前补位，再通过 | 按位或即能正确拼接回int，这样才能保证数据不会发生异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bytes2Int</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>　　  bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>                <span class="token operator">|</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>                <span class="token operator">|</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span>                <span class="token operator">|</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为这个问题纠结了几天了，今天感觉算是豁然开朗了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb练习项目分析:javaweb教程P330-355</title>
      <link href="/2021/09/29/javaweb-lian-xi-xiang-mu-fen-xi-javaweb-jiao-cheng-p330-355/"/>
      <url>/2021/09/29/javaweb-lian-xi-xiang-mu-fen-xi-javaweb-jiao-cheng-p330-355/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础知识总结（一）</title>
      <link href="/2021/09/29/javase-ji-chu-zhi-shi-zong-jie-yi/"/>
      <url>/2021/09/29/javase-ji-chu-zhi-shi-zong-jie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaSE基础知识总结（一）"><a href="#JavaSE基础知识总结（一）" class="headerlink" title="JavaSE基础知识总结（一）"></a>JavaSE基础知识总结（一）</h1><p>制作人：文明</p><p>微信：19871173328</p><h2 id="Java中的浅拷贝与深拷贝"><a href="#Java中的浅拷贝与深拷贝" class="headerlink" title="Java中的浅拷贝与深拷贝"></a>Java中的浅拷贝与深拷贝</h2><p><a href="https://juejin.cn/post/6844903806577164302">Java浅拷贝与深拷贝</a></p><p><a href="https://www.cnblogs.com/plokmju/p/7357205.html">细说浅拷贝与深拷贝</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode每日一练</title>
      <link href="/2021/09/28/leetcode-mei-ri-yi-lian/"/>
      <url>/2021/09/28/leetcode-mei-ri-yi-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode每日一练"><a href="#leetcode每日一练" class="headerlink" title="leetcode每日一练"></a>leetcode每日一练</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></p><p>反转链表比较常规的思路有两种：迭代和递归</p><h3 id="方法一：迭代"><a href="#方法一：迭代" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h3><p>通常会设置两个辅助结点，一个前驱结点<code>pre=null</code>，一个当前结点<code>cur通常设置为head</code>。</p><ul><li>找一次迭代的过程，要实现链表反转，首先肯定要获取<code>cur</code>结点的后一节点指针<code>next</code>，方便后移，然后将cur的指向反转，指向pre，再<code>pre=cur</code>，<code>cur=next</code>这一组过程实现结点后移，之后的过程重复如此即可实现反转。</li><li>循环终止条件即为<code>cur!=null</code></li></ul><img src="https://i.loli.net/2021/09/28/kasnHzLEgiv9SVt.gif" alt="反转链表.gif" style="zoom:75%;"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>curr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==此代码可作为反转链表的模板，在遇到其他反转链表类似操作时，此代码可作为模板嵌入解决子问题==</p><ul><li>复杂度分析：时间复杂度O(n),n为链表长度，即遍历一次链表；空间复杂度O(1)，即定义的辅助结点。</li></ul><h3 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><p>思路与前面类似，只不过采用递归的思想，这里只贴代码。</p><p>递归求解步骤：</p><ul><li>明确要写的递归函数的功能，该怎么设计返回值</li><li>找递归问题的子问题，即一次调用之后会产生什么结果，即找递推关系</li><li>找到临界条件，确保子问题不会无限分解下去</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> pre<span class="token punctuation">,</span><span class="token class-name">ListNode</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> pre<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>        pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>        cur<span class="token operator">=</span>curr<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">reverse</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反转链表（II）"><a href="#反转链表（II）" class="headerlink" title="反转链表（II）"></a>反转链表（II）</h2><p><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">反转链表(II)</a></p><h3 id="方法一：构造常用反转链表模板"><a href="#方法一：构造常用反转链表模板" class="headerlink" title="方法一：构造常用反转链表模板"></a>方法一：构造常用反转链表模板</h3><p>此题是将指定范围内的链表反转，这就涉及到这个范围内之外的结点怎么连接。但在范围之内，我们仍然可以直接使用反转模板，先反转，在利用几个记录指针，连接范围内的收尾，即可完成连接。具体在于先找到范围外最接近范围内链表的前驱结点和后继结点，切断链表，待内部反转完毕，再实现外部连接。</p><p>==链表移动tips:链表标号相减所得的次数即是从前一结点移动到后一节点的循环次数==</p><img src="https://i.loli.net/2021/09/28/nirPqb3K4NwOsYL.png" alt="反转链表2.png" style="zoom:75%;"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>y    <span class="token comment">//由于头结点可能存在反转，故设置哑结点，这是这类题的通用做法，避免分类讨论</span>       <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>       <span class="token comment">//找到pre</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token punctuation">}</span>              <span class="token class-name">ListNode</span> leftNode<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> rightNode<span class="token operator">=</span>leftNode<span class="token punctuation">;</span>       pre<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>right<span class="token operator">-</span>left<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           rightNode<span class="token operator">=</span>rightNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token class-name">ListNode</span> succ<span class="token operator">=</span>rightNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       rightNode<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token function">reverseList</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>       pre<span class="token punctuation">.</span>next<span class="token operator">=</span>rightNode<span class="token punctuation">;</span>       leftNode<span class="token punctuation">.</span>next<span class="token operator">=</span>succ<span class="token punctuation">;</span>       <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>curr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：头插法，思路巧妙"><a href="#方法二：头插法，思路巧妙" class="headerlink" title="方法二：头插法，思路巧妙"></a>方法二：头插法，思路巧妙</h3><p>前一方法的缺点在于若起始结束点分别在头尾，则要遍历两边链表，我们思考能不能只遍历一遍？于是有头插法：</p><img src="https://i.loli.net/2021/09/28/8k3LdAZwER7UNF5.png" alt="反转链表法2.png" style="zoom:67%;"><ul><li><code>pre</code>始终执行反转区域第一个节点left的前一个结点。</li><li><code>cur</code>永远指向反转区域left结点</li><li><code>next</code>指向cur下一节点，随着cur后移</li></ul><p>反转过程：</p><p><img src="https://i.loli.net/2021/09/28/5HzNvQi41TLFWVR.png" alt="屏幕截图 2021-09-28 223527.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token operator">-</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           next<span class="token operator">=</span>curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           curr<span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           next<span class="token punctuation">.</span>next<span class="token operator">=</span>curr<span class="token punctuation">;</span>           pre<span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复杂度分析：时间复杂度O(n)，至多只遍历链表一次；空间复杂度O(1)，使用常数个辅助指针。</li></ul><h2 id="82-删除排序链表中的重复元素-II"><a href="#82-删除排序链表中的重复元素-II" class="headerlink" title="82. 删除排序链表中的重复元素 II"></a>82. 删除排序链表中的重复元素 II</h2><h3 id="方法一：迭代-1"><a href="#方法一：迭代-1" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h3><p> <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></p><p>此题是只要出现重复的结点，就将这些节点全部删除，而不是删除到只剩一个。</p><p>链表是已经排好序的，故重复元素在链表中是连续出现的，因此只需遍历一次。由于头结点也可能被删除，故设置哑结点。</p><p>==注意由于是通过判断cur.next.val=cur.next.next.val,故要先确保不为空，要加判断==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> dummyNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">==</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//通过记录该值，方便后续删除</span>                <span class="token keyword">int</span> x<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>                    cur<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：递归-1"><a href="#方法二：递归-1" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><h2 id="86-分割链表"><a href="#86-分割链表" class="headerlink" title="86.分割链表"></a>86.分割链表</h2><h3 id="方法一：虚拟结点拆分再合并"><a href="#方法一：虚拟结点拆分再合并" class="headerlink" title="方法一：虚拟结点拆分再合并"></a>方法一：虚拟结点拆分再合并</h3><p>设置两个虚拟头结点，一个头结点连接所有小于x的结点，一个头结点连接所有大于或等于x的结点，这里有个误区就是不一定要所有小于x的都在x结点左边，大于x的都在x右边，只需要小于的在大于或等于的左边就行了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> smallHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> largeHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> small<span class="token operator">=</span>smallHead<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> large<span class="token operator">=</span>largeHead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>                small<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                small<span class="token operator">=</span>small<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                large<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                large<span class="token operator">=</span>large<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        large<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        small<span class="token punctuation">.</span>next<span class="token operator">=</span>largeHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> smallHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：哨兵结点-双指针"><a href="#方法二：哨兵结点-双指针" class="headerlink" title="方法二：哨兵结点+双指针"></a>方法二：哨兵结点+双指针</h3><p>此题关键是找到第一个大于x的结点，即为分界点，此时用一个哨兵节点指向分界点，然后利用另一个移动指针持续往后搜索，将小于x的结点全部移到哨兵节点之后，遍历完后则小于x的结点全部在大于或等于x结点之前。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token operator">&amp;&amp;</span>cur<span class="token operator">!=</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ListNode</span> tar<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                tar<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next<span class="token operator">=</span>tar<span class="token punctuation">;</span>                pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token operator">&amp;&amp;</span>cur<span class="token operator">==</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML学习</title>
      <link href="/2021/09/25/xml-xue-xi/"/>
      <url>/2021/09/25/xml-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSTL学习</title>
      <link href="/2021/09/25/jstl-xue-xi/"/>
      <url>/2021/09/25/jstl-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式介绍</title>
      <link href="/2021/09/25/el-biao-da-shi-jie-shao/"/>
      <url>/2021/09/25/el-biao-da-shi-jie-shao/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE常用工具类（日期篇）</title>
      <link href="/2021/09/23/javase-chang-yong-gong-ju-lei-ri-qi-pian/"/>
      <url>/2021/09/23/javase-chang-yong-gong-ju-lei-ri-qi-pian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中Update resources和Update classes and resources、Redeploy、Restart server的区别</title>
      <link href="/2021/09/23/idea-zhong-update-resources-he-update-classes-and-resources-redeploy-restart-server-de-qu-bie/"/>
      <url>/2021/09/23/idea-zhong-update-resources-he-update-classes-and-resources-redeploy-restart-server-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA中Update-resources和Update-classes-and-resources、Redeploy、Restart-server的区别"><a href="#IDEA中Update-resources和Update-classes-and-resources、Redeploy、Restart-server的区别" class="headerlink" title="IDEA中Update resources和Update classes and resources、Redeploy、Restart server的区别"></a>IDEA中Update resources和Update classes and resources、Redeploy、Restart server的区别</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><p><img src="https://i.loli.net/2021/09/23/OMiZmapWuQNzyCA.png" alt="tomcat.png"></p><ul><li>update resources:更新静态资源，比如html，js，css等资源，再运行和调试模式下都是立即生效的。</li><li>update classes and resources  更新java，jsp等和静态资源，<ul><li>1.在java修改后，会被编译成class文件，然后覆盖到target/kao文件夹下，在IDE调试模式下会立即生效，在IDE运行模式下不立即生效，需要redeployed才生效</li><li>jsp被修改后，再次访问时会自动更新，由于是访问时才检测是否修改，是否重新编译，故在IDE运行模式下和调试模式下都是立即生效的</li></ul></li><li>redeployed  重新部署，发布到tomcat里，不是重启tomcat，而是把原来的删除，再把新的放进去</li><li>restart server  重启tmocat</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc连接mysql的url写法及常见属性</title>
      <link href="/2021/09/14/jdbc-lian-jie-mysql-de-url-xie-fa-ji-chang-jian-shu-xing/"/>
      <url>/2021/09/14/jdbc-lian-jie-mysql-de-url-xie-fa-ji-chang-jian-shu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="jdbc连接mysql的url写法及常见属性"><a href="#jdbc连接mysql的url写法及常见属性" class="headerlink" title="jdbc连接mysql的url写法及常见属性"></a>jdbc连接mysql的url写法及常见属性</h1><p>制作人：WenMing</p><p>微信：19871173328</p><hr><p><font color="green">URL=jdbc:mysql://[host][:port]/[database]</font></p><p>其后可跟性能参数：？[propertyName1=propertyValue1]&amp;[propertyName2=propertyValue2]…</p><p>MYSQL 8.0 以上版本数据库连接有所不同：</p><ol><li>MYSQL 8.0 以上版本驱动包为mysql-connector-java-8.0.16.jar</li><li>com.mysql.jdbc.Driver更换为 com.mysql.cj.jdbc.Driver</li></ol><p>重要参数如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>缺省值</th><th>最低版本要求</th></tr></thead><tbody><tr><td>user</td><td>数据库用户名（用于连接数据库）</td><td></td><td>所有版本</td></tr><tr><td>password</td><td>用户密码（用于连接数据库）</td><td></td><td>所有版本</td></tr><tr><td>useUnicode</td><td>是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为true</td><td>false</td><td>1.1g</td></tr><tr><td>characterEncoding</td><td>当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbk</td><td>false</td><td>1.1g</td></tr><tr><td>autoReconnect</td><td>当数据库连接异常中断时，是否自动重新连接？</td><td>false</td><td>1.1</td></tr><tr><td>autoReconnectForPools</td><td>是否使用针对数据库连接池的重连策略</td><td>false</td><td>3.1.3</td></tr><tr><td>failOverReadOnly</td><td>自动重连成功后，连接是否设置为只读？</td><td>true</td><td>3.0.12</td></tr><tr><td>maxReconnects</td><td>autoReconnect设置为true时，重试连接的次数</td><td>3</td><td>1.1</td></tr><tr><td>initialTimeout</td><td>autoReconnect设置为true时，两次重连之间的时间间隔，单位：秒</td><td>2</td><td>1.1</td></tr><tr><td>connectTimeout</td><td>和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本</td><td>0</td><td>3.0.1</td></tr><tr><td>socketTimeout</td><td>socket操作（读写）超时，单位：毫秒。 0表示永不超时</td><td>0</td><td>3.0.1</td></tr></tbody></table><p>mysql常用配置：</p><p>jdbc:mysql://localhost:3306/数据库名?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8</p><p>&amp;serverTimezone=GMT%2B8</p>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JdbcTemplate学习</title>
      <link href="/2021/09/12/jdbctemplate-xue-xi/"/>
      <url>/2021/09/12/jdbctemplate-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Juni常用注解</title>
      <link href="/2021/09/12/juni-chu-tan/"/>
      <url>/2021/09/12/juni-chu-tan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql部分知识整理(二)</title>
      <link href="/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li-er/"/>
      <url>/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li-er/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=103027&amp;auto=0&amp;height=66"></iframe><h1 id="mysql部分知识整理（二）"><a href="#mysql部分知识整理（二）" class="headerlink" title="mysql部分知识整理（二）"></a>mysql部分知识整理（二）</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><p><font color="red">本文续上文</font></p><h2 id="第六部分：mysql流程控制介绍"><a href="#第六部分：mysql流程控制介绍" class="headerlink" title="第六部分：mysql流程控制介绍"></a>第六部分：mysql流程控制介绍</h2><h3 id="6-1-分支结构"><a href="#6-1-分支结构" class="headerlink" title="6.1 分支结构"></a>6.1 分支结构</h3><h4 id="6-1-1-if函数"><a href="#6-1-1-if函数" class="headerlink" title="6.1.1 if函数"></a>6.1.1 if函数</h4><p>实现简单的双分支</p><p><code>if(表达式1,表达式2,表达式3)</code>；可应用在任何地方</p><h4 id="6-1-2-case结构"><a href="#6-1-2-case结构" class="headerlink" title="6.1.2 case结构"></a>6.1.2 case结构</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#结构一：</span><span class="token keyword">case</span> 变量<span class="token operator">|</span>表达式<span class="token operator">|</span>字段<span class="token keyword">when</span> 值 <span class="token keyword">then</span> 显示的值或语句<span class="token keyword">when</span> 值 <span class="token keyword">then</span> 显示的值或语句。。。<span class="token keyword">else</span> 显示的值或语句<span class="token keyword">end</span> <span class="token keyword">case</span>；<span class="token comment">#结构二：</span><span class="token keyword">case</span> <span class="token keyword">when</span> 条件 <span class="token keyword">then</span> 显示的值或语句<span class="token keyword">when</span> 条件 <span class="token keyword">then</span> 显示的值或语句。。。<span class="token keyword">else</span> 显示的值或语句<span class="token keyword">end</span> <span class="token keyword">case</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：</p><ul><li>可以作为表达式，嵌套在其他语句中使用，可以放在任何地方</li><li>作为独立的语句使用时，只能放在begin and内使用</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> test_case<span class="token punctuation">(</span><span class="token operator">in</span> score <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">case</span> <span class="token keyword">when</span> score<span class="token operator">&gt;=</span><span class="token number">90</span> <span class="token keyword">then</span> <span class="token keyword">select</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">when</span> score<span class="token operator">&gt;=</span><span class="token number">80</span> <span class="token keyword">then</span> <span class="token keyword">select</span> <span class="token string">'B'</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">select</span> <span class="token string">'C'</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span> <span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-3-if-elseif结构"><a href="#6-1-3-if-elseif结构" class="headerlink" title="6.1.3 if-elseif结构"></a>6.1.3 if-elseif结构</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">if</span> 条件<span class="token number">1</span> <span class="token keyword">then</span> 语句<span class="token number">1</span>；<span class="token keyword">elseif</span> 条件<span class="token number">2</span> <span class="token keyword">then</span> 语句<span class="token number">2</span>；。。。<span class="token keyword">else</span> 语句n；<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只能应用在begin and中</p><h3 id="6-2-循环结构"><a href="#6-2-循环结构" class="headerlink" title="6.2 循环结构"></a>6.2 循环结构</h3><h4 id="6-2-1-语法"><a href="#6-2-1-语法" class="headerlink" title="6.2.1 语法"></a>6.2.1 语法</h4><ul><li><p>while</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span><span class="token keyword">while</span> 循环条件 <span class="token keyword">do</span>循环体；<span class="token keyword">end</span> <span class="token keyword">while</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>loop</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span><span class="token keyword">loop</span>循环体<span class="token keyword">end</span> <span class="token keyword">loop</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>repeat</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#类似于do-while</span><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span> <span class="token keyword">repeat</span>循环体until 结束循环条件<span class="token keyword">end</span> <span class="token keyword">repeat</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-2-2-案例"><a href="#6-2-2-案例" class="headerlink" title="6.2.2 案例"></a>6.2.2 案例</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 批量插入</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_while<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'asaf'</span><span class="token punctuation">,</span>aefsaaw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token comment"># 批量插入，次数大于20则停止,iterate类似于continue，leave类似于break</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> test_while<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>a: <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'as'</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> i<span class="token operator">&gt;=</span><span class="token number">20</span> <span class="token keyword">then</span> <span class="token keyword">leave</span> a<span class="token punctuation">;</span><span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span> a<span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环结构只能使用在begin end中。</p><h2 id="第七部分：触发器"><a href="#第七部分：触发器" class="headerlink" title="第七部分：触发器"></a>第七部分：触发器</h2><h2 id="第八部分：SQL数据类型"><a href="#第八部分：SQL数据类型" class="headerlink" title="第八部分：SQL数据类型"></a>第八部分：SQL数据类型</h2>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql部分知识整理(一)</title>
      <link href="/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li/"/>
      <url>/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1384026889&amp;auto=0&amp;height=66"></iframe><h1 id="mysql部分知识整理-一"><a href="#mysql部分知识整理-一" class="headerlink" title="mysql部分知识整理(一)"></a>mysql部分知识整理(一)</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="第一部分：事务"><a href="#第一部分：事务" class="headerlink" title="第一部分：事务"></a>第一部分：事务</h2><h3 id="1-1-事务概述"><a href="#1-1-事务概述" class="headerlink" title="1.1 事务概述"></a>1.1 事务概述</h3><ul><li><p>使用事务处理，确保成批的SQL操作要么全部执行要么全部不执行，来维护数据库的完整性。</p><p>当多个用户访问同一数据时，一个用户在更改数据过程中可能有其他同时执行更改的用户，为保证数据库记录从一个一致性状态变为另一个一致性状态，了解事务的相关特性有其必要。</p></li></ul><h3 id="1-2-事务特性（ACID）"><a href="#1-2-事务特性（ACID）" class="headerlink" title="1.2 事务特性（ACID）"></a>1.2 事务特性（ACID）</h3><ul><li>原子性 ：事务所有操作视为原子单位，对事务的操作只能完全提交或完全回滚</li><li>一致性 ：事务完成时，数据必须是一致性状态的转移，所有的变更都应用于事务的修改，确保数据的完整性。例如转账前后收发双方总钱数不变</li><li>隔离性 ：一个事务的操作必须与其他事务操作相隔离。进行事务查看数据时数据所处的状态要么是被另一并发事务修改之前的状态，要么是修改之后的状态，而不会是另一并发事务执行操作时中间的状态，这通过锁机制实现。</li><li>持久性 ：事务完成后，做的修改对数据影响是永久的。</li></ul><h3 id="1-3-mysql事务隔离级别"><a href="#1-3-mysql事务隔离级别" class="headerlink" title="1.3 mysql事务隔离级别"></a>1.3 mysql事务隔离级别</h3><p>mysql中提供四种事务隔离级别：READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE 在了解之前先来看一下一些并发问题</p><p><img src="https://i.loli.net/2021/09/10/TgHx51AzeSsmMvu.png" alt="并发问题.png"></p><p>查看系统事务隔离级别：<code>select @@global.tx_isolation</code></p><p>设置事务隔离级别：<code>set global transaction isolation level ...</code></p><p>以下隔离级别一次越来越安全，但并发率越来越差。</p><ul><li>READ UNCOMMITTED ：该隔离级别，所有事务能看到其他事务未提交的修改，其性能不必其他级别高多少，很少使用，会产生脏读（设置隔离级别时最低要解决脏读问题）</li><li>READ COMMITTED ：大多数系统默认隔离级别。解决脏读，即事务只能看见提交事务的改变，但会引发不可重复读。即在同一事务期间可能会两次读出的数据不同。</li><li>REPEATABLE READ ：mysql默认隔离界别。解决不可重复读，能确保同一事务在并发读取数据行时看到同样数据行，但会产生幻读，即第一个事务对表中数据做了修改，这涉及全部数据行，但另一事务向表中插入了数据行，第一个事务就会发现多出了一行，且这行数据没有被我修改。</li><li>SERIALIZABLE：强制事务排序，解决幻读。即在每个读的数据行加上共享锁，这会导致大量超时现象。阻塞现象仅仅体现在读数据行上，进行其他操作不会阻塞。</li></ul><h3 id="1-4-使用事务相关操作"><a href="#1-4-使用事务相关操作" class="headerlink" title="1.4 使用事务相关操作"></a>1.4 使用事务相关操作</h3><ul><li><p>开启事务<code>start transaction</code></p></li><li><p>使用ROLLBACK</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提交事务commit，使用方法与rollback相同</p></li><li><p>设置保留点，简单的rollback与commit可以撤销和写入整个事务，但对于复杂的事务，只需要部分撤销或提交，此时设置保留点。<code>savepoint a1</code>退回时<code>rollback to a1</code></p></li><li><p>更改默认提交 <code>set autocommit=false</code></p></li></ul><h2 id="第二部分：约束"><a href="#第二部分：约束" class="headerlink" title="第二部分：约束"></a>第二部分：约束</h2><h3 id="2-1-常见约束"><a href="#2-1-常见约束" class="headerlink" title="2.1 常见约束"></a>2.1 常见约束</h3><ul><li>PRIMARY KEY：该表主键，主键默认加上NOT NULL，UNIQUE</li><li>FOREIGN KEY：外键，表示该属性是与之联系的某表的主键。<ul><li>特点：<ul><li>表的外键列类型和主表关联列类型兼容</li><li>主表的关联列必须是key，即主键或唯一</li><li>插入数据时先插主表，再插从表；删除数据时先删从表，再删主表</li></ul></li></ul></li><li>NOT NULL：非空</li><li>UNIQUE：属性唯一</li><li>DEFAULT：设置属性默认值</li><li>AUTO_INCREMENT：自增</li></ul><h3 id="2-2-添加约束的时机即约束相关操作"><a href="#2-2-添加约束的时机即约束相关操作" class="headerlink" title="2.2 添加约束的时机即约束相关操作"></a>2.2 添加约束的时机即约束相关操作</h3><ul><li><p>修改表时添加约束：</p><ul><li><p>添加约束，利用alter</p><p><code>alter table stu add constraint pk primary key(id)</code>或</p><p><code>alter table stu modify column id int primary key</code>添加主键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_stu_major <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#添加外键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> <span class="token keyword">constraint</span> DF <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> age<span class="token punctuation">;</span><span class="token comment">#添加默认约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>创建表时添加约束：</p><ul><li><p>添加列级约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token comment">#主键</span>    stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token comment">#非空</span>    seat <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">18</span>    majorid <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#列级约束只支持非空，默认，唯一，主键约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加表级约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>    stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    seat <span class="token keyword">int</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    majorid <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> uq <span class="token keyword">unique</span><span class="token punctuation">(</span>seat<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_stu_major <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>删除约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">constraint</span> 约束名；<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 列名 。。。；<span class="token comment">#modify是万能的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="2-3-自增约束扩展"><a href="#2-3-自增约束扩展" class="headerlink" title="2.3 自增约束扩展"></a>2.3 自增约束扩展</h3><p>创建表时可以设置自增，设为自增的列插入值时可以忽略。</p><ul><li><p>标识列必须和key列搭配，即时主键或唯一</p></li><li><p>一个表至多一个自增列</p></li><li><p>标识列只能是数值型</p></li><li><p>修改表时设置和删除标识列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> tab_identify <span class="token keyword">modify</span> <span class="token keyword">column</span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tab_identify <span class="token keyword">modify</span> <span class="token keyword">column</span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="第三部分：视图"><a href="#第三部分：视图" class="headerlink" title="第三部分：视图"></a>第三部分：视图</h2><h3 id="3-1-为什么使用视图"><a href="#3-1-为什么使用视图" class="headerlink" title="3.1 为什么使用视图"></a>3.1 为什么使用视图</h3><p>有时候查询很复杂，视图可以使用户不看整个数据库的数据，而只关心对自己有用的数据，其本质是一张虚拟的表，视图的列可以来自不同的表，其建立和删除不影响基本的表，<font color="green">但对试图内容的更新（添加，删除，修改）会影响基本表</font>，故当视图来自多个表时，不允许添加和删除数据。</p><h3 id="3-2-视图相关操作"><a href="#3-2-视图相关操作" class="headerlink" title="3.2 视图相关操作"></a>3.2 视图相关操作</h3><h4 id="3-2-1-创建视图"><a href="#3-2-1-创建视图" class="headerlink" title="3.2.1 创建视图"></a>3.2.1 创建视图</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> <span class="token keyword">replace</span><span class="token punctuation">]</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token punctuation">[</span><span class="token keyword">with</span><span class="token punctuation">[</span><span class="token keyword">cascaded</span><span class="token operator">|</span><span class="token keyword">LOCAL</span><span class="token punctuation">]</span><span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CASCADED 表示更新视图时要满足有关视图和表的条件,在创建视图时建议加上此参数，这样从视图派生出新视图时，需考虑父视图的约束条件，保证数据的安全性。</p><h4 id="3-2-2-查看视图"><a href="#3-2-2-查看视图" class="headerlink" title="3.2.2 查看视图"></a>3.2.2 查看视图</h4><p>使用DESC 例如<code>desc&nbsp;viewname</code></p><p><strong>使用show tables 也可以查看视图</strong>，在mysql中，所有的视图定义都存在数据库<code>information_schema</code>的表views中，可以如此查看视图详细信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>views<span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'viewname'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-2-3-修改视图-针对表结构"><a href="#3-2-3-修改视图-针对表结构" class="headerlink" title="3.2.3 修改视图(针对表结构)"></a>3.2.3 修改视图(针对表结构)</h4><p>当基本表的字段发生变化时，修改视图保持一致性，通过<code>create&nbsp;or&nbsp;replace&nbsp;view</code>或<code>alter</code>实现</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token keyword">with</span> <span class="token keyword">cascaded</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token keyword">with</span> <span class="token keyword">cascaded</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-4更新视图（针对表中字段内容）"><a href="#3-2-4更新视图（针对表中字段内容）" class="headerlink" title="3.2.4更新视图（针对表中字段内容）"></a>3.2.4更新视图（针对表中字段内容）</h4><p>与操纵基本表一样，select，update，insert，delete</p><h4 id="3-2-5-视图不能更新情况"><a href="#3-2-5-视图不能更新情况" class="headerlink" title="3.2.5 视图不能更新情况"></a>3.2.5 视图不能更新情况</h4><ul><li>视图包含UNION , UNOIN ALL , DISTINCT , GROUP BY , HAVING等关键字</li><li>常量视图 <code>create&nbsp;view&nbsp;view3&nbsp;as&nbsp;select&nbsp;'REBCCA'&nbsp;as&nbsp;name</code></li><li>包含子查询的视图也不能更新</li><li>视图中包含分组函数时不能更新视图</li></ul><h4 id="3-2-6-删除视图"><a href="#3-2-6-删除视图" class="headerlink" title="3.2.6 删除视图"></a>3.2.6 删除视图</h4><p><code>drop&nbsp;view&nbsp;viewname</code></p><h2 id="第四部分-：存储过程和函数"><a href="#第四部分-：存储过程和函数" class="headerlink" title="第四部分 ：存储过程和函数"></a>第四部分 ：存储过程和函数</h2><h3 id="4-1-存储过程"><a href="#4-1-存储过程" class="headerlink" title="4.1 存储过程"></a>4.1 存储过程</h3><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> procedure_name<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">SQL</span> 代码<span class="token keyword">end</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数的语法形式：<code>[IN|OUT|INOUT]&nbsp;param_name&nbsp;type</code>,<code>IN</code>可以做输入值，<code>OUT</code>可以做返回值，<code>INOUT</code>都可以做</p><ul><li><p>空参列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> myp1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'asdq'</span><span class="token punctuation">,</span><span class="token string">'adqqe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带IN模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp2<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> boys bo<span class="token keyword">right</span> <span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boyfriend<span class="token keyword">end</span> $<span class="token keyword">call</span> myp2<span class="token punctuation">(</span><span class="token string">'adfs'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带OUT模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp3<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> boy <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span>name <span class="token keyword">into</span> boy<span class="token keyword">from</span> boys bo<span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boy<span class="token keyword">where</span> b<span class="token punctuation">.</span>name<span class="token operator">=</span>beautyName<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">call</span> myp3<span class="token punctuation">(</span><span class="token string">'asda'</span><span class="token punctuation">,</span><span class="token variable">@output</span><span class="token punctuation">)</span>$<span class="token keyword">select</span> <span class="token variable">@output$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#带多个IN和OUT参数</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp4<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> boyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> userCP <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span>name<span class="token punctuation">,</span>bo<span class="token punctuation">.</span>userCP <span class="token keyword">into</span> boyName<span class="token punctuation">,</span>userCP<span class="token keyword">from</span> boys bo<span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boyfriendid<span class="token keyword">where</span> b<span class="token punctuation">.</span>name<span class="token operator">=</span>beautyName<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">call</span> myp4<span class="token punctuation">(</span><span class="token string">'adef'</span><span class="token punctuation">,</span><span class="token variable">@name</span><span class="token punctuation">,</span><span class="token variable">@cpnum</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带INOUT模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp5<span class="token punctuation">(</span><span class="token keyword">INOUT</span> a <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">INOUT</span> b <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">set</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">set</span> b<span class="token operator">=</span>b<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="存储过程删除"><a href="#存储过程删除" class="headerlink" title="存储过程删除"></a>存储过程删除</h4><p><code>drop&nbsp;procedure&nbsp;procedure_name</code></p><h4 id="存储过程的查看"><a href="#存储过程的查看" class="headerlink" title="存储过程的查看"></a>存储过程的查看</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#利用SHOW [procedure | function ] STATUS [like 'name']</span><span class="token comment">#此时查看存储过程或函数的状态，包括创建修改时间，描述等等。</span><span class="token comment">#利用show create [procedure | function ] name</span><span class="token comment">#查看存储过程或函数的定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-函数"><a href="#4-2-函数" class="headerlink" title="4.2 函数"></a>4.2 函数</h3><h4 id="4-2-1-存储过程与函数对比"><a href="#4-2-1-存储过程与函数对比" class="headerlink" title="4.2.1 存储过程与函数对比"></a>4.2.1 存储过程与函数对比</h4><ul><li>存储过程有0个返回或多个返回，但函数有且仅有一个返回</li><li>存储过程适合做批量操作数据，函数适合做处理数据得到返回</li></ul><h4 id="4-2-2-函数创建"><a href="#4-2-2-函数创建" class="headerlink" title="4.2.2 函数创建"></a>4.2.2 函数创建</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token keyword">returns</span> 返回类型<span class="token keyword">begin</span>函数体<span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-案例演示"><a href="#4-2-3-案例演示" class="headerlink" title="4.2.3 案例演示"></a>4.2.3 案例演示</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#返回公司员工个数</span><span class="token keyword">create</span> <span class="token keyword">function</span> myf1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token keyword">begin</span><span class="token keyword">declare</span> c <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> c<span class="token keyword">from</span> employees<span class="token punctuation">;</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">select</span> myf1<span class="token punctuation">(</span><span class="token punctuation">)</span>$  <span class="token comment">#调用函数</span><span class="token comment">#根据员工名返回工资</span><span class="token keyword">create</span> <span class="token keyword">function</span> myf2<span class="token punctuation">(</span>empName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token keyword">begin</span><span class="token keyword">set</span> <span class="token variable">@sal</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">select</span> salary <span class="token keyword">into</span> <span class="token variable">@sal</span><span class="token keyword">from</span> employees<span class="token keyword">where</span> last_name<span class="token operator">=</span>empName<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">@sal</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">select</span> myf2<span class="token punctuation">(</span><span class="token string">'king'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-函数查看与删除"><a href="#4-2-4-函数查看与删除" class="headerlink" title="4.2.4 函数查看与删除"></a>4.2.4 函数查看与删除</h4><p>查看见上文 删除<code>DROP&nbsp;FUNCTION&nbsp;myf3;</code></p><h2 id="第五部分：变量"><a href="#第五部分：变量" class="headerlink" title="第五部分：变量"></a>第五部分：变量</h2><h3 id="5-1-变量概述"><a href="#5-1-变量概述" class="headerlink" title="5.1  变量概述"></a>5.1  变量概述</h3><ul><li>系统变量：系统提供，不是用户定义；<ul><li>查看系统变量：<code>show [global|session] variables like '% %'</code></li><li>查看系统变量的值：<code>select&nbsp;@@[global|session].变量名</code></li><li>设置变量值：<code>set&nbsp;@@[global|session].变量名=值</code></li></ul></li><li>会话变量：仅仅针对于当前会话有效，服务器启动后会重置<ul><li>语法同上，加上session</li></ul></li><li>对于系统定义的变量查看有两种方式show和select @@</li></ul><h3 id="5-2-自定义变量"><a href="#5-2-自定义变量" class="headerlink" title="5.2 自定义变量"></a>5.2 自定义变量</h3><h4 id="5-2-1-用户变量"><a href="#5-2-1-用户变量" class="headerlink" title="5.2.1 用户变量"></a>5.2.1 用户变量</h4><p>使用步骤：声明-&gt;赋值-&gt;使用</p><p>①声明并初始化：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> @用户变量<span class="token operator">=</span>值；<span class="token comment">#方式一</span><span class="token keyword">set</span> @用户变量:<span class="token operator">=</span>值；<span class="token comment">#方式二</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>②赋值</p><ul><li>方式一：语句同上</li><li>方式二：<code>select&nbsp;字段&nbsp;into&nbsp;变量名&nbsp;from&nbsp;表</code>，</li></ul><h4 id="5-2-2-局部变量"><a href="#5-2-2-局部变量" class="headerlink" title="5.2.2 局部变量"></a>5.2.2 局部变量</h4><p>作用域仅仅在begin end里有效</p><ul><li>声明 ：<code>declare&nbsp;变量名&nbsp;类型&nbsp;default&nbsp;值</code></li><li>赋值 ：<code>set&nbsp;局部变量=值</code>，<code>set&nbsp;局部变量:=值</code>，<code>select&nbsp;字段&nbsp;into&nbsp;局部变量&nbsp;from&nbsp;表</code></li><li>使用 ：<code>select&nbsp;局部变量</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
