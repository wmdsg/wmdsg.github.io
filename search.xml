<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql部分知识整理(二)</title>
      <link href="/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li-er/"/>
      <url>/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li-er/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=103027&amp;auto=0&amp;height=66"></iframe><h1 id="mysql部分知识整理（二）"><a href="#mysql部分知识整理（二）" class="headerlink" title="mysql部分知识整理（二）"></a>mysql部分知识整理（二）</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><p><font color="red">本文续上文</font></p><h2 id="第六部分：mysql流程控制介绍"><a href="#第六部分：mysql流程控制介绍" class="headerlink" title="第六部分：mysql流程控制介绍"></a>第六部分：mysql流程控制介绍</h2><h3 id="6-1-分支结构"><a href="#6-1-分支结构" class="headerlink" title="6.1 分支结构"></a>6.1 分支结构</h3><h4 id="6-1-1-if函数"><a href="#6-1-1-if函数" class="headerlink" title="6.1.1 if函数"></a>6.1.1 if函数</h4><p>实现简单的双分支</p><p><code>if(表达式1,表达式2,表达式3)</code>；可应用在任何地方</p><h4 id="6-1-2-case结构"><a href="#6-1-2-case结构" class="headerlink" title="6.1.2 case结构"></a>6.1.2 case结构</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#结构一：</span><span class="token keyword">case</span> 变量<span class="token operator">|</span>表达式<span class="token operator">|</span>字段<span class="token keyword">when</span> 值 <span class="token keyword">then</span> 显示的值或语句<span class="token keyword">when</span> 值 <span class="token keyword">then</span> 显示的值或语句。。。<span class="token keyword">else</span> 显示的值或语句<span class="token keyword">end</span> <span class="token keyword">case</span>；<span class="token comment">#结构二：</span><span class="token keyword">case</span> <span class="token keyword">when</span> 条件 <span class="token keyword">then</span> 显示的值或语句<span class="token keyword">when</span> 条件 <span class="token keyword">then</span> 显示的值或语句。。。<span class="token keyword">else</span> 显示的值或语句<span class="token keyword">end</span> <span class="token keyword">case</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：</p><ul><li>可以作为表达式，嵌套在其他语句中使用，可以放在任何地方</li><li>作为独立的语句使用时，只能放在begin and内使用</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> test_case<span class="token punctuation">(</span><span class="token operator">in</span> score <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">case</span> <span class="token keyword">when</span> score<span class="token operator">&gt;=</span><span class="token number">90</span> <span class="token keyword">then</span> <span class="token keyword">select</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">when</span> score<span class="token operator">&gt;=</span><span class="token number">80</span> <span class="token keyword">then</span> <span class="token keyword">select</span> <span class="token string">'B'</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">select</span> <span class="token string">'C'</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span> <span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-3-if-elseif结构"><a href="#6-1-3-if-elseif结构" class="headerlink" title="6.1.3 if-elseif结构"></a>6.1.3 if-elseif结构</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">if</span> 条件<span class="token number">1</span> <span class="token keyword">then</span> 语句<span class="token number">1</span>；<span class="token keyword">elseif</span> 条件<span class="token number">2</span> <span class="token keyword">then</span> 语句<span class="token number">2</span>；。。。<span class="token keyword">else</span> 语句n；<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只能应用在begin and中</p><h3 id="6-2-循环结构"><a href="#6-2-循环结构" class="headerlink" title="6.2 循环结构"></a>6.2 循环结构</h3><h4 id="6-2-1-语法"><a href="#6-2-1-语法" class="headerlink" title="6.2.1 语法"></a>6.2.1 语法</h4><ul><li><p>while</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span><span class="token keyword">while</span> 循环条件 <span class="token keyword">do</span>循环体；<span class="token keyword">end</span> <span class="token keyword">while</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>loop</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span><span class="token keyword">loop</span>循环体<span class="token keyword">end</span> <span class="token keyword">loop</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>repeat</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#类似于do-while</span><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span> <span class="token keyword">repeat</span>循环体until 结束循环条件<span class="token keyword">end</span> <span class="token keyword">repeat</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-2-2-案例"><a href="#6-2-2-案例" class="headerlink" title="6.2.2 案例"></a>6.2.2 案例</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 批量插入</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_while<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'asaf'</span><span class="token punctuation">,</span>aefsaaw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token comment"># 批量插入，次数大于20则停止,iterate类似于continue，leave类似于break</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> test_while<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>a: <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'as'</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> i<span class="token operator">&gt;=</span><span class="token number">20</span> <span class="token keyword">then</span> <span class="token keyword">leave</span> a<span class="token punctuation">;</span><span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span> a<span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环结构只能使用在begin end中。</p><h2 id="第七部分：触发器"><a href="#第七部分：触发器" class="headerlink" title="第七部分：触发器"></a>第七部分：触发器</h2>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql部分知识整理(一)</title>
      <link href="/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li/"/>
      <url>/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1384026889&amp;auto=0&amp;height=66"></iframe><h1 id="mysql部分知识整理-一"><a href="#mysql部分知识整理-一" class="headerlink" title="mysql部分知识整理(一)"></a>mysql部分知识整理(一)</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="第一部分：事务"><a href="#第一部分：事务" class="headerlink" title="第一部分：事务"></a>第一部分：事务</h2><h3 id="1-1-事务概述"><a href="#1-1-事务概述" class="headerlink" title="1.1 事务概述"></a>1.1 事务概述</h3><ul><li><p>使用事务处理，确保成批的SQL操作要么全部执行要么全部不执行，来维护数据库的完整性。</p><p>当多个用户访问同一数据时，一个用户在更改数据过程中可能有其他同时执行更改的用户，为保证数据库记录从一个一致性状态变为另一个一致性状态，了解事务的相关特性有其必要。</p></li></ul><h3 id="1-2-事务特性（ACID）"><a href="#1-2-事务特性（ACID）" class="headerlink" title="1.2 事务特性（ACID）"></a>1.2 事务特性（ACID）</h3><ul><li>原子性 ：事务所有操作视为原子单位，对事务的操作只能完全提交或完全回滚</li><li>一致性 ：事务完成时，数据必须是一致性状态的转移，所有的变更都应用于事务的修改，确保数据的完整性。例如转账前后收发双方总钱数不变</li><li>隔离性 ：一个事务的操作必须与其他事务操作相隔离。进行事务查看数据时数据所处的状态要么是被另一并发事务修改之前的状态，要么是修改之后的状态，而不会是另一并发事务执行操作时中间的状态，这通过锁机制实现。</li><li>持久性 ：事务完成后，做的修改对数据影响是永久的。</li></ul><h3 id="1-3-mysql事务隔离级别"><a href="#1-3-mysql事务隔离级别" class="headerlink" title="1.3 mysql事务隔离级别"></a>1.3 mysql事务隔离级别</h3><p>mysql中提供四种事务隔离级别：READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE 在了解之前先来看一下一些并发问题</p><p><img src="https://i.loli.net/2021/09/10/TgHx51AzeSsmMvu.png" alt="并发问题.png"></p><p>查看系统事务隔离级别：<code>select @@global.tx_isolation</code></p><p>设置事务隔离级别：<code>set global transaction isolation level ...</code></p><p>以下隔离级别一次越来越安全，但并发率越来越差。</p><ul><li>READ UNCOMMITTED ：该隔离级别，所有事务能看到其他事务未提交的修改，其性能不必其他级别高多少，很少使用，会产生脏读（设置隔离级别时最低要解决脏读问题）</li><li>READ COMMITTED ：大多数系统默认隔离级别。解决脏读，即事务只能看见提交事务的改变，但会引发不可重复读。即在同一事务期间可能会两次读出的数据不同。</li><li>REPEATABLE READ ：mysql默认隔离界别。解决不可重复读，能确保同一事务在并发读取数据行时看到同样数据行，但会产生幻读，即第一个事务对表中数据做了修改，这涉及全部数据行，但另一事务向表中插入了数据行，第一个事务就会发现多出了一行，且这行数据没有被我修改。</li><li>SERIALIZABLE：强制事务排序，解决幻读。即在每个读的数据行加上共享锁，这会导致大量超时现象。阻塞现象仅仅体现在读数据行上，进行其他操作不会阻塞。</li></ul><h3 id="1-4-使用事务相关操作"><a href="#1-4-使用事务相关操作" class="headerlink" title="1.4 使用事务相关操作"></a>1.4 使用事务相关操作</h3><ul><li><p>开启事务<code>start transaction</code></p></li><li><p>使用ROLLBACK</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提交事务commit，使用方法与rollback相同</p></li><li><p>设置保留点，简单的rollback与commit可以撤销和写入整个事务，但对于复杂的事务，只需要部分撤销或提交，此时设置保留点。<code>savepoint a1</code>退回时<code>rollback to a1</code></p></li><li><p>更改默认提交 <code>set autocommit=false</code></p></li></ul><h2 id="第二部分：约束"><a href="#第二部分：约束" class="headerlink" title="第二部分：约束"></a>第二部分：约束</h2><h3 id="2-1-常见约束"><a href="#2-1-常见约束" class="headerlink" title="2.1 常见约束"></a>2.1 常见约束</h3><ul><li>PRIMARY KEY：该表主键，主键默认加上NOT NULL，UNIQUE</li><li>FOREIGN KEY：外键，表示该属性是与之联系的某表的主键。<ul><li>特点：<ul><li>表的外键列类型和主表关联列类型兼容</li><li>主表的关联列必须是key，即主键或唯一</li><li>插入数据时先插主表，再插从表；删除数据时先删从表，再删主表</li></ul></li></ul></li><li>NOT NULL：非空</li><li>UNIQUE：属性唯一</li><li>DEFAULT：设置属性默认值</li><li>AUTO_INCREMENT：自增</li></ul><h3 id="2-2-添加约束的时机即约束相关操作"><a href="#2-2-添加约束的时机即约束相关操作" class="headerlink" title="2.2 添加约束的时机即约束相关操作"></a>2.2 添加约束的时机即约束相关操作</h3><ul><li><p>修改表时添加约束：</p><ul><li><p>添加约束，利用alter</p><p><code>alter table stu add constraint pk primary key(id)</code>或</p><p><code>alter table stu modify column id int primary key</code>添加主键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_stu_major <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#添加外键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> <span class="token keyword">constraint</span> DF <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> age<span class="token punctuation">;</span><span class="token comment">#添加默认约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>创建表时添加约束：</p><ul><li><p>添加列级约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token comment">#主键</span>    stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token comment">#非空</span>    seat <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">18</span>    majorid <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#列级约束只支持非空，默认，唯一，主键约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加表级约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>    stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    seat <span class="token keyword">int</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    majorid <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> uq <span class="token keyword">unique</span><span class="token punctuation">(</span>seat<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_stu_major <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>删除约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">constraint</span> 约束名；<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 列名 。。。；<span class="token comment">#modify是万能的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="2-3-自增约束扩展"><a href="#2-3-自增约束扩展" class="headerlink" title="2.3 自增约束扩展"></a>2.3 自增约束扩展</h3><p>创建表时可以设置自增，设为自增的列插入值时可以忽略。</p><ul><li><p>标识列必须和key列搭配，即时主键或唯一</p></li><li><p>一个表至多一个自增列</p></li><li><p>标识列只能是数值型</p></li><li><p>修改表时设置和删除标识列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> tab_identify <span class="token keyword">modify</span> <span class="token keyword">column</span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tab_identify <span class="token keyword">modify</span> <span class="token keyword">column</span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="第三部分：视图"><a href="#第三部分：视图" class="headerlink" title="第三部分：视图"></a>第三部分：视图</h2><h3 id="3-1-为什么使用视图"><a href="#3-1-为什么使用视图" class="headerlink" title="3.1 为什么使用视图"></a>3.1 为什么使用视图</h3><p>有时候查询很复杂，视图可以使用户不看整个数据库的数据，而只关心对自己有用的数据，其本质是一张虚拟的表，视图的列可以来自不同的表，其建立和删除不影响基本的表，<font color="green">但对试图内容的更新（添加，删除，修改）会影响基本表</font>，故当视图来自多个表时，不允许添加和删除数据。</p><h3 id="3-2-视图相关操作"><a href="#3-2-视图相关操作" class="headerlink" title="3.2 视图相关操作"></a>3.2 视图相关操作</h3><h4 id="3-2-1-创建视图"><a href="#3-2-1-创建视图" class="headerlink" title="3.2.1 创建视图"></a>3.2.1 创建视图</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> <span class="token keyword">replace</span><span class="token punctuation">]</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token punctuation">[</span><span class="token keyword">with</span><span class="token punctuation">[</span><span class="token keyword">cascaded</span><span class="token operator">|</span><span class="token keyword">LOCAL</span><span class="token punctuation">]</span><span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CASCADED 表示更新视图时要满足有关视图和表的条件,在创建视图时建议加上此参数，这样从视图派生出新视图时，需考虑父视图的约束条件，保证数据的安全性。</p><h4 id="3-2-2-查看视图"><a href="#3-2-2-查看视图" class="headerlink" title="3.2.2 查看视图"></a>3.2.2 查看视图</h4><p>使用DESC 例如<code>desc&nbsp;viewname</code></p><p><strong>使用show tables 也可以查看视图</strong>，在mysql中，所有的视图定义都存在数据库<code>information_schema</code>的表views中，可以如此查看视图详细信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>views<span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'viewname'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-2-3-修改视图-针对表结构"><a href="#3-2-3-修改视图-针对表结构" class="headerlink" title="3.2.3 修改视图(针对表结构)"></a>3.2.3 修改视图(针对表结构)</h4><p>当基本表的字段发生变化时，修改视图保持一致性，通过<code>create&nbsp;or&nbsp;replace&nbsp;view</code>或<code>alter</code>实现</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token keyword">with</span> <span class="token keyword">cascaded</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token keyword">with</span> <span class="token keyword">cascaded</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-4更新视图（针对表中字段内容）"><a href="#3-2-4更新视图（针对表中字段内容）" class="headerlink" title="3.2.4更新视图（针对表中字段内容）"></a>3.2.4更新视图（针对表中字段内容）</h4><p>与操纵基本表一样，select，update，insert，delete</p><h4 id="3-2-5-视图不能更新情况"><a href="#3-2-5-视图不能更新情况" class="headerlink" title="3.2.5 视图不能更新情况"></a>3.2.5 视图不能更新情况</h4><ul><li>视图包含UNION , UNOIN ALL , DISTINCT , GROUP BY , HAVING等关键字</li><li>常量视图 <code>create&nbsp;view&nbsp;view3&nbsp;as&nbsp;select&nbsp;'REBCCA'&nbsp;as&nbsp;name</code></li><li>包含子查询的视图也不能更新</li><li>视图中包含分组函数时不能更新视图</li></ul><h4 id="3-2-6-删除视图"><a href="#3-2-6-删除视图" class="headerlink" title="3.2.6 删除视图"></a>3.2.6 删除视图</h4><p><code>drop&nbsp;view&nbsp;viewname</code></p><h2 id="第四部分-：存储过程和函数"><a href="#第四部分-：存储过程和函数" class="headerlink" title="第四部分 ：存储过程和函数"></a>第四部分 ：存储过程和函数</h2><h3 id="4-1-存储过程"><a href="#4-1-存储过程" class="headerlink" title="4.1 存储过程"></a>4.1 存储过程</h3><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> procedure_name<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">SQL</span> 代码<span class="token keyword">end</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数的语法形式：<code>[IN|OUT|INOUT]&nbsp;param_name&nbsp;type</code>,<code>IN</code>可以做输入值，<code>OUT</code>可以做返回值，<code>INOUT</code>都可以做</p><ul><li><p>空参列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> myp1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'asdq'</span><span class="token punctuation">,</span><span class="token string">'adqqe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带IN模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp2<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> boys bo<span class="token keyword">right</span> <span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boyfriend<span class="token keyword">end</span> $<span class="token keyword">call</span> myp2<span class="token punctuation">(</span><span class="token string">'adfs'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带OUT模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp3<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> boy <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span>name <span class="token keyword">into</span> boy<span class="token keyword">from</span> boys bo<span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boy<span class="token keyword">where</span> b<span class="token punctuation">.</span>name<span class="token operator">=</span>beautyName<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">call</span> myp3<span class="token punctuation">(</span><span class="token string">'asda'</span><span class="token punctuation">,</span><span class="token variable">@output</span><span class="token punctuation">)</span>$<span class="token keyword">select</span> <span class="token variable">@output$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#带多个IN和OUT参数</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp4<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> boyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> userCP <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span>name<span class="token punctuation">,</span>bo<span class="token punctuation">.</span>userCP <span class="token keyword">into</span> boyName<span class="token punctuation">,</span>userCP<span class="token keyword">from</span> boys bo<span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boyfriendid<span class="token keyword">where</span> b<span class="token punctuation">.</span>name<span class="token operator">=</span>beautyName<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">call</span> myp4<span class="token punctuation">(</span><span class="token string">'adef'</span><span class="token punctuation">,</span><span class="token variable">@name</span><span class="token punctuation">,</span><span class="token variable">@cpnum</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带INOUT模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp5<span class="token punctuation">(</span><span class="token keyword">INOUT</span> a <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">INOUT</span> b <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">set</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">set</span> b<span class="token operator">=</span>b<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="存储过程删除"><a href="#存储过程删除" class="headerlink" title="存储过程删除"></a>存储过程删除</h4><p><code>drop&nbsp;procedure&nbsp;procedure_name</code></p><h4 id="存储过程的查看"><a href="#存储过程的查看" class="headerlink" title="存储过程的查看"></a>存储过程的查看</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#利用SHOW [procedure | function ] STATUS [like 'name']</span><span class="token comment">#此时查看存储过程或函数的状态，包括创建修改时间，描述等等。</span><span class="token comment">#利用show create [procedure | function ] name</span><span class="token comment">#查看存储过程或函数的定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-函数"><a href="#4-2-函数" class="headerlink" title="4.2 函数"></a>4.2 函数</h3><h4 id="4-2-1-存储过程与函数对比"><a href="#4-2-1-存储过程与函数对比" class="headerlink" title="4.2.1 存储过程与函数对比"></a>4.2.1 存储过程与函数对比</h4><ul><li>存储过程有0个返回或多个返回，但函数有且仅有一个返回</li><li>存储过程适合做批量操作数据，函数适合做处理数据得到返回</li></ul><h4 id="4-2-2-函数创建"><a href="#4-2-2-函数创建" class="headerlink" title="4.2.2 函数创建"></a>4.2.2 函数创建</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token keyword">returns</span> 返回类型<span class="token keyword">begin</span>函数体<span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-案例演示"><a href="#4-2-3-案例演示" class="headerlink" title="4.2.3 案例演示"></a>4.2.3 案例演示</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#返回公司员工个数</span><span class="token keyword">create</span> <span class="token keyword">function</span> myf1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token keyword">begin</span><span class="token keyword">declare</span> c <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> c<span class="token keyword">from</span> employees<span class="token punctuation">;</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">select</span> myf1<span class="token punctuation">(</span><span class="token punctuation">)</span>$  <span class="token comment">#调用函数</span><span class="token comment">#根据员工名返回工资</span><span class="token keyword">create</span> <span class="token keyword">function</span> myf2<span class="token punctuation">(</span>empName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token keyword">begin</span><span class="token keyword">set</span> <span class="token variable">@sal</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">select</span> salary <span class="token keyword">into</span> <span class="token variable">@sal</span><span class="token keyword">from</span> employees<span class="token keyword">where</span> last_name<span class="token operator">=</span>empName<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">@sal</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">select</span> myf2<span class="token punctuation">(</span><span class="token string">'king'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-函数查看与删除"><a href="#4-2-4-函数查看与删除" class="headerlink" title="4.2.4 函数查看与删除"></a>4.2.4 函数查看与删除</h4><p>查看见上文 删除<code>DROP&nbsp;FUNCTION&nbsp;myf3;</code></p><h2 id="第五部分：变量"><a href="#第五部分：变量" class="headerlink" title="第五部分：变量"></a>第五部分：变量</h2><h3 id="5-1-变量概述"><a href="#5-1-变量概述" class="headerlink" title="5.1  变量概述"></a>5.1  变量概述</h3><ul><li>系统变量：系统提供，不是用户定义；<ul><li>查看系统变量：<code>show [global|session] variables like '% %'</code></li><li>查看系统变量的值：<code>select&nbsp;@@[global|session].变量名</code></li><li>设置变量值：<code>set&nbsp;@@[global|session].变量名=值</code></li></ul></li><li>会话变量：仅仅针对于当前会话有效，服务器启动后会重置<ul><li>语法同上，加上session</li></ul></li><li>对于系统定义的变量查看有两种方式show和select @@</li></ul><h3 id="5-2-自定义变量"><a href="#5-2-自定义变量" class="headerlink" title="5.2 自定义变量"></a>5.2 自定义变量</h3><h4 id="5-2-1-用户变量"><a href="#5-2-1-用户变量" class="headerlink" title="5.2.1 用户变量"></a>5.2.1 用户变量</h4><p>使用步骤：声明-&gt;赋值-&gt;使用</p><p>①声明并初始化：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> @用户变量<span class="token operator">=</span>值；<span class="token comment">#方式一</span><span class="token keyword">set</span> @用户变量:<span class="token operator">=</span>值；<span class="token comment">#方式二</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>②赋值</p><ul><li>方式一：语句同上</li><li>方式二：<code>select&nbsp;字段&nbsp;into&nbsp;变量名&nbsp;from&nbsp;表</code>，</li></ul><h4 id="5-2-2-局部变量"><a href="#5-2-2-局部变量" class="headerlink" title="5.2.2 局部变量"></a>5.2.2 局部变量</h4><p>作用域仅仅在begin end里有效</p><ul><li>声明 ：<code>declare&nbsp;变量名&nbsp;类型&nbsp;default&nbsp;值</code></li><li>赋值 ：<code>set&nbsp;局部变量=值</code>，<code>set&nbsp;局部变量:=值</code>，<code>select&nbsp;字段&nbsp;into&nbsp;局部变量&nbsp;from&nbsp;表</code></li><li>使用 ：<code>select&nbsp;局部变量</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
