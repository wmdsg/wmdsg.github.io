<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java中的正则表达式</title>
      <link href="/2021/11/07/java-zhong-de-zheng-ze-biao-da-shi/"/>
      <url>/2021/11/07/java-zhong-de-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法详解</title>
      <link href="/2021/11/02/kmp-suan-fa-xiang-jie/"/>
      <url>/2021/11/02/kmp-suan-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>位图bitmap</title>
      <link href="/2021/10/30/wei-tu-bitmap/"/>
      <url>/2021/10/30/wei-tu-bitmap/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u012491646/article/details/103302704#:~:text=%E4%BD%8D%E5%9B%BE%E5%85%B6%E6%9C%AC%E8%B4%A8%E5%B0%B1%E6%98%AF%E5%88%A9%E7%94%A8hash%E5%87%BD%E6%95%B0%E6%98%A0%E5%B0%84%E7%9A%84%E4%B8%80%E7%A7%8D%20map%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9F%A5%E9%81%93java%E4%B8%AD%E7%9A%84hashmap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%B6%E5%BA%95%E5%B1%82%E4%BB%8D%E7%84%B6%E6%98%AF%E4%BB%A5hash%E5%87%BD%E6%95%B0%E6%98%A0%E5%B0%84%E7%9A%84%E6%95%B0%E5%AD%97%E4%BD%9C%E4%B8%BAkey%EF%BC%8C%E5%85%B6value%E6%98%AF%E4%BB%A5%20%E9%93%BE%E8%A1%A8,or%20%E6%95%B0%E7%BB%84%20%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%EF%BC%8C%E4%B8%80%E6%97%A6%E4%BD%BF%E7%94%A8%E4%BA%86hash%E5%87%BD%E6%95%B0%EF%BC%8C%E5%B0%B1%E6%84%8F%E5%91%B3%E7%9D%80%E5%AD%98%E5%9C%A8hash%E7%A2%B0%E6%92%9E%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7%E3%80%82.%20%E4%BD%8D%E5%9B%BE%E7%9A%84%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%85%B6%E6%9C%AC%E8%B4%A8%E5%B0%B1%E6%98%AF%E5%AF%B9hashMap%E7%9A%84%E4%B8%80%E7%A7%8D%E6%9B%B4%E5%8A%A0%E8%8A%82%E7%BA%A6%E5%86%85%E5%AD%98%E7%9A%84%E4%BC%98%E5%8C%96%EF%BC%8C%E5%85%B6%E7%9B%AE%E7%9A%84%E5%B0%B1%E6%98%AF%E6%A3%80%E6%B5%8B%E4%B8%80%E4%B8%AA%E5%80%BC%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%88%96%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%9C%A8%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%8C%E6%AF%94%E5%A6%82%E7%88%AC%E8%99%AB%E7%BB%93%E6%9E%84%E4%B8%AD%E7%9A%84url%E5%8E%BB%E9%87%8D%E5%8A%9F%E8%83%BD%EF%BC%8C%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%AD%89%E7%AD%89%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%AF%B4%E5%9C%A8%E5%AD%98%E5%9C%A8%E6%80%A7%E5%91%BD%E9%A2%98%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B8%AD%E4%BC%9A%E7%BB%8F%E5%B8%B8%E7%A2%B0%E5%88%B0%E4%BD%8D%E5%9B%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C.">位图</a></p><p><a href="https://cloud.tencent.com/developer/article/1455213">位图redis</a></p><p><a href="https://www.cnblogs.com/zzm96/p/12822537.html">位图操作</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记</title>
      <link href="/2021/10/30/redis-xue-xi-bi-ji/"/>
      <url>/2021/10/30/redis-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Nosql：泛指非关系型数据库，作为关系型数据库的补充<br>    作用：应对基于海量用户和海量数据前提下的数据处理问题<br>特征：</p><ul><li>可扩容</li><li>大数据量下高性能</li><li>灵活的数据模型</li><li>高可用</li></ul><p>常见的Nosal数据库</p><ul><li>redis</li><li>HBase</li><li>MongDB</li></ul><h2 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h2><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><h4 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h4><ol><li>添加数据：<code>set&nbsp;key&nbsp;value</code></li><li>获取数据：<code>get&nbsp;key</code></li><li>删除数据：<code>del&nbsp;key&nbsp;[key...]</code>     注：成功则返回1，失败返回0</li><li>获取多个数据：<code>mget&nbsp;key1&nbsp;key2...</code></li><li>添加多个数据：<code>mset&nbsp;key1&nbsp;value1&nbsp;key2&nbsp;value2...</code></li><li>追加信息到原始信息后部：<code>append&nbsp;key&nbsp;value</code></li><li>字符串长度：<code>strlen&nbsp;key</code></li></ol><h4 id="扩展操作"><a href="#扩展操作" class="headerlink" title="扩展操作"></a>扩展操作</h4><h5 id="类型一：数据库分表"><a href="#类型一：数据库分表" class="headerlink" title="类型一：数据库分表"></a>类型一：数据库分表</h5><p><img src="https://i.loli.net/2021/11/05/eWgncitCkrOGbLD.png" alt="redis-分表.png"></p><p>利用redis生成主键</p><p>解决方案：</p><ul><li>设置数值增加指定范围<ul><li><code>incr&nbsp;key</code></li><li><code>incrby key increment</code></li><li><code>incrbyfloat key&nbsp;increment&nbsp;</code></li></ul></li><li>设置数值减少指定范围<ul><li><code>decr&nbsp;key</code></li><li><code>decrby&nbsp;key&nbsp;increment</code></li></ul></li></ul><blockquote><p>说明:string在redis内部默认是字符串，当遇到增减类操作incr，decr时会转成数值型进行计算</p><p>redis的所有操作都是原子性的，采用单线程处理所有业务，命令是一个个执行的，无需考虑并发带来的数据影响。</p></blockquote><p>==redis用于控制数据库表主键id，为数据库表主键提供生成策略，保证数据库表主键的唯一性==</p><p>==此方案适用于所有数据库，支持数据库集群==</p><h5 id="类型二：数据时效性场景"><a href="#类型二：数据时效性场景" class="headerlink" title="类型二：数据时效性场景"></a>类型二：数据时效性场景</h5><p><img src="https://i.loli.net/2021/11/05/ySDmIZbcolC7fO9.png" alt="redis时效性.png"></p><p>解决方案：</p><ul><li>设置数据具有指定生命周期：<ul><li><code>setex&nbsp;key&nbsp;seconds&nbsp;value</code></li><li><code>pset&nbsp;key&nbsp;milliseconds&nbsp;value</code></li></ul></li></ul><p>==redis控制数据的生命周期，通过数据是否过期控制业务行为，适用于所有具有时效性的控制操作==</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>八大排序算法解析附代码</title>
      <link href="/2021/10/28/ba-da-pai-xu-suan-fa-jie-xi-fu-dai-ma/"/>
      <url>/2021/10/28/ba-da-pai-xu-suan-fa-jie-xi-fu-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="1-基本思想"><a href="#1-基本思想" class="headerlink" title="1.基本思想"></a>1.基本思想</h2><p>在插入第<code>i</code>个记录时，<code>R1,R2,R3...</code>,已经排好序，这时将<code>Ri</code>，的关键字<code>ki</code>，依次与之前排好序的关键字比较，找到合适的位置插入即可，插入位置及其后的记录依次向后移动。</p><h2 id="2-性能"><a href="#2-性能" class="headerlink" title="2.性能"></a>2.性能</h2><ul><li>平均时间复杂度<code>O(n^2)</code></li><li>最差时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(1)</code></li><li>稳定性：稳定</li></ul><p>如果插入排序的目标是把n个元素的序列升序排列，采用插入排序在最好情况和最差情况如下</p><ul><li>最好情况：序列已经是升序，这种情况下，需要进行的比较操作为n-1次</li><li>最坏情况：序列是降序，需要比较<code>n(n-1)/2</code></li></ul><h2 id="代码实现-数组"><a href="#代码实现-数组" class="headerlink" title="代码实现-数组"></a>代码实现-数组</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> len<span class="token operator">=</span>a<span class="token punctuation">.</span>length<span class="token punctuation">,</span>insertNum<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        insertNum<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>insertNum<span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向后移</span>            <span class="token operator">--</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>insertNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p><a href="https://leetcode-cn.com/problems/insertion-sort-list/">147。对链表进行插入排序</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span><span class="token class-name">ListNode</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">insertionSortList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> lastSorted<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>lastSorted<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lastSorted<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                lastSorted<span class="token operator">=</span>lastSorted<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                lastSorted<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur<span class="token operator">=</span>lastSorted<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-改进思路"><a href="#4-改进思路" class="headerlink" title="4.改进思路"></a>4.改进思路</h2><p><a href="https://zhuanlan.zhihu.com/p/122293204">改进</a></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="1-基本思想-1"><a href="#1-基本思想-1" class="headerlink" title="1.基本思想"></a>1.基本思想</h2><p>通过一趟排序将待排序的记录被一个基准关键字划分为独立的两部分，关键字前半区均小于这个关键字，后半区均大于这个关键字，然后再分别对这两部分继续排序。其使用分治法。</p><p>实现逻辑：</p><ul><li>附设两个位置指示变量，初始分别指向第一个记录和最后一个记录</li><li>从序列中找出一个基准元素，通常是第一个，首先从<code>j</code>位置向前搜索，找到第一个关键字小于<code>pivot</code>的记录，将该记录移至<code>i</code>所指的位置，然后从<code>i</code>向后搜索，找到小于<code>pivot</code>的记录将其移到<code>j</code>所指的位置，重复此过程直到<code>i==j</code>。</li><li>递归搜寻前半区和后半区</li></ul><h2 id="2-性能-1"><a href="#2-性能-1" class="headerlink" title="2.性能"></a>2.性能</h2><p>快速排序的性能取决于递归的深度，可以用递归树描述递归算法执行情况。<code>[50,10,90,31,70,40,80,60,20]</code>，的递归树：</p><p><img src="https://image.51cto.com/files/uploadimg/20110826/222536597.jpg"></p><p>在最优情况下，Partiton每次都划分很均匀，那递归树的深度就是<code>logn+1</code>，故最优情况下快排的时间复杂度是<code>O(nlogn)</code></p><p>在最坏情况下，即待排序的序列正好是逆序或正序，那每次划分只得到一个比上一次划分少一个记录的子序列，另一个为空，如果递归树画出来就是一颗斜树，需要执行<code>n-1</code>次调用，故时间复杂度为<code>O(n</code></p><p><code>^2)</code></p><p>平均情况时为<code>O(nlogn)</code>。</p><h2 id="代码实现-数组-1"><a href="#代码实现-数组-1" class="headerlink" title="代码实现-数组"></a>代码实现-数组</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pivot<span class="token operator">=</span>data<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span>low<span class="token punctuation">,</span>j<span class="token operator">=</span>high<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;=</span>pivot<span class="token punctuation">)</span> <span class="token operator">--</span>j<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>pivot<span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pivot<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>low<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> smallHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> largeHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> small<span class="token operator">=</span>smallHead<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> large<span class="token operator">=</span>largeHead<span class="token punctuation">;</span>        <span class="token keyword">int</span> pivot<span class="token operator">=</span>head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>pivot<span class="token punctuation">)</span><span class="token punctuation">{</span>                small<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                small<span class="token operator">=</span>small<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                large<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                large<span class="token operator">=</span>large<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        large<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        small<span class="token punctuation">.</span>next<span class="token operator">=</span>largeHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> right<span class="token operator">=</span><span class="token function">quickSort</span><span class="token punctuation">(</span>largeHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        largeHead<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> left<span class="token operator">=</span><span class="token function">quickSort</span><span class="token punctuation">(</span>smallHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>left<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur<span class="token punctuation">.</span>next<span class="token operator">=</span>right<span class="token punctuation">;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode关于单调栈题解</title>
      <link href="/2021/10/28/leetcode-guan-yu-dan-diao-zhan-ti-jie/"/>
      <url>/2021/10/28/leetcode-guan-yu-dan-diao-zhan-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="496-下一个更大元素I"><a href="#496-下一个更大元素I" class="headerlink" title="496.下一个更大元素I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496.下一个更大元素I</a></h1><h2 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h2><p>之前已经通过剖析单调栈的特性总结出了对于单调栈找出Next Greater Number高效率的模板，但此题的问题做了变化。此题有两个数组，第一个数组是第二个数组的子集，且两个数组相同元素在各自数组的索引不同，故在应用单调栈模板时得先解决对应元素在答案数组中的索引问题。</p><p>很朴素的思路是：</p><p>遍历<code>nums2</code>数组的每个元素，同时对于每个元素找其在<code>nums1</code>中的位置，若存在则返回其在<code>nums1</code>中的索引，进而利用这个索引存入答案数组的对应位置；若不存在，则略过此元素，为了保证正确性，还是要每个元素入栈。==很明显这个思路效率不高，因为每找一个元素都要遍历nums1，时间复杂度为O（mn）==代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n1<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n2<span class="token operator">=</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>time<span class="token operator">=</span>n1<span class="token punctuation">;</span>time<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token function">isExists</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">--</span>time<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">isExists</span><span class="token punctuation">(</span><span class="token keyword">int</span> goal<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>goal<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/28/u7iXQOUz8wT6lgv.png" alt="下一个更大元素I.png"></p><p>果然！！！</p><h2 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h2><p>基于以上问题，导致上述思路效率不高的主要问题是重复遍历，那我们想能不能不要每次都遍历<code>nums1</code>? 连接两个数组的桥梁是相等元素，一种呼之欲出的想法是我们把nums2中每个元素对应的Next Greater Number存起来，然后只遍历一次num1，直接查表不就行了，故我们借助哈希表来完成我们的思路。</p><ul><li>遍历nums2，将每个元素的Next Greater Number 存入哈希表</li><li>遍历nums1，查表得出结果，存入ans数组</li></ul><p>以空间换时间，立即将<code>O(mn)</code>的复杂度降到了<code>O(m+n)</code>，去除冗余操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n2<span class="token operator">=</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n1<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="503-下一个更大的元素II"><a href="#503-下一个更大的元素II" class="headerlink" title="503.下一个更大的元素II"></a><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503.下一个更大的元素II</a></h1><p>循环数组，我们在单调栈剖析篇已经详细详解了循环数组该如何处理，故此题应该来说是很简单的。思路就赘述了。</p><h2 id="思路一：-1"><a href="#思路一：-1" class="headerlink" title="思路一："></a>思路一：</h2><p>我们可以使用单调栈解决本题。单调栈中保存的是下标，从栈底到栈顶的下标在数组 nums 中对应的值是单调不升的。</p><p>每次我们移动到数组中的一个新的位置 ii，我们就将当前单调栈中所有对应值小于 nums[i] 的下标弹出单调栈，这些值的下一个更大元素即为 nums[i]（证明很简单：如果有更靠前的更大元素，那么这些位置将被提前弹出栈）。随后我们将位置 ii 入栈。</p><p>但是注意到只遍历一次序列是不够的，例如序列 [2,3,1][2,3,1]，最后单调栈中将剩余 [3,1][3,1]，其中元素 [1][1] 的下一个更大元素还是不知道的。</p><p>一个朴素的思想是，我们可以把这个循环数组「拉直」，即复制该序列的前 n-1n−1 个元素拼接在原序列的后面。这样我们就可以将这个新序列当作普通序列，用上文的方法来处理。</p><p>而在本题中，我们不需要显性地将该循环数组「拉直」，而只需要在处理时对下标取模即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//把等于的也pop，留下的都是严格大于的，此为单增栈</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment">//s里存的是值</span>            ans<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下四道题采用相同的思想</p><h1 id="316-去除重复字母"><a href="#316-去除重复字母" class="headerlink" title="316.去除重复字母"></a><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">316.去除重复字母</a></h1><h2 id="思路一：贪心-单调栈"><a href="#思路一：贪心-单调栈" class="headerlink" title="思路一：贪心+单调栈"></a>思路一：贪心+单调栈</h2><p>这题与402.移除k位数字类似，贪心策略一样，只不过这题没有一个全局的删除次数k，而是删除重复字母，即对于每个字符c都有一个k值，即出现的次数</p><p>对于字符串建立一个字典，保存每个字母出现的次数，除此之外还需要额外的数组，判断当前字母是否已经进栈了。</p><ul><li>从左向右遍历字符串，对于每一个字符，其未被访问过，则开始判断是否满足单调栈，若不满足单调栈，则判断当前字符在剩余字符串中出现的次数是否大于0，即是否还有该字符，若大于0，则循环出栈顶，同时对于每个出栈的元素，其要重新被标记为未访问</li><li>每次循环后字典对应字符出现次数减1</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> vis<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用于记录是否访问过</span>        <span class="token comment">//如果不借助额外空间判断是否重复，则需在每次循环中判断栈中所有元素，显然效率不高</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录每个字母出现的次数</span>        <span class="token keyword">int</span> size<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//开始维护单调递减栈，从栈底到栈顶单增</span>        <span class="token class-name">StringBuilder</span> sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>ch<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> n<span class="token operator">=</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        vis<span class="token punctuation">[</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                        sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                vis<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//这个数字一定要在括号外面写，因为这个数字表示的是后续的字符串每个字符出现的次数</span>            num<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="402-移掉k位数字"><a href="#402-移掉k位数字" class="headerlink" title="402.移掉k位数字"></a><a href="https://leetcode-cn.com/problems/remove-k-digits/">402.移掉k位数字</a></h1><h2 id="思路一：贪心-单调栈-1"><a href="#思路一：贪心-单调栈-1" class="headerlink" title="思路一：贪心+单调栈"></a>思路一：贪心+单调栈</h2><p>对于两个相同长度的数字序列，最左边的数字决定了这两个数字的大小，故要使剩下的数字最小，需要保证靠前的数字尽可能小。给定一个长度为n的数字序列<code>[D0D1D2...]</code>，从左往右找到第一个位置 i 使得<code>Di-1&gt;Di</code>,并删去Di-1，如果不存在，说明整个数字序列单调递增，删去最后的数字即可。</p><p>基于此很容易想到单调栈。</p><p>对于每个数字，如果该数字小于栈顶元素，就不断弹出栈顶元素，直到</p><ul><li>栈为空</li><li>新的栈顶元素小于当前数字</li><li>已经删除了k位数字</li></ul><p>上述步骤处理完后我们要做一些额外的处理</p><ul><li>如果我们删除的数字数目m&lt;k,则此时要从数字序列尾部继续删除剩下的数目</li><li>如果最终数字序列存在前导0，应删除</li><li>最终的数字序列为空，则应返回0</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeKdigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//利用StringBuilder模拟栈的行为</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>num<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//如果原始字符数字本身就是单增的，再循环过程中一个也没移除，则从最后一位开始移除</span>        <span class="token comment">//能保证整体最小</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="456-132-模式"><a href="#456-132-模式" class="headerlink" title="456. 132 模式"></a><a href="https://leetcode-cn.com/problems/132-pattern/">456. 132 模式</a></h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>分析132的特性，在确定一个数之后，如何快速的找到另外两个数</p><p>枚举i ：由于i是132结构中最小的数，那么相当于要在i后找一个对数（j，k），使得（j，k）都满足比i大，同时 j&gt;k，由于遍历是单向的，问题可以转化成先找k，找到之后判断[i,k]之间存在比k大的数即可</p><p>过程：</p><p>我们从后向前处理，维护一个单调递减的栈，同时使用k记录所有出栈元素的最大值，当我们遍历到i，只要满足发现<code>nums[i]&lt;k</code>，说明我们找到了132模式。这个k很关键，初始时我们将k初始化我<code>Integer.MIN_VALUE</code>，因此若要满足<code>nums[i]&lt;k</code>是不可能的，只有一种情况是，只要k值改变了，就代表出现了一个比栈顶元素大的元素，此时开始出栈；这之后，我们就只需要找<code>i</code>，因为满足条件的<code>j,k</code>已经找到了，即只要k有值，那<code>[i,k]</code>之间一定存在一个元素比k大，i又比k小，故满足132模式</p><p>举个例子：<code>[3,1,4,2]</code></p><ul><li>枚举到2，栈内元素<code>[2]</code>,<code>k=MIN_VALUE</code></li><li>枚举到4，不能进栈，2出栈更新k，4入栈，栈内元素<code>[4]</code>,k=2</li><li>枚举到 1：满足 nums[i] &lt; k，说明对于 i 而言，后面有一个比其大的元素（满足 i &lt; k 的条件），同时这个 k 的来源又是因为维护「单调递减」而弹出导致被更新的（满足 i 和 k 之间，有比 k 要大的元素）。因此我们找到了满足 132 结构的组合。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">find132pattern</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                k<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//nums[i]比栈内k之前的所有元素都大</span>            <span class="token punctuation">}</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="769-最多能完成排序的块"><a href="#769-最多能完成排序的块" class="headerlink" title="769.最多能完成排序的块"></a><a href="https://leetcode-cn.com/problems/max-chunks-to-make-sorted/">769.最多能完成排序的块</a></h1><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>个人感觉leetcode可能测试用例不够完善，评论区那些用暴力解法的都能过，但其实对于一些特殊数据例如<code>[2,0,3,4,5]</code>，暴力解法的答案是<code>0</code>，错误的，这题最标准的做法还应该是单调栈。</p><p>基于单调栈的特性我们来分析一下怎么应用到这题上。这题是要找数组所有的分块，很明显，对于某个索引<code>i</code>,他必须大于前面的分段的最大值，才能被重新划分到一个新段里。否则，这个索引<code>i</code>就必须划分到之前的段中，不一定是前一个段，可能这个<code>i</code>比前面所有的段的最大值都小，就代表前面的分段都不正确，要把这个<code>i</code>加进去后重新分段，那怎么体现分段的数目呢?—-栈内元素的个数~，为什么？</p><p>因为我们查找的规则是维护了一个单增栈，即碰到比当前栈顶元素大的元素，就入栈，表示找到一个新分段，但若碰到比栈顶元素小的元素，代表之前的分段不正确，要出栈，把当前元素加入到属于他那个段中，出栈的标准就是栈顶元素大于当前元素，直到碰到一个栈顶元素小于当前元素，此时代表栈内剩余元素的分段是正确的，而出栈的那些元素分段都不正确，要将当前元素加进来后分为整体一段，故此时需要把这整体一段的最大值入栈，代表当前段，至于为什么是最大值，看上面。</p><p>总的来说就是：</p><ul><li>如果当前元素大于栈顶元素说明找到了一个新的分段</li><li>如果当前元素小于栈顶元素，保存栈顶元素，然后将大于当前元素的所有元素出栈后，将之前保存的栈顶元素压入栈中，代表了一个分段。</li><li>最后返回栈中元素的个数即可，即每一段的最大值代表了当前段</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxChunksToSorted</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将第一个元素入栈代表此时将第一个元素分为一段</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>s<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> max<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列详解</title>
      <link href="/2021/10/27/dan-diao-dui-lie-xiang-jie/"/>
      <url>/2021/10/27/dan-diao-dui-lie-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java集合ArrayList,LinkedList,Queue,Deque,ArrayDeque常用API</title>
      <link href="/2021/10/27/java-ji-he-arraylist-linkedlist-queue-deque-arraydeque-chang-yong-api/"/>
      <url>/2021/10/27/java-ji-he-arraylist-linkedlist-queue-deque-arraydeque-chang-yong-api/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java判断字符串是否为整数</title>
      <link href="/2021/10/27/java-pan-duan-zi-fu-chuan-shi-fou-wei-zheng-shu/"/>
      <url>/2021/10/27/java-pan-duan-zi-fu-chuan-shi-fou-wei-zheng-shu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/BlueLoveyyt/article/details/45424167">判断整数</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解:2021/10/26</title>
      <link href="/2021/10/26/leetcode-ti-jie-2021-10-26/"/>
      <url>/2021/10/26/leetcode-ti-jie-2021-10-26/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串解码"><a href="#字符串解码" class="headerlink" title="字符串解码"></a><a href="https://leetcode-cn.com/problems/decode-string/">字符串解码</a></h1><p>这种类型的题很明显不是递归就是栈，但这题有许多细节需要考虑，我在做这题的时候开始思路确实很明确，但由于一些细节问题忽略，导致多花了一些时间。</p><h2 id="解法一-：单栈解法"><a href="#解法一-：单栈解法" class="headerlink" title="解法一 ：单栈解法"></a>解法一 ：单栈解法</h2><p>我们把字母，数字，左括号，右括号，看成是独立的TOKEN，用一个辅助栈来维护，做法如下：</p><ul><li>当前字符为数字则取连续数位（这个坑一定要主要）组成一个字符串后进栈</li><li>当前字符为字母或左括号则直接进栈</li><li>当前字符为右括号，则一直出栈，知道遇到左括号，且出左括号后，此时栈顶一定为数字，只需倍长得到的括号内的字符序列。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ptr<span class="token punctuation">;</span><span class="token comment">//全局字符指针，设为全局是因为获取数字是在单独的一个函数中获取的</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ptr<span class="token operator">&lt;</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">String</span> digits<span class="token operator">=</span><span class="token function">getDigits</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'['</span><span class="token operator">||</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">StringBuilder</span> sub<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> ch<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sub<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">String</span> tmp<span class="token operator">=</span>sub<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> time<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>time<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sub<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ptr<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/2sWjGnmd7Stli6r.png" alt="单栈.png"></p><h2 id="解法二：双栈解法"><a href="#解法二：双栈解法" class="headerlink" title="解法二：双栈解法"></a>解法二：双栈解法</h2><p>一个栈用来保存数字，一个栈用来保存字符串，保存字符串的栈的栈顶始终是左括号左边的字符串，括号内的字符串用一个单独的String变量保存。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> multi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//保存数位的变量</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack_int<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stack_str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                multi<span class="token operator">=</span>multi<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">chatAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//把之前的字符串入栈</span>                stack_str<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>                <span class="token comment">//数字入栈</span>                stack_int<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>multi<span class="token punctuation">)</span><span class="token punctuation">;</span>                multi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//出数字栈</span>                <span class="token keyword">int</span> repTime<span class="token operator">=</span>stack_int<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>repTime<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res<span class="token operator">+=</span>res<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res<span class="token operator">=</span>stack_str<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+=</span>res<span class="token punctuation">;</span><span class="token comment">//res保存单独是当前的完整字符串，栈顶保存的是括号左边的</span>                <span class="token comment">//之后若还是字母，就会直接加到res后，若是左括号，就会被压入字符栈，作为上一层的运算</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token operator">+=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/bTfc68yPNm7i5xj.png" alt="双栈.png"></p><h2 id="解法三：递归"><a href="#解法三：递归" class="headerlink" title="解法三：递归"></a>解法三：递归</h2><p>对于这种不知道有多少个子串的情况，即在不确定次数的情况下，使用递归非常合适</p><ul><li>如果当前位置是数字位，那么后面一定包含一个子串，采用递归得出这个子串的内容，再循环加入全局StringBuilder</li><li>如果是左括号，不需要做什么</li><li>如果是右括号，则退出递归</li><li>如果是字母，则直接加入全局的StringBuilder</li></ul><p>在递归中设置一个全局的循环，遍历整个字符串，这样可以搜寻到所有的子串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">recurve</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用stringBuilder来拼接全部的字符串</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//转成数字，其后一定跟着一个子串</span>                <span class="token keyword">int</span> repTime<span class="token operator">=</span><span class="token function">getDigits</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> sub<span class="token operator">=</span><span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>repTime<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">s<span class="token punctuation">.</span></span>CharAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回子串</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/uN89XfY1D6QipSd.png" alt="递归.png"></p><h1 id="迷你语法分析器"><a href="#迷你语法分析器" class="headerlink" title="迷你语法分析器"></a><a href="https://leetcode-cn.com/problems/mini-parser/">迷你语法分析器</a></h1><p>这题同样耗费了我许多时间，（我太菜了！）</p><h2 id="解法一：栈迭代"><a href="#解法一：栈迭代" class="headerlink" title="解法一：栈迭代"></a>解法一：栈迭代</h2><p>此题题目确实有点绕，但逻辑思路其实与上题一样，也是括号匹配。由于保证输入都是正确的，最后输出的一定是一个<code>NestedInteger</code>对象，故他要么是以 ‘[‘ 开头，要么是全为数字，在正是开始迭代前，可以做这样的判断。</p><ul><li>如果ch为<code>[</code> ，则代表有一个嵌套，此时创建一个空嵌套对象入栈。</li><li>如果ch为数字或<code>-</code>，则将连续数位的字符转成整数，同时加入栈顶的<code>NestedInteger</code>对象</li><li>如果ch为<code>,</code>，直接略过，不影响结果</li><li>如果ch为<code>]</code>，代表一个嵌套结束了，此时将栈顶的嵌套出栈，若出栈后不为空，则代表有上一层嵌套，将此层嵌套加入上一层，继续向后遍历；若为空则表示此层嵌套即为答案。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NestedInteger</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NestedInteger</span> ans<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">&gt;</span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token operator">||</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> j<span class="token operator">=</span>index<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                index<span class="token operator">=</span>j<span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/zygaeFTSsIDYEW4.png" alt="迷你语法分析2.png"></p><h2 id="解法二：递归"><a href="#解法二：递归" class="headerlink" title="解法二：递归"></a>解法二：递归</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NestedInteger</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">NestedInteger</span> <span class="token function">recurve</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">NestedInteger</span> ni<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token operator">||</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> j<span class="token operator">=</span>index<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                index<span class="token operator">=</span>j<span class="token punctuation">;</span>                ni<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ni<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ni<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/thkOPoi3wD5VSrg.png" alt="迷你语法分析.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈模板</title>
      <link href="/2021/10/26/dan-diao-zhan-mo-ban/"/>
      <url>/2021/10/26/dan-diao-zhan-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h2 id="单调栈是什么？"><a href="#单调栈是什么？" class="headerlink" title="单调栈是什么？"></a>单调栈是什么？</h2><p>单调栈是一种特殊的栈，单调栈要求栈中的元素时单调递增或递减的</p><p>==是否严格递减或一般递减可以根据实际情况来==</p><p>这里我用<code>[a,b,c]</code>表示一个栈，其中左侧为栈底，右侧为栈顶，单调增还是单调减取决于出栈顺序，如果出栈顺序是单调增的，那就是单调递增栈，出栈元素时单调减的，那就是单调递减栈。</p><p>例如：</p><ul><li><code>[1,2,3,4]</code>是一个单调递减栈，<code>[1,3,2]</code>就不是一个合法的单调栈</li></ul><p>那定义一个这样的特性有什么用呢？这种限制能解决什么问题呢？</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>单调栈的用途不太广泛，只处理一种典型的问题，叫做<code>Next&nbsp;Greater&nbsp;Number</code>的原始问题，即给你一个数组，你返回一个等长数组，对应索引存储这下一个更大或更小元素，如果没有满足要求的，就存-1,。例：</p><p>数组<code>[2,1,2,4,3]</code>，你返回<code>[4,2,4,-1,-1]</code>。即第一个2后面的比2大的数字是4；1后面比比它大的数组是2. …。</p><p>这道题的暴力解法很容易想到，即对每个元素都向后扫描，找到第一个更大的元素即可，但这种解法的时间复杂度是<code>O(n^2)</code>，明显差强人意，那我们可以这样思考，把数组元素想象成并列站立的人，元素大小想象成人的身高，这些人站成一列，如何求元素<code>[2]</code>的Next Greater Number呢？，向后看去，第一个露出来的人即是满足要求的</p><p><img src="https://i.loli.net/2021/10/28/WdaFhKtm7OkfBYS.png" alt="单调栈1.png"></p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//此为求单调增栈模板</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存放答案</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//既然是找后面的满足要求的，很明显</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//矮个子都走开，此处为大于则是单增栈，小于则是单减栈</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//由于是从后遍历，故栈顶一定是最近满足要求的</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进栈，之后身高判断,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述算法的复杂度只有<code>O(n)</code>，每个元素只被push一次，pop一次。</p><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><p>数组T <code>[73,74,75,71,69,72,76,73]</code>，（华氏度）这个数组存放的是近几天的天气气温，返回一个数组，计算：对于每一天，你至少还要等多少天才能等到更暖和的气温？，如果等不到那一天，则填0。</p><p>分析：此题实际上也是求Next Greater Number，只不过答案数组存的不是索引了，而是满足要求的数和当前的索引之间的差。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">NextGreaterTemp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token class-name">T</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token class-name">T</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token class-name">T</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="场景二："><a href="#场景二：" class="headerlink" title="场景二："></a>场景二：</h3><p>除了解决Next Greater Number问题外，还有一种场景就是==怎么保证删除之后整体最小==的问题。通常对于这类问题，我们采用一种维护单调栈的算法流程来使得整体最小，（以下对应的是单调递减栈）算法流程如下：</p><p>我们给定一个数组<code>[1,3,4,5,2,9,6]</code></p><ol><li>首先压入 1，此时的栈为：[1]</li><li>继续压入 3，此时的栈为：[1,3]</li><li>继续压入 4，此时的栈为：[1,3,4]</li><li>继续压入 5，此时的栈为：[1,3,4,5]</li><li><strong>如果</strong>继续压入 2，此时的栈为：[1,3,4,5,2] 不满足单调递减栈的特性， 因此需要调整。如何调整？由于栈只有 pop 操作，因此我们只好不断 pop，直到满足单调递减为止。</li><li>上面其实我们并没有压入 2，而是先 pop，pop 到压入 2 依然可以保持单调递减再 压入 2，此时的栈为：[1,2]</li><li>继续压入 9，此时的栈为：[1,2,9]</li><li><strong>如果</strong>继续压入 6，则不满足单调递减栈的特性， 我们故技重施，不断 pop，直到满足单调递减为止。此时的栈为：[1,2,6]</li></ol><p>此时我们得到了整体最小的栈，但这样可能还是有点抽象，你还是无法体会这个整体最小的概念，我们把这种算法思想放到具体的题目中去。</p><h4 id="例一："><a href="#例一：" class="headerlink" title="例一："></a>例一：</h4><p>给定一个字符串表示的非负整数和一个整数k，移除这个数中的k个数字，使得剩下的数字最小如</p><p>输入<code>num="1432219",k=3</code>,输出1219，很明显，这里要维护一个单减栈，才能保证数字最小。</p><ol><li>输入1，此时栈为<code>[1]</code></li><li>输入4，满足单减栈特性，此时栈为<code>[1,4]</code></li><li>输入3，破坏了单减栈，故pop出数字4，此时栈<code>[1]</code>,3进栈满足单减栈</li><li>输入2，破坏了单减栈，pop出数字3，此时栈为<code>[1]</code>,2进栈，此时栈为<code>[1,2]</code></li><li>输入2，可以接受，此时栈为<code>[1,2,2]</code></li><li>输入1，pop出数字2，此时栈为<code>[1,2]</code>,由于已经到达k的上限，故后续数字依次入栈，栈最终为<code>[1,2,1,9]</code></li></ol><p>这样即得到了”整体最小“，另外，对于设计到字符串的整体最小，通常可以利用StringBuilder模拟栈的行为。</p><p><font color="red">但此题存在一个bug就是，如果字符序列本身就是单增的，那按上面的逻辑将一个也移除不了，那怎么此时决定移除策略呢？很明显从最后一位开始移除，能保证整体数字最小</font>&gt;</p><h4 id="例二："><a href="#例二：" class="headerlink" title="例二："></a>例二：</h4><p><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">316.去除重复字母</a></p><h2 id="如何处理循环数组"><a href="#如何处理循环数组" class="headerlink" title="如何处理循环数组"></a>如何处理循环数组</h2><p>同样是Next Greater Number，现在假设给你的数组是环形的，<code>[2,1,2,4,3]</code>,你返回数组<code>[4,2,4,-1,4]</code>,拥有了环形属性后，最后一个元素3饶了一大圈找到了比自己大的元素4.</p><p>我们知道计算机内存都是线性的，没有真正意义的环形数组，一般是通过<code>%</code>，来模拟环形。回到最初的问题，增加了环形属性后，问题的难点在于Next不一定是当前元素右边了，也有可能出现在左边，为了能判断左边的元素，我们考虑这样的思路==将原始数组翻倍，在后面接一个原始数组==，这样每个元素不仅可以比较自己右边的元素，也可以和左边的元素比较。</p><img src="https://i.loli.net/2021/10/28/ZCF12cYeoQlEItu.png" alt="单调栈循环数组.png" style="zoom:50%;"><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">circuleNextGreaterNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> size<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token operator">%</span>size<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">%</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哨兵技巧"><a href="#哨兵技巧" class="headerlink" title="哨兵技巧"></a>哨兵技巧</h2><p>有些时候会用到数组全部元素，即栈中的元素最后都要出栈，很可能因为没有考虑边界问题而无法通过，所以可以使用哨兵法，例如在<code>[1,3,4,5,2,9,6]</code>末尾添加一个比数组元素都大或都小的元素如-1，此时可以简化代码逻辑。</p><h2 id="leetcode例题"><a href="#leetcode例题" class="headerlink" title="leetcode例题"></a>leetcode例题</h2><table><thead><tr><th align="center"><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496.下一个更大元素I</a></th></tr></thead><tbody><tr><td align="center"><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503.下一个更大的元素II</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/create-maximum-number/">321.拼接最大数</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">316.去除重复字母</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/remove-k-digits/">402.移掉k位数字</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters/">1081.不同字符最小序列</a></td></tr></tbody></table><p>参考：<a href="https://lucifer.ren/blog/2020/11/03/monotone-stack/">单调栈</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据机构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayDeque详解</title>
      <link href="/2021/10/25/arraydeque-xiang-jie/"/>
      <url>/2021/10/25/arraydeque-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/2f633feda6fb">ArrayDeque</a></p><p><a href="https://blog.csdn.net/skh2015java/article/details/74840513">ArrayDeque操作</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中的fail-fast机制</title>
      <link href="/2021/10/25/java-zhong-de-fail-fast-ji-zhi/"/>
      <url>/2021/10/25/java-zhong-de-fail-fast-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>fast-fail机制即快速失败机制，是java集合中的一种错误检测机制，当迭代集合过程中在该集合结构发生改变时，就可能会发生fail-fast，抛出ConcurrentModificationException，fail机制并不保证在不同步情况下修改一定会抛出异常，只是尽最大努力抛出。</p><h2 id="fail-fast出现场景"><a href="#fail-fast出现场景" class="headerlink" title="fail-fast出现场景"></a>fail-fast出现场景</h2><p>在ArrayList，HashMap等集合中在单线程和多线程环境下都有可能出现fail-fast</p><h3 id="单线程环境下："><a href="#单线程环境下：" class="headerlink" title="单线程环境下："></a>单线程环境下：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Iterator</span> iterator<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hashNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用迭代器遍历的过程中，利用集合的remove方法时，会发生fail-fast</p><p>HashMap发生的fail-fast</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Iterator</span> it<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hashNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程环境下："><a href="#多线程环境下：" class="headerlink" title="多线程环境下："></a>多线程环境下：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Mythread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                                    <span class="token punctuation">}</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> atgs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Mythread1</span> th1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mythread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mythread2</span> th2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mythread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fail-fast出现的原理："><a href="#fail-fast出现的原理：" class="headerlink" title="fail-fast出现的原理："></a>fail-fast出现的原理：</h2><p>fail-fast是如何抛出ConcurrentModification，又是在什么情况下抛出的? 对于集合list ，map 都可以用迭代器遍历，而Iterator就是一个接口，具体实现还是要看集合类里的内部类去实现Iterator实现相关方法。这里以ArrayList为例：</p><p>当调用list.iterator()时其源码是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>       <span class="token comment">// index of next element to return</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// index of last element returned; -1 if no such</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> size <span class="token operator">&amp;&amp;</span> modCount <span class="token operator">==</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// update once at end of iteration to reduce heap write traffic</span>            cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>            lastRet <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中有三个属性</p><pre class="line-numbers language-none"><code class="language-none">int cursor;   //index of next element to returnint lastRet=-1 //index of last element returned int expectedModCount=modCount;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>cursor是集合遍历过程中即将遍历的元素的索引，lastRet是cursor-1，默认为-1，它主要记录刚刚遍历过从元素的索引，expectedModCount是fail-fast判断的关键变量，初始值为ArrayList中的modcount（记录了对于几个操作中的修改次数，与size不一样）</p><p>首先看看next方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次调用next之前都会执行<code>checkForComdification()</code>，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到当<code>modcount!=expectedModCount</code>时抛出异常，但在一开始时，expectedModCount等于modCount，为什么会出现modCount！=expectedModCount ？ 对于expectedModCount在整个迭代过程中没有再发生改变，故可能发生改变的只有modCount ，我们知道当对ArrayList进行add，remove，clear时就会改变modCount，故当另一线程并发修改或同一线程遍历过程中，使modCount改变，就会抛出异常。</p><h2 id="避免fail-fast："><a href="#避免fail-fast：" class="headerlink" title="避免fail-fast："></a>避免fail-fast：</h2><h3 id="单线程解决"><a href="#单线程解决" class="headerlink" title="单线程解决"></a>单线程解决</h3><p>在单线程遍历过程中，如果进行remove操作，可以调用迭代器的remove方法而不是集合类的remove方法，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代器的remove方法不会使得expectedModCount!=modCount，故不会对遍历产生影响，但该方法不能指定remove的元素，故有局限性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Iterator</span> it<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程解决："><a href="#多线程解决：" class="headerlink" title="多线程解决："></a>多线程解决：</h3><p>使用java并发包中的类代替ArrayList，hashmap</p>]]></content>
      
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ聊天室项目</title>
      <link href="/2021/10/24/qq-liao-tian-shi-xiang-mu/"/>
      <url>/2021/10/24/qq-liao-tian-shi-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://gitee.com/xiaoclgitee/imitation-qq-chat-room">https://gitee.com/xiaoclgitee/imitation-qq-chat-room</a><br>项目提升：基于NIO，AIO 模型的群聊实现<a href="https://gitee.com/xiaoclgitee/chat-room">https://gitee.com/xiaoclgitee/chat-room</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap理解与解析</title>
      <link href="/2021/10/22/hashmap-li-jie-yu-jie-xi/"/>
      <url>/2021/10/22/hashmap-li-jie-yu-jie-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DDL语法总结</title>
      <link href="/2021/10/18/ddl-yu-fa-zong-jie/"/>
      <url>/2021/10/18/ddl-yu-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack,ArrayDeque,LinkedList详解</title>
      <link href="/2021/10/18/stack-arraydeque-linkedlist-xiang-jie/"/>
      <url>/2021/10/18/stack-arraydeque-linkedlist-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的浅拷贝与深拷贝</title>
      <link href="/2021/10/18/java-zhong-de-qian-kao-bei-yu-shen-kao-bei/"/>
      <url>/2021/10/18/java-zhong-de-qian-kao-bei-yu-shen-kao-bei/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>链表,二叉树,二分查找,排序,搜索相关代码模板</title>
      <link href="/2021/10/17/lian-biao-er-cha-shu-er-fen-cha-zhao-pai-xu-sou-suo-xiang-guan-dai-ma-mo-ban/"/>
      <url>/2021/10/17/lian-biao-er-cha-shu-er-fen-cha-zhao-pai-xu-sou-suo-xiang-guan-dai-ma-mo-ban/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据机构与算法专栏：跳表</title>
      <link href="/2021/10/13/shu-ju-ji-gou-yu-suan-fa-zhuan-lan-tiao-biao/"/>
      <url>/2021/10/13/shu-ju-ji-gou-yu-suan-fa-zhuan-lan-tiao-biao/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL实战专栏（三）索引</title>
      <link href="/2021/10/13/mysql-shi-zhan-zhuan-lan-san-suo-yin/"/>
      <url>/2021/10/13/mysql-shi-zhan-zhuan-lan-san-suo-yin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法专栏：散列表及其在密码学和MySQL中的应用（一）</title>
      <link href="/2021/10/12/shu-ju-jie-gou-yu-suan-fa-zhuan-lan-san-lie-biao-ji-qi-zai-mi-ma-xue-he-mysql-zhong-de-ying-yong-yi/"/>
      <url>/2021/10/12/shu-ju-jie-gou-yu-suan-fa-zhuan-lan-san-lie-biao-ji-qi-zai-mi-ma-xue-he-mysql-zhong-de-ying-yong-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此专栏用于本人完整全面地复习在面试及工作中常用的算法与数据结构，会辅以代码和基础知识讲解，包括刷题练习，解题思路等等。大致内容包括10个数据结构和10个算法：</p><p>数据结构：数组，链表，栈，队列，散列表，二叉树，堆，跳表，图，Trie树</p><p>算法：递归，排序，二分查找，搜索，哈希算法，贪心算法，分治算法，回溯，动态规划，字符串匹配</p><hr><h1 id="散列表及其在密码学中的应用"><a href="#散列表及其在密码学中的应用" class="headerlink" title="散列表及其在密码学中的应用"></a>散列表及其在密码学中的应用</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><p>面试题：你对哈希表的理解</p><p>我对哈希表的理解主要有这几个方面</p><p>一。哈希表怎么使用</p><p>二。为什么会出现哈希表</p><p>三。哈希表的安全性，效率等</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL实战专栏番外篇：索引详解（一）</title>
      <link href="/2021/10/11/mysql-shi-zhan-zhuan-lan-fan-wai-pian-suo-yin-xiang-jie-yi/"/>
      <url>/2021/10/11/mysql-shi-zhan-zhuan-lan-fan-wai-pian-suo-yin-xiang-jie-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL实战专栏（一）基础架构</title>
      <link href="/2021/10/10/mysql-shi-zhan-zhuan-lan-yi-ji-chu-jia-gou/"/>
      <url>/2021/10/10/mysql-shi-zhan-zhuan-lan-yi-ji-chu-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近再看mysql45讲，想着光听和光看确实记忆不够深刻，于是有了这个念头：何不趁这个机会建立一个自己的复习专栏，不仅能复习，输出，还能在写作的过程中增更多的思考，于是这个系列诞生了</p><h1 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="Mysql总体逻辑架构"><a href="#Mysql总体逻辑架构" class="headerlink" title="Mysql总体逻辑架构"></a>Mysql总体逻辑架构</h2><p><img src="https://img2018.cnblogs.com/blog/1202638/201908/1202638-20190808003551255-429891607.png"></p><p>整体上看我们可以把Mysql架构分为Server层和存储引擎层两部分。Server层有连接器，查询缓存，分析器，优化器，执行器等，涵盖Mysql大多数核心服务功能，以及所有内置函数，所有跨存储引擎的功能都在这一层实现。如存储过程，触发器，视图等。</p><p>存储引擎的架构模式是插件式的，在Mysql5.5.5版本之后InnoDB存储引擎成为默认存储引擎。当然不同的存储引擎有不同的特性，对应不同的应用场景，我们可以在建表<code>create&nbsp;table</code>时通过在最末尾添加<code>engine=memory</code>来制定存储引擎。</p><p>不难看出所有存储引擎公用Server层。</p><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>连接器负责跟客户端建立连接，获取权限，维持和管理连接。连接命令如下</p><p><code>mysql&nbsp;-h$ip&nbsp;-p$port&nbsp;-u$user&nbsp;-p</code>输完命令后可以在交互对话里输入密码，尽管可以直接在-p后加密码，但这很不安全，如果连的是生产服务器。强烈建议不要这样做。</p><p>==连接Mysql的几种方式：==</p><p>连接Mysql是一个连接进程和Mysql数据库实例进行通信。本质上是进程通信，我们常见的进程通信有管道，命名管道，TCP/IP套接字，UNIX域套接字等。</p><ul><li>TCP/IP：</li></ul><p>在密码认证通过后连接器会到权限表里查出当前用户的权限，之后在这个连接里面的操作都会基于此权限。判断逻辑。<strong>这就意味着一个用户成功建立连接后，即使你之后对这个用户权限做了改变，也不会影响已经读到的权限，只有新建立的连接才会使用新的权限。</strong></p><p>对于连接操作是十分耗费资源的操作，客户端如果太长时间没有向数据库进行操作，连接器会自动断开，这个时间由参数<code>wait_timeout</code>控制，默认8小时</p><p>当连接被断开后如果客户端再次发送请求，会受到错误提示，“Lost Connection to MySQL server during query”。此时只能进行重连。</p><ul><li>长连接：连接成功后客户端持续有请求，则一直使用同一个连接。</li><li>短连接：执行完一次或很少几次操作后便断开连接，使用时再重连。</li></ul><p>我们知道建立连接的过程不仅复杂而且耗费资源，因此我们应尽量减少建立连接的次数。</p><p>但有时使用长连接后，MySQL占用内存涨的特别快，这是因为执行过程中临时使用的内存时管理在连接对象里的，这些资源会在断开连接后释放，所以累积下来，导致内存占用过大，被系统强行杀掉OOM了，即Mysql异常重启了。</p><p>解决方案：</p><ul><li>定期断开长连接，或在执行一个占用内存过大的大查询后断开连接。</li><li>如果你使用的是MySQL5.7之后的版本，可以执行<code>mysql_request_cnnection</code>初始化资源，即释放，这样不需要重连和验证权限，之后恢复到初始连接状态。</li></ul><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>连接建立后便可以执行语句了，查询缓存中保存之前执行的语句和结果集，可能会议key-value的形式存储在内存中，key是查询的语句，value是返回的结果，当拿到一个语句后若能在缓存中找到key，则直接返回结果，否则进行后续操作。</p><p>==但大多数情况下建议不要使用查询缓存，因为弊往往大于利==</p><p>弊端：<strong>即这些缓存是针对于一张原表的查询结果，即意味着一旦更新表，这些缓存全部作废，因此对于更新压力大的表，查询缓存命中的效率非常低，除非业务有一张静态表，很长时间才更新，例如系统配置表，那在这张表上使用查询缓存是比较合适的</strong></p><p>需要注意的是MySQL8.0之后的版本直接将查询缓存的整块功能删除了。</p><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>如果没有命中缓存就要开始分析语句了。</p><ul><li>词法分析：分析器会先进行词法分析，识别出SQL语句里面的字符串分别是什么。例如把输入的select关键字识别出来，也要把字符串“T”识别成表名T，把字符串“ID”识别成“列ID”。<ul><li>你可能会问分析器是如何把这些关键字和字段名识别的？最直接的做法是对它做一个只读的查找树，Mysql在此出做了优化。然后对于字段，mysql实例中有一个数据库<code>INFORMATION_SCHEMA</code>保存其他数据库的信息，即元数据，如数据库或表名称，列数据类型访问权限等。</li></ul></li></ul><p>==ps：对于词法分析的内容应还有地方剖析，请参考google上博客==</p><ul><li>语法分析：词法分析后进行语法分析。判断是否符合MySQL语法。如果不对，则会受到错误提示。</li></ul><p>==ps：此处可查看博客关于语法分析的内容==</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>此时MySQL已经知道你要做什么了，但执行之前还要进行优化器处理。优化器是在表中存在多个索引时决定是用哪个索引；或在一个语句中有多表关联的时候，决定各个表的连接顺序。</p><p><code>select&nbsp;*&nbsp;from&nbsp;t1&nbsp;join&nbsp;t2&nbsp;on&nbsp;t1.c=10&nbsp;and&nbsp;t2.d=20</code></p><ul><li>既可先从表t1取出c=10的记录ID值，在根据ID关联到t2，判断t2的ID是否有等于20的。</li><li>也可以先从表t2取出ID=20的记录，再关联到t1，判断t1里的c是否等于10.</li></ul><p>两种策略执行结果是一样的，但执行效率不同，优化器就是决定选择哪一个方案的。</p><p>例如假设 t1上的扫描了 100 个数据行，t2 上扫描 50个数据行。</p><p>先根据A会有100个数据行，接着进行匹配找到其中的 30 个与 B 中的值匹配记录，其中就有 70 次是失败了。</p><p>先根据 B会有 50 个数据行，接着进行匹配找到其中的 30 个与 A中的值匹配的记录，只有 20次是失败的，很显然需要的计算和磁盘 I/O 更少。</p><p>因此MySQL的优化器主要干如下几个重要事情：</p><ul><li>选择最合适的索引</li><li>选择表扫还是走索引</li><li>选择表关联顺序</li><li>优化where子句</li><li>决定order by 和group by 是否走索引</li><li>尝试使用inner join 替换outer join</li><li>简化子查询，决定结果缓存</li></ul><p>==ps：此处应对每个事情进行扩展，可看博客==</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>此阶段开始执行语句。开始执行前先判断用户对表T有没有执行权限，若没有，就会返回以下错误提示。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> T <span class="token keyword">where</span> ID<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>ERROR <span class="token number">1142</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: <span class="token keyword">SELECT</span> command denied <span class="token keyword">to</span> <span class="token keyword">user</span> <span class="token string">'b'</span><span class="token variable">@'localhost'</span> <span class="token keyword">for</span> <span class="token keyword">table</span> <span class="token string">'T'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有权限，在打开表，执行器会根据表引擎的定义，使用引擎提供的接口。例如下面这个例子。</p><p>ID字段没有索引，执行流程如下：</p><ol><li>调用InnoDB引擎接口去表第一行，判断ID是否为10，不是则跳过，是则将结果存在结果集</li><li>调用引擎接口取下一行，重复相同的判断逻辑，知道取这个表的最后一行。</li><li>执行器将结果集返回给客户端。</li></ol><p>对于有索引的表，逻辑也差不多。</p><p>在慢查询日志中你能看到rows_examined的字段，表示这个语句执行时调用引擎扫描了多少行。</p><p>在有些场景下，执行器调用一次，内部存储引擎扫描多行，故引擎扫描行数可能跟此字段不完全相同。</p><p>==ps：此处对于慢查询，mysql技术内幕上有介绍，建议查看并总结，也可看博客==</p><h3 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h3><p>前面了解了一条查询语句是经过连接器，分析器，优化器，执行器等模块最后到达存储引擎的。那么一条更新语句的执行流程是怎样的呢？我们知道MySQL可以恢复到半个月内任意一秒的状态，可你思考过这的原理是什么吗？</p><p>前面说过当表更新时，关于这个表的查询缓存会失效，与查询流程不一样的是更新流程还涉及两个重要的日志模块。即redo log（重做日志）和binlog（归档日志）。</p><p>==ps：此处只讲两种日志，关于其他日志文件及特性会在后续文章继续剖析==</p><h4 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h4><p>当前事务数据库系统普片都采用WAL技术，即<code>Write&nbsp;Ahead&nbsp;Log</code>策略，即当事务提交时先写重做日志，在修改页，并在适当的时候将修改页刷新到磁盘。这样当用于发生宕机(⊙o⊙)而导致的数据丢失时，通过重做日志可以完成数据的恢复，这也满足了ACID事务的D持久性的要求。</p><p>那么redo log是什么样的呢？</p><p>InnoDB中的redo log 是固定大小的，比如可以配置一组4个文件，每个文件大小1GB，那redo log大小可以记录4GB的操作，关于redo log是怎样记录的呢，事实上它是一个循环记录的过程，这也决定了它是固定大小的。从头开始写，写到末尾再开头循环。如图：</p><img src="https://img2018.cnblogs.com/blog/1202638/201908/1202638-20190810005247368-1074922371.png" style="zoom:67%;"><p>write pos 是当前记录的位置，一边写一边后移，checkpoint是当前要擦除的位置，一边擦除一边后移，擦除记录前要把记录更新到磁盘数据库表中。checkpoint之前的空间是已经擦除的空闲空间。</p><p>==ps：后续文章会详细讲解这个checkpoint技术怎么回事，具体参考MySQL技术内幕==</p><p>前面我们讲到有了redo log即使数据库宕机了，之前提交的记录都不会丢失。这被称为crash-safe</p><h5 id="redo-log如何刷新到磁盘"><a href="#redo-log如何刷新到磁盘" class="headerlink" title="redo log如何刷新到磁盘"></a>redo log如何刷新到磁盘</h5><p>我们知道InnoDB存储引擎内存除了缓冲池，还有重做日志缓冲，如图。InnoDB存储引擎先将重做日志信息放入缓冲区，然后按一定频率刷新到磁盘，一般情况下是每秒都会刷新到重做日志文件，因此混充没必要很大，只要在每秒提交的事务在缓冲大小之内即可。可通过参数<code>innodb_log_buffer_size</code>控制。那么在什么情况下重做日志缓冲会刷新到磁盘文件中呢？（注意这里的刷新只是刷新日志文件，并没有更新表数据，涉及表数据的更新还需要LRU列表和Flush列表）</p><p>==ps：这里提到LRU列表和Flush列表，后续文章会详细讲解这个技术==</p><p>==ps：包括接下来提到的Master&nbsp;Thread，也会详细讲解它的作用==</p><ul><li>Master Thread每一秒会将重做日志缓冲刷新到重做日志文件</li><li>每个事务提交时会将重做日志缓冲刷新到重做日志文件</li><li>当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲便刷新到日志文件</li></ul><p><img src="https://i.loli.net/2021/10/11/eM17tpBJnlFrxIC.jpg"></p><p>很重要的一点是redo log是何时写盘的，前面的描述可以猜测出是在事务开始之后逐步写盘的</p><p>之所以是逐步写入日志文件，而不是事务提交后才写入日志文件，原因在于上文讲的重做日志缓冲，默认是8M，InnoDB先将日志记录写入缓冲，再通过以上三种方式写入磁盘文件，然后再通过checkpoint技术在适当的时候将日志文件里的记录更新到数据库表中，并后移checkpoint，擦除当前记录。故写盘是随着事务的开始逐步进行的</p><blockquote><p>即使事务还没有提交，InnoDB仍会每秒将重做日志缓存刷新到日志文件，这也可以很好解释再大的事务提交，时间也很短暂。</p></blockquote><h4 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h4><p>MySQL整体其实就两块，一块是Server层，主要做MySQL功能层面的事，还有一块引擎层，负责存储相关。redo log是InnoDB引擎特有的日志，Server层也有自己的日志，binlog（归档日志）</p><p>你可能会问，为什么会有两份日志呢？</p><p>最开始的时候MySQL里并没有InnoDB引擎，其自带的是MyISAM，但它没有crash-safe的能力，binlog日志只能用于归档，InnoDB是以插件引入MySQL的，既然binlog没有crash-safe能力，那就让InnoDB单独使用一套日志系统。</p><p>两份日志有以下三点不同：</p><ul><li>redo log 是InnoDB引擎特有的，binlog是MySQL的Server层实现的，所有引擎都可以用</li><li>redo log 是物理日志，binlog是逻辑日志</li><li>redo log 是循环写的，空间固定，binlog可追加写，即文件写完后会切换到下一个文件，不会覆盖之前的日志</li></ul><p>了解以上后，我们来看看一条update语句的内部流程。</p><ol><li>执行器先找到引擎去ID=2这一行，ID是主键，引擎直接用树搜索找到这一行，如果ID=2这一行所在数据页本来就在内存中（LRU列表）就直接返回给执行器，否则先从磁盘读入内存，再返回</li><li>执行器拿到引擎给的数据行，再值加1，得到新数据，再调用引擎接口写入新数据</li><li>引擎将新数据更新到内存中，同时将这个更新操作记录到redo log日志中，此时redo log处于prepare状态，然后告知执行器执行完成，随时可以提交事务</li><li>执行器生成这个操作的binlog，并把binlog写入磁盘</li><li>执行器调用引擎接口提交事务，引擎则把redo log改成commit状态，更新完成</li></ol><p>过程如图：</p><img src="https://i.loli.net/2021/10/11/ek6pg2aFytU7rQ9.png" alt="redo log写入过程.png" style="zoom:80%;"><p>你可能注意到了redo log的写入拆成了两个步骤，prepare和commit。</p><h5 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h5><p>为什么有两阶段提交？这是为了让两份日志逻辑一致，这又回到了开头那个问题，怎么让数据库恢复到半个月内的任意一秒？</p><p>binlog会记录所有的逻辑操作，并且采用追加写，如果DBA说半个月内的都可以恢复，那备份系统中一定保存最近半月的所有binlog，同时系统定期做整库备份，定期取决于系统的重要性，可能一天一备，也可能一月一备。</p><p>例如需要恢复到某一秒，某天下午发现中午12点有一次误删表，需要找回数据，那可以这样做：</p><ul><li>首先找到最近的一次备份，如果运气好，可能是昨天晚上的备份，从这个备份恢复到临时库</li><li>然后从备份时间点开始，将备份的binlog依次取出。</li></ul><p>这样临时库就跟误删之前的库一样了，然后将临时库数据恢复到线上库中。</p><p>那回到两阶段提交问题本身，</p><p>用于redo log和binlog是两个独立逻辑，如果不用两阶段提交，就是谁先写的问题。</p><ol><li><strong>先写redo log再写binlog</strong>：假设redo log写完，事务提交，binlog还没写完就MySQL宕机了，用于前面所说，redo log写完之后，系统即使崩溃，仍能把数据恢复过来，因此此时恢复的是正确的，但由于binlog没写完就crash了，binlog里没有这个操作，因此之后备份日志时，存起来的binlog里面就没有这条语句，因此当需要用binlog恢复临时库时，用于binlog语句丢失，临时库就会少一次更新，恢复出来的值就不正确了</li><li><strong>先写binlog再写redo log</strong>：如果在binlog写完之后crash，用于redo log没写，崩溃恢复以后这个事务无效，但binlog里面已经记录了这个事务，故之后用binlog恢复库时就会多一个事务，恢复出来的值与原库不同。</li></ol><p>故如果不使用两阶段提交，那么数据库状态有可能和用它的日志恢复出来的库的状态不一样。</p><p>你可能会说，这个概率是不是太低了，平时也没有动不动就要恢复临时库的场景啊。</p><p>事实上，不只是误操作后要恢复数据，当需要扩容，即搭建一些备库来增加系统的读能力时，常见的做法就是全量备份加上应用binlog实现的，这个不一致会导致线上主从数据库不一致情况。</p><p>简单点说就是redo log和binlog都可以表示事务的提交状态，而两阶段的提交是让两个状态保持逻辑上的一致。</p><p><strong>redo log用于保证crash-safe能力。innodb_flush_log_at_trx_commit这个参数设置成1的时候，表示每次事务的redo log都直接持久化到磁盘。这个参数我建议你设置成1，这样可以保证MySQL异常重启之后数据不丢失。</strong></p><p><strong>sync_binlog这个参数设置成1的时候，表示每次事务的binlog都持久化到磁盘。这个参数我也建议你设置成1，这样可以保证MySQL异常重启之后binlog不丢失。</strong></p><p>==ps：关于日志，缓冲这块，在阅读mysql技术内幕之后会继续添加更多细节剖析==</p><h3 id="问答环节"><a href="#问答环节" class="headerlink" title="问答环节"></a>问答环节</h3><ol><li>如果表T中没有字段k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？</li></ol><p><strong>答：是在分析器的语法分析阶段报错的，在做词法分析时，把字符串切分成token流，这个过程主要依靠关键字如select，delete,这些关键字被采用树的结构存储起来，在这些关键字中间的token是不可区分的，切分万token之后，做语法检查，构建ast，做语义分析之后每个token’就有了自己的类型，这个类型便是通过查询数据库中保有的各个表的元数据得到的，故在做语义分析时就会得知这个字段不存在，故报错。</strong></p><ul><li>词法分析：从左到右一个一个字符读入程序，，对字符流进行扫描，根据构词规则识别单词</li><li>语法分析：在词法分析的基础上，将单词序列组合成各类语法短语，如程序，语句，表达式，语法分析程序判断源程序在结构上是否正确。</li><li>语义分析：此阶段任务是对结构上正确的源程序进行上下文有关性质的审查，进行类型审查。</li></ul><p>==ps：关于token流，ast等学了编译原理再来补充吧==</p><ol start="2"><li>前面我说到定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢？或者说，它影响了这个数据库系统的哪个指标？</li></ol><p><strong>答：在一天一备模式下，最坏情况也只需要应用一天的binlog，好处是“最长恢复时间”更短，一周一备最坏情况要应用一周的binlog，对应的系统指标是恢复目标时间(RTO)，要优化RTO就要付出成本，消耗更多存储空间，故这个指标需要根据业务重要性评估了。</strong></p><h3 id="物理日志与逻辑日志"><a href="#物理日志与逻辑日志" class="headerlink" title="物理日志与逻辑日志"></a>物理日志与逻辑日志</h3><p>【informix的逻辑日志和物理日志分析_freebile的技术博客_51CTO博客】<img src="file:///C:\Users\FL8700F\AppData\Roaming\Tencent\QQTempSys%W@GJ$ACOF(TYDYECOKVDYB.png" alt="img"><a href="https://mbd.baidu.com/ma/s/8M5Z73jt">https://mbd.baidu.com/ma/s/8M5Z73jt</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql技术内幕读书笔记（一）</title>
      <link href="/2021/10/10/mysql-ji-zhu-nei-mu-du-shu-bi-ji-yi/"/>
      <url>/2021/10/10/mysql-ji-zhu-nei-mu-du-shu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面试篇：异常</title>
      <link href="/2021/10/09/java-mian-shi-pian-yi-chang/"/>
      <url>/2021/10/09/java-mian-shi-pian-yi-chang/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq635785620/article/details/7781026">(45条消息) 常见的几种RuntimeException_我是谁的专栏-CSDN博客_runtimeexception</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器</title>
      <link href="/2021/10/06/bu-long-guo-lu-qi/"/>
      <url>/2021/10/06/bu-long-guo-lu-qi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/43263751">详解布隆过滤器的原理，使用场景和注意事项 - 知乎 (zhihu.com)</a></p><p><a href="https://developer.aliyun.com/article/773205">布隆过滤器，这一篇给你讲的明明白白-阿里云开发者社区 (aliyun.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC学习（二）</title>
      <link href="/2021/10/05/jdbc-xue-xi-er/"/>
      <url>/2021/10/05/jdbc-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC学习"><a href="#JDBC学习" class="headerlink" title="JDBC学习"></a>JDBC学习</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="事务问题"><a href="#事务问题" class="headerlink" title="事务问题"></a>事务问题</h2><p>将一组语句构建成事务，当所有语句顺利执行后，事务可以被提交，否则如果某个语句遇到错误，事务将被回滚。这样可以保证数据库的完整性。</p><ul><li>默认情况下数据库处于自动提交模式，那么哪些操作会导致自动提交呢？<ul><li><code>DDL</code>操作一旦执行，都会自动提交，<code>setAutoCommit=false</code>语句对DDL操作无效</li><li><code>DML</code>操作可通过<code>setAutoCommit=false</code>设置取消自动提交</li><li>在关闭连接时也会自动提交</li></ul></li><li>保存点<code>Savepoint</code>：使用保存点可以细粒度的控制回滚操作，创建保存点意味着回滚只需返回这个点，而非放弃整个事务</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">excuteUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Savepoint</span> point<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">setSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">excuteUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当不需要保存点时，释放保存点</span>conn<span class="token punctuation">.</span><span class="token function">releaseSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PreparedStatement批量更新"><a href="#PreparedStatement批量更新" class="headerlink" title="PreparedStatement批量更新"></a>PreparedStatement批量更新</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//提高效率的关键在于客户端与服务器的数据交互次数要尽可能少</span>    <span class="token comment">//思路是缓存sql语句</span>    <span class="token comment">/**     * addBatch(),executeBatch(),clearBatch()     * mysql服务器默认是关闭批处理服务的，需要通过一个参数让mysql开启对批处理的支持     * 即：?rewriteBatchedStatements=true   写下配置文件的url后     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//数据库是会自动提交数据的，因此先将sql缓存，在批量提交</span>        conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into goods(Name)values(?)"</span><span class="token punctuation">;</span>        ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">500</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token operator">:</span>throwables<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务ACID属性即并发问题"><a href="#事务ACID属性即并发问题" class="headerlink" title="事务ACID属性即并发问题"></a>事务ACID属性即并发问题</h3><p>尽管之前在mysql中讲解了一些关于事务的问题，为了加强记忆与理解，在这里再次重复一遍。</p><ul><li>原子性：事务是一个不可分割的工作单位。</li><li>一致性：事务必须使数据库从一个一致性状态转换到另一个一致性状态</li><li>隔离性：一个事务的执行，不能被其他事物干扰，即在一个事务内部的操作及使用对并发的其他事务是隔离的。</li><li>持久性：事务一旦被提交，则其对数据库的影响是永久的。</li></ul><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="Druid（德鲁伊）数据库连接池"><a href="#Druid（德鲁伊）数据库连接池" class="headerlink" title="Druid（德鲁伊）数据库连接池"></a>Druid（德鲁伊）数据库连接池</h3><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDruid</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">TestDruid</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataSource</span> ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//其中，src下的配置文件为：【druid.properties】</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test<span class="token operator">?</span>rewriteBatchedStatements<span class="token operator">=</span><span class="token boolean">true</span>username<span class="token operator">=</span>rootpassword<span class="token operator">=</span><span class="token number">123456</span>driverClassName<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>initialSize<span class="token operator">=</span><span class="token number">10</span>maxActive<span class="token operator">=</span><span class="token number">20</span>maxWait<span class="token operator">=</span><span class="token number">1000</span>filters<span class="token operator">=</span>wall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>详细配置参数</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="Apache-DBUtils实现CRUD操作"><a href="#Apache-DBUtils实现CRUD操作" class="headerlink" title="Apache-DBUtils实现CRUD操作"></a>Apache-DBUtils实现CRUD操作</h2><ul><li>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</li><li><img src="https://img-blog.csdnimg.cn/201905241930412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llcmVueXVhbl9wa3U=,size_16,color_FFFFFF,t_70"></li></ul><p>用ScalarHandler类处理特殊值，也可以自己实现ResultSetHandler接口来满足需求。</p><p><a href="https://www.cnblogs.com/yezhenhan/archive/2011/01/11/1932556.html">DButils详解</a></p><p>啊–不想写了，直接看文档吧，这儿挺简单的</p><p><img src="https://img.pcdown.net/uploadfile/2021/0604/20210604091338423.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向接口编程思想</title>
      <link href="/2021/10/05/mian-xiang-jie-kou-bian-cheng-si-xiang/"/>
      <url>/2021/10/05/mian-xiang-jie-kou-bian-cheng-si-xiang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ResultSet详解</title>
      <link href="/2021/10/05/resultset-xiang-jie/"/>
      <url>/2021/10/05/resultset-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PreparedStatement详解</title>
      <link href="/2021/10/05/preparedstatement-xiang-jie/"/>
      <url>/2021/10/05/preparedstatement-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC学习（一）</title>
      <link href="/2021/10/04/jdbc-xue-xi-yi/"/>
      <url>/2021/10/04/jdbc-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC学习（一）"><a href="#JDBC学习（一）" class="headerlink" title="JDBC学习（一）"></a>JDBC学习（一）</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="JDBC架构"><a href="#JDBC架构" class="headerlink" title="JDBC架构"></a>JDBC架构</h2><p>JDBC API支持用于数据库访问的两层和三层处理模型，通常使用两层</p><ul><li>JDBC API：提供应用程序到JDBC Manager的连接</li><li>JDBC Driver API ：支持JDBC Manager到驱动程序的连接</li></ul><p>JDBC API使用驱动程序管理器和特定于数据库的驱动程序来提供与异构数据库的透明连接。</p><p>JDBC驱动程序管理器确保使用正确的驱动程序访问每个数据源。 驱动程序管理器能够支持连接到多个异构数据库的多个并发驱动程序。</p><h3 id="常见的JDBC组件"><a href="#常见的JDBC组件" class="headerlink" title="常见的JDBC组件"></a>常见的JDBC组件</h3><ul><li>DriverManager：此类管理数据库驱动程序列表。 使用通信子协议匹配来自Java应用程序的连接请求和正确的数据库驱动程序。 识别JDBC下某个子协议的第一个驱动程序将用于建立数据库连接。</li><li>Driver：此接口处理与数据库服务器的通信。 您将很少直接与Driver对象进行交互。 而是使用DriverManager对象来管理此类对象。 它还抽象了与使用Driver对象相关的细节。</li><li>Connection：此接口包含用于联系数据库的所有方法。 连接对象表示通信上下文，即，与数据库的所有通信仅通过连接对象。</li><li>PreStatement&amp;Statement：您使用从此接口创建的对象将SQL语句提交到数据库。 除执行存储过程外，某些派生接口还接受参数。</li><li>ResultSet：在使用Statement对象执行SQL查询后，这些对象保存从数据库检索的数据。 它充当迭代器，允许您遍历其数据。</li><li>SQLException：此类处理数据库应用程序中发生的任何错误。</li></ul><img src="https://i.loli.net/2021/10/05/WYjGMfszQPlNSAO.png" alt="jdbc.png" style="zoom:60%;"><h3 id="JDBC获取数据库连接"><a href="#JDBC获取数据库连接" class="headerlink" title="JDBC获取数据库连接"></a>JDBC获取数据库连接</h3><ul><li>导入驱动包</li></ul><p><img src="https://i.loli.net/2021/10/05/iNmW4sgXyO657Fz.png" alt="jdbcDriver.png"></p><ul><li><p>注册驱动程序：</p><ul><li><code>Class.forname()</code>:注册驱动程序最常用的方法是使用Java的**Class.forName()**方法，将驱动程序的类文件动态加载到内存中，自动注册它。 此方法是首选，因为它允许您使驱动程序注册可配置和可移植。</li><li><code>DriverManager.registerDriver()</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>   <span class="token class-name">Driver</span> myDriver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span> myDriver <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error: unable to load driver class!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>DriverManager.getConnection()</code>：</p><ul><li>通常使用``getConnection（String url，Properties prop）`</li><li>对于mysql的url，格式为：``jdbc:mysql://hostname:[port]/databaseName?`?号后面可跟一些配置属性。</li><li>通常我们会使用一个配置文件如<code>jdbc.properties</code>,里面写上连接mysql的一些配置信息</li><li><img src="https://i.loli.net/2021/10/05/ZdNPnpAfKrOkVuD.png" alt="jdcbpro.png"></li></ul></li><li><p>关闭JDBC连接：在JDBC程序结束时，需要显式关闭与数据库的所有连接以结束每个数据库会话。 但是，如果您忘记了，Java的垃圾收集器将在清除过时对象时关闭连接。</p><p>依赖垃圾收集，特别是在数据库编程中，是一种非常糟糕的编程习惯。 您应该养成始终使用与连接对象关联的close（）方法关闭连接的习惯。</p><p>要确保关闭连接，您可以在代码中提供“finally”块。 无论是否发生异常，始终执行<em>finally</em>块。</p></li><li><p>最后附上完整代码：</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.实现了数据与代码的解耦</span><span class="token comment">//2.如果修改程序配置信息，只需修改文件不改代码，避免程序重新打包</span><span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment">//获取系统类加载器，自定义类都是系统类加载器加载</span>        <span class="token comment">//读取配置信息</span>        <span class="token class-name">InputStream</span> rs<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getClassLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> pro<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> user<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> driver<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> con<span class="token operator">=</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC数据库交互"><a href="#JDBC数据库交互" class="headerlink" title="JDBC数据库交互"></a>JDBC数据库交互</h2><table><thead><tr><th align="center">接口</th><th align="center">推荐用途</th></tr></thead><tbody><tr><td align="center">Statement</td><td align="center">使用对数据库的通用访问。 在运行时使用<strong>静态SQL语句</strong>时很有用。 Statement接口不能接受参数。</td></tr><tr><td align="center">PreparedStatement</td><td align="center">当您计划多次使用SQL语句时使用。 <code>PreparedStatement</code>接口在运行时接受输入参数。预编译的特性</td></tr><tr><td align="center">CallableStatement</td><td align="center">使用何时访问数据库存储过程。 <code>CallableStatement</code>接口也可以接受运行时输入参数。</td></tr></tbody></table><h3 id="PreparedStatement用法实例"><a href="#PreparedStatement用法实例" class="headerlink" title="PreparedStatement用法实例"></a>PreparedStatement用法实例</h3><p><code>PreparedStatement</code>:预编译SQL语句，存储在此对象中，可以高效多次执行该语句。，可传入带占位符的SQL语句，<code>String sql="insert into exam values(?,?,?)"</code>,也提供了填充占位符的方法，<code>setXxx(int index,Object val)</code>,index从1开始。当再次使用该语句时可调用<code>clearParameters()</code>清除参数，再重新设置参数。</p><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token comment">//对customers插入数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> user <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password<span class="token operator">=</span>info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> driverClass <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into customers(name,email,birth) values(?,?,?)"</span><span class="token punctuation">;</span><span class="token comment">//问号将数据参数化</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"凡凡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"179566@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> sd<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2000-01-12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>       <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"update customers set name=? where id=?"</span><span class="token punctuation">;</span>       <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"热巴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通用的增删改"><a href="#通用的增删改" class="headerlink" title="通用的增删改"></a>通用的增删改</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//version1.0 后面可以加上事务</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">xiugai</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Connection</span> con<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lines<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lines<span class="token operator">=</span>ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lines<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select id,name,email,birth from customers where id=?"</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> id<span class="token operator">=</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> email <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//利用专门类处理不同的属性值</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ORM编程思想</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通用的查询操作"><a href="#通用的查询操作" class="headerlink" title="通用的查询操作"></a>通用的查询操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对某个表的通用查询操作，封装到JavaBean中</span><span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">testQueryForCustomer</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">PrepareStatement</span> ps<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">ResultSet</span> rs<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rs<span class="token operator">=</span>ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取元数据，列数</span>        <span class="token class-name">ResultSetMetaData</span> metaData<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columns<span class="token operator">=</span>metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> cus<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>columns<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Object</span> columnval<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> columnName<span class="token operator">=</span>metaData<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Field</span> declaredField <span class="token operator">=</span> <span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//属性有可能是私有的</span>                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span>columnval<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>             <span class="token punctuation">}</span>        <span class="token keyword">return</span> cus<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询操作思想流程"><a href="#查询操作思想流程" class="headerlink" title="查询操作思想流程"></a>查询操作思想流程</h4><p><img src="https://i.loli.net/2021/10/05/l9QgxkqbrJE5KOA.png" alt="jdcbquery.png"></p><h4 id="针对于所有表的通用查询操作"><a href="#针对于所有表的通用查询操作" class="headerlink" title="针对于所有表的通用查询操作"></a>针对于所有表的通用查询操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//参数中提供JavaBean的类对象</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Object</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PrepareStatement</span> ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ResultSet</span> rs<span class="token operator">=</span>ps<span class="token punctuation">.</span><span class="token function">excuteQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResultSetMetaData</span> metaData <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">T</span> t<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>columnCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Object</span> val<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnLable</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//返回多条记录时的通用查询操作</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getListForQuery</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSetMetaData</span> metaData <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//            Order order=new Order();</span>            <span class="token class-name">T</span> t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//                String columnName = metaData.getColumnName(i + 1);  不推荐使用</span>                <span class="token class-name">String</span> columnLabel <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果没有起别名，则返回列名</span>                <span class="token class-name">Field</span> declaredField <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> object <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arrayList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在使用完ResultSet，Statement，Connection对象后应立即调用close，这对象会占用规模较大的数据结构，占用数据库服务器上的有限资源。Statement对象的close方法将自动关闭与其所有相关联的结果集，同样Connection对象的close也将关闭该连接上的所有语句对象</strong></p><h4 id="SQLException"><a href="#SQLException" class="headerlink" title="SQLException"></a>SQLException</h4><p>SQLException有一个由多个SQLException对象构成的链，由于SQLException实现的Iterable<throwable>接口，故可遍历该链</throwable></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token operator">:</span>sqlException<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="插入Blog数据"><a href="#插入Blog数据" class="headerlink" title="插入Blog数据"></a>插入Blog数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>       <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into customers(name,email,birth,photo) values(?,?,?,?)"</span><span class="token punctuation">;</span>       <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张宇豪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"1710515@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">SimpleDateFormat</span> sd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Date</span> date <span class="token operator">=</span> sd<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1990-10-14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">FileInputStream</span> fis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"images/mahuateng.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>       fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="读入Blob数据"><a href="#读入Blob数据" class="headerlink" title="读入Blob数据"></a>读入Blob数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReadBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select id,name,email,birth,photo from customers where id=?"</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Customer</span> customer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>email<span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Blob</span> blob<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getBlob</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">InputStream</span> inblob <span class="token operator">=</span> blob<span class="token punctuation">.</span><span class="token function">getBinaryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileOutputStream</span> fos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"images/mahuateng2.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>inblob<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps：在设置了Blob类型之后，若仍报too large错误，则可尝试在mysql的my.ini文件中修改配置参数：max_allowed_packet=16M;</p><p>在相关Connection对象关闭后，PreparedStatement对象就无效了，但数据库会自动缓存预备语句，相同的查询被执行多次后，再次执行时会重用查询策略，无需过多考虑PreparedStatement的开销</p>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式学习</title>
      <link href="/2021/10/03/zheng-ze-biao-da-shi-xue-xi/"/>
      <url>/2021/10/03/zheng-ze-biao-da-shi-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>tomcat学习（一）</title>
      <link href="/2021/10/01/tomcat-xue-xi-yi/"/>
      <url>/2021/10/01/tomcat-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> tomcat原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java虚拟机JVM（一）</title>
      <link href="/2021/09/30/java-xu-ni-ji-jvm-yi/"/>
      <url>/2021/09/30/java-xu-ni-ji-jvm-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java虚拟机JVM（一）"><a href="#Java虚拟机JVM（一）" class="headerlink" title="Java虚拟机JVM（一）"></a>Java虚拟机JVM（一）</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由LSB算法所引发的对byte类型的思考</title>
      <link href="/2021/09/29/you-lsb-suan-fa-suo-yin-fa-de-dui-byte-lei-xing-de-si-kao/"/>
      <url>/2021/09/29/you-lsb-suan-fa-suo-yin-fa-de-dui-byte-lei-xing-de-si-kao/</url>
      
        <content type="html"><![CDATA[<h1 id="Byte类型详解"><a href="#Byte类型详解" class="headerlink" title="Byte类型详解"></a>Byte类型详解</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><blockquote><p>参考文章：<a href="https://cloud.tencent.com/developer/article/1499063?from=14588">从强转Byte说起</a></p></blockquote><p>最近在写LSB算法时，遇到了许多字节运算与位运算，在byte与int之间的转换中一直出bug，百思不得其解，还以为代码逻辑有问题，最终在查找资料得知没想到Java中的byte类型有大学问，故通过这篇文章来剖析一下Java中的byte。</p><p><strong>前言：</strong></p><p>在计算机存储中以字节为单位，8bit组成一个字节，在网络数据传输中，大部分协议都是按字节一位位解析的，故搞清楚byte很有必要</p><h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><p>在java中除了boolean和char是无符号的，其余的基本数据类型都是有符号的，故最高位用来标识符号。我们通常以为若byte为正数，其最大值为<code>01111111</code>即127，若byte为负数其最小值为<code>11111111</code>即-127，但实际上真的是这样吗，这与许多教程中-128到127的结论不太吻合啊！！那这-128哪来的呢？我们可以试验一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>-128表示为10000000，这不是-0嘛</p><p>实际上将-127打印出来你会发现也不是-127，而是-1</p><pre class="line-numbers language-none"><code class="language-none">byte b1 = (byte)-127 ;System.out.println(b1);//结果10000001//最后八位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会这样呢？经过查询得知==：计算机中存储的都是补码，输出的都是原码==，即是以补码形式存储数值的，负数的补码是取反加1，正数的补码是本身，正如-127的存储形式转变过程是<code>11111111-》10000000+1=10000001</code>转成int就是<code>11111111111111111111111110000001</code></p><p>故对于int类型的-127转成byte直接截去前24位，存储后八位进去<code>10000001</code>,但这是补码，输出的时候转成原码还是-127。<font color="red">注意：若直接采用二进制或十六进制赋值，即byte b=0b11111111，则计算机会直接把这个二进制码存进去，即当成这就是补码，故你在输出的时候会发现这个值变为了-1</font></p><h2 id="运算机制"><a href="#运算机制" class="headerlink" title="运算机制"></a>运算机制</h2><p>在java中两个变量只要参与了运算，就可能会进行类型转变，即只要比int小的类型自动转成int，通常表达式中出现的最大数据类型决定了表达式最终结果的数据类型，例如int+long，结果为long</p><p>在通信中发送的byte数组是哪些bit接受到的就是哪些bit，没有符号位这一说。但在输出的时候就会考虑符号位了。</p><h2 id="byte转int为什么要-amp-oxff"><a href="#byte转int为什么要-amp-oxff" class="headerlink" title="byte转int为什么要&amp;oxff"></a>byte转int为什么要&amp;oxff</h2><p>在介绍这个内容之前我们先讲一些前置知识</p><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>面试时你可能遇到过诸如写出2*8最有效率的运算方法，无非就是考察对底层二进制的熟悉程度，不用说，当然是用位运算，所以掌握位运算在一些问题上会有高效率的解法。</p><ul><li><p>按位与 &amp;</p><ul><li><p>相同二进制位同为1，不同为0，利用这个特性，我们可以得知判断奇偶数不在用传统的n%2的方式了，直接用n&amp;1，结果为0即为偶数，为1就是奇数，为什么？</p><p>对于正数和0，补码与原码相同，1的前面都为0，故我们只关心最后以为，奇数肯定是1,1&amp;1则为1，故为奇数；</p><p>对于负数，原码转补码，奇数最后一位取反加1后仍为1，故也可以判断，</p></li></ul></li><li><p>按位异或 ^</p><ul><li>相同的二进制位数数字不同则为1，否则为0，异或有个特性是任何数与0异或，结果都是其本身，利用这个特性可解决一些特定的问题。</li></ul></li><li><p>取反 ~ :按位取反</p></li><li><p>左移 &lt;&lt;  :形如a&lt;&lt;b，将a的二进制位整体左移b位，高位溢出则移除，低位补0，因为位运算是cpu直接支持的，故是最有效率的运算。</p></li><li><p>右移 &gt;&gt;  : 前面讲到计算机中是以补码形式存储数值的，在在右移的时候要考虑符号位，若右移的是负数，则在高位补1，若为整数，则在高位补0.</p></li><li><p>无符号右移 &gt;&gt;&gt;  : 与右移唯一的不同在于无论什么数，移动都是高位补0，==没有无符号左移，因为符号位在左边，不存在补符号位的问题==</p></li></ul><p>学习了前面的知识后我们来讲讲我们的主题！！！</p><p>我们可以明白长字节数要往短转，直接强来肯定是不行的，而且搞清楚这个问题很有必要。在javaIO包中各种输入输出流的读写方法，很多参数都是字节数组，为了保证不同通讯终端数据兼容，发送和接收的都是字节序列，搞清楚很有必要。</p><p>在Java中怎么将int转换成byte还能成功还原呢，我们知道一个int占4个byte，即需要一个byte数组，直接上代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">int2Bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/09/30/G1t4dzLsE2rPUxV.png" alt="byte转int.png"></p><p>其实很简单，只需要右移就好了，但是装进去了怎么还原呢，很明显想到左移，但真这么简单吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bytes2Int</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 左移将原来的数先还原到对应的位置，再 按位或 将几个数进行合并</span>        <span class="token keyword">return</span> 　　bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>                <span class="token operator">|</span> bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>                <span class="token operator">|</span> bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span>                <span class="token operator">|</span> bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果真这样搞，那就等着大bug吧。我们知道计算机是以补码形式存储数值的，当我们进行以为运算时，byte，short，char类型会提升为32位的int，这时候就需要用0或1补位，如果是负数会补1，正数补0，为保证拼接起来的byte补码形式与原来int的补码形式相同，我们要先进行byte &amp; 0xff，提前补位，再通过 | 按位或即能正确拼接回int，这样才能保证数据不会发生异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bytes2Int</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>　　  bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>                <span class="token operator">|</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>                <span class="token operator">|</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span>                <span class="token operator">|</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为这个问题纠结了几天了，今天感觉算是豁然开朗了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb练习项目分析:javaweb教程P330-355</title>
      <link href="/2021/09/29/javaweb-lian-xi-xiang-mu-fen-xi-javaweb-jiao-cheng-p330-355/"/>
      <url>/2021/09/29/javaweb-lian-xi-xiang-mu-fen-xi-javaweb-jiao-cheng-p330-355/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础知识总结（一）</title>
      <link href="/2021/09/29/javase-ji-chu-zhi-shi-zong-jie-yi/"/>
      <url>/2021/09/29/javase-ji-chu-zhi-shi-zong-jie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaSE基础知识总结（一）"><a href="#JavaSE基础知识总结（一）" class="headerlink" title="JavaSE基础知识总结（一）"></a>JavaSE基础知识总结（一）</h1><p>制作人：文明</p><p>微信：19871173328</p><h2 id="Java中的浅拷贝与深拷贝"><a href="#Java中的浅拷贝与深拷贝" class="headerlink" title="Java中的浅拷贝与深拷贝"></a>Java中的浅拷贝与深拷贝</h2><p><a href="https://juejin.cn/post/6844903806577164302">Java浅拷贝与深拷贝</a></p><p><a href="https://www.cnblogs.com/plokmju/p/7357205.html">细说浅拷贝与深拷贝</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode每日一练</title>
      <link href="/2021/09/28/leetcode-mei-ri-yi-lian/"/>
      <url>/2021/09/28/leetcode-mei-ri-yi-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode每日一练"><a href="#leetcode每日一练" class="headerlink" title="leetcode每日一练"></a>leetcode每日一练</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></p><p>反转链表比较常规的思路有两种：迭代和递归</p><h3 id="方法一：迭代"><a href="#方法一：迭代" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h3><p>通常会设置两个辅助结点，一个前驱结点<code>pre=null</code>，一个当前结点<code>cur通常设置为head</code>。</p><ul><li>找一次迭代的过程，要实现链表反转，首先肯定要获取<code>cur</code>结点的后一节点指针<code>next</code>，方便后移，然后将cur的指向反转，指向pre，再<code>pre=cur</code>，<code>cur=next</code>这一组过程实现结点后移，之后的过程重复如此即可实现反转。</li><li>循环终止条件即为<code>cur!=null</code></li></ul><img src="https://i.loli.net/2021/09/28/kasnHzLEgiv9SVt.gif" alt="反转链表.gif" style="zoom:75%;"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>curr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==此代码可作为反转链表的模板，在遇到其他反转链表类似操作时，此代码可作为模板嵌入解决子问题==</p><ul><li>复杂度分析：时间复杂度O(n),n为链表长度，即遍历一次链表；空间复杂度O(1)，即定义的辅助结点。</li></ul><h3 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><p>思路与前面类似，只不过采用递归的思想，这里只贴代码。</p><p>递归求解步骤：</p><ul><li>明确要写的递归函数的功能，该怎么设计返回值</li><li>找递归问题的子问题，即一次调用之后会产生什么结果，即找递推关系</li><li>找到临界条件，确保子问题不会无限分解下去</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> pre<span class="token punctuation">,</span><span class="token class-name">ListNode</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> pre<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>        pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>        cur<span class="token operator">=</span>curr<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">reverse</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反转链表（II）"><a href="#反转链表（II）" class="headerlink" title="反转链表（II）"></a>反转链表（II）</h2><p><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">反转链表(II)</a></p><h3 id="方法一：构造常用反转链表模板"><a href="#方法一：构造常用反转链表模板" class="headerlink" title="方法一：构造常用反转链表模板"></a>方法一：构造常用反转链表模板</h3><p>此题是将指定范围内的链表反转，这就涉及到这个范围内之外的结点怎么连接。但在范围之内，我们仍然可以直接使用反转模板，先反转，在利用几个记录指针，连接范围内的收尾，即可完成连接。具体在于先找到范围外最接近范围内链表的前驱结点和后继结点，切断链表，待内部反转完毕，再实现外部连接。</p><p>==链表移动tips:链表标号相减所得的次数即是从前一结点移动到后一节点的循环次数==</p><img src="https://i.loli.net/2021/09/28/nirPqb3K4NwOsYL.png" alt="反转链表2.png" style="zoom:75%;"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>y    <span class="token comment">//由于头结点可能存在反转，故设置哑结点，这是这类题的通用做法，避免分类讨论</span>       <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>       <span class="token comment">//找到pre</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token punctuation">}</span>              <span class="token class-name">ListNode</span> leftNode<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> rightNode<span class="token operator">=</span>leftNode<span class="token punctuation">;</span>       pre<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>right<span class="token operator">-</span>left<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           rightNode<span class="token operator">=</span>rightNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token class-name">ListNode</span> succ<span class="token operator">=</span>rightNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       rightNode<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token function">reverseList</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>       pre<span class="token punctuation">.</span>next<span class="token operator">=</span>rightNode<span class="token punctuation">;</span>       leftNode<span class="token punctuation">.</span>next<span class="token operator">=</span>succ<span class="token punctuation">;</span>       <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>curr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：头插法，思路巧妙"><a href="#方法二：头插法，思路巧妙" class="headerlink" title="方法二：头插法，思路巧妙"></a>方法二：头插法，思路巧妙</h3><p>前一方法的缺点在于若起始结束点分别在头尾，则要遍历两边链表，我们思考能不能只遍历一遍？于是有头插法：</p><img src="https://i.loli.net/2021/09/28/8k3LdAZwER7UNF5.png" alt="反转链表法2.png" style="zoom:67%;"><ul><li><code>pre</code>始终执行反转区域第一个节点left的前一个结点。</li><li><code>cur</code>永远指向反转区域left结点</li><li><code>next</code>指向cur下一节点，随着cur后移</li></ul><p>反转过程：</p><p><img src="https://i.loli.net/2021/09/28/5HzNvQi41TLFWVR.png" alt="屏幕截图 2021-09-28 223527.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token operator">-</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           next<span class="token operator">=</span>curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           curr<span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           next<span class="token punctuation">.</span>next<span class="token operator">=</span>curr<span class="token punctuation">;</span>           pre<span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复杂度分析：时间复杂度O(n)，至多只遍历链表一次；空间复杂度O(1)，使用常数个辅助指针。</li></ul><h2 id="82-删除排序链表中的重复元素-II"><a href="#82-删除排序链表中的重复元素-II" class="headerlink" title="82. 删除排序链表中的重复元素 II"></a>82. 删除排序链表中的重复元素 II</h2><h3 id="方法一：迭代-1"><a href="#方法一：迭代-1" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h3><p> <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></p><p>此题是只要出现重复的结点，就将这些节点全部删除，而不是删除到只剩一个。</p><p>链表是已经排好序的，故重复元素在链表中是连续出现的，因此只需遍历一次。由于头结点也可能被删除，故设置哑结点。</p><p>==注意由于是通过判断cur.next.val=cur.next.next.val,故要先确保不为空，要加判断==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> dummyNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">==</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//通过记录该值，方便后续删除</span>                <span class="token keyword">int</span> x<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>                    cur<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：递归-1"><a href="#方法二：递归-1" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><h2 id="86-分割链表"><a href="#86-分割链表" class="headerlink" title="86.分割链表"></a>86.分割链表</h2><h3 id="方法一：虚拟结点拆分再合并"><a href="#方法一：虚拟结点拆分再合并" class="headerlink" title="方法一：虚拟结点拆分再合并"></a>方法一：虚拟结点拆分再合并</h3><p>设置两个虚拟头结点，一个头结点连接所有小于x的结点，一个头结点连接所有大于或等于x的结点，这里有个误区就是不一定要所有小于x的都在x结点左边，大于x的都在x右边，只需要小于的在大于或等于的左边就行了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> smallHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> largeHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> small<span class="token operator">=</span>smallHead<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> large<span class="token operator">=</span>largeHead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>                small<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                small<span class="token operator">=</span>small<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                large<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                large<span class="token operator">=</span>large<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        large<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        small<span class="token punctuation">.</span>next<span class="token operator">=</span>largeHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> smallHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：哨兵结点-双指针"><a href="#方法二：哨兵结点-双指针" class="headerlink" title="方法二：哨兵结点+双指针"></a>方法二：哨兵结点+双指针</h3><p>此题关键是找到第一个大于x的结点，即为分界点，此时用一个哨兵节点指向分界点，然后利用另一个移动指针持续往后搜索，将小于x的结点全部移到哨兵节点之后，遍历完后则小于x的结点全部在大于或等于x结点之前。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token operator">&amp;&amp;</span>cur<span class="token operator">!=</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ListNode</span> tar<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                tar<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next<span class="token operator">=</span>tar<span class="token punctuation">;</span>                pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token operator">&amp;&amp;</span>cur<span class="token operator">==</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML学习</title>
      <link href="/2021/09/25/xml-xue-xi/"/>
      <url>/2021/09/25/xml-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSTL学习</title>
      <link href="/2021/09/25/jstl-xue-xi/"/>
      <url>/2021/09/25/jstl-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式介绍</title>
      <link href="/2021/09/25/el-biao-da-shi-jie-shao/"/>
      <url>/2021/09/25/el-biao-da-shi-jie-shao/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE常用工具类（日期篇）</title>
      <link href="/2021/09/23/javase-chang-yong-gong-ju-lei-ri-qi-pian/"/>
      <url>/2021/09/23/javase-chang-yong-gong-ju-lei-ri-qi-pian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中Update resources和Update classes and resources、Redeploy、Restart server的区别</title>
      <link href="/2021/09/23/idea-zhong-update-resources-he-update-classes-and-resources-redeploy-restart-server-de-qu-bie/"/>
      <url>/2021/09/23/idea-zhong-update-resources-he-update-classes-and-resources-redeploy-restart-server-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA中Update-resources和Update-classes-and-resources、Redeploy、Restart-server的区别"><a href="#IDEA中Update-resources和Update-classes-and-resources、Redeploy、Restart-server的区别" class="headerlink" title="IDEA中Update resources和Update classes and resources、Redeploy、Restart server的区别"></a>IDEA中Update resources和Update classes and resources、Redeploy、Restart server的区别</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><p><img src="https://i.loli.net/2021/09/23/OMiZmapWuQNzyCA.png" alt="tomcat.png"></p><ul><li>update resources:更新静态资源，比如html，js，css等资源，再运行和调试模式下都是立即生效的。</li><li>update classes and resources  更新java，jsp等和静态资源，<ul><li>1.在java修改后，会被编译成class文件，然后覆盖到target/kao文件夹下，在IDE调试模式下会立即生效，在IDE运行模式下不立即生效，需要redeployed才生效</li><li>jsp被修改后，再次访问时会自动更新，由于是访问时才检测是否修改，是否重新编译，故在IDE运行模式下和调试模式下都是立即生效的</li></ul></li><li>redeployed  重新部署，发布到tomcat里，不是重启tomcat，而是把原来的删除，再把新的放进去</li><li>restart server  重启tmocat</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc连接mysql的url写法及常见属性</title>
      <link href="/2021/09/14/jdbc-lian-jie-mysql-de-url-xie-fa-ji-chang-jian-shu-xing/"/>
      <url>/2021/09/14/jdbc-lian-jie-mysql-de-url-xie-fa-ji-chang-jian-shu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="jdbc连接mysql的url写法及常见属性"><a href="#jdbc连接mysql的url写法及常见属性" class="headerlink" title="jdbc连接mysql的url写法及常见属性"></a>jdbc连接mysql的url写法及常见属性</h1><p>制作人：WenMing</p><p>微信：19871173328</p><hr><p><font color="green">URL=jdbc:mysql://[host][:port]/[database]</font></p><p>其后可跟性能参数：？[propertyName1=propertyValue1]&amp;[propertyName2=propertyValue2]…</p><p>MYSQL 8.0 以上版本数据库连接有所不同：</p><ol><li>MYSQL 8.0 以上版本驱动包为mysql-connector-java-8.0.16.jar</li><li>com.mysql.jdbc.Driver更换为 com.mysql.cj.jdbc.Driver</li></ol><p>重要参数如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>缺省值</th><th>最低版本要求</th></tr></thead><tbody><tr><td>user</td><td>数据库用户名（用于连接数据库）</td><td></td><td>所有版本</td></tr><tr><td>password</td><td>用户密码（用于连接数据库）</td><td></td><td>所有版本</td></tr><tr><td>useUnicode</td><td>是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为true</td><td>false</td><td>1.1g</td></tr><tr><td>characterEncoding</td><td>当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbk</td><td>false</td><td>1.1g</td></tr><tr><td>autoReconnect</td><td>当数据库连接异常中断时，是否自动重新连接？</td><td>false</td><td>1.1</td></tr><tr><td>autoReconnectForPools</td><td>是否使用针对数据库连接池的重连策略</td><td>false</td><td>3.1.3</td></tr><tr><td>failOverReadOnly</td><td>自动重连成功后，连接是否设置为只读？</td><td>true</td><td>3.0.12</td></tr><tr><td>maxReconnects</td><td>autoReconnect设置为true时，重试连接的次数</td><td>3</td><td>1.1</td></tr><tr><td>initialTimeout</td><td>autoReconnect设置为true时，两次重连之间的时间间隔，单位：秒</td><td>2</td><td>1.1</td></tr><tr><td>connectTimeout</td><td>和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本</td><td>0</td><td>3.0.1</td></tr><tr><td>socketTimeout</td><td>socket操作（读写）超时，单位：毫秒。 0表示永不超时</td><td>0</td><td>3.0.1</td></tr></tbody></table><p>mysql常用配置：</p><p>jdbc:mysql://localhost:3306/数据库名?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8</p><p>&amp;serverTimezone=GMT%2B8</p>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JdbcTemplate学习</title>
      <link href="/2021/09/12/jdbctemplate-xue-xi/"/>
      <url>/2021/09/12/jdbctemplate-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Juni常用注解</title>
      <link href="/2021/09/12/juni-chu-tan/"/>
      <url>/2021/09/12/juni-chu-tan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql部分知识整理(二)</title>
      <link href="/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li-er/"/>
      <url>/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li-er/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=103027&amp;auto=0&amp;height=66"></iframe><h1 id="mysql部分知识整理（二）"><a href="#mysql部分知识整理（二）" class="headerlink" title="mysql部分知识整理（二）"></a>mysql部分知识整理（二）</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><p><font color="red">本文续上文</font></p><h2 id="第六部分：mysql流程控制介绍"><a href="#第六部分：mysql流程控制介绍" class="headerlink" title="第六部分：mysql流程控制介绍"></a>第六部分：mysql流程控制介绍</h2><h3 id="6-1-分支结构"><a href="#6-1-分支结构" class="headerlink" title="6.1 分支结构"></a>6.1 分支结构</h3><h4 id="6-1-1-if函数"><a href="#6-1-1-if函数" class="headerlink" title="6.1.1 if函数"></a>6.1.1 if函数</h4><p>实现简单的双分支</p><p><code>if(表达式1,表达式2,表达式3)</code>；可应用在任何地方</p><h4 id="6-1-2-case结构"><a href="#6-1-2-case结构" class="headerlink" title="6.1.2 case结构"></a>6.1.2 case结构</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#结构一：</span><span class="token keyword">case</span> 变量<span class="token operator">|</span>表达式<span class="token operator">|</span>字段<span class="token keyword">when</span> 值 <span class="token keyword">then</span> 显示的值或语句<span class="token keyword">when</span> 值 <span class="token keyword">then</span> 显示的值或语句。。。<span class="token keyword">else</span> 显示的值或语句<span class="token keyword">end</span> <span class="token keyword">case</span>；<span class="token comment">#结构二：</span><span class="token keyword">case</span> <span class="token keyword">when</span> 条件 <span class="token keyword">then</span> 显示的值或语句<span class="token keyword">when</span> 条件 <span class="token keyword">then</span> 显示的值或语句。。。<span class="token keyword">else</span> 显示的值或语句<span class="token keyword">end</span> <span class="token keyword">case</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：</p><ul><li>可以作为表达式，嵌套在其他语句中使用，可以放在任何地方</li><li>作为独立的语句使用时，只能放在begin and内使用</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> test_case<span class="token punctuation">(</span><span class="token operator">in</span> score <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">case</span> <span class="token keyword">when</span> score<span class="token operator">&gt;=</span><span class="token number">90</span> <span class="token keyword">then</span> <span class="token keyword">select</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">when</span> score<span class="token operator">&gt;=</span><span class="token number">80</span> <span class="token keyword">then</span> <span class="token keyword">select</span> <span class="token string">'B'</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">select</span> <span class="token string">'C'</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span> <span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-3-if-elseif结构"><a href="#6-1-3-if-elseif结构" class="headerlink" title="6.1.3 if-elseif结构"></a>6.1.3 if-elseif结构</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">if</span> 条件<span class="token number">1</span> <span class="token keyword">then</span> 语句<span class="token number">1</span>；<span class="token keyword">elseif</span> 条件<span class="token number">2</span> <span class="token keyword">then</span> 语句<span class="token number">2</span>；。。。<span class="token keyword">else</span> 语句n；<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只能应用在begin and中</p><h3 id="6-2-循环结构"><a href="#6-2-循环结构" class="headerlink" title="6.2 循环结构"></a>6.2 循环结构</h3><h4 id="6-2-1-语法"><a href="#6-2-1-语法" class="headerlink" title="6.2.1 语法"></a>6.2.1 语法</h4><ul><li><p>while</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span><span class="token keyword">while</span> 循环条件 <span class="token keyword">do</span>循环体；<span class="token keyword">end</span> <span class="token keyword">while</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>loop</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span><span class="token keyword">loop</span>循环体<span class="token keyword">end</span> <span class="token keyword">loop</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>repeat</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#类似于do-while</span><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span> <span class="token keyword">repeat</span>循环体until 结束循环条件<span class="token keyword">end</span> <span class="token keyword">repeat</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-2-2-案例"><a href="#6-2-2-案例" class="headerlink" title="6.2.2 案例"></a>6.2.2 案例</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 批量插入</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_while<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'asaf'</span><span class="token punctuation">,</span>aefsaaw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token comment"># 批量插入，次数大于20则停止,iterate类似于continue，leave类似于break</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> test_while<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>a: <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'as'</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> i<span class="token operator">&gt;=</span><span class="token number">20</span> <span class="token keyword">then</span> <span class="token keyword">leave</span> a<span class="token punctuation">;</span><span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span> a<span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环结构只能使用在begin end中。</p><h2 id="第七部分：触发器"><a href="#第七部分：触发器" class="headerlink" title="第七部分：触发器"></a>第七部分：触发器</h2><h2 id="第八部分：SQL数据类型"><a href="#第八部分：SQL数据类型" class="headerlink" title="第八部分：SQL数据类型"></a>第八部分：SQL数据类型</h2>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql部分知识整理(一)</title>
      <link href="/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li/"/>
      <url>/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1384026889&amp;auto=0&amp;height=66"></iframe><h1 id="mysql部分知识整理-一"><a href="#mysql部分知识整理-一" class="headerlink" title="mysql部分知识整理(一)"></a>mysql部分知识整理(一)</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="第一部分：事务"><a href="#第一部分：事务" class="headerlink" title="第一部分：事务"></a>第一部分：事务</h2><h3 id="1-1-事务概述"><a href="#1-1-事务概述" class="headerlink" title="1.1 事务概述"></a>1.1 事务概述</h3><ul><li><p>使用事务处理，确保成批的SQL操作要么全部执行要么全部不执行，来维护数据库的完整性。</p><p>当多个用户访问同一数据时，一个用户在更改数据过程中可能有其他同时执行更改的用户，为保证数据库记录从一个一致性状态变为另一个一致性状态，了解事务的相关特性有其必要。</p></li></ul><h3 id="1-2-事务特性（ACID）"><a href="#1-2-事务特性（ACID）" class="headerlink" title="1.2 事务特性（ACID）"></a>1.2 事务特性（ACID）</h3><ul><li>原子性 ：事务所有操作视为原子单位，对事务的操作只能完全提交或完全回滚</li><li>一致性 ：事务完成时，数据必须是一致性状态的转移，所有的变更都应用于事务的修改，确保数据的完整性。例如转账前后收发双方总钱数不变</li><li>隔离性 ：一个事务的操作必须与其他事务操作相隔离。进行事务查看数据时数据所处的状态要么是被另一并发事务修改之前的状态，要么是修改之后的状态，而不会是另一并发事务执行操作时中间的状态，这通过锁机制实现。</li><li>持久性 ：事务完成后，做的修改对数据影响是永久的。</li></ul><h3 id="1-3-mysql事务隔离级别"><a href="#1-3-mysql事务隔离级别" class="headerlink" title="1.3 mysql事务隔离级别"></a>1.3 mysql事务隔离级别</h3><p>mysql中提供四种事务隔离级别：READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE 在了解之前先来看一下一些并发问题</p><p><img src="https://i.loli.net/2021/09/10/TgHx51AzeSsmMvu.png" alt="并发问题.png"></p><p>查看系统事务隔离级别：<code>select @@global.tx_isolation</code></p><p>设置事务隔离级别：<code>set global transaction isolation level ...</code></p><p>以下隔离级别一次越来越安全，但并发率越来越差。</p><ul><li>READ UNCOMMITTED ：该隔离级别，所有事务能看到其他事务未提交的修改，其性能不必其他级别高多少，很少使用，会产生脏读（设置隔离级别时最低要解决脏读问题）</li><li>READ COMMITTED ：大多数系统默认隔离级别。解决脏读，即事务只能看见提交事务的改变，但会引发不可重复读。即在同一事务期间可能会两次读出的数据不同。</li><li>REPEATABLE READ ：mysql默认隔离界别。解决不可重复读，能确保同一事务在并发读取数据行时看到同样数据行，但会产生幻读，即第一个事务对表中数据做了修改，这涉及全部数据行，但另一事务向表中插入了数据行，第一个事务就会发现多出了一行，且这行数据没有被我修改。</li><li>SERIALIZABLE：强制事务排序，解决幻读。即在每个读的数据行加上共享锁，这会导致大量超时现象。阻塞现象仅仅体现在读数据行上，进行其他操作不会阻塞。</li></ul><h3 id="1-4-使用事务相关操作"><a href="#1-4-使用事务相关操作" class="headerlink" title="1.4 使用事务相关操作"></a>1.4 使用事务相关操作</h3><ul><li><p>开启事务<code>start transaction</code></p></li><li><p>使用ROLLBACK</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提交事务commit，使用方法与rollback相同</p></li><li><p>设置保留点，简单的rollback与commit可以撤销和写入整个事务，但对于复杂的事务，只需要部分撤销或提交，此时设置保留点。<code>savepoint a1</code>退回时<code>rollback to a1</code></p></li><li><p>更改默认提交 <code>set autocommit=false</code></p></li></ul><h2 id="第二部分：约束"><a href="#第二部分：约束" class="headerlink" title="第二部分：约束"></a>第二部分：约束</h2><h3 id="2-1-常见约束"><a href="#2-1-常见约束" class="headerlink" title="2.1 常见约束"></a>2.1 常见约束</h3><ul><li>PRIMARY KEY：该表主键，主键默认加上NOT NULL，UNIQUE</li><li>FOREIGN KEY：外键，表示该属性是与之联系的某表的主键。<ul><li>特点：<ul><li>表的外键列类型和主表关联列类型兼容</li><li>主表的关联列必须是key，即主键或唯一</li><li>插入数据时先插主表，再插从表；删除数据时先删从表，再删主表</li></ul></li></ul></li><li>NOT NULL：非空</li><li>UNIQUE：属性唯一</li><li>DEFAULT：设置属性默认值</li><li>AUTO_INCREMENT：自增</li></ul><h3 id="2-2-添加约束的时机即约束相关操作"><a href="#2-2-添加约束的时机即约束相关操作" class="headerlink" title="2.2 添加约束的时机即约束相关操作"></a>2.2 添加约束的时机即约束相关操作</h3><ul><li><p>修改表时添加约束：</p><ul><li><p>添加约束，利用alter</p><p><code>alter table stu add constraint pk primary key(id)</code>或</p><p><code>alter table stu modify column id int primary key</code>添加主键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_stu_major <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#添加外键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> <span class="token keyword">constraint</span> DF <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> age<span class="token punctuation">;</span><span class="token comment">#添加默认约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>创建表时添加约束：</p><ul><li><p>添加列级约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token comment">#主键</span>    stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token comment">#非空</span>    seat <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">18</span>    majorid <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#列级约束只支持非空，默认，唯一，主键约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加表级约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>    stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    seat <span class="token keyword">int</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    majorid <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> uq <span class="token keyword">unique</span><span class="token punctuation">(</span>seat<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_stu_major <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>删除约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">constraint</span> 约束名；<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 列名 。。。；<span class="token comment">#modify是万能的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="2-3-自增约束扩展"><a href="#2-3-自增约束扩展" class="headerlink" title="2.3 自增约束扩展"></a>2.3 自增约束扩展</h3><p>创建表时可以设置自增，设为自增的列插入值时可以忽略。</p><ul><li><p>标识列必须和key列搭配，即时主键或唯一</p></li><li><p>一个表至多一个自增列</p></li><li><p>标识列只能是数值型</p></li><li><p>修改表时设置和删除标识列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> tab_identify <span class="token keyword">modify</span> <span class="token keyword">column</span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tab_identify <span class="token keyword">modify</span> <span class="token keyword">column</span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="第三部分：视图"><a href="#第三部分：视图" class="headerlink" title="第三部分：视图"></a>第三部分：视图</h2><h3 id="3-1-为什么使用视图"><a href="#3-1-为什么使用视图" class="headerlink" title="3.1 为什么使用视图"></a>3.1 为什么使用视图</h3><p>有时候查询很复杂，视图可以使用户不看整个数据库的数据，而只关心对自己有用的数据，其本质是一张虚拟的表，视图的列可以来自不同的表，其建立和删除不影响基本的表，<font color="green">但对试图内容的更新（添加，删除，修改）会影响基本表</font>，故当视图来自多个表时，不允许添加和删除数据。</p><h3 id="3-2-视图相关操作"><a href="#3-2-视图相关操作" class="headerlink" title="3.2 视图相关操作"></a>3.2 视图相关操作</h3><h4 id="3-2-1-创建视图"><a href="#3-2-1-创建视图" class="headerlink" title="3.2.1 创建视图"></a>3.2.1 创建视图</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> <span class="token keyword">replace</span><span class="token punctuation">]</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token punctuation">[</span><span class="token keyword">with</span><span class="token punctuation">[</span><span class="token keyword">cascaded</span><span class="token operator">|</span><span class="token keyword">LOCAL</span><span class="token punctuation">]</span><span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CASCADED 表示更新视图时要满足有关视图和表的条件,在创建视图时建议加上此参数，这样从视图派生出新视图时，需考虑父视图的约束条件，保证数据的安全性。</p><h4 id="3-2-2-查看视图"><a href="#3-2-2-查看视图" class="headerlink" title="3.2.2 查看视图"></a>3.2.2 查看视图</h4><p>使用DESC 例如<code>desc&nbsp;viewname</code></p><p><strong>使用show tables 也可以查看视图</strong>，在mysql中，所有的视图定义都存在数据库<code>information_schema</code>的表views中，可以如此查看视图详细信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>views<span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'viewname'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-2-3-修改视图-针对表结构"><a href="#3-2-3-修改视图-针对表结构" class="headerlink" title="3.2.3 修改视图(针对表结构)"></a>3.2.3 修改视图(针对表结构)</h4><p>当基本表的字段发生变化时，修改视图保持一致性，通过<code>create&nbsp;or&nbsp;replace&nbsp;view</code>或<code>alter</code>实现</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token keyword">with</span> <span class="token keyword">cascaded</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token keyword">with</span> <span class="token keyword">cascaded</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-4更新视图（针对表中字段内容）"><a href="#3-2-4更新视图（针对表中字段内容）" class="headerlink" title="3.2.4更新视图（针对表中字段内容）"></a>3.2.4更新视图（针对表中字段内容）</h4><p>与操纵基本表一样，select，update，insert，delete</p><h4 id="3-2-5-视图不能更新情况"><a href="#3-2-5-视图不能更新情况" class="headerlink" title="3.2.5 视图不能更新情况"></a>3.2.5 视图不能更新情况</h4><ul><li>视图包含UNION , UNOIN ALL , DISTINCT , GROUP BY , HAVING等关键字</li><li>常量视图 <code>create&nbsp;view&nbsp;view3&nbsp;as&nbsp;select&nbsp;'REBCCA'&nbsp;as&nbsp;name</code></li><li>包含子查询的视图也不能更新</li><li>视图中包含分组函数时不能更新视图</li></ul><h4 id="3-2-6-删除视图"><a href="#3-2-6-删除视图" class="headerlink" title="3.2.6 删除视图"></a>3.2.6 删除视图</h4><p><code>drop&nbsp;view&nbsp;viewname</code></p><h2 id="第四部分-：存储过程和函数"><a href="#第四部分-：存储过程和函数" class="headerlink" title="第四部分 ：存储过程和函数"></a>第四部分 ：存储过程和函数</h2><h3 id="4-1-存储过程"><a href="#4-1-存储过程" class="headerlink" title="4.1 存储过程"></a>4.1 存储过程</h3><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> procedure_name<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">SQL</span> 代码<span class="token keyword">end</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数的语法形式：<code>[IN|OUT|INOUT]&nbsp;param_name&nbsp;type</code>,<code>IN</code>可以做输入值，<code>OUT</code>可以做返回值，<code>INOUT</code>都可以做</p><ul><li><p>空参列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> myp1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'asdq'</span><span class="token punctuation">,</span><span class="token string">'adqqe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带IN模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp2<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> boys bo<span class="token keyword">right</span> <span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boyfriend<span class="token keyword">end</span> $<span class="token keyword">call</span> myp2<span class="token punctuation">(</span><span class="token string">'adfs'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带OUT模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp3<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> boy <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span>name <span class="token keyword">into</span> boy<span class="token keyword">from</span> boys bo<span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boy<span class="token keyword">where</span> b<span class="token punctuation">.</span>name<span class="token operator">=</span>beautyName<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">call</span> myp3<span class="token punctuation">(</span><span class="token string">'asda'</span><span class="token punctuation">,</span><span class="token variable">@output</span><span class="token punctuation">)</span>$<span class="token keyword">select</span> <span class="token variable">@output$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#带多个IN和OUT参数</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp4<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> boyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> userCP <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span>name<span class="token punctuation">,</span>bo<span class="token punctuation">.</span>userCP <span class="token keyword">into</span> boyName<span class="token punctuation">,</span>userCP<span class="token keyword">from</span> boys bo<span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boyfriendid<span class="token keyword">where</span> b<span class="token punctuation">.</span>name<span class="token operator">=</span>beautyName<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">call</span> myp4<span class="token punctuation">(</span><span class="token string">'adef'</span><span class="token punctuation">,</span><span class="token variable">@name</span><span class="token punctuation">,</span><span class="token variable">@cpnum</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带INOUT模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp5<span class="token punctuation">(</span><span class="token keyword">INOUT</span> a <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">INOUT</span> b <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">set</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">set</span> b<span class="token operator">=</span>b<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="存储过程删除"><a href="#存储过程删除" class="headerlink" title="存储过程删除"></a>存储过程删除</h4><p><code>drop&nbsp;procedure&nbsp;procedure_name</code></p><h4 id="存储过程的查看"><a href="#存储过程的查看" class="headerlink" title="存储过程的查看"></a>存储过程的查看</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#利用SHOW [procedure | function ] STATUS [like 'name']</span><span class="token comment">#此时查看存储过程或函数的状态，包括创建修改时间，描述等等。</span><span class="token comment">#利用show create [procedure | function ] name</span><span class="token comment">#查看存储过程或函数的定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-函数"><a href="#4-2-函数" class="headerlink" title="4.2 函数"></a>4.2 函数</h3><h4 id="4-2-1-存储过程与函数对比"><a href="#4-2-1-存储过程与函数对比" class="headerlink" title="4.2.1 存储过程与函数对比"></a>4.2.1 存储过程与函数对比</h4><ul><li>存储过程有0个返回或多个返回，但函数有且仅有一个返回</li><li>存储过程适合做批量操作数据，函数适合做处理数据得到返回</li></ul><h4 id="4-2-2-函数创建"><a href="#4-2-2-函数创建" class="headerlink" title="4.2.2 函数创建"></a>4.2.2 函数创建</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token keyword">returns</span> 返回类型<span class="token keyword">begin</span>函数体<span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-案例演示"><a href="#4-2-3-案例演示" class="headerlink" title="4.2.3 案例演示"></a>4.2.3 案例演示</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#返回公司员工个数</span><span class="token keyword">create</span> <span class="token keyword">function</span> myf1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token keyword">begin</span><span class="token keyword">declare</span> c <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> c<span class="token keyword">from</span> employees<span class="token punctuation">;</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">select</span> myf1<span class="token punctuation">(</span><span class="token punctuation">)</span>$  <span class="token comment">#调用函数</span><span class="token comment">#根据员工名返回工资</span><span class="token keyword">create</span> <span class="token keyword">function</span> myf2<span class="token punctuation">(</span>empName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token keyword">begin</span><span class="token keyword">set</span> <span class="token variable">@sal</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">select</span> salary <span class="token keyword">into</span> <span class="token variable">@sal</span><span class="token keyword">from</span> employees<span class="token keyword">where</span> last_name<span class="token operator">=</span>empName<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">@sal</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">select</span> myf2<span class="token punctuation">(</span><span class="token string">'king'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-函数查看与删除"><a href="#4-2-4-函数查看与删除" class="headerlink" title="4.2.4 函数查看与删除"></a>4.2.4 函数查看与删除</h4><p>查看见上文 删除<code>DROP&nbsp;FUNCTION&nbsp;myf3;</code></p><h2 id="第五部分：变量"><a href="#第五部分：变量" class="headerlink" title="第五部分：变量"></a>第五部分：变量</h2><h3 id="5-1-变量概述"><a href="#5-1-变量概述" class="headerlink" title="5.1  变量概述"></a>5.1  变量概述</h3><ul><li>系统变量：系统提供，不是用户定义；<ul><li>查看系统变量：<code>show [global|session] variables like '% %'</code></li><li>查看系统变量的值：<code>select&nbsp;@@[global|session].变量名</code></li><li>设置变量值：<code>set&nbsp;@@[global|session].变量名=值</code></li></ul></li><li>会话变量：仅仅针对于当前会话有效，服务器启动后会重置<ul><li>语法同上，加上session</li></ul></li><li>对于系统定义的变量查看有两种方式show和select @@</li></ul><h3 id="5-2-自定义变量"><a href="#5-2-自定义变量" class="headerlink" title="5.2 自定义变量"></a>5.2 自定义变量</h3><h4 id="5-2-1-用户变量"><a href="#5-2-1-用户变量" class="headerlink" title="5.2.1 用户变量"></a>5.2.1 用户变量</h4><p>使用步骤：声明-&gt;赋值-&gt;使用</p><p>①声明并初始化：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> @用户变量<span class="token operator">=</span>值；<span class="token comment">#方式一</span><span class="token keyword">set</span> @用户变量:<span class="token operator">=</span>值；<span class="token comment">#方式二</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>②赋值</p><ul><li>方式一：语句同上</li><li>方式二：<code>select&nbsp;字段&nbsp;into&nbsp;变量名&nbsp;from&nbsp;表</code>，</li></ul><h4 id="5-2-2-局部变量"><a href="#5-2-2-局部变量" class="headerlink" title="5.2.2 局部变量"></a>5.2.2 局部变量</h4><p>作用域仅仅在begin end里有效</p><ul><li>声明 ：<code>declare&nbsp;变量名&nbsp;类型&nbsp;default&nbsp;值</code></li><li>赋值 ：<code>set&nbsp;局部变量=值</code>，<code>set&nbsp;局部变量:=值</code>，<code>select&nbsp;字段&nbsp;into&nbsp;局部变量&nbsp;from&nbsp;表</code></li><li>使用 ：<code>select&nbsp;局部变量</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
