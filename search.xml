<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode题解3-14前缀和专题</title>
      <link href="/2022/03/14/leetcode-ti-jie-3-14-qian-zhui-he-zhuan-ti/"/>
      <url>/2022/03/14/leetcode-ti-jie-3-14-qian-zhui-he-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<p><a href="https://lucifer.ren/leetcode/thinkings/prefix.html">https://lucifer.ren/leetcode/thinkings/prefix.html</a></p><p><a href="https://blog.csdn.net/weixin_43206795/article/details/105718567">https://blog.csdn.net/weixin_43206795/article/details/105718567</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-14并查集专题</title>
      <link href="/2022/03/14/leetcode-ti-jie-3-14-bing-cha-ji-zhuan-ti/"/>
      <url>/2022/03/14/leetcode-ti-jie-3-14-bing-cha-ji-zhuan-ti/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-5-LCA问题专题</title>
      <link href="/2022/03/14/leetcode-ti-jie-3-5-lca-wen-ti-zhuan-ti/"/>
      <url>/2022/03/14/leetcode-ti-jie-3-5-lca-wen-ti-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="朴素解法"><a href="#朴素解法" class="headerlink" title="朴素解法"></a>朴素解法</h2><h2 id="倍增算法"><a href="#倍增算法" class="headerlink" title="倍增算法"></a>倍增算法</h2><h2 id="Tarjan-算法"><a href="#Tarjan-算法" class="headerlink" title="Tarjan 算法"></a>Tarjan 算法</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-5根据数组构建二叉树专题</title>
      <link href="/2022/03/10/leetcode-ti-jie-3-5-gen-ju-shu-zu-gou-jian-er-cha-shu-zhuan-ti/"/>
      <url>/2022/03/10/leetcode-ti-jie-3-5-gen-ju-shu-zu-gou-jian-er-cha-shu-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="构建完全二叉树"><a href="#构建完全二叉树" class="headerlink" title="构建完全二叉树"></a>构建完全二叉树</h2><h2 id="构建普通二叉树"><a href="#构建普通二叉树" class="headerlink" title="构建普通二叉树"></a>构建普通二叉树</h2><h2 id="构建二叉搜索树"><a href="#构建二叉搜索树" class="headerlink" title="构建二叉搜索树"></a>构建二叉搜索树</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-5素数筛法专题</title>
      <link href="/2022/03/10/leetcode-ti-jie-3-5-su-shu-shai-fa-zhuan-ti/"/>
      <url>/2022/03/10/leetcode-ti-jie-3-5-su-shu-shai-fa-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<p><a href="https://skykeyjoker.com/2020/07/21/euler-prime/">欧拉筛法</a></p><p><a href="https://zhuanlan.zhihu.com/p/100051075">素数筛</a></p><p>素数即不能被除1和自身以外的别的数整数的数，比如2,3,5.且根据欧几里得的证明，素数是无限的，普通的筛选素数的方法对较小的数据能在较短时间内完成筛选，但对于很大的数据如1e9，会花费很长时间。</p><h2 id="普通求素数"><a href="#普通求素数" class="headerlink" title="普通求素数"></a>普通求素数</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pri<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    pri<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            pri<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但上面的代码运行效率不太优秀，下面将介绍埃式筛法和欧拉筛法。</p><h2 id="埃式筛法"><a href="#埃式筛法" class="headerlink" title="埃式筛法"></a>埃式筛法</h2><p>其基本思想是当遍历到一个素数时，把所有该素数的倍数(是合数)都筛选出来。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eraPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> prime<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            prime<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们有没有被选过的素数时，加入素数数组，且将n内的倍数都筛选出来，埃式筛法在效率上也比较优秀，时间复杂度为<code>O(nlglgn)</code>，具体证明可参考<a href="https://blog.csdn.net/OIljt12138/article/details/53861367">普通筛法时间界的证明</a>，尽管埃式筛法已经比较优秀了，但在处理1e8以上的数据时，还是力不从心，接下来介绍线性时间筛法，欧拉筛。</p><h2 id="欧拉筛法"><a href="#欧拉筛法" class="headerlink" title="欧拉筛法"></a>欧拉筛法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eulerPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> prime<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            prime<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">&gt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//判断是否越界</span>            <span class="token punctuation">}</span>            vis<span class="token punctuation">[</span>i<span class="token operator">*</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//筛数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//时间复杂度为O(n)的关键</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://s2.loli.net/2022/03/10/p9nsygFor1dfa4t.png" alt="image.png" style="zoom:50%;"><p>在埃式筛法时，同一个数字也许会被筛选多次，比如6会被2和3筛选，而欧拉筛法通过<code>if(i%prime[j]==0)&nbsp;break;</code>这一个操作避免了重复筛选的发生，例如2先筛选了4，然后进入下一循环，3筛选6和9，当执行到4时，i==4运行到<code>if(i%prime[j]==0) break;</code>这一步时就直接break了，也就是说当合数进入循环时已经被之前的素数筛过了，所有合数进入循环只进行了一次，从而减少了时间复杂度。</p><p>对于上述代码中越界条件的判断也可以直接放到for循环中.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eulerPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pri<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> vis<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> pri<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>cnt<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>i<span class="token operator">*</span>pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL求并,差,交集</title>
      <link href="/2022/03/08/sql-qiu-bing-chai-jiao-ji/"/>
      <url>/2022/03/08/sql-qiu-bing-chai-jiao-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/kissdodog/p/3152743.html"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-5红黑树专题</title>
      <link href="/2022/03/06/leetcode-ti-jie-3-5-hong-hei-shu-zhuan-ti/"/>
      <url>/2022/03/06/leetcode-ti-jie-3-5-hong-hei-shu-zhuan-ti/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-5平衡二叉树专题</title>
      <link href="/2022/03/06/leetcode-ti-jie-3-5-ping-heng-er-cha-shu-zhuan-ti/"/>
      <url>/2022/03/06/leetcode-ti-jie-3-5-ping-heng-er-cha-shu-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<p>现实中存在很多种类的平衡二叉查找树，常见的有AVL树，红黑树等。</p><p>先来说红黑树，再将AVL树，最后将会把这两种树作比较，看到底什么情形下该用AVL，什么情形下该用红黑树。</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>红黑树是这样一颗二叉搜索树，树中每一个结点的颜色不是黑色就是红色。可以把红黑树视为一颗扩充二叉树，用外部节点表示空指针。特性如下：</p><ol><li>根节点和所有外部结点的颜色是黑色。</li><li>从根节点到外部结点的途中没有连续两个节点的颜色是红色</li><li>所有从根节点到外部结点的路径上都有相同数目的黑色结点</li><li>如果一个结点是红色，则它的子节点必须是黑色</li></ol><p>从红黑树任意结点出发，到达一个外部结点的任一路径上的黑结点个数叫做节点x的黑高度，亦称为节点的阶，红黑树的黑高度定义为根节点的黑高度。</p><p>下面展示了两个红黑树：</p><p><img src="https://s2.loli.net/2022/03/11/yNIhtC29DpfivO8.png" alt="image.png"></p><h2 id="红黑树的应用"><a href="#红黑树的应用" class="headerlink" title="红黑树的应用"></a>红黑树的应用</h2><p>红黑树应用比较广泛，主要用来存储有有序数据，时间复杂度是<code>O(logn)</code>效率很高，如java集合中的TreeSet，TreeMap及Linux虚拟内存的管理都是通过红黑树去实现的。</p><p>RBTree在理论上还是一颗BST，但对其插入和删除时会保证树的平衡，即保证树的高度在logN,logN+1,RBTree的删除和插入操作的时间复杂度也是O(logN)。RBTree的查找操作就是BST的查找操作</p><h2 id="红黑树的基本操作"><a href="#红黑树的基本操作" class="headerlink" title="红黑树的基本操作"></a>红黑树的基本操作</h2><p>红黑树的基本操作是添加和删除，在对红黑树进行添加和删除时都会用到旋转方法，因为添加或删除红黑树中的结点后，红黑树就发生变化，可能不满足其性质，旋转包括两种，左旋和右旋。</p><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><img src="https://s2.loli.net/2022/03/11/89tcWiXxBLSoVEa.png" alt="image.png" style="zoom:67%;"><p>对x左旋即将x变成一个左结点。</p><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><img src="https://s2.loli.net/2022/03/11/9GF7g4njfPLElxW.png" alt="image.png" style="zoom:67%;"><h3 id="区分左旋和右旋"><a href="#区分左旋和右旋" class="headerlink" title="区分左旋和右旋"></a>区分左旋和右旋</h3><img src="https://s2.loli.net/2022/03/11/HFlXb4Q3UpTxNga.png" alt="image.png" style="zoom:67%;"><p>我们能清晰的发现，它们是对称的。无论是左旋还是右旋，被旋转的树，在旋转前是二叉查找树，并且旋转之后仍然是一颗二叉查找树。</p><p><strong>左旋示例图</strong>(以x为节点进行左旋)：</p><img src="https://s2.loli.net/2022/03/11/Al7uw16qvQdBNET.png" alt="image.png" style="zoom:67%;"><p>对x进行左旋，意味着，将“x的右孩子”设为“x的父亲节点”；即，将 x变成了一个左节点(x成了为z的左孩子)！。 因此，<strong>左旋中的“左”，意味着“被旋转的节点将变成一个左节点”</strong>。</p><p><strong>右旋示例图</strong>(以x为节点进行右旋)：</p><img src="https://s2.loli.net/2022/03/11/Al7uw16qvQdBNET.png" alt="image.png" style="zoom:67%;"><p>对x进行右旋，意味着，将“x的左孩子”设为“x的父亲节点”；即，将 x变成了一个右节点(x成了为y的右孩子)！ 因此，<strong>右旋中的“右”，意味着“被旋转的节点将变成一个右节点”</strong>。</p><p>数据结构如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token class-name">T</span> value<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> parent<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isRed<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> left<span class="token punctuation">;</span>    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="红黑树的插入"><a href="#红黑树的插入" class="headerlink" title="红黑树的插入"></a>红黑树的插入</h3><p>RBTree的插入与BST的插入方式是一致的，只不过是在插入过后，可能会导致树的不平衡，这时就需要对树进行旋转操作和颜色修复（在这里简称插入修复），使得它符合RBTree的定义。步骤如下：</p><p><strong>第一步：将红黑树当成一颗二叉查找树，将结点插入。</strong></p><p>红黑树本身就是一颗二叉查找树，将结点插入后，该树仍是BST，此外对于旋转操作，若旋转之前是BST，则旋转之后仍是BST。这就意味着任何旋转和着色操作，都不会影响其是BST。接下来就是使其变为红黑树。</p><p><strong>第二步：将插入的结点染成红色</strong></p><p>为什么着色成红色，而不是黑色呢？为什么呢？在回答之前，我们需要重新温习一下红黑树的特性：</p><ul><li>所有从根节点到外部结点的路径上的黑色结点数目相同。</li></ul><p>将插入的节点着色为红色，不会违背”特性(5)”！少违背一条特性，就意味着我们需要处理的情况越少。接下来，就要努力的让这棵树满足其它性质即可</p><p><strong>第三步：通过一系列旋转着色操作使之重新成为红黑树</strong></p><p>那么插入结点会违背哪些特性吗？</p><p>很显然是这一条</p><p>==从根节点到外部结点的路径上没有连续两个节点的颜色是红色==，换一句话说就是如果一个结点是红色那他子节点不能是红色。</p><p>根据被插入结点的父节点情况，可以将“当结点z被找色为红色，插入二叉树”划分为三种情况。</p><p>① 情况说明：被插入的结点是根节点，直接染成黑色</p><p>②情况说明：被插入的结点的父节点是黑色，无需处理，满足红黑树特性</p><p>③情况说明：被插入结点的父节点是红色，会破坏红黑树特性。在这种情况下，被插入结点一定包含非空祖父节点，进一步讲，被插入结点也一定存在叔叔结点，即使叔叔节点为空，我们也视之为存在，空节点本身就是黑色节点理解这点之后，我们依据”叔叔节点的情况”，将这种情况进一步划分为3种情况(Case)。</p><table><thead><tr><th></th><th align="left">现象说明</th><th align="left">处理策略</th></tr></thead><tbody><tr><td>Case1</td><td align="left">当前结点的父节点是红色，叔叔结点也是红色</td><td align="left">（01）将父节点设为黑色 <br>（02）将叔叔结点也设为黑色<br>（03）将祖父节点设为红色，<br>（04）将祖父结点设为当前节点(红色节点)即,之后继续对“当前节点”进行操作。</td></tr><tr><td>Case2</td><td align="left">当前结点的父节点是红色，叔叔结点是黑色，且当前节点是其父节点的右孩子</td><td align="left">（01）将父节点作为新的当前节点<br>（02）以新的当前节点为指点</td></tr><tr><td>Case3</td><td align="left">当前节点的父节点是红色，叔叔结点是黑色，且当前节点是父节点的左孩子</td><td align="left">（01）将父节点设为黑色<br>（02）将祖父节点设为红色<br>（03）以祖父节点为支点右旋</td></tr></tbody></table><p>==上面三种情况(Case)处理问题的核心思路都是：将红色的节点移到根节点；然后，将根节点设为黑色。下面对它们详细进行介绍。==</p><p>在具体说明情况前我们再来温习一下红黑树的特性：</p><ol><li>根节点是黑色</li><li>一个结点是红色，子节点一定是黑色</li><li>从一个结点到外部结点的路径上包含相同数目的黑结点</li></ol><p><strong>Case1:父节点红色，叔叔结点是红色</strong></p><p>处理策略：</p><ul><li>将父节点和叔叔结点设为黑色</li><li>祖父节点设为红色</li><li>以祖父节点为当前结点继续对当前结点进行操作。</li></ul><p>原理：</p><p>当前结点和父节点都为红，违背特性2，所以将父节点设为黑以解决这个问题。</p><p>但是当父节点设为黑后违背了特性3，因为包含父节点的分支黑高度增加了1，处理办法是：将祖父节点由黑设为红，同时将叔叔结点设为黑(为满足特性2).</p><p>按上述处理当前结点，父节点，叔叔结点都不会违背红黑树特性，但祖父节点却不一定，祖父节点是根节点时直接将祖父节点设为黑；若祖父节点不是根节点，则需将祖父节点设为当前结点继续操作。</p><p><img src="https://s2.loli.net/2022/03/12/hBNM9uKsTHqjWbZ.png" alt="image.png"></p><p><strong>Case2:父节点是红色，叔叔是黑色，且当前结点是右孩子</strong></p><p>处理策略：</p><ul><li>以父节点为当前结点</li><li>以新的当前结点为指点左旋</li></ul><p>原理：</p><p>首先，将“父节点”作为“新的当前节点”；接着，以“新的当前节点”为支点进行左旋。 为了便于理解，我们先说明第(02)步，再说明第(01)步；为了便于说明，我们设置“父节点”的代号为F(Father)，“当前节点”的代号为S(Son)。</p><p>我们处理红黑树的核心思想：将红色的节点移到根节点；然后，将根节点设为黑色。既然是“将红色的节点移到根节点”，那就是说要不断的将破坏红黑树特性的红色节点上移(即向根方向移动)。 而S又是一个右孩子，因此，我们可以通过“左旋”来将S上移！</p><p><img src="https://s2.loli.net/2022/03/12/9RlWF4XEoYL7TSB.png" alt="image.png"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.cnblogs.com/skywang12345/p/3245399.html">红黑树(一)之 原理和算法详细介绍</a></li><li><a href="https://tech.meituan.com/2016/12/02/redblack-tree.html">红黑树深入剖析及Java实现</a></li><li><a href="https://javamana.com/2021/03/20210325001100114T.html">为什么HashMap使用红黑树而不是AVL树或者B+树</a></li><li><a href="https://zhuanlan.zhihu.com/p/93369069">关于AVL树和红黑树的一点看法</a></li><li><a href="https://www.zhihu.com/question/19856999">红黑树比 AVL 树具体更高效在哪里？</a></li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-5二叉搜索树专题</title>
      <link href="/2022/03/06/leetcode-ti-jie-3-5-er-cha-sou-suo-shu-zhuan-ti/"/>
      <url>/2022/03/06/leetcode-ti-jie-3-5-er-cha-sou-suo-shu-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="为什么需要二叉搜索树"><a href="#为什么需要二叉搜索树" class="headerlink" title="为什么需要二叉搜索树"></a>为什么需要二叉搜索树</h2><p>二叉树最大的特点是支持动态数据集合的快速插入，删除，查找等。我们知道散列表也是支持这些操作的，且散列表的这些操作比二叉查找树更高效，为什么还是需要二叉查找树呢，换一句话说，使用二叉树的地方是不是都可以换成散列表，有没有哪些是散列表做不了的，必须二叉树来做。</p><p>我们知道当有一个这样的需求时：需要找到一组数据中的某个特定的元素时，用散列表时我们得先知道该元素的关键码，当然把每个元素利用关键码映射起来再进行查找，这显然很快，但散列表只是针对于局部特征的，换一句话说，散列表查找我们是知道我们要查找的元素是什么，我们才能根据关键码去查找，但更多的时候，我们要查找的元素最开始并不知道他是什么，只知道他针对于全局数据的某个特征，例如全部数据中最大或最小，这对于散列表来说无从入手。有人会说用数组啊，数组二分查找不也挺快的吗，但数组查找快，插入删除代价太大了，不适合动态数据。普通的二叉树虽然支持动态数据插入删除，但查找又慢了，于是二叉查找树应运而生。</p><h2 id="二叉搜索树概述"><a href="#二叉搜索树概述" class="headerlink" title="二叉搜索树概述"></a>二叉搜索树概述</h2><p>二叉搜索树简称BST，他具有以下特征。</p><ul><li>如果任意结点的左子树不为空，则左子树所有节点的值小于他的根节点的值。</li><li>如果任意节点的右子树不为空，则右子树上所有节点的值均大于或等于它的根节点的值。</li><li>任意节点的左、右子树也分别为二叉搜索树。</li><li><strong>没有键相等的结点</strong></li></ul><p>二叉查找树相比于其他数据结构，优势在于查找，插入，删除，时间复杂度低，为<code>O(logn)</code>,比数组，链表等线性表快很多。</p><p><strong>中序遍历二叉查找树可得到一个关键字的有序序列</strong>，<strong>一个无序序列可以通过构造一棵二叉查找树变成一个有序序列，构造树的过程即将无序序列中元素逐个插入到二叉查找树的过程</strong>。每次插入的新的结点都是二叉查找树上新的叶子结点，在<strong>进行插入操作时，不必移动其它结点，只需改动某个结点的指针，由空变为非空即可</strong>。**搜索、插入、删除的复杂度等于树高，期望 O(log n)，最坏O(n)**（数列有序，树退化成线性表）。</p><p>一个二叉查找树搜索过程如下。</p><img src="https://s2.loli.net/2022/03/11/5vDVH6jkc8XRmKa.png" alt="image.png" style="zoom:50%;"><h2 id="实现二叉搜索树"><a href="#实现二叉搜索树" class="headerlink" title="实现二叉搜索树"></a>实现二叉搜索树</h2><p>实现一颗二叉搜索树我们得先确定他能有一些什么功能</p><ul><li>功能包括：添加结点，删除节点，查询结点(最大值，最小值，某个指定值)</li><li>二叉搜索树的遍历：前中后序遍历</li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>首先，我们看如何在二叉查找树中查找一个节点。我们先取根节点，如果它等于我们要查找的数据，那就返回。如果要查找的数据比根节点的值小，那就在左子树中递归查找；如果要查找的数据比根节点的值大，那就在右子树中递归查找。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&gt;</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&lt;</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非递归版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">search2</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> node<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&gt;</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                node<span class="token operator">=</span>node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&lt;</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                node<span class="token operator">=</span>node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> node<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>如果要插入的数据比节点的数据大，并且节点的右子树为空，就将新数据直接插到右子节点的位置；如果不为空，就再递归遍历右子树，查找插入位置。同理，如果要插入的数据比节点数值小，并且节点的左子树为空，就将新数据插入到左子节点的位置；如果不为空，就再递归遍历左子树，查找插入位置。</p><p>插入操作返回根节点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&gt;</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>            root<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            root<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非递归版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">insert2</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> node<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token operator">&gt;</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">TreeNode</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    node<span class="token punctuation">.</span>right<span class="token operator">=</span>node1<span class="token punctuation">;</span>                    <span class="token keyword">return</span> root<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                node<span class="token operator">=</span>node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">TreeNode</span> node1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                    node<span class="token punctuation">.</span>left<span class="token operator">=</span>node1<span class="token punctuation">;</span>                    <span class="token keyword">return</span> root<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                node<span class="token operator">=</span>node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除就得分情况了。</p><ol><li>删除的结点没有子节点，只需要直接将父节点中，指向要删除节点的指针置为 null</li><li>如果要删除的节点只有一个子节点（只有左子节点或者右子节点），我们只需要更新父节点中，指向要删除节点的指针，让它指向要删除节点的子节点就可以了</li><li>如果要删除的节点有两个子节点，这就比较复杂了。我们需要找到这个节点的右子树中的最小节点，把它替换到要删除的节点上。然后再删除掉这个最小节点，因为最小节点肯定没有左子节点（如果有左子结点，那就不是最小节点了），所以，我们可以应用上面两条规则来删除这个最小节点。</li></ol><p>上述情况转为条件即为：</p><ul><li>如果左子树为空，则用右子树代替。</li><li>如果右子树为空，则用左子树代替。</li><li>剩下的就是都不为空，用右子树最小节点代替</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&gt;</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> root<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&lt;</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> root<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token class-name">TreeNode</span> tmp<span class="token operator">=</span>root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                tmp<span class="token operator">=</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//删除</span>            root<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>tmp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//替换</span>            tmp<span class="token punctuation">.</span>left<span class="token operator">=</span>root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>right<span class="token operator">=</span>root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            root<span class="token operator">=</span>tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非递归版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">delete1</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">TreeNode</span> node<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> parent<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//指向要删除结点的父节点</span>        <span class="token comment">//非递归版本</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>node<span class="token punctuation">.</span>val<span class="token operator">!=</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>            parent<span class="token operator">=</span>node<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token operator">&gt;</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span> node<span class="token operator">=</span>node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">else</span> node<span class="token operator">=</span>node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token comment">//没找到</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>node<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">TreeNode</span> tmp<span class="token operator">=</span>node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token class-name">TreeNode</span> tmpp<span class="token operator">=</span>node<span class="token punctuation">;</span>  <span class="token comment">//一定要狐疑tmpp=node！！！</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                tmpp<span class="token operator">=</span>tmp<span class="token punctuation">;</span>                tmp<span class="token operator">=</span>tmp<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            node<span class="token punctuation">.</span>val<span class="token operator">=</span>tmp<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            node<span class="token operator">=</span>tmp<span class="token punctuation">;</span>            parent<span class="token operator">=</span>tmpp<span class="token punctuation">;</span><span class="token comment">//转为删除tmp</span>        <span class="token punctuation">}</span>        <span class="token class-name">TreeNode</span> child<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            child<span class="token operator">=</span>node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            child<span class="token operator">=</span>node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> child<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//删除的是根节点</span>            root<span class="token operator">=</span>child<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left<span class="token operator">==</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>            parent<span class="token punctuation">.</span>left<span class="token operator">=</span>child<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            parent<span class="token punctuation">.</span>right<span class="token operator">=</span>child<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder1</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">inOrder1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inOrder1</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非递归版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inOrder2</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> cur<span class="token operator">=</span>root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>不管操作是插入、删除还是查找，时间复杂度其实都跟树的高度成正比，也就是 O(height)</p><p>最坏情况下查找，插入，删除的时间复杂度为O(n),理想情况为O(logn);</p><p>显然，极度不平衡的二叉查找树是不满足我们的性能要求的，我们需要构建不论任何时候，怎么删除，插入，左右子树都是比较平衡的二叉查找树，这就是平衡二叉查找树，下一个专题再将。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解周赛3-5第73场双周赛</title>
      <link href="/2022/03/06/leetcode-zhou-sai-3-5-di-73-chang-shuang-zhou-sai/"/>
      <url>/2022/03/06/leetcode-zhou-sai-3-5-di-73-chang-shuang-zhou-sai/</url>
      
        <content type="html"><![CDATA[<h2 id="6024-数组中紧跟-key-之后出现最频繁的数字"><a href="#6024-数组中紧跟-key-之后出现最频繁的数字" class="headerlink" title="6024. 数组中紧跟 key 之后出现最频繁的数字"></a><a href="https://leetcode-cn.com/problems/most-frequent-number-following-key-in-an-array/">6024. 数组中紧跟 key 之后出现最频繁的数字</a></h2><p>利用maxNum记录上一个最大次数的值，这样只用遍历一遍即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mostFrequent</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//加了这样一个判断条件后，我记录的始终是上一个次数最大的值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>maxNum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     maxNum<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5217-将杂乱无章的数字排序"><a href="#5217-将杂乱无章的数字排序" class="headerlink" title="5217. 将杂乱无章的数字排序"></a><a href="https://leetcode-cn.com/problems/sort-the-jumbled-numbers/">5217. 将杂乱无章的数字排序</a></h2><p>自定义排序即可。</p><p>不改变原数组，排序的时候自定义排序规则，即利用映射后的数组进行排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortJumbled</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mapping<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>a<span class="token operator">-&gt;</span><span class="token function">map</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>mapping<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mapping<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> mapping<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mapnum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp<span class="token operator">=</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            tmp<span class="token operator">=</span>mapping<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span>            mapnum<span class="token operator">+=</span>tmp<span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>len<span class="token punctuation">;</span>            num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> mapnum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5237-得到回文串的最少操作次数"><a href="#5237-得到回文串的最少操作次数" class="headerlink" title="5237. 得到回文串的最少操作次数"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-moves-to-make-palindrome/">5237. 得到回文串的最少操作次数</a></h2><h2 id="5300-有向无环图中一个节点的所有祖先"><a href="#5300-有向无环图中一个节点的所有祖先" class="headerlink" title="5300. 有向无环图中一个节点的所有祖先"></a><a href="https://leetcode-cn.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/">5300. 有向无环图中一个节点的所有祖先</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-5二叉树专题(一)</title>
      <link href="/2022/03/05/leetcode-ti-jie-3-5-er-cha-shu-zhuan-ti-yi/"/>
      <url>/2022/03/05/leetcode-ti-jie-3-5-er-cha-shu-zhuan-ti-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树遍历方式小结"><a href="#二叉树遍历方式小结" class="headerlink" title="二叉树遍历方式小结"></a>二叉树遍历方式小结</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-2堆排序专题</title>
      <link href="/2022/03/04/leetcode-ti-jie-3-2-dui-pai-xu-zhuan-ti/"/>
      <url>/2022/03/04/leetcode-ti-jie-3-2-dui-pai-xu-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>堆排序在面试中尤为常见，虽然许多语言中有现成的优先级队列或堆的容器使用，但面试官更倾向于自己实现堆，并进行堆排序，故下文开始详细阐述堆排序这个知识点。</p><p><a href="https://chihminh.github.io/2016/08/08/heap-sort/">堆排序的时间复杂度</a></p><p><a href="https://segmentfault.com/a/1190000021715505"></a><a href="https://segmentfault.com/a/1190000021715505">图解堆结构、堆排序及堆的应用</a></p><p><a href="https://www.cxyxiaowu.com/1943.html">看动画轻松理解「 堆 」</a></p><h2 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆"></a>什么是堆</h2><p>在介绍什么是堆之前先来介绍一下优先级队列。我们在某些情况下希望数据集合是有序的，但并不要求全部有序或者在操作开始前就完全有序，在许多应用中需先收集一部分数据，从中挑选具有最大关键码(最小)的记录开始处理，对于这类应用，我们期望的数据结构能支持插入操作，并能方便取出最大(最小)关键码记录。这样的数据结构称为优先级队列。要构造高效率的优先级队列，堆是最高效的一种方式。</p><blockquote><p>堆通常是可以被看做是完全二叉树的数据结构。</p></blockquote><p>其满足下列性质：</p><ul><li>堆中某个结点的值总是不大于或不小于其父节点的值</li><li>堆是完全二叉树</li></ul><p>根节点大的堆叫最大堆，根节点小的堆叫最小堆。如下给出最大堆示例</p><img src="https://segmentfault.com/img/remote/1460000021715509/view" style="zoom:50%;"><blockquote><p>堆的根节点存放的是最大或最小元素，但其他节点的排列顺序是未知的。在一个最大堆中，最大的元素总是在index0的位置，但最小的元素不一定是最后一个元素，唯一能保证的是最小元素是一个叶节点。这也正是优先级队列的初衷，并不需要全部有序，只要你给我最大或最小元素即可。</p></blockquote><h2 id="堆属性"><a href="#堆属性" class="headerlink" title="堆属性"></a>堆属性</h2><p>介绍了什么是堆，我们就要思考该如何建立一个堆呢？建立一个堆首先得搞清楚其各个节点的位置关系。</p><ul><li>如果i=0，则表示是根节点，否则，父节点：parent(i)=(i-1)/2</li><li>如果2i+1&gt;n-1则结点i无左子节点，否则左子节点位置为2i+1;</li><li>如果2i+2&gt;n-1则无右子女，否则结点i的右子女为2i+2；</li></ul><h2 id="堆的建立"><a href="#堆的建立" class="headerlink" title="堆的建立"></a>堆的建立</h2><p>基于堆是完全二叉树，故可用数组实现堆。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinHeap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Array</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MinHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">{</span>        data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">parent</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">leftChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rightChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆插入"><a href="#堆插入" class="headerlink" title="堆插入"></a>堆插入</h2><p>为维持完全二叉树属性，新插入的元素一定是在最后一个结点，同时为了满足堆的值的约束属性，新插入的元素要与父节点比较，比父节点小就把父节点拉下来代替当前结点位置，自己则不断向上寻找，直到比父节点大为止。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//添加一个辅助函数用来交换两个位置的值。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>i<span class="token operator">&gt;=</span>size<span class="token operator">||</span>j<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">&gt;=</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"index is illegal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">E</span> temp<span class="token operator">=</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//堆添加元素</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>currentSize<span class="token operator">==</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">OutOfSizeException</span><span class="token punctuation">(</span><span class="token string">"heap is full"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">[</span>currentSize<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    <span class="token function">siftUp</span><span class="token punctuation">(</span>currentSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时currentSize并没有加一,传入的是索引</span>    currentSize<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//比较插入值和父节点的大小关系。</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token function">parent</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            data<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token function">parent</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">=</span><span class="token function">parent</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//i来到新位置后继续向上比较</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆删除"><a href="#堆删除" class="headerlink" title="堆删除"></a>堆删除</h2><p>堆删除即将最后一个元素填充到堆顶，为了维持堆的特性，不断下沉这个元素。</p><p>假设要从节点 1 ，也可以称为取出节点 1 ，为了维持完全二叉树的特性 ，我们将最后一个元素 6 去替代这个 1 ；然后比较 1 和其子树的大小关系，如果比左右子树大（如果存在的话），就要从左右子树中找一个较小的值替换它，而它能自己就要跑到对应子树的位置，再次循环这种操作，直到没有子树比它小。</p><ul><li>找到要删除的结点的位置</li><li>数组中最后一个元素替代这个元素位置。</li><li>下滑</li><li>删除最后一个元素。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//可以先判断堆是否为空，这里就不实现了</span>    <span class="token class-name">E</span> ret<span class="token operator">=</span><span class="token function">findMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>data<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    data<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//也可以把currentSize-1传进去，传的是索引，表示在[0,currentSize-1]内调整堆</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">leftChild</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token operator">&lt;</span>data<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token function">leftChild</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>data<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">&lt;=</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        start<span class="token operator">=</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆的建立-1"><a href="#堆的建立-1" class="headerlink" title="堆的建立"></a>堆的建立</h2><p>让一个已知数组形成堆的方式是通过一个记录数组复制原数组，并对这个记录数组不断siftDown调整，形成堆。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">MinHeap</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    data<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> currentPos<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>currentPos<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//end为数组长度-1</span>        currentPos<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//局部自上而下下滑调整</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>n个结点的完全二叉树深度为$k=log_2^{n+1}$取上界，堆的调整算法siftDown，while循环次数最大为树的深度减1，所以堆的删除算法时间复杂度为$O(log_2^n)$,</p><p>插入新结点siftUp时，while的循环次数不超过数的深度减1，故也为$O(log_2^n)$，</p><p>堆的建立操作siftDown执行了n/2次，故时间复杂度为$O(nlog_2^n)$.</p><h2 id="堆的应用"><a href="#堆的应用" class="headerlink" title="堆的应用"></a>堆的应用</h2><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p>见jdk中<code>PriorityQueue</code></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>过程如下：</p><ol><li>先建立初始堆</li><li>重复删除堆顶元素</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> heapsort <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">heapsort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token operator">=</span>arr<span class="token punctuation">;</span>        size<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        heapsort heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">heapsort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sort <span class="token operator">=</span> heap<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//建堆</span>        <span class="token keyword">int</span> last<span class="token operator">=</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>last<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>            last<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//此为最小堆</span>        <span class="token comment">//移除</span>        <span class="token comment">//堆排序要返回新的数组，不能返回原来的。</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> res<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">leftChild</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token operator">&lt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token function">leftChild</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>size<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>                start<span class="token operator">=</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">leftChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="原地堆排序"><a href="#原地堆排序" class="headerlink" title="原地堆排序"></a>原地堆排序</h4><p>原地堆排序的关键在于siftDown时不是单单把末尾元素复制到arr[0]，还需把arr[0]复制到末尾，即交换首尾元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> heapsort <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">heapsort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token operator">=</span>arr<span class="token punctuation">;</span>        size<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        heapsort heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">heapsort</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heap<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>heap<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//建堆</span>        <span class="token keyword">int</span> last<span class="token operator">=</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>last<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>            last<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//此为最小堆</span>        <span class="token comment">//移除</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> res<span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//交换末尾和arr[0]</span>        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">leftChild</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token operator">&lt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token function">leftChild</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>size<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token operator">&lt;=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>                start<span class="token operator">=</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">leftChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Topk问题"><a href="#Topk问题" class="headerlink" title="Topk问题"></a>Topk问题</h3><p>Top K 问题就是求解<strong>前 K 个</strong>最大的元素或者最小的元素。元素个数不确定，数据量可能很大，甚至源源不断到来，但需要知道目前为止前 K 个最大或最小的元素。当然问题还可能变为求解<strong>第 K 个</strong>最大的元素或最小的元素。</p><p>通常我们有如下解决方案：</p><ol><li>使用JDK中自带的排序，如<code>Arrays.sort()</code>，由于底层使用的快速排序，所以时间复杂度为<code>O(nlogn)</code>。</li><li>利用堆。</li></ol><p>方法一是在元素个数已经确定的情况下可以使用，而堆可支持源源不断的数据从而求得目前为止的top k。</p><p>具体利用堆求topk的思路如下：</p><p>我们维护一个长度为 K 的数组，最前面 K 个元素就是目前最大的 K 个元素，以后每来一个新元素，都先找数组中的最小值，将新元素与最小值相比，如果小于最小值，则什么都不变，如果大于最小值，则将最小值替换为新元素。这样一来，数组中维护的永远是最大的 K 个元素，不管数据源有多少，需要的内存开销都是固定的，就是长度为 K 的数组。不过，每来一个元素，都需要找到最小值，进行 K 次比较，是否有办法能减少比较次数呢？</p><p>当然，这时候堆就要登场了，我们使用最小堆维护这 K 个元素，每次来新的元素，只需要和根节点比较，小于等于根节点，不需要变化，否则用新元素替换根节点，然后<code>siftDown</code>调整堆即可。此时的时间复杂度为<code>O(nlogK)</code>，相比上述两种方法，效率大大提升，且空间复杂度也大大降低。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">topK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a1<span class="token operator">-</span>a2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求解中位数"><a href="#求解中位数" class="headerlink" title="求解中位数"></a>求解中位数</h3><p>堆也可以用于求解中位数，数据量可能很大且源源不断到来。</p><blockquote><p>注意：如果元素个数是偶数，那么我们假定中位数取任意一个都可以。</p></blockquote><p>求中位数有两种思路</p><ul><li>只使用一个堆，类似于求topk的思路</li></ul><p>一个数组中的中位数，当数组长度为奇数时，即为第<code>arr.length/2</code>大的数，当为偶数时，中位数即<code>(arr[arr.length/2-1]+arr[arr.length/2])/2</code>,即向数组中再取一个数即可。故我们可以理解为维护一个size/2+1的堆。根据数组长度判断该返回什么中位数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>     <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> a1<span class="token operator">-</span>a2<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token operator">+</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums1<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>len <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二种方式是维护两个堆，一个最大堆，一个最小堆。<ul><li>添加的第一个元素作为中位数 m，最大堆维护 &lt;= m 的元素，最小堆维护 &gt;= m 的元素，两个堆都不包含 m。</li><li>当添加第二个元素 e 时，将 e 与 m 比较，若 e &lt;= m，则将其加入到最大堆中，否则加入到最小堆中。</li><li>如果出现最小堆和最大堆的元素个数相差 &gt;= 2，则将 m 加入元素个数少的堆中，然后让元素个数多的堆将根节点移除并赋值给 m。</li><li>以此类推不断更新。</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>   <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> maxQ<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a2<span class="token operator">-</span>a1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> minQ<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> m<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums1<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>maxQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            minQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>maxQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>minQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            maxQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token operator">+</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>len<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>maxQ<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>minQ<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">:</span>m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            m<span class="token operator">=</span>num<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&gt;</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>            maxQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            minQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maxQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>minQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            minQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token operator">=</span>maxQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>minQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>maxQ<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            maxQ<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token operator">=</span>minQ<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-2</title>
      <link href="/2022/03/03/leetcode-ti-jie-3-2/"/>
      <url>/2022/03/03/leetcode-ti-jie-3-2/</url>
      
        <content type="html"><![CDATA[<h2 id="232-用栈实现队列"><a href="#232-用栈实现队列" class="headerlink" title="232. 用栈实现队列"></a><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/">232. 用栈实现队列</a></h2><p>一个进栈，一个出栈，两个容器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">{</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> inStack<span class="token punctuation">;</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> outStack<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        inStack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outStack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        inStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>outStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>inStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp<span class="token operator">=</span>inStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                outStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>outStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>inStack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp<span class="token operator">=</span>inStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                outStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> inStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>outStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">225. 用队列实现栈</a></h2><p>两个队列轮换即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">{</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span>  outQueue<span class="token punctuation">;</span>    <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> inQueue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        inQueue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outQueue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        inQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>outQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            inQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>outQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> tmp<span class="token operator">=</span>inQueue<span class="token punctuation">;</span>        inQueue<span class="token operator">=</span>outQueue<span class="token punctuation">;</span>        outQueue<span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> outQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> outQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> outQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h2><p>哈希表存储括号映射关系，借助栈判断即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span>map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">{</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'}'</span><span class="token punctuation">,</span><span class="token string">'{'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">||</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-2-单调队列专题</title>
      <link href="/2022/03/03/leetcode-ti-jie-3-2-dan-diao-dui-lie-zhuan-ti/"/>
      <url>/2022/03/03/leetcode-ti-jie-3-2-dan-diao-dui-lie-zhuan-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是单调队列"><a href="#什么是单调队列" class="headerlink" title="什么是单调队列"></a>什么是单调队列</h2><p>单调队列是一种双端队列，但又有一些其他特性。它是一种专门用于解决子序列，子数组，滑动窗口中最大值，最大和等的数据结构。它的添加元素的均摊时间复杂度能达到<code>O(1)</code>,是性能比较好的数据结构。</p><p>顾名思义，它里面的元素应该是单调的。它维护一个双向队列，新增元素从队尾增加，但新增元素时有限制，为了保证队列中元素时单调的，假设我们要构造一个单调增队列。有一个目标数组我们去遍历他，当新增元素小于队尾元素时，就要将队尾元素移除，不断移除，知道队尾元素小于新增元素，这样便维持队列的单调性。</p><h2 id="维护一个单调对列"><a href="#维护一个单调对列" class="headerlink" title="维护一个单调对列"></a>维护一个单调对列</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constructMonotonousQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> monotonQueue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>monotonQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>monotonQueue<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            monotonQueue<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        monotonQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> monotonQueue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>monotonQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>monotonQueue<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                monotonQueue<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            monotonQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>monotonQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                monotonQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>monotonQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解3-1</title>
      <link href="/2022/03/03/leetcode-ti-jie-3-1/"/>
      <url>/2022/03/03/leetcode-ti-jie-3-1/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串篇"><a href="#字符串篇" class="headerlink" title="字符串篇"></a>字符串篇</h2><h3 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串"></a><a href="https://leetcode-cn.com/problems/reverse-string/">344. 反转字符串</a></h3><p>较简单，双指针</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>s<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> c<span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token operator">--</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="541-反转字符串-II"><a href="#541-反转字符串-II" class="headerlink" title="541. 反转字符串 II"></a><a href="https://leetcode-cn.com/problems/reverse-string-ii/">541. 反转字符串 II</a></h3><p>分组之后分别反转即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> loop<span class="token operator">=</span>len<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mod<span class="token operator">=</span>len<span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> des<span class="token operator">=</span>loop<span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>des<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> left<span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">int</span> right<span class="token operator">=</span>left<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mod<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>mod<span class="token operator">&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> left<span class="token operator">=</span>des<span class="token punctuation">;</span>            <span class="token keyword">int</span> right<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mod<span class="token operator">&gt;=</span>k<span class="token operator">&amp;&amp;</span>mod<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> left<span class="token operator">=</span>des<span class="token punctuation">;</span>            <span class="token keyword">int</span> right<span class="token operator">=</span>left<span class="token operator">+</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>tmp<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>ch<span class="token punctuation">;</span>            <span class="token operator">++</span>left<span class="token punctuation">;</span>            <span class="token operator">--</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h3><p>==StringBuilder遍历添加==</p><p>题目虽然是替换空格，不如我们换个思路，不在源字符串上下功夫，而是新开空间，遇到空格时再将空格换成指定字符串，如果不是空格，则原封不动移到答案中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==双指针==</p><p>上一个方法时新开空间，注意到替换字符长度是空格的三倍，我们可以在源字符串上增加空间，先统计源字符串有几个空格，再增加相应位置。转成数组后，右指针指向新数组的长度，左指针指向原来的长度，一起向前遍历，若左指针碰到字符，则复制到右指针，若碰到空格，则右指针添加指定字符。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//双指针做法</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//可通过+=这种方式来扩充空间。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token operator">+=</span><span class="token string">"  "</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                strs<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'0'</span><span class="token punctuation">;</span>                strs<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'2'</span><span class="token punctuation">;</span>                strs<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'%'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                strs<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>strs<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">--</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151. 翻转字符串里的单词"></a><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/">151. 翻转字符串里的单词</a></h3><p>这题用传统的双指针做法的话将会很难控制左右指针的移动。因为前后的单词字母个数不同，不如换个思路，以一种更全局的策略去审视这道题，这道题不就是要把字母反转吗，只不过反转后的字母要重新构成单词，于是我们可以先反转整个字符串，然后在根据空格为分隔符，挨个反转每个单词，使之构成一个正确的单词。</p><p>注意几个小细节</p><ul><li>输入的字符串s可以在前面，后面或单词间包含多于的空格，故需先做空格去除处理。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//简单做法可以使用spilt分割后倒序相加</span>        <span class="token comment">//进阶做法是在源字符串上下功夫</span>        s<span class="token operator">=</span><span class="token function">removeSpace</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>end<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>tmp<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">' '</span><span class="token punctuation">)</span> end<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>end<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            start<span class="token operator">=</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            end<span class="token operator">=</span>start<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//1.移除空格</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeSpace</span><span class="token punctuation">(</span><span class="token class-name">String</span> original<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end<span class="token operator">=</span>original<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>end<span class="token operator">&amp;&amp;</span>original<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span> start<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>end<span class="token operator">&gt;=</span>start<span class="token operator">&amp;&amp;</span>original<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span> end<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>start<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>end<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>original<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>                i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//2.反转字符串</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>tmp<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>ch<span class="token punctuation">;</span>            <span class="token operator">++</span>left<span class="token punctuation">;</span>            <span class="token operator">--</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="剑指-Offer-58-II-左旋转字符串"><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串"></a><a href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>                tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="28-实现-strStr"><a href="#28-实现-strStr" class="headerlink" title="28. 实现 strStr()"></a><a href="https://leetcode-cn.com/problems/implement-strstr/">28. 实现 strStr()</a></h3><p>==暴力匹配==</p><p>字符串匹配算法是比较重要的算法，最简单的就是暴力匹配，此题为了减少不必要的匹配，在一旦出现不匹配的字符时便停止循环，向后遍历。匹配下一个字符。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> m <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">!=</span> needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==KMP算法==</p><p>KMP算法是解决字符串匹配的经典算法，其核心就在于理解next数组的含义以及如何求出next数组，关于KMP算法的详细介绍，这里不再赘述，网上很多，这里直接列出模板。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> haystack<span class="token punctuation">,</span> <span class="token class-name">String</span> needle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//KMP算法，前缀表</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">getNext</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!=</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> i<span class="token operator">-</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">,</span><span class="token class-name">String</span> needle<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//处理前缀不相同的情况</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!=</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>needle<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459. 重复的子字符串"></a><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">459. 重复的子字符串</a></h3><p>这题是简单题我是没想到的。</p><p>==枚举==</p><p>如果一个长度为n的字符串s可以由它的一个长度为n`的子串重复多次构成，那</p><ul><li>n是n`的倍数</li><li>s`是s的前缀</li><li>对于任意$i\in [n<code>,n]，有s[i-n</code>]=s[i]$，</li></ul><p>由于子串至少会重复一次，故只需枚举[1,n/2]范围内即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//子串至少会重复一次，只需枚举【1，n/2】</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==KMP+公式法==</p><p>KMP关键就在于求next数组，前面已经讲过，这里不再赘述，关于重复子字符串，有一个公式</p><p><code>len % (len - (next[len - 1] + 1)) == 0 </code></p><p>数组长度减去最长相同前后缀的长度相当于是第一个周期的长度，也就是一个周期的长度，如果这个周期可以被整除，就说明整个数组就是这个周期的循环。</p><p>具体证明可搜索。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//公式：</span>        <span class="token comment">//len % (len - (next[len - 1] + 1)) == 0 </span>        <span class="token comment">//数组长度减去最长相同前后缀的长度相当于是第一个周期的长度，也就是一个周期的长度，如果这个周期可以被整除，就说明整个数组就是这个周期的循环。</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">getNext</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>len<span class="token operator">%</span><span class="token punctuation">(</span>len<span class="token operator">-</span>next<span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> next<span class="token punctuation">,</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>next<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解2-21二分搜索,二分答案模板解析</title>
      <link href="/2022/03/01/leetcode-ti-jie-2-21-er-fen-sou-suo-er-fen-da-an-mo-ban-jie-xi/"/>
      <url>/2022/03/01/leetcode-ti-jie-2-21-er-fen-sou-suo-er-fen-da-an-mo-ban-jie-xi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000016825704">二分查找、二分边界查找算法的模板代码总结</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二分答案，二分查找是很重要的一项基本技能，一般而言，当一个题目出现以下特性时你就应该立马想到二分查找。</p><ul><li>带查找的数据有序或部分有序</li><li>题目的答案具有二值性，即有左边界或右边界。</li><li>要求时间复杂度地狱<code>O(n)</code>,或要求复杂度为<code>O(logn)</code>。</li></ul><p>本边文章将总结一些常见的二分模板，包括：</p><ul><li>标准的二分查找</li><li>二分查找左边界</li><li>二分查找右边界</li><li>二分查找左右边界</li><li>二分查找极值点</li></ul><h3 id="标准的二分查找"><a href="#标准的二分查找" class="headerlink" title="标准的二分查找"></a>标准的二分查找</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span> left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分查找左边界"><a href="#二分查找左边界" class="headerlink" title="二分查找左边界"></a>二分查找左边界</h3><p>查找左边界就需要left不断向右缩。先确定收缩策略，再根据题目要求编写check。</p><p>查找左边界即查找满足条件的最小值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//一般情况下mid总是偏左的，故在寻找左边界时，mid不需要+1</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//寻找左边界，left收缩</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            right<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token operator">?</span>left<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>如果用left<span class="token operator">&lt;=</span>right写应该改成right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span>   <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">153. 寻找旋转排序数组中的最小值</a></p><p>==查找左边界变体==</p><p>当数组中有重复元素时，这种情况下不能单纯的令right=mid，因为有重复元素存在，可能导致漏掉一部分区域，此时需要right–；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>            left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>            right<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token operator">?</span>left<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/">154. 寻找旋转排序数组中的最小值 II</a></p><h3 id="二分查找右边界"><a href="#二分查找右边界" class="headerlink" title="二分查找右边界"></a>二分查找右边界</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>            right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            left<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token operator">?</span>left<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>如果是要用left<span class="token operator">&lt;=</span>right写应该改成right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分查找极值"><a href="#二分查找极值" class="headerlink" title="二分查找极值"></a>二分查找极值</h3><p>之前使用nums[mid]去比较的时候常常是给定目标值，或左右边界比较，在二分查找极值点的应用中，是和相邻元素比较，完成某种单调性的检测。</p><p><a href="https://leetcode-cn.com/problems/find-peak-element/">162. 寻找峰值</a></p><p>这题是要求一个局部极大值点，整个数组不包含重复元素，所以整个数组甚至可以使无序的，但我们仍能在一个无序数组里使用二分查找，因为人家是要求局部极大值点。</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解2-27</title>
      <link href="/2022/02/27/leetcode-ti-jie-2-27/"/>
      <url>/2022/02/27/leetcode-ti-jie-2-27/</url>
      
        <content type="html"><![CDATA[<h2 id="哈希表篇"><a href="#哈希表篇" class="headerlink" title="哈希表篇"></a>哈希表篇</h2><p>哈希的应用范围还是比较广泛的，但无论怎么变化总是离不开其根本特性。</p><h3 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a><a href="https://leetcode-cn.com/problems/valid-anagram/">242. 有效的字母异位词</a></h3><p>比较简单，利用数组哈希记录即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dir<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>dir<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>dir<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383. 赎金信"></a><a href="https://leetcode-cn.com/problems/ransom-note/">383. 赎金信</a></h3><p>简单的数组哈希，思路与前一题一样。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canConstruct</span><span class="token punctuation">(</span><span class="token class-name">String</span> ransomNote<span class="token punctuation">,</span> <span class="token class-name">String</span> magazine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cnt<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>magazine<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>ransomNote<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组"></a><a href="https://leetcode-cn.com/problems/group-anagrams/">49. 字母异位词分组</a></h3><p>了解字母异位词的本质，只是字母顺序不同，排序后，他们都是一样的，因此我们利用一个hashMap，他的key为排序后的字符串，值为这个键的字母异位词list，遍历字符串数组，判断每个字符串排序后属于哪个键，遍历完后即完成了字母异位词分组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token operator">:</span>strs<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> key<span class="token operator">=</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/">438. 找到字符串中所有字母异位词</a></h3><p>==滑动窗口==</p><p>这题具有很明显的滑动窗口特征。字符串p的字母异位词一定与字符串p的长度相同，我们可以在字符串s中维护一个长度与字符串p相同的滑动窗口，在滑动中维护每种字母的数量。用l，r分别表示滑动窗口的左右边界指针。r向后遍历，把每个字母在哈希表的对应位置进行减一，一旦这个位置记录的数量小于0，表名s[r]不属于p，此时即左指针要向前滑动了，注意在<code>[l,r)</code>之间的字母均是属于p的故需要移动左指针来恢复字母哈希表。</p><p>当<code>r-l+1==p.length</code>时则表明<code>[l,r]</code>的字符串时字母异位词。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> slen<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plen<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>slen<span class="token operator">&lt;</span>plen<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//维护哈希表</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cnt<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>p<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cnt<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>h<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>h<span class="token operator">&lt;</span>slen<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token operator">--</span>cnt<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token operator">++</span>cnt<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">++</span>l<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>plen<span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token operator">++</span>h<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/">349. 两个数组的交集</a></h3><p>==双指针+排序==</p><p>这道题的本质就是找两个数组中相同的数，而找两个数组中相同的数的经典方法便是双指针，由于双指针的使用需要数组是有序的，故自然而然这题可以用双指针加排序。</p><p>注意到题目要求输出结果中每个元素是唯一的，故需要维护一个pre变量表示前一个放入结果数组的值，只有当前值与pre不同才会被放入结果中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//双指针+排序</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ilen<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> jlen<span class="token operator">=</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>ilen<span class="token operator">+</span>jlen<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>ilen<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>jlen<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">!=</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    pre<span class="token operator">=</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>                <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==set哈希表方法==</p><p>用两个hashset，一个hashset保存一个数组中的数，另一个hashset保存答案</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>set2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">:</span>set2<span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350. 两个数组的交集 II"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/">350. 两个数组的交集 II</a></h3><p>==双指针+排序==</p><p>这题与上题不同的是这题允许放重复元素，故同样是双指针，不需要维护那个pre了，碰到相同的直接放入答案数组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ilen<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> jlen<span class="token operator">=</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ilen<span class="token punctuation">,</span>jlen<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>ilen<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>jlen<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>                <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==HashMap方法==</p><p>由于此题需要维护数字的数量，需要用hashmap存储。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>nums1<span class="token punctuation">)</span><span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums2<span class="token punctuation">.</span>length<span class="token operator">+</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>nums2<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> count<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>                count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="https://leetcode-cn.com/problems/happy-number/">202. 快乐数</a></h3><p>==hashset判断是否有重复的数==</p><p>判断快乐数自然而然的一个思路是，在求得下一个元素的过程中是否会遇到之前已经出现过的数，若有，则表明是一个快乐数，若没有，则就是快乐数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">=</span><span class="token function">compute</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==利用类似判断链表是否有环的思路==</p><p>这道题的本质即是在求得下一个数的过程中是否存在循环，把每个数转化到链表上即判断链表是否有环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> slow<span class="token operator">=</span><span class="token function">getNext</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> fast<span class="token operator">=</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>slow<span class="token operator">!=</span>fast<span class="token punctuation">)</span><span class="token punctuation">{</span>            slow<span class="token operator">=</span><span class="token function">getNext</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>slow<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fast<span class="token operator">=</span><span class="token function">getNext</span><span class="token punctuation">(</span><span class="token function">getNext</span><span class="token punctuation">(</span>fast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slow<span class="token operator">==</span><span class="token number">1</span><span class="token operator">?</span><span class="token boolean">true</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h3><p>两数之和，三数之和，四数之和总的思路都不变，都是利用hashmap存储数组数值和索引，判断hashmap中是否有<code>target-num[i]</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="454-四数相加-II"><a href="#454-四数相加-II" class="headerlink" title="454. 四数相加 II"></a><a href="https://leetcode-cn.com/problems/4sum-ii/">454. 四数相加 II</a></h3><p>题目给定的是四个独立的数组，求元组，且不用去除重复元素，故只需分组之后，分别遍历即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fourSumCount</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums3<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums4<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> sum<span class="token operator">=</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums3<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums4<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> sum<span class="token operator">=</span>nums3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums4<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    count<span class="token operator">+=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h3><p>==双指针+排序==</p><p>这题骤然一看，貌似可以用，但由于题目要求答案中不可包含重复的三元组，故利用哈希解法，对于去重将是很麻烦的，最好的做法是双指针。双指针+排序好去重。</p><p><img src="https://s2.loli.net/2022/03/01/3yUZcu5LsePxCrz.png" alt="image.png"></p><p>拿这个数组举例，首先将数组排序，外面套一层循环，遍历数组，i从下标为0的地方开始，在内层进行双指针遍历，left定义在i+1的位置，right定义在数组结尾。</p><p>依然在数组中寻找abc，这里寻找的过程相当于a确定，找b+c是否等于-a</p><p>如果<code>nums[left]+nums[right]+nums[i]&lt;0</code>则left++，否则right–，当找到等于0的一个元组时，将其加入答案数组，但注意，为了去重需要进行如下操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因为这里是和确定了，如果<code>num[left]==nums[left+1]</code>或<code>nums[right]==nums[right-1]</code>则必定和前一个元组是重复的。</p><p>同时，在寻找<code>nums[i]</code>时也要进行这种操作，即当前的<code>nums[i]</code>不能等于前一个<code>nums[i-1]</code>不然也必定会找到重复的元组。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> left<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> sum<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token operator">++</span>left<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token operator">--</span>right<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>left<span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>right<span class="token punctuation">;</span>                    <span class="token operator">++</span>left<span class="token punctuation">;</span>                    <span class="token operator">--</span>right<span class="token punctuation">;</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和"></a><a href="https://leetcode-cn.com/problems/4sum/">18. 四数之和</a></h3><p>==排序+双指针==</p><p>思路与前一题相同，只需在最外层再套一层循环即可，同时要注意，在每层循环中进行去重代码编写。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">fourSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> left<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> right<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> sum<span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">++</span>left<span class="token punctuation">;</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">--</span>right<span class="token punctuation">;</span>                        <span class="token operator">++</span>left<span class="token punctuation">;</span>                        <span class="token operator">--</span>right<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token operator">++</span>left<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token operator">--</span>right<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于五数之和，六数之和都是同样的道理，在外层套即可。注意去重。</p><h2 id="总结篇"><a href="#总结篇" class="headerlink" title="总结篇"></a>总结篇</h2><ul><li>哈希表的基础知识可以看我的数据结构专栏之哈希表篇。</li></ul><p>通过本章的学习，我门可以了解到哈希表都是用来快速判断一个元素是否出现在集合里的。</p><p>常见的三种哈希结构</p><ul><li>数组</li><li>set</li><li>map</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode周赛2-27第282场GrapeCity西安</title>
      <link href="/2022/02/27/leetcode-zhou-sai-2-27-di-282-chang-grapecity-xi-an/"/>
      <url>/2022/02/27/leetcode-zhou-sai-2-27-di-282-chang-grapecity-xi-an/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/contest/weekly-contest-282/">第 282 场周赛</a></p><h2 id="2186-使两字符串互为字母异位词的最少步骤数"><a href="#2186-使两字符串互为字母异位词的最少步骤数" class="headerlink" title="2186. 使两字符串互为字母异位词的最少步骤数"></a><a href="https://leetcode-cn.com/problems/minimum-number-of-steps-to-make-two-strings-anagram-ii/">2186. 使两字符串互为字母异位词的最少步骤数</a></h2><p>要解决这道题，首先得明白字母异位词是什么，按题目意思，即：</p><blockquote><p>字母数量和类型相同，但是排列顺序不同或相同的字符串。</p></blockquote><p>根据这个定义很容易想到利用一个字母表来记录一个字符串各字母的出现频率，这是典型的哈希表做法。当我们记录了一个字符串后，要判断另一个字符串是否是字母异位词，只需遍历另一个字符，遍历到一个字符就把哈希表中对应位置的频率减一。若他们是字母异位词，那遍历完后，哈希表都为0，否则会出现大于或小于0，而这些不等于0的值的绝对值的和则表示两个字符串要变成字母异位词所需最小步骤数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSteps</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cnt<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cnt<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token operator">+=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2187-完成旅途的最少时间"><a href="#2187-完成旅途的最少时间" class="headerlink" title="2187. 完成旅途的最少时间"></a><a href="https://leetcode-cn.com/problems/minimum-time-to-complete-trips/">2187. 完成旅途的最少时间</a></h2><p>看完题解的我第一感受是这是怎么想到二分的？？</p><p>这题对于数字的大小有坑，记住一定要用long类型。</p><p>==转化为二分法==</p><p>由题可以知道，花费t时间能否完成totalTrips趟旅途，这个结果对于某个t成立，那他对于<code>[t,+∞)</code>区间所有整数均成立，即表明这个判定问题具有二值性，因此可以通过二分查找确定该判定问题的最小t，是找左边界。</p><p>由于至少需要1时间来完成一趟旅途，因此二分查找下届为1，二分查找上界为了计算方便，将花费时间最短的公交车完成totalTrips趟旅途的时间作为上界。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">minimumTime</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> time<span class="token punctuation">,</span> <span class="token keyword">int</span> totalTrips<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> r<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token comment">//各个判定值均要用long Arrays.stream(time).min().getAsInt())*totalTrips;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> mid<span class="token operator">=</span>l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compute</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span>time<span class="token punctuation">,</span>totalTrips<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                r<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//寻找左边界，返回left</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token keyword">long</span> t<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> time<span class="token punctuation">,</span><span class="token keyword">int</span> totalTrips<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>time<span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token operator">+=</span>t<span class="token operator">/</span>num<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token operator">&gt;=</span>totalTrips<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2188-完成比赛的最少时间"><a href="#2188-完成比赛的最少时间" class="headerlink" title="2188. 完成比赛的最少时间"></a><a href="https://leetcode-cn.com/problems/minimum-time-to-finish-the-race/">2188. 完成比赛的最少时间</a></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中Array，List，Set转换</title>
      <link href="/2022/02/25/java-zhong-array-list-set-zhuan-huan/"/>
      <url>/2022/02/25/java-zhong-array-list-set-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u014532901/article/details/78820124"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL复习(一)锁部分</title>
      <link href="/2022/02/24/mysql-fu-xi-yi-suo-bu-fen/"/>
      <url>/2022/02/24/mysql-fu-xi-yi-suo-bu-fen/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解2/22</title>
      <link href="/2022/02/22/leetcode-ti-jie-2-22/"/>
      <url>/2022/02/22/leetcode-ti-jie-2-22/</url>
      
        <content type="html"><![CDATA[<h2 id="链表篇"><a href="#链表篇" class="headerlink" title="链表篇"></a>链表篇</h2><h3 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203. 移除链表元素</a></h3><p>==迭代写法==</p><p>比较简单</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==递归解法==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token function">removeElements</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token operator">?</span>head<span class="token punctuation">.</span>next<span class="token operator">:</span>head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a></h3><p>==递归法==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token class-name">ListNode</span> next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//递归法</span>        <span class="token keyword">return</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> pre<span class="token punctuation">,</span><span class="token class-name">ListNode</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> pre<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>        pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>        cur<span class="token operator">=</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">reverse</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==迭代法==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//双指针</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ListNode</span> next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点"></a><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">24. 两两交换链表中的节点</a></h3><p>这题是两两交换相邻的节点，交换相邻的节点需要妥善改变哪些状态呢，包括这两个节点以及两个节点的前一个结点。以便于在交换时能将链表连接起来。于是我们可以得到这样一个过程。</p><img src="https://s2.loli.net/2022/02/28/QThj1mtuO56FZ2G.png" alt="image.png" style="zoom:67%;"><p>典型的迭代或递归过程，于是我们可以得到下面的代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dummyNode<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> tmp<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>tmp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ListNode</span> node1<span class="token operator">=</span>tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token class-name">ListNode</span> node2<span class="token operator">=</span>tmp<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node1<span class="token punctuation">.</span>next<span class="token operator">=</span>node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            node2<span class="token punctuation">.</span>next<span class="token operator">=</span>node1<span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span>next<span class="token operator">=</span>node2<span class="token punctuation">;</span>            tmp<span class="token operator">=</span>node1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==递归==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//递归法</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ListNode</span> newNode<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token function">swapPairs</span><span class="token punctuation">(</span>newNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">return</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h3><p>==双指针法==</p><p>这题典型的双指针法，维护两个指针，其相隔距离为n，当快指针达到链表末尾时，则慢指针到达了链表倒数第n个结点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dummyNode<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">--</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pre<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ListNode</span> slow<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> fast<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                fast<span class="token operator">=</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>slow<span class="token operator">==</span>fast<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ListNode</span> ptr<span class="token operator">=</span>head<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>ptr<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">{</span>                    ptr<span class="token operator">=</span>ptr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    slow<span class="token operator">=</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中数组的特性及继承关系</title>
      <link href="/2022/02/22/java-zhong-shu-zu-de-te-xing-ji-ji-cheng-guan-xi/"/>
      <url>/2022/02/22/java-zhong-shu-zu-de-te-xing-ji-ji-cheng-guan-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>List,Integer[],int[]的转换</title>
      <link href="/2022/02/22/list-integer-int-de-zhuan-huan/"/>
      <url>/2022/02/22/list-integer-int-de-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在刷算法的过程中碰到这几个类型之间的转换时感觉很繁琐，便记录一下相对简单的转换方法。</p><h3 id="int-转List"><a href="#int-转List" class="headerlink" title="int[]转List"></a>int[]转List<integer></integer></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Arrays.stream(data) 可以替换成IntStream.of(data);</span><span class="token comment">// 1.使用Arrays.stream()将int[]转为IntStream</span><span class="token comment">// 2.使用boxed(),将int装箱，从IntStream转为Stream&lt;Integer&gt;</span><span class="token comment">// 3.使用Stream的collect()，将Stream&lt;T&gt;转换成List&lt;T&gt;，因此正是List&lt;Integer&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="int-转Integer"><a href="#int-转Integer" class="headerlink" title="int[]转Integer[]"></a>int[]转Integer[]</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Stream&lt;T&gt; 的toArray返回的是T[],而例如IntStream，DoubleStream返回的是double[],基础类型数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="List-转-Integer"><a href="#List-转-Integer" class="headerlink" title="List 转 Integer[]"></a>List<integer> 转 Integer[]</integer></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="List-转-int"><a href="#List-转-int" class="headerlink" title="List 转 int[]"></a>List<integer> 转 int[]</integer></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 想要转换成int[]类型，就得先转成IntStream。</span><span class="token comment">// 这里就通过mapToInt()把Stream&lt;Integer&gt;调用Integer::valueOf来转成IntStream</span><span class="token comment">// 而IntStream中默认toArray()转成int[]。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Integer-转-int"><a href="#Integer-转-int" class="headerlink" title="Integer[] 转 int[]"></a>Integer[] 转 int[]</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>integers1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Integer-转-List"><a href="#Integer-转-List" class="headerlink" title="Integer[] 转 List"></a>Integer[] 转 List<integer></integer></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>integers1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于其他类型，同样适用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL之alter用法总结</title>
      <link href="/2022/02/22/sql-zhi-alter-yong-fa-zong-jie/"/>
      <url>/2022/02/22/sql-zhi-alter-yong-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>修改表提供如下四种修改方式</p><ul><li>ADD方式：用于增加新列或完整性约束。<ul><li>基本格式为<code>alter&nbsp;table&nbsp;&lt;表名&gt;&nbsp;add&nbsp;&lt;列定义&gt;|&lt;完整性约束&gt;</code></li></ul></li><li>DROP方式：用于删除指定的完整性约束条件或删除指定的列。<ul><li>格式：<code>alter&nbsp;table&nbsp;&lt;表名&gt;&nbsp;drop&nbsp;&lt;完整性约束名&gt;</code></li><li><code>alter&nbsp;table&nbsp;&lt;表名&gt;&nbsp;drop column &lt;列名&gt;</code></li></ul></li><li>CHANGE方式：用于修改某些列<ul><li><code>alter&nbsp;table&nbsp;&lt;表名&gt;&nbsp;change&nbsp;&lt;原列名&gt;&nbsp;to&nbsp;&lt;新列名&gt;&nbsp;&lt;新列的数据类型&gt;</code></li></ul></li><li>MODIFY方式：用于修改某些列的数据类型<ul><li><code>alter&nbsp;table&nbsp;&lt;表名&gt;&nbsp;modify&nbsp;&lt;列名&gt;&nbsp;&lt;列的数据类型&gt;</code></li></ul></li></ul><h2 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h2><p><strong>ADD方式添加约束</strong></p><p><code>alter&nbsp;table&nbsp;Teacher&nbsp;add&nbsp;constraint&nbsp;PK_1&nbsp;primary&nbsp;key&nbsp;(TeaId)</code>  – 主键约束</p><p><code>alter&nbsp;table&nbsp;Teacher&nbsp;add&nbsp;constraint&nbsp;UN_1&nbsp;unique(TeaId)</code>  –唯一约束</p><p><code>alter&nbsp;table&nbsp;Teacher add&nbsp;constraint&nbsp;DE_1&nbsp;default&nbsp;'123'&nbsp;for&nbsp;TeaAddress</code> –默认约束</p><p><code>alter&nbsp;table&nbsp;Teacher&nbsp;add&nbsp;constraint&nbsp;FK_1&nbsp;foreign&nbsp;key(关联字段)&nbsp;references&nbsp;主表（关联字段）</code> –外键约束</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> table_usr <span class="token keyword">add</span> <span class="token keyword">CONSTRAINT</span> USER_DEPARTMENT_FK <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>DEPARTMENT_ID<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> TABLE_DEPARTMENT<span class="token punctuation">(</span>DEPARTMENT_ID<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">CONSTRAINT</span> USER_COMPANY_FK <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>COMPANY_ID<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> TABLE_COMPANY<span class="token punctuation">(</span>COMPANY_ID<span class="token punctuation">)</span> <span class="token comment">//增加多个约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ADD方式添加新列</strong></p><p><code>alter&nbsp;table&nbsp;Teacher&nbsp;add&nbsp;notes&nbsp;varchar(200)</code></p><p><code>alter&nbsp;table&nbsp;table_user&nbsp;add&nbsp;department_id&nbsp;int&nbsp;not&nbsp;null,company_id&nbsp;int&nbsp;not null</code> –增加多列</p><p><strong>DROP删除约束</strong></p><p><code>alter&nbsp;table&nbsp;Teacher&nbsp;constraint&nbsp;PK_1</code> –删除主键约束</p><p><code>alter&nbsp;table&nbsp;Teacher&nbsp;constraint&nbsp;UN_1</code>  –删除唯一约束</p><p><code>alter&nbsp;table&nbsp;Teacher&nbsp;constraint&nbsp;DE_1</code>  –删除默认约束`</p><p><code>alter&nbsp;table&nbsp;Teacher&nbsp;constraint&nbsp;FK_1</code> –删除外键约束</p><p><strong>DROP删除列</strong></p><p><code>alter&nbsp;table&nbsp;Teacher drop column&nbsp;notes</code></p><p><strong>MODIFY修改</strong></p><p><code>ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解2/21</title>
      <link href="/2022/02/22/leetcode-ti-jie-2-21/"/>
      <url>/2022/02/22/leetcode-ti-jie-2-21/</url>
      
        <content type="html"><![CDATA[<h2 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></h2><p>没什么技巧，比较简单的模拟。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> loop<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> startX<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>startY<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> offset<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>loop<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token operator">=</span>startX<span class="token punctuation">;</span>            <span class="token keyword">int</span> j<span class="token operator">=</span>startY<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>startX<span class="token operator">+</span>n<span class="token operator">-</span>offset<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>startY<span class="token operator">+</span>n<span class="token operator">-</span>offset<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&gt;</span>startX<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>j<span class="token operator">&gt;</span>startY<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            startX<span class="token operator">++</span><span class="token punctuation">;</span>            startY<span class="token operator">++</span><span class="token punctuation">;</span>            loop<span class="token operator">--</span><span class="token punctuation">;</span>            offset<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">=</span>count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结篇"><a href="#总结篇" class="headerlink" title="总结篇"></a>总结篇</h2><ul><li>二分法</li><li>双指针法</li><li>滑动窗口</li><li>模拟过程</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode周赛2-20第281场红海游戏专场</title>
      <link href="/2022/02/20/leetcode-zhou-sai-2-20-di-281-chang-hong-hai-you-xi-zhuan-chang/"/>
      <url>/2022/02/20/leetcode-zhou-sai-2-20-di-281-chang-hong-hai-you-xi-zhuan-chang/</url>
      
        <content type="html"><![CDATA[<h3 id="6014-构造限制重复的字符串"><a href="#6014-构造限制重复的字符串" class="headerlink" title="6014. 构造限制重复的字符串"></a><a href="https://leetcode-cn.com/problems/construct-string-with-repeat-limit/">6014. 构造限制重复的字符串</a></h3><p>==法一：利用TreeMap==</p><p>此题要利用s的字符构造出字典序最大的字符串，首先第一点想到的是我得找一个东西把这些字母进行排序啊，其次考虑到是利用s中的字符，其中每个字符有限，且要方便存取，很自然想到<code>TreeMap&lt;Character,Integer&gt;</code>.遍历s，存放字符。</p><p>再者，仔细分析题目，无疑最开始是利用lastEntry来构建字符，利用count来记录各个字符的使用次数，每放一次字符，count++，注意，此时有几种情况需要分析</p><ul><li>当count&gt;repearLimit时，该字符次数还没使用完，但我们不能用这个字符继续紧接着构造了，那先把他保存到entry里，然后移除这个字符，进入下一循环时，会使用次大的字符放进res，但是这个最大的字符还没使用完怎么处理呢，利用一个判断，当entry！=null时，此时将entry的key，value再次放入treemap，count置为-1，entry=null，此时便可继续构造res了</li><li>count==repearLimit,和count&lt;repearLimit可以合并考虑，因为一旦使用次数为0，便会立即移除集合。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">repeatLimitedString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> repeatLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>repeatLimit<span class="token punctuation">)</span><span class="token punctuation">{</span>                entry<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">lastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">lastKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    count<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>entry<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    entry<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>                    count<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==法二：优先队列==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">repeatLimitedString2</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> repeatLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> queue<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">)</span><span class="token operator">-&gt;</span> c2<span class="token operator">-</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token class-name">StringBuilder</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> flag<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span>repeatLimit<span class="token punctuation">)</span><span class="token punctuation">{</span>            flag<span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6013-合并零之间的节点"><a href="#6013-合并零之间的节点" class="headerlink" title="6013. 合并零之间的节点"></a><a href="https://leetcode-cn.com/problems/merge-nodes-in-between-zeros/">6013. 合并零之间的节点</a></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode() {} *     ListNode(int val) { this.val = val; } *     ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">mergeNodes</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> virhead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>virhead<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>virhead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                sum<span class="token operator">+=</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">ListNode</span> newNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next<span class="token operator">=</span>newNode<span class="token punctuation">;</span>                pre<span class="token operator">=</span>newNode<span class="token punctuation">;</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        virhead<span class="token punctuation">.</span>next<span class="token operator">=</span>virhead<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> virhead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解2-20</title>
      <link href="/2022/02/20/leetcode-ti-jie-2-20/"/>
      <url>/2022/02/20/leetcode-ti-jie-2-20/</url>
      
        <content type="html"><![CDATA[<h3 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode-cn.com/problems/move-zeroes/">283. 移动零</a></h3><p><strong>双指针</strong></p><p>这种不交换相对顺序的一般是i=0,j=0。很明显可以想到，左指针指向已经处理好的序列的尾部，右指针指向待处理序列，右指针向后探查，每遇到!=0，就交换左右指针的值，同时左指针++，注意到<code>[left,right)</code>均为0，故当right超出范围时，0元素便全被移到最后。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串"></a><a href="https://leetcode-cn.com/problems/backspace-string-compare/">844. 比较含退格的字符串</a></h3><p>==法一：栈或StringBuilder==</p><p>很简单的思路，直接遍历字符串，遇到’#’就删除前一个。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">backspaceCompare</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">last</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token function">last</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token class-name">String</span> originals<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>originals<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                     res<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==双指针==</p><p>注意到一个字符是否会删除与它后面的退格符有关，而与他前面的退格符无关，因此可以利用指针指向字符串的最末尾，向前遍历，定义一个计数器skip计录<code>#</code>的数量，遇到<code>#</code>则skip++，遇到正常字符，则判断skip是否==0，如果为0，则表明这是个有效字符，可以和另一个字符串进行比较；如果大于0，则继续向前遍历。</p><p>最后根据两个字符串对应指针的值判断，如果<code>(i&gt;=0&amp;&amp;j&gt;=0)</code>则表明都找到了有效字符，判断<code>s[i]==t[j]</code>，否则如果<code>i&gt;=0||j&gt;=0</code>则肯定两个字符串不会相等。</p><p>最后一轮比较完成之后继续向前遍历，寻找下一个有效字符。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">backspaceCompare</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> skipi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>skipj<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    skipi<span class="token operator">++</span><span class="token punctuation">;</span>                    i<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>skipi<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    skipi<span class="token operator">--</span><span class="token punctuation">;</span>                    i<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    skipj<span class="token operator">++</span><span class="token punctuation">;</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>skipj<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    skipj<span class="token operator">--</span><span class="token punctuation">;</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!=</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">||</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209. 长度最小的子数组"></a><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">209. 长度最小的子数组</a></h3><p>==滑动窗口==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">滑动窗口模板<span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>处理nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minlen<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sum<span class="token operator">&gt;=</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> sublength<span class="token operator">=</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                minlen<span class="token operator">=</span>sublength<span class="token operator">&lt;</span>minlen<span class="token operator">?</span>sublength<span class="token operator">:</span>minlen<span class="token punctuation">;</span>                sum<span class="token operator">-=</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minlen<span class="token operator">==</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>minlen<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="904-水果成篮"><a href="#904-水果成篮" class="headerlink" title="904. 水果成篮"></a><a href="https://leetcode-cn.com/problems/fruit-into-baskets/">904. 水果成篮</a></h3><p>==典型滑动窗口==</p><p>要存储每种类型水果的数量，自然想到<code>HashMap&lt;Integer,Integer&gt;</code>，当map中存储的类型超过两种时，就要开始缩小窗口了，怎么缩小呢，注意这里不仅涉及缩小左指针，还涉及移除map中的水果类型。</p><p>当map中的左指针的水果类型数量大于0时便一直i++，直到为0，便移除map中的值，此时size又恢复到2，表明窗口缩小完毕。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">totalFruit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fruits<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>fruits<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        counts count<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">counts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    count<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>fruits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> counts <span class="token keyword">extends</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="https://leetcode-cn.com/problems/minimum-window-substring/">76. 最小覆盖子串</a></h3><p>注意题目中有这样一个条件，</p><blockquote><p>对于t中的重复字符，寻找的子字符中该字符的字符数量不少于t中该字符的数量</p></blockquote><p>因此，首先利用一个hashmap存储t中各个字符的出现次数。记住这个暂且称作ht，ht是一个标志map，不能动他中的元素，再定义另一个map用于记录在遍历过程中出现的t中存在的字符，一旦右指针找到各个字符数都大于ht的那个位置就代表左指针可以开始收缩了，一直这样，直到遍历完。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hs<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ht<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">minWindow</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">String</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ansL<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ansR<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>ansLen<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token comment">//开两个哈希表用于比较移动指针过程中是否达到了要求</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ht<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>ht<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ht<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                hs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>hs<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ansLen<span class="token punctuation">)</span><span class="token punctuation">{</span>                    ansLen<span class="token operator">=</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    ansL<span class="token operator">=</span>i<span class="token punctuation">;</span>                    ansR<span class="token operator">=</span>i<span class="token operator">+</span>ansLen<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ht<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    hs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>hs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ansLen<span class="token operator">==</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token operator">?</span><span class="token string">""</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>ansL<span class="token punctuation">,</span>ansR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> ht<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hs<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ht<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TreeMap用法介绍</title>
      <link href="/2022/02/20/treemap-yong-fa-jie-shao/"/>
      <url>/2022/02/20/treemap-yong-fa-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="TreeMap用法总结"><a href="#TreeMap用法总结" class="headerlink" title="TreeMap用法总结"></a>TreeMap用法总结</h2><p>TreeMap中的元素默认按照keys的升序排列。</p><p><strong>常用构造方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> comparator<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {5=val, 4=val, 3=val, 2=val, 1=val}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>常用方法</strong></p><p>==添加元素==</p><ul><li><code>V put(K key, V value)</code>：将指定映射放入该TreeMap中</li><li><code>V putAll(Map map)</code>：将指定map放入该TreeMap中</li></ul><p>==删除元素==</p><ul><li><code>void clear()</code>：清空TreeMap中的所有元素</li><li><code>V remove(Object key)</code>：从TreeMap中移除指定key对应的映射</li></ul><p>==修改元素==</p><ul><li><code>V replace(K key, V value)</code>：替换指定key对应的value</li><li><code>boolean replace(K key, V oldValue, V newValue)</code>：当指定key的对应的value为指定值时，替换该值为新值</li></ul><p>==查找元素==</p><ul><li><code>boolean containsKey(Object key)</code>：判断该TreeMap中是否包含指定key的映射</li><li><code>boolean containsValue(Object value)</code>：判断该TreeMap中是否包含有关指定value的映射</li><li><code>Map.Entry&lt;K, V&gt; firstEntry()</code>：返回该TreeMap的第一个（最小的）映射</li><li><code>K firstKey()</code>：返回该TreeMap的第一个（最小的）映射的key</li><li><code>Map.Entry&lt;K, V&gt; lastEntry()</code>：返回该TreeMap的最后一个（最大的）映射</li><li><code>K lastKey()</code>：返回该TreeMap的最后一个（最大的）映射的key</li><li><code>v get(K key)</code>：返回指定key对应的value</li><li><code>SortedMap&lt;K, V&gt; headMap(K toKey)</code>：返回该TreeMap中严格小于指定key的映射集合</li><li><code>SortedMap&lt;K, V&gt; subMap(K fromKey, K toKey)</code>：返回该TreeMap中指定范围的映射集合（大于等于fromKey，小于toKey）</li></ul><h2 id="PriorityQueue用法总结"><a href="#PriorityQueue用法总结" class="headerlink" title="PriorityQueue用法总结"></a>PriorityQueue用法总结</h2><p>不指定Comparator时默认为最小堆,通过传入自定义的Comparator函数可以实现大顶堆。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//小顶堆，默认容量为11</span><span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> maxHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//大顶堆，容量11</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i1<span class="token punctuation">,</span><span class="token class-name">Integer</span> i2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> i2<span class="token operator">-</span>i1<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/02/20/BQkq4ZPobr8hg9H.png" alt="image.png"></p><p><img src="https://s2.loli.net/2022/02/20/4tL5QCTdXuSaWy3.png" alt="image.png"></p><h2 id="LinkedList用法总结"><a href="#LinkedList用法总结" class="headerlink" title="LinkedList用法总结"></a>LinkedList用法总结</h2><p><a href="https://blog.csdn.net/GongchuangSu/article/details/51527042"></a></p><p><a href="https://www.jianshu.com/p/e1132ab06b0e"></a></p><p>LinkedList是一个继承于<code>AbstractSequentialList</code>的双向链表，可被当做堆栈，队列或双端队列使用。</p><p><code>LinkedList</code>实现了<code>Queue</code>接口，能进行队列操作</p><p><code>LinkedList</code>实现了<code>Deque</code>接口，能进行双端队列操作。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>==添加元素==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//添加元素到末尾</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token class-name">E</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在指定位置添加</span><span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">offerFirst</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">offerLast</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>push类似的<span class="token comment">//建议使用offer，不会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==获得元素==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">E</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//检索但不删除此列表的头（第一个元素）。 </span><span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token comment">//返回此列表中指定位置的元素。 </span><span class="token class-name">E</span> <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span>返回此列表中的第一个元素。 <span class="token class-name">E</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span>返回此列表中的最后一个元素。 还有peek类似的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==删除元素==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">E</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token comment">//删除该列表中指定位置的元素（可选操作）。 </span><span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>  <span class="token punctuation">;</span>从列表中删除指定元素的第一个出现（如果存在）（可选操作）。   <span class="token class-name">E</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">;</span> 检索并删除此列表的头（第一个元素）。 <span class="token comment">//用作栈时还可用pop</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>==寻找元素==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span>  <span class="token punctuation">;</span><span class="token comment">//返回此列表中指定元素的第一次出现的索引，如果此列表不包含元素，则返回-1。 </span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment">//返回此列表中指定元素的最后一次出现的索引，如果此列表不包含元素，则返回-1。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ArrayDeque用法总结"><a href="#ArrayDeque用法总结" class="headerlink" title="ArrayDeque用法总结"></a>ArrayDeque用法总结</h2><p><code>ArrayDeque</code>是<code>Deque</code>接口的一个实现，使用了可变数组，所以没有容量上的限制。同时，<code>ArrayDeque</code>是线程不安全的，在没有外部同步的情况下，不能再多线程环境下使用。<code>ArrayDeque</code>是<code>Deque</code>的实现类，可以作为栈来使用，效率高于<code>Stack</code>；也可以作为队列来使用，效率高于<code>LinkedList</code>。需要注意的是，<code>ArrayDeque</code>不支持<code>null</code>值。</p><p>方法跟LinkedList基本一样，只不过内部实现不同。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解2/19</title>
      <link href="/2022/02/19/leetcode-ti-jie-2-19/"/>
      <url>/2022/02/19/leetcode-ti-jie-2-19/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天是力扣刷题之旅的第一天，今天由于赶火车，人很累，只做了7个题，简单总结一下。</p><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a><a href="https://leetcode-cn.com/problems/binary-search/">704.二分查找</a></h3><p>二分查找的题思路不难，难在细节。通常一个题能用二分查找做，常常带有某些特征，如：</p><ul><li>数组有序</li><li>数组中无重复元素</li><li>题目要求时间复杂度O(logn)</li></ul><p>二分查找涉及的边界条件很繁杂，例如到底是<code>while(left&lt;right)</code>还是<code>while(left&lt;=right)</code>到底是<code>right=middle</code>还是<code>right=middle-1</code>，有这些疑惑主要是因为区间定义不清。写二分法一般分两种，左闭右闭和左闭右开。</p><p><strong>法一</strong></p><p>因为target在<code>[left,right]</code>里，故有</p><ul><li><code>while(left&lt;=right)</code>要使用&lt;=，因为<code>left==right</code>有意义</li><li><code>if(nums[mid]&gt;target)</code>，right要赋值为mid-1，因为<code>nums[mid]</code>一定不是target</li></ul><p><strong>法二</strong></p><ul><li><code>while(left&lt;right)</code>使用&lt;,因为<code>left==right</code>没有意义</li><li><code>if(nums[mid]&gt;target)</code>，right更新为mid，因为当前<code>nums[middle]!=target</code>。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//左闭右开</span>            <span class="token keyword">int</span> mid<span class="token operator">=</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>                j<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35.搜索插入位置"></a><a href="https://leetcode-cn.com/problems/search-insert-position/">35.搜索插入位置</a></h3><p>这题是典型的二分查找的变体，当目标值存在于数组中时有<code>nums[mid]=target</code>，当不存在时有插入位置肯定在第一个大于target的元素的位置，即两个条件合并起来就是寻找满足<code>nums[pos]&gt;=target</code>的最小pos。</p><p>顺便说一个小技巧，比如你要找满足大于等于target的最小值，可以这样写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>j<span class="token operator">=</span>mid<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>i<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>依此类推，要找什么条件的，if里就写什么条件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//左闭右开</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span>j<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid<span class="token operator">=</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">=</span>mid<span class="token punctuation">;</span>                j<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> i<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token comment">//选择左闭右开还是左闭右闭最终都会产生i=mid</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==ans的初值设置要根据题目条件，此题存在一种情况是target大于数组所有元素，那插入位置就是length。==</p><h3 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置</a></h3><p>这题很明显的二分搜索，查找第一个就是查找第一个<code>&gt;=target</code>的索引，查找最后一个位置既是查找第一个<code>&gt;target</code>的索引减一。查找条件有重复的，为了代码复用，可以定义一个函数。</p><p>当然要对最后查找出来的left和right进行检验</p><ul><li>left&lt;=right,这里可以保证当不存在时能检验出来</li><li>nums[left]==target</li><li>nums[right]==target</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> right<span class="token operator">=</span><span class="token function">search</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>left<span class="token punctuation">,</span>right<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid<span class="token operator">=</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;</span>target<span class="token operator">||</span><span class="token punctuation">(</span>flag<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//控制的是等于号，注意flag在的位置</span>                j<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> i<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根"></a><a href="https://leetcode-cn.com/problems/sqrtx/">69. x 的平方根</a></h3><p>很明显的二分搜索。可以把此题看做是在[0,1,2,…,x]数组中查找<code>&lt;=x</code>的pos最大值。故i=0,j=x+1,(左闭右开法).</p><p><strong>注意</strong></p><p>此题有坑，数组的平方会超出int，需要转成long</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid<span class="token operator">=</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>mid <span class="token operator">*</span> mid<span class="token operator">&lt;=</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">=</span>mid<span class="token punctuation">;</span>                i<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                j<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="367. 有效的完全平方数"></a><a href="https://leetcode-cn.com/problems/valid-perfect-square/">367. 有效的完全平方数</a></h3><p>此题与上题做法类似，只需最后加一步检验即可。</p><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><a href="https://leetcode-cn.com/problems/remove-element/">27. 移除元素</a></h3><p>典型双指针，前面的指针一旦遇到==val时，将后面的指针所指向的元素移过来，同时–right，当移过来的也等于val时继续移动下一个，直到已发过来的不等于val时才left++；当移过来的不等于val，那正好就应该移过来。最后遍历完数组，left即为数组长度。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26. 删除有序数组中的重复项</a></h3><p>i=0,j=1,当nums[i]==nums[j]时，i不动，j向后移动直到num[j]！=nums[i]，表明这个数字应该移过来，移动之后，注意移过来的位置是num[++i]，此时还需要将j++，因为nums[i]一定等于nums[j]。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM类加载机制</title>
      <link href="/2022/02/17/jvm-lei-jia-zai-ji-zhi/"/>
      <url>/2022/02/17/jvm-lei-jia-zai-ji-zhi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/hollischuang/p/14260801.html">你确定你真的理解”双亲委派”了吗？！</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java并发编程对象锁和类锁的区别</title>
      <link href="/2022/02/15/java-bing-fa-bian-cheng-dui-xiang-suo-he-lei-suo-de-qu-bie/"/>
      <url>/2022/02/15/java-bing-fa-bian-cheng-dui-xiang-suo-he-lei-suo-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/fengzheng/p/12066239.html">面试官：请说一下对象锁和类锁的区别</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-Nettty笔记(二)</title>
      <link href="/2022/02/11/java-nettty-bi-ji-er/"/>
      <url>/2022/02/11/java-nettty-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h2 id="Netty进阶"><a href="#Netty进阶" class="headerlink" title="Netty进阶"></a>Netty进阶</h2><h3 id="1-粘包与半包"><a href="#1-粘包与半包" class="headerlink" title="1. 粘包与半包"></a>1. 粘包与半包</h3><p>P120</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-NIO相关概念解析</title>
      <link href="/2022/02/09/java-nio-xiang-guan-gai-nian-jie-xi/"/>
      <url>/2022/02/09/java-nio-xiang-guan-gai-nian-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="NIO相关概念剖析"><a href="#NIO相关概念剖析" class="headerlink" title="NIO相关概念剖析"></a>NIO相关概念剖析</h2><h3 id="IO-模型"><a href="#IO-模型" class="headerlink" title="IO 模型"></a>IO 模型</h3><p>网络环境下，将I/O通常分为两步，一步是等待，第二步是数据搬迁。</p><p>因此发展出来以下I/O模型。</p><h4 id="一、阻塞I-O模型"><a href="#一、阻塞I-O模型" class="headerlink" title="一、阻塞I/O模型"></a>一、阻塞I/O模型</h4><img src="https://s2.loli.net/2022/02/11/bEl6Cz8OX4kAgRM.jpg" alt="a24.jpg" style="zoom:25%;"><p>用户进程调用recvfrom系统调用，内核开始准备数据，对于网络IO来说，很多数据没有第一时间到达，这是内核就需要等待，而此时用户进程会阻塞。数据准备好后，内核将数据从内核拷贝到用户内存，返回结果，用户进程解除阻塞。</p><table><thead><tr><th align="center">优点</th><th align="left">1. 进程阻塞不消耗CPU资源<br>2. 实现难度低<br>3. 适合并发量小的网络应用</th></tr></thead><tbody><tr><td align="center">缺点</td><td align="left">1. 不适合并发量大的应用，因为会阻塞<br>2. 需要为每个请求分配线程，系统开销大</td></tr></tbody></table><p>传统IO的缺点：</p><p>传统IO是一种阻塞IO，当用户发出IO请求后，内核就开始准备数据，但在很多情况下特别是在网络环境下，数据还没有到达，这是用户线程就要阻塞等待数据，直到数据到达之后，内核开始拷贝数据到用户空间。这样的工作方式很明显效率不高，一是用户线程必须阻塞等待数据，在这期间用户线程无法做其他事情，那这些时间就浪费了，效率不高；二是当服务器端采用这种传统IO模型时，当一个连接请求过来时就必须为其分配相应的线程，不然服务器就会阻塞，无法处理新的请求，当连接数过多时，线程就会分配过多，当服务器无法再申请内存分配线程时，服务器就会崩溃，很明显这种模式支持的并发数不高。因此我们就要采取新的思路。</p><h4 id="二、非阻塞I-O模型"><a href="#二、非阻塞I-O模型" class="headerlink" title="二、非阻塞I/O模型"></a>二、非阻塞I/O模型</h4><img src="https://s2.loli.net/2022/02/11/Br16vc2tDMxCOWs.jpg" alt="a23.jpg" style="zoom:25%;"><p>用户进程发出read后，如果内核数据没有准备好，不会阻塞用户进程，而是立即返回一个error，用户收到error后知道数据没准备好，那他就可以返回用户进程去执行其他任务，过一段时间再次发送read，直到数据准备好，内核将数据拷贝进用户内存。用户线程需要不断轮询内核数据是否准备好，非阻塞IO不会交出CPU。</p><p>缺点就是不断轮询，导致CPU占用率高。</p><table><thead><tr><th align="center">特点</th><th>用户进程需不断主动询问内核，数据准备好没</th></tr></thead><tbody><tr><td align="center"><strong>优点</strong></td><td>实现难度低</td></tr><tr><td align="center"><strong>缺点</strong></td><td>1. 进程轮询调用，消耗CPU资源<br>2. 适合并发量小且不需要及时响应的应用</td></tr></tbody></table><h4 id="三、多路复用I-O模型"><a href="#三、多路复用I-O模型" class="headerlink" title="三、多路复用I/O模型"></a>三、多路复用I/O模型</h4><img src="https://s2.loli.net/2022/02/11/uP9b3R6agjMhcJn.jpg" alt="a25.jpg" style="zoom:33%;"><p>主要用于处理多个IO连接时的场景，多路复用IO模型中会有一个线程去轮询多个socket的状态，只有当socket有读写事件时，才会进行处理，否则就会阻塞。这种模型下只需要一个线程就可以管理多个socket，且只有真正的IO事件时才会使用IO资源，因此大大减少了资源占用。多路复用IO比非阻塞IO效率高的原因是，多路复用的socket轮询是内核进行的，而非阻塞IO轮询是用户线程进行的，效率较低。</p><p>缺点：只有一个线程处理多个IO事件，一旦某个IO事件的数据量非常大，那么线程处理这个操作所花费的时间就特别长，这会导致后续的IO操作迟迟得不到响应，这对用户来说就是一直连不上服务器，显然用户体验较差，它比较适合短连接，数据量较小的传输。</p><p><strong>注意</strong></p><p>其实多路复用I/O和阻塞I/O并没有太大不同，它需用两个系统调用(select和recvfrom)，但它的优势在于可以同时处理多个连接。使用select/epoll的Web Server不一定比使用多线程加阻塞的Server性能更好，它的优势不是对单个连接处理更快，而是能处理更多的连接。</p><table><thead><tr><th align="center">优点</th><th>1. 专一进程解决多个I/O阻塞问题，性能好，Reactor模型 <br>2. 适合高并发服务器开发</th></tr></thead><tbody><tr><td align="center">缺点</td><td>实现难度大</td></tr></tbody></table><h4 id="四、信号驱动I-O模型"><a href="#四、信号驱动I-O模型" class="headerlink" title="四、信号驱动I/O模型"></a>四、信号驱动I/O模型</h4><p>信号驱动模型是用户线程发起IO操作会给内核注册一个信号处理函数，然后用户线程不阻塞，直接返回，当内核数据就绪时会发送信号给用户线程，用户线程便在信号处理函数中进行IO操作，实际上在讲数据从内核拷贝到用户空间的过程还是阻塞的，信号驱动IO并没有实现真正的IO，因为IO操作还是由用户线程来进行的。</p><h4 id="五、异步IO"><a href="#五、异步IO" class="headerlink" title="五、异步IO"></a>五、异步IO</h4><p>异步IO中用户线程发起aio_read后向内核传递文件描述符，缓冲区指针，大小等数据，以及告诉内核当数据准备完成后以何种方式通知用户线程后就立刻返回。从内核角度来看，收到aio_read后就立刻返回，不会阻塞，内核会等待数据准备完成，然后内核将数据拷贝到用户内存中，所有操作完成后，通知用户线程IO完成。 </p><h4 id="同步，异步，阻塞，非阻塞概念解析"><a href="#同步，异步，阻塞，非阻塞概念解析" class="headerlink" title="同步，异步，阻塞，非阻塞概念解析"></a>同步，异步，阻塞，非阻塞概念解析</h4><p>同步与异步实际上是指cpu时间片的利用，主要看数据从内核拷贝到用户空间的这个操作是由用户线程完成的还是内核线程或其他线程完成的，即可对消息结果的获取是发起方完成的还是被动通知的。</p><ul><li>同步阻塞就是请求放发起IO请求，同时用户线程一直阻塞，等待内核通知数据是否准备完成，准备好就用户线程将数据拷贝到用户空间中。</li><li>同步非阻塞就是用户发起请求后，可以立即返回去做其他事情，等过一段时间再询问内核数据是否准备好，若准备好则用户线程将数据拷贝到用户空间。</li><li>异步阻塞，一般很少使用，它就是用户发起请求后一直等待数据，什么也不能干，等待内核把数据拷贝到用户空间后，会通知用户线程，此时便结束阻塞。</li><li>异步非阻塞，当用户线程发起请求后，立即返回去处理其他任务，不阻塞，在内核中，当数据准备完成后，内核将数据从内核空间拷贝到用户空间，所有操作完成后便通知用户线程。</li></ul><h3 id="NIO介绍"><a href="#NIO介绍" class="headerlink" title="NIO介绍"></a>NIO介绍</h3><h3 id="Reactor模型"><a href="#Reactor模型" class="headerlink" title="Reactor模型"></a>Reactor模型</h3><p>对于传统的IO常常有多线程和线程池两种设计，但缺点常常有以下几点：</p><ul><li>线程的创建和回收成本比较高，占用较大内存，如果线程数过多，内存将会不够用，因此支持的并发数不高。</li><li>线程切换成本是很高的，操作系统发生线程切换是需要先转到内核态，将程序计数器，相关寄存器中的数据保存到TCB中，保存线程的上下文，然后执行系统调用切换线程，如果线程数过多，线程切换的时间甚至高于线程执行的时间。</li></ul><p>因此在高性能IO设计中，出现了Reactor模型和Proactor模型，Reactor用于同步IO，Proactor用于异步IO。</p><p>==Reactor模型是什么==</p><p>Reactor是一种处理模式，主要有同步IO，主要思想就是讲需要处理的IO事件注册到一个IO多路复用处理中心上，主线程阻塞在IO多路复用器上，一旦线程管理的socket有读写事件发生，便解除阻塞，挨个处理IO事件。</p><p>他利用事件驱动机制实现，和普通函数不同之处在于，应用程序不是主动调用某个API完成处理，而是应用程序将对应接口注册到Reactor上，当有相应事件发生时，Reactor将主动调用这些接口及回调函数。</p><p>==Reactor线程模型==</p><ul><li>单Reactor单线程模型</li><li>多线程模型（单Reactor和多Reactor）</li></ul><p>==单线程模型==</p><p>Reactor线程负责多路分离套接字，接受新连接，并将请求分派到请求处理器中，这种模型不能充分利用多核资源，效率较低。</p><p><img src="https://s2.loli.net/2022/03/14/scVOvHfWonT5KQF.png" alt="image.png"></p><p>==多线程模型==</p><p>一个线程负责初恋连接请求，一组NIO线程负责处理IO事件。</p><p>这种模型在事件处理器部分采用了线程池。</p><p>在并发量较小的场景下这种模型是没问题的，但需要支持更大的并发，单Reactor显然力不从心了。</p><p><img src="https://s2.loli.net/2022/03/14/GgWKAC2uNcDTyaH.png" alt="image.png"></p><p>==多Reactor多线程模型==</p><p>一组NIO线程负责处理连接，一组NIO线程负责处理IO事件。</p><p><img src="https://s2.loli.net/2022/03/14/TmzEZIabDUs36dq.png" alt="image.png"></p><h3 id="Netty中的Reactor模型"><a href="#Netty中的Reactor模型" class="headerlink" title="Netty中的Reactor模型"></a>Netty中的Reactor模型</h3><h3 id="select和epoll"><a href="#select和epoll" class="headerlink" title="select和epoll"></a>select和epoll</h3><h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p><a href="https://juejin.cn/post/6995519558475841550">一文彻底弄懂零拷贝原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/83398714">深入剖析Linux IO原理和几种零拷贝机制的实现</a></p><p><a href="https://www.cnblogs.com/xiaolincoding/p/13719610.html">原来 8 张图，就可以搞懂「零拷贝」了</a></p><p><a href="http://dockone.io/article/2434459">深入理解零拷贝技术</a></p><h4 id="传统-IO-问题"><a href="#传统-IO-问题" class="headerlink" title="传统 IO 问题"></a>传统 IO 问题</h4><p>传统的 IO 将一个文件通过 socket 写出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"helloword/data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RandomAccessFile</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>file<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内部工作流程是这样的：</p><p><img src="/../../../../java_Netty%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/Netty%E6%95%99%E7%A8%8B%E6%BA%90%E7%A0%81%E8%B5%84%E6%96%99/%E8%AE%B2%E4%B9%89/Netty-%E8%AE%B2%E4%B9%89/img/0024.png"></p><ol><li><p>java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 cpu</p><blockquote><p>DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</p></blockquote></li><li><p>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 cpu 会参与拷贝，无法利用 DMA</p></li><li><p>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</p></li><li><p>接下来要向网卡写数据，这项能力 java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</p></li></ol><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><ul><li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li><li>数据拷贝了共 4 次</li></ul><h4 id="NIO-优化"><a href="#NIO-优化" class="headerlink" title="NIO 优化"></a>NIO 优化</h4><p>通过 DirectByteBuf </p><ul><li>ByteBuffer.allocate(10)  HeapByteBuffer 使用的还是 java 内存</li><li>ByteBuffer.allocateDirect(10)  DirectByteBuffer 使用的是操作系统内存</li></ul><p><img src="/../../../../java_Netty%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/Netty%E6%95%99%E7%A8%8B%E6%BA%90%E7%A0%81%E8%B5%84%E6%96%99/%E8%AE%B2%E4%B9%89/Netty-%E8%AE%B2%E4%B9%89/img/0025.png"></p><p>大部分步骤与优化前相同，不再赘述。唯有一点：java 可以使用 DirectByteBuf 将堆外内存映射到 jvm 内存中来直接访问使用</p><ul><li>这块内存不受 jvm 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</li><li>java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步<ul><li>DirectByteBuf 对象被垃圾回收，将虚引用加入引用队列</li><li>通过专门线程访问引用队列，根据虚引用释放堆外内存</li></ul></li><li>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</li></ul><p>进一步优化（底层采用了 linux 2.1 后提供的 sendFile 方法），java 中对应着两个 channel 调用 transferTo/transferFrom 方法拷贝数据</p><p><img src="/../../../../java_Netty%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/Netty%E6%95%99%E7%A8%8B%E6%BA%90%E7%A0%81%E8%B5%84%E6%96%99/%E8%AE%B2%E4%B9%89/Netty-%E8%AE%B2%E4%B9%89/img/0026.png"></p><ol><li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li><li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</li><li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</li></ol><p>可以看到</p><ul><li>只发生了一次用户态与内核态的切换</li><li>数据拷贝了 3 次</li></ul><p>进一步优化（linux 2.4）</p><p><img src="/../../../../java_Netty%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/Netty%E6%95%99%E7%A8%8B%E6%BA%90%E7%A0%81%E8%B5%84%E6%96%99/%E8%AE%B2%E4%B9%89/Netty-%E8%AE%B2%E4%B9%89/img/0027.png"></p><ol><li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li><li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li><li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 cpu</li></ol><p>整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算，减少 cpu 缓存伪共享</li><li>零拷贝适合小文件传输</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-Nettty笔记(二)ProToBuf协议</title>
      <link href="/2022/02/06/java-nettty-bi-ji-er-protobuf-xie-yi/"/>
      <url>/2022/02/06/java-nettty-bi-ji-er-protobuf-xie-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot音乐网站项目整理</title>
      <link href="/2022/02/04/springboot-yin-le-wang-zhan-xiang-mu-zheng-li/"/>
      <url>/2022/02/04/springboot-yin-le-wang-zhan-xiang-mu-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot跨域问题的解决"><a href="#SpringBoot跨域问题的解决" class="headerlink" title="SpringBoot跨域问题的解决"></a>SpringBoot跨域问题的解决</h2><h2 id="SpringBoot访问静态资源"><a href="#SpringBoot访问静态资源" class="headerlink" title="SpringBoot访问静态资源"></a>SpringBoot访问静态资源</h2><p>P39</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>StringBuilder和StringBuffer详解</title>
      <link href="/2022/01/30/stringbuilder-he-stringbuffer-xiang-jie/"/>
      <url>/2022/01/30/stringbuilder-he-stringbuffer-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue快速入门笔记（一）</title>
      <link href="/2022/01/30/vue-kuai-su-ru-men-bi-ji-yi/"/>
      <url>/2022/01/30/vue-kuai-su-ru-men-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的数据类型</title>
      <link href="/2022/01/28/mysql-zhong-de-shu-ju-lei-xing/"/>
      <url>/2022/01/28/mysql-zhong-de-shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/672049b65691">MySQL 之数据类型</a></p><p><a href="https://www.cnblogs.com/xrq730/p/8446246.html">详解MySQL数据类型</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus学习笔记(一)</title>
      <link href="/2022/01/26/mybatis-plus-xue-xi-bi-ji-yi/"/>
      <url>/2022/01/26/mybatis-plus-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1rE41197jR?from=search&amp;seid=11595804093024403437&amp;spm_id_from=333.337.0.0">黑马程序员MybatisPlus深入浅出教程，快速上手mybatisplus</a></p><p><a href="https://baomidou.com/pages/24112f/#%E7%89%B9%E6%80%A7">官方文档</a></p><p><a href="https://www.hxstrive.com/subject/mybatis_plus.htm?id=305">MyBatis-Plus教程</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus (opens new window)</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生</p><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h2><h3 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h3><p>表名注解，标识实体类对应的表</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"sys_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h3><h3 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h3><h2 id="BaseMapper接口CRUD"><a href="#BaseMapper接口CRUD" class="headerlink" title="BaseMapper接口CRUD"></a>BaseMapper接口CRUD</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maven快速入门笔记（一）</title>
      <link href="/2022/01/26/maven-kuai-su-ru-men-bi-ji-yi/"/>
      <url>/2022/01/26/maven-kuai-su-ru-men-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><h3 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h3><p><img src="https://s3.bmp.ovh/imgs/2022/01/734a2926171b9852.png"></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>仓库：存储资源，各种jar包<br>        本地仓库：自己电脑上存储的资源仓库，连接远程仓库获取资源<br>        私服仓库：maven团队维护的存储所有资源的仓库<br>        中央仓库：本公司/部门存储资源的仓库<br>    私服作用：保存具有版权的资源，中央仓库都是开源的jar包<br>              可解决访问中央仓库速度慢的问题</p><pre><code>maven中央仓库地址：https://www.jianshu.com/p/1e1116b1ede6maven镜像配置：https://www.cnblogs.com/longlyseul/p/12370958.htmlctrl+F：启用网页中的搜索功能maven仓库：https://mvnrepository.com/pom.xml文件详解：https://www.cnblogs.com/wkrbky/p/6353285.htmlpom.xml文件详解2：https://zhuanlan.zhihu.com/p/100106971maven中的坐标：    groupid：定义当前maven项目隶属组织的名称，例如org.mybatis    artifactid：定义当前maven项目名称，如CRM    version：项目版本号</code></pre><h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><pre class="line-numbers language-none"><code class="language-none">mvn compile 编译项目，会生成target，里面放编译后的classesmvn clear  删除编译后的文件即targetmvn test  测试，编译测试文件和源文件，生成的所有文件放在targetmvn package  打包项目 包括 编译，测试等等过程之后再打包mvn install 下载到本地仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.tomcat.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>tomcat7-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">&gt;</span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">&gt;</span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h3><p>依赖具有传递性：</p><ul><li>直接依赖：在当前项目中通过配置依赖建立的依赖关系</li><li>间接依赖：被依赖的资源如果依赖其他资源，则当前项目间接以来其他资源</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/01/bc22b075bef2a927.png"></p><h3 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h3><p>依赖传递冲突问题：</p><ul><li>路径优先：当依赖中出现了相同的资源时，层级月深，优先级越低，层级越浅，优先级越高</li><li>声明优先：当资源在相同层级被依赖时，配置依赖的顺序靠前的覆盖靠后的，这个层级是指两个具有多层依赖的依赖，即这两个依赖时不同的，与特殊优先区分开</li><li>特殊优先：当同级配置相同资源的不同版本时，配置靠后的覆盖靠前的</li></ul><p><img src="https://s3.bmp.ovh/imgs/2022/01/284e9383279152f8.png"></p><h3 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h3><p>即对其他引用本资源的项目看不到本资源引用了哪些依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>    //添加optional<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>optional为true表示为可选依赖，即隐藏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><p>排除依赖：主动不要引入的依赖中的某些依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hamcrest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hamcrest-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.jianshu.com/p/c8666474cf9a">dependencyManagement与dependencies区别</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习笔记(一)</title>
      <link href="/2022/01/26/springboot-xue-xi-bi-ji-yi/"/>
      <url>/2022/01/26/springboot-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV15b4y1a7yG?from=search&amp;seid=12866399264991314289&amp;spm_id_from=333.337.0.0">黑马程序员SpringBoot2全套视频教程，springboot零基础到项目实战（spring boot2</a></p><p><a href="https://www.bilibili.com/video/BV19K4y1L7MT?from=search&amp;seid=12866399264991314289&amp;spm_id_from=333.337.0.0">尚硅谷雷神SpringBoot2零基础入门springboot全套完整版（spring boot2）</a></p><p><a href="https://www.cnblogs.com/sandyflower/p/10877291.html">认识Spring 的注解 (三)之 @AliasFor 使用规则</a></p><p><a href="https://www.cnblogs.com/54chensongxia/p/14385621.html">@AliasFor 注解 </a></p><p><a href="https://juejin.cn/post/6844904153966182407">SpringBoot深入理解 – @AliasFor注解的作用</a></p><h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><p><a href="https://www.cnblogs.com/jiujuan/p/12791574.html">RESTful API 介绍，设计 </a></p><p><a href="https://www.redhat.com/zh/topics/api/what-is-a-rest-api">如何理解 REST 的含义？</a></p><h2 id="RequestBody使用"><a href="#RequestBody使用" class="headerlink" title="RequestBody使用"></a>RequestBody使用</h2><p><a href="https://blog.csdn.net/justry_deng/article/details/80972817">@RequestBody的使用</a></p><p><a href="https://juejin.cn/post/6844903648858734600">Spring之RequestBody的使用姿势小结</a></p><h2 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h2><p>​    SpringBoot是Pivtoal团队提供的全新框架，其设计目的是用来简化Spring应用的搭建开发过程，那都简化了那些东西呢？</p><ul><li>Spring程序的缺点<ul><li>依赖设置繁琐，Spring程序要对使用的技术一个个自己写，现在不需要了</li><li>配置繁琐，以前写配置类或配置文件，然后用什么就要自己家在bean，现在不用了。</li></ul></li><li>SpringBoot的核心功能和优点<ul><li>简化依赖配置</li><li>自动配置</li><li>辅助功能：内置服务器等</li></ul></li></ul><h3 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h3><p>​    SpringBoot关注到开发者进行开发时，往往对依赖版本选择具有固定搭配，且依赖版本不能乱搭配，于是其将这些技术版本都整理出来，以后就不用担心冲突问题了，相当于SpringBoot做了无数个技术版本的搭配列表，这个搭配列表叫parent，<font color="red">parent</font>自身具有多个版本，每个parent版本包含几百个其他技术的版本号，parent可以帮助开发者统一进行各种技术管理</p><p>​    需要注意的是，parent仅仅帮我们进行版本管理，不负责导入坐标，即他仅仅给开发者一个说明书，但没有实际作用。那它是如何做到这一点的呢？</p><ul><li>在pom.xml中继承了这样的坐标</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其里面又继承了坐标</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.5.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看到他里面定义了各种依赖的版本属性，即依赖坐标信息</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activemq.version</span><span class="token punctuation">&gt;</span></span>5.16.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activemq.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aspectj.version</span><span class="token punctuation">&gt;</span></span>1.9.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aspectj.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>assertj.version</span><span class="token punctuation">&gt;</span></span>3.19.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>assertj.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-codec.version</span><span class="token punctuation">&gt;</span></span>1.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-codec.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-dbcp2.version</span><span class="token punctuation">&gt;</span></span>2.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-dbcp2.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-lang3.version</span><span class="token punctuation">&gt;</span></span>3.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-lang3.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-pool.version</span><span class="token punctuation">&gt;</span></span>1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-pool.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-pool2.version</span><span class="token punctuation">&gt;</span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-pool2.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2.version</span><span class="token punctuation">&gt;</span></span>1.4.200<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate.version</span><span class="token punctuation">&gt;</span></span>5.4.32.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hibernate-validator.version</span><span class="token punctuation">&gt;</span></span>6.2.0.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hibernate-validator.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>httpclient.version</span><span class="token punctuation">&gt;</span></span>4.5.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>httpclient.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jackson-bom.version</span><span class="token punctuation">&gt;</span></span>2.12.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jackson-bom.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javax-jms.version</span><span class="token punctuation">&gt;</span></span>2.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javax-jms.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javax-json.version</span><span class="token punctuation">&gt;</span></span>1.1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javax-json.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javax-websocket.version</span><span class="token punctuation">&gt;</span></span>1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javax-websocket.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jetty-el.version</span><span class="token punctuation">&gt;</span></span>9.0.48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jetty-el.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>junit.version</span><span class="token punctuation">&gt;</span></span>4.13.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>junit.version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${hibernate.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${junit.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==注意：==</p><p><dependencymanagement>是对引用坐标的依赖管理，不是实际使用坐标，故当继承了这组parent后，在不使用对应坐标情况下不会导入任何具体依赖。</dependencymanagement></p><h3 id="starter"><a href="#starter" class="headerlink" title="starter"></a>starter</h3><p>SpringBoot关注到开发者在实际开发时，对于依赖坐标的使用往往都有一些固定的组合方式，比如使用spring-webmvc就一定要使用spring-web。每次都要固定搭配着写，非常繁琐，而且格式固定，没有任何技术含量，于是其提供了固定的技术搭配，叫starter。</p><ul><li>项目中的pom.xml定义了使用SpringMVC技术，但是并没有写SpringMVC的坐标，而是添加了一个名字中包含starter的依赖</li></ul><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在spring-boot-starter-web中又定义了若干个具体依赖的坐标</li></ul><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;        &lt;version&gt;2.5.4&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-json&lt;/artifactId&gt;        &lt;version&gt;2.5.4&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;        &lt;version&gt;2.5.4&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;        &lt;version&gt;5.3.9&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;        &lt;version&gt;5.3.9&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    之前提到过开发SpringMVC程序需要导入spring-webmvc的坐标和spring整合web开发的坐标，就是上面这组坐标中的最后两个了。</p><p>​    但是我们发现除了这两个还有其他的，比如第二个，叫做spring-boot-starter-json。看名称就知道，这个是与json有关的坐标了，但是看名字发现和最后两个又不太一样，它的名字中也有starter，打开看看里面有什么？</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;        &lt;version&gt;2.5.4&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-web&lt;/artifactId&gt;        &lt;version&gt;5.3.9&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;        &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;        &lt;version&gt;2.12.4&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;        &lt;artifactId&gt;jackson-datatype-jdk8&lt;/artifactId&gt;        &lt;version&gt;2.12.4&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;        &lt;artifactId&gt;jackson-datatype-jsr310&lt;/artifactId&gt;        &lt;version&gt;2.12.4&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;        &lt;artifactId&gt;jackson-module-parameter-names&lt;/artifactId&gt;        &lt;version&gt;2.12.4&lt;/version&gt;        &lt;scope&gt;compile&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    我们可以发现，这个starter中又包含了若干个坐标，其实就是使用SpringMVC开发通常都会使用到Json，使用json又离不开这里面定义的这些坐标，看来还真是方便，SpringBoot把我们开发中使用的东西能用到的都给提前做好了。你仔细看完会发现，里面有一些你没用过的。的确会出现这种过量导入的可能性，没关系，可以通过maven中的排除依赖剔除掉一部分。不过你不管它也没事，大不了就是过量导入呗。</p><p><strong>starter与parent的区别</strong></p><p>​    朦朦胧胧中感觉starter与parent好像都是帮助我们简化配置的，但是功能又不一样，梳理一下。</p><p>​    <font color="#ff0000"><b>starter</b></font>是一个坐标中定了若干个坐标，以前写多个的，现在写一个，<font color="#ff0000"><b>是用来减少依赖配置的书写量的</b></font></p><p>​    <font color="#ff0000"><b>parent</b></font>是定义了几百个依赖版本号，以前写依赖需要自己手工控制版本，现在由SpringBoot统一管理，这样就不存在版本冲突了，<font color="#ff0000"><b>是用来减少依赖冲突的</b></font></p><h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><p>​    SpringBoot本身是为了加速Spring程序的开发的，而Spring程序运行的基础是需要创建自己的Spring容器对象（IoC容器）并将所有的对象交给Spring的容器管理，也就是一个一个的Bean。那还了SpringBoot加速开发Spring程序，这个容器还在吗？这个疑问不用说，一定在。当前这个类运行后就会产生一个Spring容器对象，并且可以将这个对象保存起来，通过容器对象直接操作Bean。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootApplicationpublic class Springboot0101QuickstartApplication {    public static void main(String[] args) {        ConfigurableApplicationContext ctx = SpringApplication.run(Springboot0101QuickstartApplication.class, args);        BookController bean = ctx.getBean(BookController.class);        System.out.println("bean======&gt;" + bean);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    通过上述操作不难看出，其实SpringBoot程序启动还是创建了一个Spring容器对象。这个类在SpringBoot程序中是所有功能的入口，称这个类为<font color="#ff0000"><b>引导类</b></font>。</p><p>​    作为一个引导类最典型的特征就是当前类上方声明了一个注解<font color="#ff0000"><b>@SpringBootApplication</b></font></p><h2 id="SpringBoot配置"><a href="#SpringBoot配置" class="headerlink" title="SpringBoot配置"></a>SpringBoot配置</h2><p>SpringBoot除了支持properties格式的配置文件，还支持另外两种格式的配置文件。分别如下:</p><ul><li>properties格式</li><li>yml格式</li><li>yaml格式</li></ul><h3 id="配置文件优先级"><a href="#配置文件优先级" class="headerlink" title="配置文件优先级"></a>配置文件优先级</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">application.properties  &gt;  application.yml  &gt;  application.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多个配置文件中有相同类型的配置会优先级高的文件覆盖优先级的文件中的配置。如果配置项不同的话，那所有的配置项都会生效。</p><h3 id="yml与yaml文件"><a href="#yml与yaml文件" class="headerlink" title="yml与yaml文件"></a>yml与yaml文件</h3><p>YAML（YAML Ain’t Markup Language），一种数据序列化格式。具有容易阅读、容易与脚本语言交互、以数据为核心，重数据轻格式的特点。常见的文件扩展名有两种：</p><ul><li><p>.yml格式（主流）</p></li><li><p>.yaml格式</p><p>对于文件自身在书写时，具有严格的语法格式要求，具体如下：</p></li></ul><ol><li>大小写敏感</li><li>属性层级关系使用多行描述，<strong>每行结尾使用冒号结束</strong></li><li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li><li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li><li>#号 表示注释</li></ol><p>下面列出常见的数据书写格式，熟悉一下</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">boolean: TRUE  #TRUE,true,True,FALSE,false，False均可float: 3.14    #6.8523015e+5  #支持科学计数法int: 123       #0b1010_0111_0100_1010_1110    #支持二进制、八进制、十六进制null: ~        #使用~表示nullstring: HelloWorld      #字符串可以直接书写string2: "Hello World"  #可以使用双引号包裹特殊字符date: 2018-02-17        #日期必须使用yyyy-MM-dd格式datetime: 2018-02-17T15:02:31+08:00  #时间和日期之间使用T连接，最后使用+代表时区<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    此外，yaml格式中也可以表示数组，在属性名书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">subject:- Java- 前端- 大数据enterprise:name: itcast    age: 16    subject:    - Java        - 前端        - 大数据likes: [王者荣耀,刺激战场]#数组书写缩略格式users: #对象数组格式一  - name: Tom   age: 4  - name: Jerry    age: 5users: #对象数组格式二  -      name: Tom    age: 4  -       name: Jerry    age: 5    users2: [ { name:Tom , age:4 } , { name:Jerry , age:5 } ]#对象数组缩略格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="yaml数据读取"><a href="#yaml数据读取" class="headerlink" title="yaml数据读取"></a>yaml数据读取</h4><ul><li><p>yaml中保存的单个数据，可以使用Spring中的注解直接读取，使用@Value可以读取单个数据，属性名引用方式：<font color="#ff0000"><b>${一级属性名.二级属性名……}</b></font></p></li><li><p>读取单一数据可以解决读取数据的问题，但是如果定义的数据量过大，这么一个一个书写肯定会累死人的，SpringBoot提供了一个对象，能够把所有的数据都封装到这一个对象中，这个对象叫做Environment，使用自动装配注解可以将所有的yaml数据封装到这个对象中。数据封装到了Environment对象中，获取属性时，通过Environment的接口操作进行，具体方法时getProperties（String），参数填写属性名即可</p><ul><li>使用Environment对象封装全部配置信息</li><li>使用@Autowired自动装配数据到Environment对象中</li></ul></li><li><p>读取对象数据：首先定义一个对象，并将该对象纳入Spring管控的范围，也就是定义成一个bean，然后使用注解@ConfigurationProperties指定该对象加载哪一组yaml中配置的信息。</p><ul><li><img src="https://s3.bmp.ovh/imgs/2022/01/a484c2aab16ea088.png"></li><li>这个@ConfigurationProperties必须告诉他加载的数据前缀是什么，这样当前前缀下的所有属性就封装到这个对象中。记得数据属性名要与对象的变量名一一对应啊，不然没法封装。其实以后如果你要定义一组数据自己使用，就可以先写一个对象，然后定义好属性，下面到配置中根据这个格式书写即可。</li></ul></li><li><p>数据引用：如果你在书写yaml数据时，经常出现如下现象，比如很多个文件都具有相同的目录前缀</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">center:dataDir: /usr/local/fire/data    tmpDir: /usr/local/fire/tmp    logDir: /usr/local/fire/log    msgDir: /usr/local/fire/msgDir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">center:dataDir: D:/usr/local/fire/data    tmpDir: D:/usr/local/fire/tmp    logDir: D:/usr/local/fire/log    msgDir: D:/usr/local/fire/msgDir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    这个时候你可以使用引用格式来定义数据，其实就是搞了个变量名，然后引用变量了，格式如下：</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">baseDir: /usr/local/firecenter:    dataDir: ${baseDir}/data    tmpDir: ${baseDir}/tmp    logDir: ${baseDir}/log    msgDir: ${baseDir}/msgDir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    还有一个注意事项，在书写字符串时，如果需要使用转义字符，需要将数据字符串使用双引号包裹起来</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">lesson: "Spring\tboot\nlesson"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h2><h3 id="整合Junit"><a href="#整合Junit" class="headerlink" title="整合Junit"></a>整合Junit</h3><p>SpringBoot技术的定位用于简化开发，再具体点是简化Spring程序的开发。所以在整合任意技术的时候，如果你想直观感触到简化的效果，你必须先知道使用非SpringBoot技术时对应的整合是如何做的，然后再看基于SpringBoot的整合是如何做的，才能比对出来简化在了哪里。</p><p>​    我们先来看一下不使用SpringBoot技术时，Spring整合JUnit的制作方式</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">//加载spring整合junit专用的类运行器@RunWith(SpringJUnit4ClassRunner.class)//指定对应的配置信息@ContextConfiguration(classes = SpringConfig.class)public class AccountServiceTestCase {    //注入你要测试的对象    @Autowired    private AccountService accountService;    @Test    public void testGetById(){        //执行要测试的对象对应的方法        System.out.println(accountService.findById(2));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    其中核心代码是前两个注解，第一个注解@RunWith是设置Spring专用于测试的类运行器，简单说就是Spring程序执行程序有自己的一套独立的运行程序的方式，不能使用JUnit提供的类运行方式了，必须指定一下，但是格式是固定的，琢磨一下，<font color="#ff0000"><b>每次都指定一样的东西，这个东西写起来没有技术含量啊</b></font>，第二个注解@ContextConfiguration是用来设置Spring核心配置文件或配置类的，简单说就是加载Spring的环境你要告诉Spring具体的环境配置是在哪里写的，虽然每次加载的文件都有可能不同，但是仔细想想，如果文件名是固定的，这个貌似也是一个固定格式。似然<font color="#ff0000"><b>有可能是固定格式，那就有可能每次都写一样的东西，也是一个没有技术含量的内容书写</b></font></p><p>​    SpringBoot就抓住上述两条没有技术含量的内容书写进行开发简化，能走默认值的走默认值，能不写的就不写，具体格式如下</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootTestclass Springboot04JunitApplicationTests {    //注入你要测试的对象    @Autowired    private BookDao bookDao;    @Test    void contextLoads() {        //执行要测试的对象对应的方法        bookDao.save();        System.out.println("two...");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    看看这次简化成什么样了，一个注解就搞定了，而且还没有参数，再体会SpringBoot整合其他技术的优势在哪里，就两个字——<font color="#ff0000"><b>简化</b></font>。使用一个注解@SpringBootTest替换了前面两个注解。至于内部是怎么回事？和之前一样，只不过都走默认值。</p><p>​    这个时候有人就问了，你加载的配置类或者配置文件是哪一个？就是我们前面启动程序使用的引导类。如果想手工指定引导类有两种方式，第一种方式使用属性的形式进行，在注解@SpringBootTest中添加classes属性指定配置类</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootTest(classes = Springboot04JunitApplication.class)class Springboot04JunitApplicationTests {    //注入你要测试的对象    @Autowired    private BookDao bookDao;    @Test    void contextLoads() {        //执行要测试的对象对应的方法        bookDao.save();        System.out.println("two...");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    第二种方式回归原始配置方式，仍然使用@ContextConfiguration注解进行，效果是一样的</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootTest@ContextConfiguration(classes = Springboot04JunitApplication.class)class Springboot04JunitApplicationTests {    //注入你要测试的对象    @Autowired    private BookDao bookDao;    @Test    void contextLoads() {        //执行要测试的对象对应的方法        bookDao.save();        System.out.println("two...");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <font color="#f0f"><b>温馨提示</b></font></p><p>​        使用SpringBoot整合JUnit需要保障导入test对应的starter，由于初始化项目时此项是默认导入的，所以此处没有提及，其实和之前学习的内容一样，用什么技术导入对应的starter即可。</p><h3 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h3><p>导入依赖，在创建springboot程序时选好依赖即可。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--1.导入对应的starter--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置数据源相关信息，没有这个信息你连接哪个数据库都不知道</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#2.配置相关信息</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm_db    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实体类</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public class Book {    private Integer id;    private String type;    private String name;    private String description;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>映射接口（Dao）</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Mapperpublic interface BookDao {    @Select("select * from tbl_book where id = #{id}")    public Book getById(Integer id);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试类</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@SpringBootTestclass Springboot05MybatisApplicationTests {    @Autowired    private BookDao bookDao;    @Test    void contextLoads() {        System.out.println(bookDao.getById(1));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果利用xml文件编写sql语句，若mapper文件写在resources里，需要指定</p><pre class="line-numbers language-none"><code class="language-none">mybatis:  mapper-locations: classpath:dao/*.xml  type-aliases-package: com.wm.pojo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果写在源码文件dao包中，需要在pom文件中加上如下配置：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为maven打包时会忽略src/main/java中的xml等文件，需要指定一起打包。</p><h3 id="整合MyBatis-Plus"><a href="#整合MyBatis-Plus" class="headerlink" title="整合MyBatis-Plus"></a>整合MyBatis-Plus</h3><p><strong>步骤①</strong>：导入对应的starter</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependency&gt;    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;    &lt;version&gt;3.4.3&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：配置数据源相关信息</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#2.配置相关信息</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ssm_db    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>映射接口（Dao）</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Mapperpublic interface BookDao extends BaseMapper&lt;Book&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    核心在于Dao接口继承了一个BaseMapper的接口，这个接口中帮助开发者预定了若干个常用的API接口，简化了通用API接口的开发工作。</p><p>除此之外可以加一些个性化配置：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span> <span class="token key atrule">configuration</span><span class="token punctuation">:</span>  <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl <span class="token key atrule">config-location</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mybatis<span class="token punctuation">-</span>config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"tb_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment">//查询时不返回该字段，保护数据</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"email"</span><span class="token punctuation">)</span> <span class="token comment">//指定数据表中字段名</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mail<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">//指定此字段在数据库中不存在</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述关于MP的注解是为了与数据库字段相匹配而加的</p><h3 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h3><p>根据SpringBoot的德行，肯定帮我们选了一个它认为最好的数据源对象，这就是HiKari。通过启动日志可以查看到对应的身影。</p><pre class="line-numbers language-tex" data-language="tex"><code class="language-tex">2021-11-29 09:39:15.202  INFO 12260 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...2021-11-29 09:39:15.208  WARN 12260 --- [           main] com.zaxxer.hikari.util.DriverDataSource  : Registered driver with driverClassName=com.mysql.jdbc.Driver was not found, trying direct instantiation.2021-11-29 09:39:15.551  INFO 12260 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        上述信息中每一行都有HiKari的身影，如果需要更换数据源，其实只需要两步即可。</p><ol><li><p>导入对应的技术坐标</p></li><li><p>配置使用指定的数据源类型</p><p>下面就切换一下数据源对象</p></li></ol><p><strong>步骤①</strong>：导入对应的坐标（注意，是坐标，此处不是starter）</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;        &lt;artifactId&gt;druid&lt;/artifactId&gt;        &lt;version&gt;1.1.16&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：修改配置，在数据源配置中有一个type属性，专用于指定数据源类型</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC    username: root    password: root    type: com.alibaba.druid.pool.DruidDataSource<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这里其实要提出一个问题的，目前的数据源配置格式是一个通用格式，不管你换什么数据源都可以用这种形式进行配置。但是新的问题又来了，如果对数据源进行个性化的配置，例如配置数据源对应的连接数量，这个时候就有新的问题了。每个数据源技术对应的配置名称都一样吗？肯定不是啊，各个厂商不可能提前商量好都写一样的名字啊，怎么办？就要使用专用的配置格式了。</p><p><strong>步骤①</strong>：导入对应的starter</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;        &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;        &lt;version&gt;1.2.6&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：修改配置</p><pre class="line-numbers language-YAML" data-language="YAML"><code class="language-YAML">spring:  datasource:    druid:      driver-class-name: com.mysql.cj.jdbc.Driver      url: jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC      username: root      password: root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        注意观察，配置项中，在datasource下面并不是直接配置url这些属性的，而是先配置了一个druid节点，然后再配置的url这些东西。言外之意，url这个属性是druid下面的属性，那你能想到什么？除了这4个常规配置外，还有druid专用的其他配置。通过提示功能可以打开druid相关的配置查阅</p><img src="../../../../java_SpringBoot学习资料/运维实用篇-资料/讲义/img/image-20211129112610729.png" alt="image-20211129112610729" style="zoom:80%;"><p>​    与druid相关的配置超过200条以上，这就告诉你，如果想做druid相关的配置，使用这种格式就可以了。</p><h2 id="SSMP整合基础案例"><a href="#SSMP整合基础案例" class="headerlink" title="SSMP整合基础案例"></a>SSMP整合基础案例</h2><p>整体案例中需要采用的技术如下：</p><ol><li>实体类开发————使用Lombok快速制作实体类</li><li>Dao开发————整合MyBatisPlus，制作数据层测试</li><li>Service开发————基于MyBatisPlus进行增量开发，制作业务层测试类</li><li>Controller开发————基于Restful开发，使用PostMan测试接口功能</li><li>Controller开发————前后端开发协议制作</li><li>页面开发————基于VUE+ElementUI制作，前后端联调，页面数据处理，页面消息处理<ul><li>列表</li><li>新增</li><li>修改</li><li>删除</li><li>分页</li><li>查询</li></ul></li><li>项目异常处理</li><li>按条件查询————页面功能调整、Controller修正功能、Service修正功能</li></ol><p><strong>pom.xml</strong></p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>application.yml</strong></p><p><strong>实体类</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@AllArgsConstructor@NoArgsConstructor@Datapublic class Book {    @TableId(value = "id",type = IdType.AUTO)    private Integer id;    private String type;    private String name;    private String description;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据层</strong></p><p>步骤①：导入驱动</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤②</strong>：配置数据库连接相关的数据源配置以及MP的配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span>  <span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /<span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">password</span><span class="token punctuation">:</span>       <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver      <span class="token key atrule">url</span><span class="token punctuation">:</span>       <span class="token key atrule">username</span><span class="token punctuation">:</span> root<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> <span class="token string">"tbl_"</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>步骤③</strong>：使用MyBatisPlus的标准通用接口BaseMapper加速开发，别忘了@Mapper和泛型的指定</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Mapperpublic interface BookDao extends BaseMapper&lt;Book&gt; {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>数据层开发——分页功能制作</strong></p><p>MyBatisPlus提供的分页操作API如下：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Testvoid testGetPage(){    IPage page = new Page(2,5);    bookDao.selectPage(page, null);    System.out.println(page.getCurrent());    System.out.println(page.getSize());    System.out.println(page.getTotal());    System.out.println(page.getPages());    System.out.println(page.getRecords());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中selectPage方法需要传入一个封装分页数据的对象，可以通过new的形式创建这个对象，当然这个对象也是MyBatisPlus提供的，别选错包了。创建此对象时需要指定两个分页的基本数据</p><ul><li>当前显示第几页</li><li>每页显示几条数据</li></ul><p>​        可以通过创建Page对象时利用构造方法初始化这两个数据。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">IPage page = new Page(2,5);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        将该对象传入到查询方法selectPage后，可以得到查询结果，但是我们会发现当前操作查询结果返回值仍然是一个IPage对象，这又是怎么回事？</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">IPage page = bookDao.selectPage(page, null);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        原来这个IPage对象中封装了若干个数据，而查询的结果作为IPage对象封装的一个数据存在的，可以理解为查询结果得到后，又塞到了这个IPage对象中，其实还是为了高度的封装，一个IPage描述了分页所有的信息。下面5个操作就是IPage对象中封装的所有信息了。</p><p><strong>定义MyBatisPlus拦截器并将其设置为Spring管控的bean</strong></p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Configurationpublic class MPConfig {    @Bean    public MybatisPlusInterceptor mybatisPlusInterceptor(){        MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();        interceptor.addInnerInterceptor(new PaginationInnerInterceptor());        return interceptor;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据层开发——条件查询功能制作</strong></p><p>除了分页功能，MyBatisPlus还提供有强大的条件查询功能。以往我们写条件查询要自己动态拼写复杂的SQL语句，现在简单了，MyBatisPlus将这些操作都制作成API接口，调用一个又一个的方法就可以实现各种条件的拼装。这里给大家普及一下基本格式，详细的操作还是到MyBatisPlus的课程中查阅吧。</p><p>​        下面的操作就是执行一个模糊匹配对应的操作，由like条件书写变为了like方法的调用。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Testvoid testGetBy(){    QueryWrapper&lt;Book&gt; qw = new QueryWrapper&lt;&gt;();    qw.like("name","Spring");    bookDao.selectList(qw);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        其中第一句QueryWrapper对象是一个用于封装查询条件的对象，该对象可以动态使用API调用的方法添加条件，最终转化成对应的SQL语句。第二句就是一个条件了，需要什么条件，使用QueryWapper对象直接调用对应操作即可。比如做大于小于关系，就可以使用lt或gt方法，等于使用eq方法，等等，此处不做更多的解释了。</p><p>​        这组API使用还是比较简单的，但是关于属性字段名的书写存在着安全隐患，比如查询字段name，当前是以字符串的形态书写的，万一写错，编译器还没有办法发现，只能将问题抛到运行器通过异常堆栈告诉开发者，不太友好。</p><p>​        MyBatisPlus针对字段检查进行了功能升级，全面支持Lambda表达式，就有了下面这组API。由QueryWrapper对象升级为LambdaQueryWrapper对象，这下就避免了上述问题的出现。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Testvoid testGetBy2(){    String name = "1";    LambdaQueryWrapper&lt;Book&gt; lqw = new LambdaQueryWrapper&lt;Book&gt;();    lqw.like(Book::getName,name);    bookDao.selectList(lqw);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        为了便于开发者动态拼写SQL，防止将null数据作为条件使用，MyBatisPlus还提供了动态拼装SQL的快捷书写方式。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Testvoid testGetBy2(){    String name = "1";    LambdaQueryWrapper&lt;Book&gt; lqw = new LambdaQueryWrapper&lt;Book&gt;();    //if(name != null) lqw.like(Book::getName,name);//方式一：JAVA代码控制    lqw.like(name != null,Book::getName,name);//方式二：API接口提供控制开关    bookDao.selectList(lqw);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>业务层开发</strong></p><p>业务层接口定义如下：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public interface BookService {    Boolean save(Book book);    Boolean update(Book book);    Boolean delete(Integer id);    Book getById(Integer id);    List&lt;Book&gt; getAll();    IPage&lt;Book&gt; getPage(int currentPage,int pageSize);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>业务层实现类如下，转调数据层即可：</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Servicepublic class BookServiceImpl implements BookService {    @Autowired    private BookDao bookDao;    @Override    public Boolean save(Book book) {        return bookDao.insert(book) &gt; 0;    }    @Override    public Boolean update(Book book) {        return bookDao.updateById(book) &gt; 0;    }    @Override    public Boolean delete(Integer id) {        return bookDao.deleteById(id) &gt; 0;    }    @Override    public Book getById(Integer id) {        return bookDao.selectById(id);    }    @Override    public List&lt;Book&gt; getAll() {        return bookDao.selectList(null);    }    @Override    public IPage&lt;Book&gt; getPage(int currentPage, int pageSize) {        IPage page = new Page(currentPage,pageSize);        bookDao.selectPage(page,null);        return page;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>业务层快速开发</strong></p><p>业务层接口快速开发</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public interface IBookService extends IService&lt;Book&gt; {    //添加非通用操作API接口     boolean saveBook(Book book);    boolean modify(Book book);    boolean delete(Integer id);    IPage&lt;Book&gt; getPage(int currentPage,int PageSize);    IPage&lt;Book&gt; getPage(int currentPage,int PageSize,Book book);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        业务层接口实现类快速开发，关注继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">@Servicepublic class BookServiceImpl extends ServiceImpl&lt;BookDao, Book&gt; implements IBookService {    @Autowired    private BookDao bookDao;//添加非通用操作API    @Override    public boolean saveBook(Book book) {        return bookDao.insert(book)&gt;0;    }    @Override    public boolean modify(Book book) {        return bookDao.updateById(book)&gt;0;    }    @Override    public boolean delete(Integer id) {        return bookDao.deleteById(id)&gt;0;    }    @Override    public IPage&lt;Book&gt; getPage(int currentPage, int PageSize) {        IPage&lt;Book&gt; page = new Page&lt;&gt;(currentPage,PageSize);        return bookDao.selectPage(page,null);    }    @Override    public IPage&lt;Book&gt; getPage(int currentPage, int PageSize, Book book) {        LambdaQueryWrapper&lt;Book&gt; wrapper = new LambdaQueryWrapper&lt;&gt;();        wrapper.like(Strings.isNotEmpty(book.getType()),Book::getType,book.getType());        wrapper.like(Strings.isNotEmpty(book.getName()),Book::getName,book.getName());       wrapper.like(Strings.isNotEmpty(book.getDescription()),Book::getDescription,book.getDescription());        IPage&lt;Book&gt; page = new Page&lt;&gt;(currentPage,PageSize);        return bookDao.selectPage(page,wrapper);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        如果感觉MyBatisPlus提供的功能不足以支撑你的使用需要（其实是一定不能支撑的，因为需求不可能是通用的），在原始接口基础上接着定义新的API接口就行了。</p><p><strong>表现层开发</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/books"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Class</span> clazz<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">IBookService</span> iBookService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span>iBookService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> iBookService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span>flag<span class="token operator">?</span><span class="token string">"添加成功(*^▽^*)"</span><span class="token operator">:</span><span class="token string">"添加失败o(╥﹏╥)o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span>iBookService<span class="token punctuation">.</span><span class="token function">modify</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span>iBookService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//        if (true) throw new NumberFormatException("数据");</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span>iBookService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{currentPage}/{PageSize}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">getPage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"currentPage"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> currentPage<span class="token punctuation">,</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"PageSize"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token class-name">PageSize</span><span class="token punctuation">,</span><span class="token class-name">Book</span> book<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> iBookService<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span>currentPage<span class="token punctuation">,</span> <span class="token class-name">PageSize</span><span class="token punctuation">,</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPage<span class="token operator">&gt;</span>page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            page<span class="token operator">=</span>iBookService<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>page<span class="token punctuation">.</span><span class="token function">getPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">PageSize</span><span class="token punctuation">,</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">!=</span>page<span class="token punctuation">,</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>表现层消息一致性处理</strong></p><p>通过Postman测试后业务层接口功能是通的，但是这样的结果给到前端开发者会出现一个小问题。不同的操作结果所展示的数据格式差异化严重。必须将所有操作的操作结果数据格式统一起来，需要设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为<strong>前后端数据协议</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">R</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token operator">=</span>flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">,</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token operator">=</span>flag<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token operator">=</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">,</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag<span class="token operator">=</span>flag<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">=</span>msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中flag用于标识操作是否成功，data用于封装操作数据，现在的数据格式就变了</p><pre class="line-numbers language-JSON" data-language="JSON"><code class="language-JSON">{&nbsp;&nbsp;&nbsp;&nbsp;"flag":&nbsp;true,&nbsp;&nbsp;&nbsp;&nbsp;"data":{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"id":&nbsp;1,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"type":&nbsp;"计算机理论",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"name":&nbsp;"Spring实战&nbsp;第5版",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"description":&nbsp;"Spring入门经典教程"&nbsp;&nbsp;&nbsp;&nbsp;}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于前端的设计可查看</p><p><a href="https://github.com/wmdsg/SpringBoot">案例源码</a></p><h2 id="Spring实用篇"><a href="#Spring实用篇" class="headerlink" title="Spring实用篇"></a>Spring实用篇</h2><h3 id="SpringBoot程序打包与运行"><a href="#SpringBoot程序打包与运行" class="headerlink" title="SpringBoot程序打包与运行"></a>SpringBoot程序打包与运行</h3><p>在使用向导创建SpringBoot工程时，pom.xml文件中会有如下配置，这一段配置千万不能删除，否则打包后无法正常执行程序。</p><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包成jar包后，在Linux上输入</p><p><code>nohup&nbsp;java&nbsp;-jar&nbsp;&lt;项目名&gt;&nbsp;&gt;&nbsp;server.log&nbsp;2&gt;&amp;1&nbsp;&amp;</code>后台运行</p><p>在DOS环境下启动SpringBoot工程时，可能会遇到端口占用的问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"># 查询端口netstat <span class="token operator">-</span>ano# 查询指定端口netstat <span class="token operator">-</span>ano <span class="token operator">|</span>findstr <span class="token string">"端口号"</span># 根据进程PID查询进程名称tasklist <span class="token operator">|</span>findstr <span class="token string">"进程PID号"</span># 根据PID杀死任务taskkill <span class="token operator">-</span>f <span class="token operator">-</span>PID <span class="token string">"进程PID号"</span># 根据进程名称杀死任务taskkill <span class="token operator">-</span>f <span class="token operator">-</span>t <span class="token operator">-</span>im <span class="token string">"进程名称"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="临时属性设置"><a href="#临时属性设置" class="headerlink" title="临时属性设置"></a>临时属性设置</h3><p>SpringBoot提供了灵活的配置方式，如果你发现你的项目中有个别属性需要重新配置，可以使用临时属性的方式快速修改某些配置。方法也特别简单，在启动的时候添加上对应参数就可以了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">java –jar springboot<span class="token punctuation">.</span>jar –<span class="token operator">-</span>server<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你发现要修改的属性不止一个，可以按照上述格式继续写，属性与属性之间使用空格分隔。</p><h3 id="属性加载优先级"><a href="#属性加载优先级" class="headerlink" title="属性加载优先级"></a><strong>属性加载优先级</strong></h3><p>现在我们的程序配置受两个地方控制了，第一配置文件，第二临时属性。并且我们发现临时属性的加载优先级要高于配置文件的。可查看官方文档了解配置读取的优先顺序。</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</a></p><p><img src="https://s3.bmp.ovh/imgs/2022/02/f1619dcb75dd78c3.png"></p><h3 id="开发环境中使用临时属性"><a href="#开发环境中使用临时属性" class="headerlink" title="开发环境中使用临时属性"></a>开发环境中使用临时属性</h3><p>下面说一下开发环境中如何使用临时属性，其实就是Idea界面下如何操作了。打开SpringBoot引导类的运行界面，在里面找到配置项。其中Program arguments对应的位置就是添加临时属性的，可以加几个试试效果。</p><p><img src="https://s3.bmp.ovh/imgs/2022/02/4c487367ff9eae79.png"></p><p>做到这里其实可以产生一个思考了，如果对java编程熟悉的小伙伴应该知道，我们运行main方法的时候，如果想使用main方法的参数，也就是下面的args参数，就是在上面这个位置添加的参数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SSMPApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者还可以使用如下格式来玩这个操作，就是将配置不写在配置文件中，直接写成一个字符串数组，传递给程序入口。当然，这种做法并没有什么实际开发意义。</p><pre class="line-numbers language-JAVA" data-language="JAVA"><code class="language-JAVA">public static void main(String[] args) {    String[] arg = new String[1];    arg[0] = "--server.port=8082";    SpringApplication.run(SSMPApplication.class, arg);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>思考</strong></p><p>现在使用临时属性可以在启动项目前临时更改配置了，但是新的问题又出来了。临时属性好用是好用，就是写的多了会很麻烦。比如我现在有个需求，上线的时候使用临时属性配置20个值，这下可麻烦了，能不能搞得简单点，集中管理一下呢？</p><h3 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h3><p>SpringBoot提供了配置文件和临时属性的方式来对程序进行配置。前面一直说的是临时属性，这一节要说说配置文件了。其实这个配置文件我们一直在使用，只不过我们用的是SpringBoot提供的4级配置文件中的其中一个级别。4个级别分别是：</p><ul><li>类路径下配置文件（一直使用的是这个，也就是resources目录中的application.yml文件）</li><li>类路径下config目录下配置文件</li><li>程序包所在目录中配置文件</li><li>程序包所在目录中config目录下配置文件</li></ul><p>总体上来说，4种配置文件如果都存在的话，有一个优先级的问题，说白了就是加入4个文件我都有，里面都有一样的配置，谁生效的问题。上面4个文件的加载优先顺序为</p><ol><li>file ：config/application.yml <strong>【最高】</strong></li><li>file ：application.yml</li><li>classpath：config/application.yml</li><li>classpath：application.yml  <strong>【最低】</strong></li></ol><p>那为什么设计这种多种呢？说一个最典型的应用吧。</p><ul><li>场景A：你作为一个开发者，你做程序的时候为了方便自己写代码，配置的数据库肯定是连接你自己本机的，咱们使用4这个级别，也就是之前一直用的application.yml。</li><li>场景B：现在项目开发到了一个阶段，要联调测试了，连接的数据库是测试服务器的数据库，肯定要换一组配置吧。你可以选择把你之前的文件中的内容都改了，目前还不麻烦。</li><li>场景C：测试完了，一切OK。你继续写你的代码，你发现你原来写的配置文件被改成测试服务器的内容了，你要再改回来。现在明白了不？场景B中把你的内容都改掉了，你现在要重新改回来，以后呢？改来改去吗？</li></ul><p>​        解决方案很简单，用上面的3这个级别的配置文件就可以快速解决这个问题，再写一个配置就行了。两个配置文件共存，因为config目录中的配置加载优先级比你的高，所以配置项如果和级别4里面的内容相同就覆盖了，这样是不是很简单？</p><p>​        级别1和2什么时候使用呢？程序打包以后就要用这个级别了，管你程序里面配置写的是什么？我的级别高，可以轻松覆盖你，就不用考虑这些配置冲突的问题了。</p><h3 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h3><p>做配置使用的配置文件都是application.yml，其实这个文件也是可以改名字的，这样方便维护。</p><p>自定义配置文件方式有如下两种：</p><p><strong>方式一：使用临时属性设置配置文件名，注意仅仅是名称，不要带扩展名</strong></p><p><img src="https://s3.bmp.ovh/imgs/2022/02/86411ebcc3840d1f.png"></p><p><strong>方式二：使用临时属性设置配置文件路径，这个是全路径名</strong></p><p><img src="https://s3.bmp.ovh/imgs/2022/02/68b634cd70baa868.png"></p><h3 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h3><p>你的电脑上写的程序最终要放到别人的服务器上去运行。每个计算机环境不一样，这就是多环境。常见的多环境开发主要兼顾3种环境设置，开发环境——自己用的，测试环境——自己公司用的，生产环境——甲方爸爸用的。因为这是绝对不同的三台电脑，所以环境肯定有所不同，比如连接的数据库不一样，设置的访问端口不一样等等。</p><h4 id="yaml单一文件版"><a href="#yaml单一文件版" class="headerlink" title="yaml单一文件版"></a>yaml单一文件版</h4><p>如何想设计两组环境呢？中间使用三个减号分隔开</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何区分两种环境呢？起名字呗</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span> pro<span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        那用哪一个呢？设置默认启动哪个就可以了</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#最上面可以写一些公共配置</span><span class="token comment">#而在多环境下写自己的单独的特殊配置</span><span class="token comment">#便于维护管理</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span><span class="token key atrule">active</span><span class="token punctuation">:</span> pro<span class="token comment"># 启动pro</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span> pro<span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">---</span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="yaml多文件版"><a href="#yaml多文件版" class="headerlink" title="yaml多文件版"></a>yaml多文件版</h4><p>将所有的配置都放在一个配置文件中，尤其是每一个配置应用场景都不一样，这显然不合理，于是就有了将一个配置文件拆分成多个配置文件的想法。</p><p><strong>主配置文件</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span><span class="token key atrule">active</span><span class="token punctuation">:</span> pro<span class="token comment"># 启动pro</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>环境配置文件因为每一个都是配置自己的项，所以连名字都不用写里面了。那问题是如何区分这是哪一组配置呢？使用文件名区分。</p><p><strong>application-pro.yaml</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>application-dev.yaml</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span><span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        文件的命名规则为：application-环境名.yml。</p><p>​        在配置文件中，如果某些配置项所有环境都一样，可以将这些项写入到主配置中，只有哪些有区别的项才写入到环境配置文件中。</p><ul><li>主配置文件中设置公共配置（全局）</li><li>环境分类配置文件中常用于设置冲突属性（局部）</li></ul><p>作为程序员在搞配置的时候往往处于一种分久必合合久必分的局面。开始先写一起，后来为了方便维护就拆分。对于多环境开发也是如此，下面给大家说一下如何基于多环境开发做配置独立管理，务必掌握。</p><p><strong>准备工作</strong></p><p>​        将所有的配置根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件，命名规则如下</p><ul><li>application-devDB.yml</li><li>application-devRedis.yml</li><li>application-devMVC.yml</li></ul><p><strong>使用</strong></p><p>​        使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev        <span class="token key atrule">include</span><span class="token punctuation">:</span> devDB<span class="token punctuation">,</span>devRedis<span class="token punctuation">,</span>devMVC加载顺序为：devDB<span class="token punctuation">-</span>》devRedis<span class="token punctuation">-</span>》devMVC<span class="token punctuation">-</span>》dev后加载的配置覆盖先加载的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        比较一下，现在相当于加载dev配置时，再加载对应的3组配置，从结构上就很清晰，用了什么，对应的名称是什么</p><p><strong>注意</strong></p><p>​        当主环境dev与其他环境有相同属性时，主环境属性生效；其他环境中有相同属性时，最后加载的环境属性生效</p><p><strong>改良</strong></p><p>​        但是上面的设置也有一个问题，比如我要切换dev环境为pro时，include也要修改。因为include属性只能使用一次，这就比较麻烦了。SpringBoot从2.4版开始使用group属性替代include属性，降低了配置书写量。简单说就是我先写好，你爱用哪个用哪个。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev        <span class="token key atrule">group</span><span class="token punctuation">:</span>        <span class="token key atrule">"dev"</span><span class="token punctuation">:</span> devDB<span class="token punctuation">,</span>devRedis<span class="token punctuation">,</span>devMVC      <span class="token key atrule">"pro"</span><span class="token punctuation">:</span> proDB<span class="token punctuation">,</span>proRedis<span class="token punctuation">,</span>proMVC      <span class="token key atrule">"test"</span><span class="token punctuation">:</span> testDB<span class="token punctuation">,</span>testRedis<span class="token punctuation">,</span>testMVC加载顺序为： dev<span class="token punctuation">-</span>》devDB<span class="token punctuation">-</span>》devRedis<span class="token punctuation">-</span>》devMVC    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在再来看，如果切换dev到pro，只需要改一下是不是就结束了？完美！</p><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>想要拥有热部署的功能，需要在pom.xml文件中添加如下依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后再每次修改源代码后，点击Build-》Build Project即可重新加载。</p><p>关于热部署有以下两个概念：</p><ul><li>重启（Restart）：自定义开发代码，包含类，页面，配置文件，加载位置restart类加载器</li><li>重载（Reload）：jar包，加载位置base类加载器</li></ul><p>热部署是只执行重启，不进行重载，故消耗时间少。</p><h3 id="自动启动热部署"><a href="#自动启动热部署" class="headerlink" title="自动启动热部署"></a>自动启动热部署</h3><p>在设置中勾选</p><p><img src="https://gitee.com/CandyWall/my_pic/raw/master/image/image-20220122192552887.png" alt="image-20220122192552887"></p><p>按快捷键<code>CTRL + SHIFT + ALT + /</code>，在弹出的菜单中选择第一项，注册表，或者直接按<code>CTRL + ALT + M</code>调出注册表；</p><p><img src="https://gitee.com/CandyWall/my_pic/raw/master/image/image-20220122193117350.png" alt="image-20220122193117350"></p><p>在注册表项中勾选<code>compiler.automake.allow.when.app.running</code> <img src="https://gitee.com/CandyWall/my_pic/raw/master/image/image-20220122194309467.png" alt="image-20220122194309467"></p><h3 id="热部署范围配置"><a href="#热部署范围配置" class="headerlink" title="热部署范围配置"></a>热部署范围配置</h3><h3 id="热部署原理"><a href="#热部署原理" class="headerlink" title="热部署原理"></a>热部署原理</h3><p><a href="https://blog.csdn.net/weixin_43373745/article/details/108959341">热部署原理</a></p><h3 id="禁用热部署"><a href="#禁用热部署" class="headerlink" title="禁用热部署"></a>禁用热部署</h3><h2 id="第三方bean属性绑定"><a href="#第三方bean属性绑定" class="headerlink" title="第三方bean属性绑定"></a>第三方bean属性绑定</h2><h3 id="EnableConfigurationProperties"><a href="#EnableConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties"></a>@EnableConfigurationProperties</h3><h3 id="松散绑定"><a href="#松散绑定" class="headerlink" title="松散绑定"></a>松散绑定</h3><h3 id="常用计量单位"><a href="#常用计量单位" class="headerlink" title="常用计量单位"></a>常用计量单位</h3><h3 id="bean属性校验"><a href="#bean属性校验" class="headerlink" title="bean属性校验"></a>bean属性校验</h3><h3 id="进制数据转换规则"><a href="#进制数据转换规则" class="headerlink" title="进制数据转换规则"></a>进制数据转换规则</h3><h2 id="测试专题"><a href="#测试专题" class="headerlink" title="测试专题"></a>测试专题</h2><h3 id="加载测试专用属性"><a href="#加载测试专用属性" class="headerlink" title="加载测试专用属性"></a>加载测试专用属性</h3><h3 id="加载测试专用配置"><a href="#加载测试专用配置" class="headerlink" title="加载测试专用配置"></a>加载测试专用配置</h3><h3 id="测试启动web环境"><a href="#测试启动web环境" class="headerlink" title="测试启动web环境"></a>测试启动web环境</h3><h3 id="发送虚拟请求"><a href="#发送虚拟请求" class="headerlink" title="发送虚拟请求"></a>发送虚拟请求</h3><h3 id="匹配响应执行状态"><a href="#匹配响应执行状态" class="headerlink" title="匹配响应执行状态"></a>匹配响应执行状态</h3><h3 id="匹配响应体"><a href="#匹配响应体" class="headerlink" title="匹配响应体"></a>匹配响应体</h3><h3 id="匹配响应头"><a href="#匹配响应头" class="headerlink" title="匹配响应头"></a>匹配响应头</h3><h2 id="内置数据源"><a href="#内置数据源" class="headerlink" title="内置数据源"></a>内置数据源</h2><h3 id="H2数据库"><a href="#H2数据库" class="headerlink" title="H2数据库"></a>H2数据库</h3><h3 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h3><p><a href="http://www.mydlq.club/article/54/#2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0">SpringBoot 操作 Redis 详解</a></p><p><a href="https://www.jianshu.com/p/014f449bbf90">Spring Boot 操作 Redis</a></p><h2 id="SpringBoot跨域问题"><a href="#SpringBoot跨域问题" class="headerlink" title="SpringBoot跨域问题"></a>SpringBoot跨域问题</h2><p><a href="https://www.cnblogs.com/javastack/p/14255114.html"></a></p><p><a href="https://segmentfault.com/a/1190000018554528"></a></p><p><a href="https://juejin.cn/post/6935985994386636831"></a></p><p><a href="https://blog.csdn.net/qq_37896194/article/details/102833430"></a></p><h2 id="SpringBoot访问静态资源"><a href="#SpringBoot访问静态资源" class="headerlink" title="SpringBoot访问静态资源"></a>SpringBoot访问静态资源</h2><p><a href="https://www.cnblogs.com/yichunguo/p/12115550.html"></a></p><p><a href="https://blog.csdn.net/u010358168/article/details/81205116"></a></p><h2 id="SpringBoot文件上传案例"><a href="#SpringBoot文件上传案例" class="headerlink" title="SpringBoot文件上传案例"></a>SpringBoot文件上传案例</h2><p><a href="https://www.cnblogs.com/summerday152/p/13969452.html"></a></p><p><a href="https://www.jianshu.com/p/0a00b697dfb4"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关系型数据库入门科普</title>
      <link href="/2022/01/22/guan-xi-xing-shu-ju-ku-ru-men-ke-pu/"/>
      <url>/2022/01/22/guan-xi-xing-shu-ju-ku-ru-men-ke-pu/</url>
      
        <content type="html"><![CDATA[<p>学习方向：</p><ul><li>查看国外数据库课程怎么安排的，以及读paper加做实验</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper一致性哈希理解</title>
      <link href="/2022/01/22/zookeeper-yi-zhi-xing-ha-xi-li-jie/"/>
      <url>/2022/01/22/zookeeper-yi-zhi-xing-ha-xi-li-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring中的事务解读</title>
      <link href="/2022/01/21/spring-zhong-de-shi-wu-jie-du/"/>
      <url>/2022/01/21/spring-zhong-de-shi-wu-jie-du/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/54067384">Spring事务原理一探</a></p><p><a href="https://juejin.cn/post/6844903608224333838">可能是最漂亮的Spring事务管理详解</a></p><p><a href="https://segmentfault.com/a/1190000040130617">咱们从头到尾说一次 Spring 事务管理（器）</a></p><p><a href="https://www.google.com.hk/search?q=spring%E4%BA%8B%E5%8A%A1&amp;oq=spring%E4%BA%8B%E5%8A%A1&amp;aqs=chrome..69i57j0i512j0i12i512l3j0i512j0i12i512l3j0i512.2142j0j15&amp;sourceid=chrome&amp;ie=UTF-8">spring事务</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM视频篇（一）</title>
      <link href="/2022/01/20/shen-ru-li-jie-jvm-shi-pin-pian-yi/"/>
      <url>/2022/01/20/shen-ru-li-jie-jvm-shi-pin-pian-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1PJ411n7xZ?from=search&amp;seid=15061630576516387511&amp;spm_id_from=333.337.0.0">尚硅谷宋红康JVM全套教程（详解java虚拟机）</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JVM读书笔记篇（一）</title>
      <link href="/2022/01/20/shen-ru-li-jie-jvm-du-shu-bi-ji-pian-yi/"/>
      <url>/2022/01/20/shen-ru-li-jie-jvm-du-shu-bi-ji-pian-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ehcache学习笔记（一）</title>
      <link href="/2022/01/18/ehcache-xue-xi-bi-ji-yi/"/>
      <url>/2022/01/18/ehcache-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://www.cnblogs.com/jingmoxukong/p/5975994.html">Spring整合Ehcache管理缓存 </a></p><p><a href="https://www.cnblogs.com/myseries/p/11370109.html">Ehcache 入门详解 （转） </a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper学习笔记（一）</title>
      <link href="/2022/01/12/zookeeper-xue-xi-bi-ji-yi/"/>
      <url>/2022/01/12/zookeeper-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1to4y1C7gw?p=1">【尚硅谷】大数据技术之Zookeeper 3.5.7版本教程</a></p><p><a href="https://www.jianshu.com/p/0e813f6a6049">zookeeper伪集群模式搭建</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><p><img src="https://s2.loli.net/2022/01/12/qX3hJQPgmiR7aeA.png" alt="aaaaaa1.png"></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p><img src="https://s2.loli.net/2022/01/12/7L1malfRpOC4sj6.png" alt="aaaaaa2.png"></p><ol><li>Zookeeper：一个领导者，多个跟随者组成的集群</li><li>集群中只要有半数以上的节点存活，Zookeeper集群就能正常服务</li><li>全局数据一致，每个server保存一份相同的数据副本，Client无论连到哪一个server，数据都是一样的</li><li>来自同一个Client的更新请求要按其发送顺序依次执行</li><li>数据更新原子性：一次数据更新要么成功，要么失败</li></ol><h2 id="配置参数解读"><a href="#配置参数解读" class="headerlink" title="配置参数解读"></a>配置参数解读</h2><p>Zookeeper中的配置文件zoo.cfg中参数含义如下：</p><ul><li>tickTime=2000：通信心跳时间，ZK中的一个时间单元。ZK中所有时间都是以这个时间单元为基础，进行整数倍配置的。</li><li>initLimit：Leader和Follower初始连接时能容忍的最多心跳数。Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。Leader允许F在<strong>initLimit</strong>时间内完成这个工作。通常情况下，我们不用太在意这个参数的设置。如果ZK集群的数据量确实很大了，F在启动的时候，从Leader上同步数据的时间也会相应变长，因此在这种情况下，有必要适当调大这个参数了</li><li>syncLimit：在运行过程中，Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。如果L发出心跳包在syncLimit之后，还没有从F那里收到响应，那么就认为这个F已经不在线了。注意：不要把这个参数设置得过大，否则可能会掩盖一些问题。</li></ul><p>更多可参考：<a href="https://www.jianshu.com/p/2da62325bfd0">zookeeper的zoo.cfg配置参数详解</a></p><h2 id="Zookeeper选举机制"><a href="#Zookeeper选举机制" class="headerlink" title="Zookeeper选举机制"></a>Zookeeper选举机制</h2><p><a href="http://dockone.io/article/696772">用大白话给你解释 ZooKeeper 的选举机制</a></p><p><a href="https://segmentfault.com/a/1190000040777791">Zookeeper的选举机制和同步机制超详细讲解，面试经常问到！</a></p><p><a href="https://juejin.cn/post/6844903844481073166">面试题：Zookeeper的选举机制</a></p><p><img src="https://s3.bmp.ovh/imgs/2022/01/6e64c9d1b9e5a487.png"></p><h2 id="Zookeeper一致性原理"><a href="#Zookeeper一致性原理" class="headerlink" title="Zookeeper一致性原理"></a>Zookeeper一致性原理</h2><p><a href="https://zhuanlan.zhihu.com/p/25594630">浅析Zookeeper的一致性原理</a></p><p><a href="https://blog.csdn.net/trntaken/article/details/108949114">zookeeper是强一致性的吗</a></p><p><a href="https://www.cnblogs.com/zz-ksw/p/12786067.html">ZooKeeper 如何保证数据一致性 </a></p><p><a href="https://www.cnblogs.com/vivotech/p/14193549.html">深入浅出 ZooKeeper</a></p><p><a href="https://www.51cto.com/article/625181.html">ZooKeeper的十二连问，你顶得了嘛？</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lombok学习笔记（一）</title>
      <link href="/2022/01/11/lombok-xue-xi-bi-ji-yi/"/>
      <url>/2022/01/11/lombok-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1gg4y1v7Mi?from=search&amp;seid=331576798313208216&amp;spm_id_from=333.337.0.0">开发人员必备的常用工具合集lombok、hutool、fileupload</a></p><p><a href="https://www.bilibili.com/video/BV1qJ411G7Dv?from=search&amp;seid=331576798313208216&amp;spm_id_from=333.337.0.0">Lombok安装Lombok原理Lombok使用教程</a></p><p><a href="https://www.bilibili.com/video/BV1T64y1Z7Xm?from=search&amp;seid=331576798313208216&amp;spm_id_from=333.337.0.0">java代码简洁之道 lombok不止lombok</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记（一）</title>
      <link href="/2022/01/11/mybatis-xue-xi-bi-ji-yi/"/>
      <url>/2022/01/11/mybatis-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1M5411g76Y?from=search&amp;seid=14621913844489921827&amp;spm_id_from=333.337.0.0">超详细Mybatis小白到高手-V哥讲</a></p><p><a href="https://blog.csdn.net/weixin_39032063/category_11063287.html">V哥笔记地址</a></p><p><a href="https://www.bilibili.com/video/BV1mW411M737?from=search&amp;seid=14621913844489921827&amp;spm_id_from=333.337.0.0">尚硅谷MyBatis实战教程全套完整版</a></p><p><a href="https://www.bilibili.com/video/BV15v41147X6/?spm_id_from=333.788.recommend_more_video.4">Mybatis注解开发</a></p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在maven中引入坐标</p><pre class="line-numbers language-none"><code class="language-none">&lt;dependency&gt;  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;  &lt;version&gt;x.x.x&lt;/version&gt;&lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。从 XML 文件中构建 SqlSessionFactory 的实例非常简单，建议使用类路径下的资源文件进行配置。 但也可以使用任意的输入流（InputStream）实例，比如用文件路径字符串或 file:// URL 构造的输入流。MyBatis 包含一个名叫 Resources 的工具类，它包含一些实用方法，使得从类路径或其它位置加载资源文件更加容易。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取sqlsession'实例，能直接执行已经映射的sql语句</span><span class="token comment">//        statement Unique identifier matching the statement to use.</span><span class="token comment">//        parameter A parameter object to pass to the statement.</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Employee</span> employee <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mybatis.EmployeeMapper.selectEmp"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在编写代码之前需要先网mybatis的核心配置文件中写入配置，最基本的配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--环境--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EmployeeMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后往映射文件中写入sql语句。一个语句既可以通过 XML 定义，也可以通过注解定义。我们先看看 XML 定义语句的方式，事实上 MyBatis 提供的所有特性都可以利用基于 XML 的映射语言来实现，这使得 MyBatis 在过去的数年间得以流行。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.dao.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--namespace:名称空间，id:唯一标识resultType:返回值类型#{id}:从传递过来的参数中取出id--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectEmp<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span> <span class="token attr-name">databaseId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from tbl_employee where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更安全的做法是通过接口去绑定映射文件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span> selectEmp <span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可能会注意到，这种方式和用全限定名调用 Java 对象的方法类似。这样，该命名就可以直接映射到在命名空间中同名的映射器类，并将已映射的 select 语句匹配到对应名称、参数和返回类型的方法。因此你就可以像上面那样，不费吹灰之力地在对应的映射器接口调用方法，就像下面这样</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">//获取接口的实现类对象</span>        <span class="token comment">//会为接口自动创建代理对象</span>        <span class="token class-name">EmployeeMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmployeeMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> employee <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectEmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于接口式编程有几点说明：</p><pre class="line-numbers language-none"><code class="language-none">1.sqlSession代表和数据库的一次会话，用完必须关闭2.sqlSession和connection一样，都是非线程安全的，每次使用都应该获取新的3.mapper没有实现类，但mybatis会为接口生成代理对象，将接口与xml绑定4.两个重要配置文件      sql映射文件      全局配置文件：包含数据库连接池信息，事务管理信息等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1、MyBatis全局配置文件"><a href="#1、MyBatis全局配置文件" class="headerlink" title="1、MyBatis全局配置文件"></a>1、MyBatis全局配置文件</h2><p>全局配置文件中有许多属性可以设置，此处直列举几个常用的。</p><h3 id="properties标签"><a href="#properties标签" class="headerlink" title="properties标签"></a>properties标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!--    1.mybatis可以使用properties来引入外部properties文件        1.1 Resource：引入类路径下的资源        1.2 url：引入网络文件--&gt;    &lt;properties resource="dbconfig.properties"&gt;&lt;/properties&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="setting标签"><a href="#setting标签" class="headerlink" title="setting标签"></a>setting标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!--    2.settings包含很多重要的设置项--&gt;    &lt;settings&gt;        &lt;setting name="mapUnderscoreToCamelCase" value="true"/&gt;    &lt;/settings&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一些其他属性查看官方文档，十分详细</p><h3 id="typeAliases标签"><a href="#typeAliases标签" class="headerlink" title="typeAliases标签"></a>typeAliases标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!--    3.typeAliases:别名处理器可以为java类型起别名--&gt;    &lt;typeAliases&gt;&lt;!--        &lt;typeAlias type="com.atguigu.mybatis.bean.Employee" alias="employee"/&gt;--&gt;&lt;!--  批量起别名  package:为某个包下类批量起别名  name：指定包名，为当前包和下面所有包每一个类起别名，（默认类名小写）  --&gt;        &lt;package name="com.atguigu.mybatis.bean"/&gt;&lt;!--        批量起别名的情况下可以用@Alias注解为某个类型起别名--&gt;    &lt;/typeAliases&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="environment标签"><a href="#environment标签" class="headerlink" title="environment标签"></a>environment标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!--    4.environments:环境，mybatis可以配置多种环境，default指定某种环境        environment：一个具体的环境，id表示当前环境的标识            transactionManager：事务管理器                type：                    JDBC（JdbcTransactionFactory）                    MANAGED (ManagedTransactionFactory)                    自定义事务管理器：实现TransactionFactory            datasource：数据源                type：JNDI|POOLED|UNPOOLED|自定义的可以实现DataSourceFactory--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="databaseProvider标签"><a href="#databaseProvider标签" class="headerlink" title="databaseProvider标签"></a>databaseProvider标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!--    5.databaseProvider：支持多数据库厂商            &lt;databaseIdProvider type="DB_VENDOR"&gt;            为不同数据库厂商起别名                &lt;property name="SQL Server" value="sqlserver"/&gt;                &lt;property name="DB2" value="db2"/&gt;                &lt;property name="Oracle" value="oracle" /&gt;            &lt;/databaseIdProvider&gt;--&gt;    &lt;databaseIdProvider type="DB_VENDOR"&gt;        &lt;property name="MySQL" value="mysql"/&gt;    &lt;/databaseIdProvider&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mapper标签"><a href="#mapper标签" class="headerlink" title="mapper标签"></a>mapper标签</h3><pre class="line-numbers language-none"><code class="language-none">&lt;mappers&gt;&lt;!--        mapper:注册一个sql映射文件                注册：配置文件                resource：引用类路径下的sql映射文件                url：引用网络路径下的                class 注册接口                    1.有sql映射文件，映射文件名必须与接口同名，且放在同一包下                    2.可以没有映射文件，所有sql都是利用注解写在接口上的--&gt;&lt;!--        表示写好的sql映射文件（EmployeeMapper.xml），一定要配置到全局映射文件中mybatis-config.xml--&gt;        &lt;mapper resource="EmployeeMapper.xml"/&gt;    &lt;/mappers&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapperAnnotation</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from tbl_employee where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">getEmployee</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2、MyBatis映射文件"><a href="#2、MyBatis映射文件" class="headerlink" title="2、MyBatis映射文件"></a>2、MyBatis映射文件</h2><h3 id="增删改查案例"><a href="#增删改查案例" class="headerlink" title="增删改查案例"></a>增删改查案例</h3><p>在<code>EmployeeMapper</code>接口中配置增删改抽象方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEmp</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateEmp</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteEmpById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在<code>EmployeeMapper.xml</code>文件中配置映射语句</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addEmp<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee<span class="token punctuation">"</span></span> <span class="token attr-name">databaseId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span>    <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    insert into tbl_employee(last_name,email,gender)    values(#{lastName},#{email},#{gender})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateEmp<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    update tbl_employee        set last_name=#{lastName},email=#{email},gender=#{gender}        where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteEmpById<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    delete from tbl_employee where id =#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此便可以测试这些接口中的方法了。</p><p>==补充：==</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    获取自增主键的值：        mysql支持自增主键，自增主键的获取，mybatis也是利用statement.getGeneratedKeys(),可在语句中添加下面两个属性        useGeneratedKeys=“true”，使用自增主键获取策略        keyProperty：指定对应的主键属性，也就是mybatis获取到主键值后将这个值封装到javaBean的哪个属性    Oracle不支持自增Oracle使用序列模拟自增    每次插入的数据的主键是从序列中拿的值--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mybatis参数处理"><a href="#mybatis参数处理" class="headerlink" title="mybatis参数处理"></a>mybatis参数处理</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">单个参数时，mybatis不会做特殊处理    #{参数名}：取出参数值多个参数:mybatis会做特殊处理。    多个参数会被封装成map    key：param1 ... paramN    value :传入的参数值    #{paramN}就是从map中获取值    命名参数：明确指定封装参数时的key  @Param（）public Employee getEmpByIdAndLastName(@Param("id")Integer id,@Param("lastName")String lastName);如果多个参数正好是我们的业务逻辑的数据模型，我们可以直接传入pojo；    #{属性名}：取出传入的pojo的属性值    如果多个参数不是业务模型中的数据，没有对应的pojo，我们也可以传入mapEmployeeMapper mapper = sqlSession.getMapper(EmployeeMapper.class);Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,Object</span><span class="token punctuation">&gt;</span></span> map=new HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">Object</span><span class="token punctuation">&gt;</span></span>();map.put("id",1);map.put("lastName","jerry");Employee emp = mapper.getEmpByMap(map);如果多个参数不是业务数据模型，但要经常使用，推荐编写一个TO（Transfer Object）数据传输对象========================思考================================public Employee getEmp(@Param("id")Integer id,String lastName);取值：id==&gt;#{id/param1}   lastName==&gt;#{param2}public Employee getEmp(Integer id,@Param("e")Employee emp);    取值：id==&gt;#{param1}    lastName===&gt;#{param2.lastName/e.lastName}    ###特别注意，如果是Collection（List，Set）类型，也会特殊处理，即把传入的List或            set封装在map中            key：Collection（collection），如果是List还可以使用这个key（list）            数组的key是（array）public Employee getEmpById(List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Integer</span><span class="token punctuation">&gt;</span></span> ids);    取值：#{list[0]}        ===========================参数值的获取======================================#{}：可以获取map中的值或者pojo对象属性的值；${}：可以获取map中的值或者pojo对象属性的值；select * from tbl_employee where id=${id} and last_name=#{lastName}Preparing: select * from tbl_employee where id=2 and last_name=?区别：#{}:是以预编译的形式，将参数设置到sql语句中；PreparedStatement；防止sql注入${}:取出的值直接拼装在sql语句中；会有安全问题；大多情况下，我们去参数的值都应该去使用#{}；原生jdbc不支持占位符的地方我们就可以使用${}进行取值比如分表、排序。。。；按照年份分表拆分select * from ${year}_salary where xxx;select * from tbl_employee order by ${f_name} ${order}#{}:更丰富的用法：规定参数的一些规则：javaType、 jdbcType、 mode（存储过程）、 numericScale、resultMap、 typeHandler、 jdbcTypeName、 expression（未来准备支持的功能）；jdbcType通常需要在某种特定的条件下被设置：在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle（报错）；JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，oracle不能正确处理;由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持；两种办法1、#{email,jdbcType=OTHER};2、jdbcTypeForNull=NULL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcTypeForNull<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NULL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="select返回List"><a href="#select返回List" class="headerlink" title="select返回List"></a>select返回List</h3><p>在接口中定义一个返回集合的抽象方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">getEmpsByLastNameLike</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在映射文件中配置sql逻辑</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    public List&lt;Employee&gt; getEmpsByLastNameLike(String lastName);        如果返回的是集合，resultType要写集合元素的类型--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpsByLastNameLike<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from tbl_employee where last_name like #{lastName}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="select封装Map"><a href="#select封装Map" class="headerlink" title="select封装Map"></a>select封装Map</h3><p>假如要求返回的是map，且记录只有一条时，我们可以直接这么做：</p><p>接口中定义抽象方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//返回map，key就是列名，值就是值</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getEmpByIdReturnMap</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>映射文件中写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getEmpByIdReturnMap</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getEmpByIdReturnMap"</span> resultType<span class="token operator">=</span><span class="token string">"map"</span><span class="token operator">&gt;</span>        select <span class="token operator">*</span> from tbl_employee where id <span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这种情况只针对返回记录只有一条，这种情况下他的resultType是map</p><p>假如我们要求返回的map集合键是主键，值时记录，即<code>Map&lt;Integer,Emmployee&gt;</code>,我们需要这样做</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapKey</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token comment">//使用@MapKey注解告诉mybatis使用哪个属性做键</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">getEmpByLastNameLikeReturnMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后注意在映射文件中的resultType是你的记录类型，即javaBean</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    public Map&lt;Integer,Employee&gt; getEmpByLastNameLikeReturnMap(String lastName);--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpByLastNameLikeReturnMap<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from tbl_employee where last_name like #{lastName}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义结果集resultMap"><a href="#自定义结果集resultMap" class="headerlink" title="自定义结果集resultMap"></a>自定义结果集resultMap</h3><ul><li><p>场景一：简单返回javaBean</p><ul><li>```java<br>public Employee getEmpById(Integer id);<pre class="line-numbers language-none"><code class="language-none">- ```xml  &lt;!--自定义某个javaBean的封装规则      type：自定义规则的java类型      id：唯一id，方便引用  --&gt;      &lt;resultMap id="MySimpleEmp" type="employee"&gt;  &lt;!--     指定主键列的封装规则          id定义主键          column:指定哪一列          property：指定对应的javaBean属性  --&gt;          &lt;id column="id" property="id"/&gt;  &lt;!--        定义普通列的封装规则--&gt;          &lt;result column="last_name" property="lastName"/&gt;          &lt;!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 --&gt;          &lt;result column="email" property="email"/&gt;          &lt;result column="gender" property="gender"/&gt;      &lt;/resultMap&gt;        &lt;!--    public Employee getEmpById(Integer id);--&gt;      &lt;select id="getEmpById" resultMap="MySimpleEmp" &gt;          select  * from tbl_employee where id =#{id}      &lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>场景二：假设Employee对象中有另一个对象属性，在查询employee时同时把department查出来</p><ul><li>```xml<!--    场景一：        查询Employee同时查询员工对应的部门--><!--    public Employee getEmpAndDept(Integer id);--><!--    联合查询：级联属性封装结果集--><pre><code>&lt;resultMap id="MyDifEmp" type="employee"&gt;    &lt;id column="id" property="id"/&gt;    &lt;result column="lastName" property="lastName"/&gt;    &lt;result column="gender" property="gender"/&gt;    &lt;result column="did" property="dept.id"/&gt;    &lt;result column="dept_name" property="dept.departmentName"/&gt;&lt;/resultMap&gt;</code></pre><select id="getEmpAndDept" resultmap="MyDifEmp">        select e.id id,e.last_name lastName,e.gender gender,e.d_id d_id,d_id did,d.dept_name dept_name from            tbl_employee e,tbl_dept d            where e.d_id=d.id and e.id=#{id}    </select><pre class="line-numbers language-none"><code class="language-none">- 使用association定义关联对象的封装规则  - ```xml    &lt;!--    使用association定义关联的单个对象的封装规则--&gt;        &lt;resultMap id="MyDifEmp2" type="employee"&gt;            &lt;id column="id" property="id"/&gt;            &lt;result column="lastName" property="lastName"/&gt;            &lt;result column="gender" property="gender"/&gt;            &lt;!-- association标签可以指定联合的javabean对象                property：指定哪个属性是联合的对象                javatype：指定这个属性对象的类型[不能省略]            --&gt;            &lt;association property="dept" javaType="department"&gt;                &lt;id column="did" property="id"/&gt;                &lt;result column="dept_name" property="departmentName"/&gt;            &lt;/association&gt;        &lt;/resultMap&gt;        &lt;select id="getEmpAndDept" resultMap="MyDifEmp2"&gt;            select e.id id,e.last_name lastName,e.gender gender,e.d_id d_id,d_id did,d.dept_name dept_name from                tbl_employee e,tbl_dept d                where e.d_id=d.id and e.id=#{id}        &lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>使用association进行分步查询</p><ul><li>```xml<!--    使用association进行分步查询        1.先按照员工id查询员工信息        2.根据员工信息中的d_id去部门表查出部门信息        3.设置部门到员工中--><pre><code>&lt;resultMap id="MyEmpByStep" type="employee"&gt;    &lt;id column="id" property="id"/&gt;    &lt;result column="last_name" property="lastName"/&gt;    &lt;result column="gender" property="gender"/&gt;    &lt;!-- association定义关联对象的封装规则        select ：表明当前属性是调用select指定的方法查出的结果        column：指定传给这个方法的值        流程：使用select指定的方法，（传入column指定的这列参数值）查出对象，封装给property    --&gt;    &lt;association property="dept" select="com.atguigu.mybatis.dao.DepartmentMapper.getDeptById"        column="d_id"&gt;    &lt;/association&gt;&lt;/resultMap&gt;</code></pre><!--    public Employee getEmpByIdStep(Integer id);--><pre><code>&lt;select id="getEmpByIdStep" resultMap="MyEmpDis"&gt;    select * from tbl_employee where id=#{id}&lt;/select&gt;</code></pre><pre class="line-numbers language-none"><code class="language-none">  - 分步查询使用延迟加载  - ```xml    &lt;!--    分布查询可以使用延迟加载            查询Employee时，全部查询出来，而                部门信息在需要使用时再查询                分段查询的基础上加两个配置            &lt;setting name="lazyLoadingEnabled" value="true"/&gt;    延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。            &lt;setting name="aggressiveLazyLoading" value="false"/&gt;    开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 lazyLoadTriggerMethods)。    --&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>当关联对象是集合时，我们使用collection标签查询，看下面场景，在查询部门时将部门中的所有员工查询出来</p><ul><li>```xml<!--    public Department getDeptByIdPlus(Integer id);-->  <select id="getDeptByIdPlus" resultmap="MyDept">      SELECT d.id did,d.dept_name dept_name,             e.id eid,e.last_name last_name,e.email email,e.gender gender      FROM tbl_dept d               LEFT JOIN tbl_employee e                         ON d.id=e.d_id      WHERE d.id=#{id}  </select>  <resultmap id="MyDept" type="department">      <id column="did" property="id">      <result column="dept_name" property="departmentName">      <!--   collection定义关联集合类型的属性的封装规则   ofType:指定集合里面元素的类型-->      <collection property="emps" oftype="employee">          <!-- 定义这个集合中元素的封装规则 -->          <id column="eid" property="id">          <result column="last_name" property="lastName">          <result column="email" property="email">          <result column="gender" property="gender">      </result></result></result></id></collection>  </result></id></resultmap><pre class="line-numbers language-none"><code class="language-none">- collection分段查询  - ```xml    &lt;!--    getDeptByIdStep--&gt;    &lt;!-- collection：分段查询 --&gt;        &lt;select id="getDeptByIdStep" resultMap="MyDeptStep"&gt;            select id,dept_name from tbl_dept where id=#{id}        &lt;/select&gt;        &lt;resultMap id="MyDeptStep" type="department"&gt;            &lt;id column="id" property="id"/&gt;            &lt;result column="dept_name" property="departmentName"/&gt;            &lt;collection property="emps"                        select="com.atguigu.mybatis.dao.EmployeeMapperPlus.getEmpsByDeptId"                        column="{deptId=id}"&gt;&lt;/collection&gt;        &lt;/resultMap&gt;        &lt;!--        扩展：多列的值传递过去            将多列的值封装map传递            column="{key1=column1,key2=column2}"                fetchType="lazy":表示延迟加载                    -  lazy  ：延迟                    -  eager ；立即加载    --&gt;    &lt;!--    public List&lt;Employee&gt; getEmpsByDeptId(Integer id);--&gt;        &lt;select id="getEmpsByDeptId" resultType="employee"&gt;            select * from tbl_employee where d_id =#{deptId}        &lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="discriminator鉴别器"><a href="#discriminator鉴别器" class="headerlink" title="discriminator鉴别器"></a>discriminator鉴别器</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--  discriminator      鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变其封装行为            封装Employee：                如果是女生，就把部门信息查询出来                如果是男生，把last_name赋值给email  --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyEmpDis<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--        discriminator中的属性                column：指定判定的列名                javaType：列值对应的java类型--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>discriminator</span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>string<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--            1是男生，0是女生，resultType指定封装的结果类型--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span>                             <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.dao.DepartmentMapper.getDeptById<span class="token punctuation">"</span></span>                             <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>d_id<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>case</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>last_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>case</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>discriminator</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3、动态SQL"><a href="#3、动态SQL" class="headerlink" title="3、动态SQL"></a>3、动态SQL</h2><pre class="line-numbers language-none"><code class="language-none">&lt;!--     if     choose (when, otherwise)     trim (where(封装查询条件), set（封装修改条件）)     foreach--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><h3 id="If"><a href="#If" class="headerlink" title="If"></a>If</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    //查询携带了哪个字段就带上哪个字段的值--&gt;</span><span class="token comment">&lt;!--    public List&lt;Employee&gt; getEmpsByConditionIf(Employee employee);--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpsByConditionIf<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from tbl_employee        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--参照OGNL表达式--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                id=#{id}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName!=null and lastName!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and last_name like #{lastName}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email!=null and email.trim()!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and email=#{email}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--ognl会自动转换数字与字符串--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender==0 or gender==1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                and gender=#{gender}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h3><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    public List&lt;Employee&gt; getEmpsByConditionChoose(Employee employee);--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpsByConditionChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from tbl_employee        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--如果带了id就用id查，带了lastName就用lastName查，只进入其中一个--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    id=#{id}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    last_name=#{lastName}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    email=#{email}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">&gt;</span></span>                    gender=0                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="trim、where、set"><a href="#trim、where、set" class="headerlink" title="trim、where、set"></a>trim、where、set</h3><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><p>如果 <em>where</em> 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。比如，和 <em>where</em> 元素等价的自定义 trim 元素为：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WHERE<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AND |OR <span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    public List&lt;Employee&gt; getEmpsByConditionTrim(Employee employee);--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpsByConditionTrim<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from tbl_employee        <span class="token comment">&lt;!--后面多出来的and和or，where标签不能解决，利用trim            prefix="" :前缀，trim标签体中的结果是整个字符串拼接后的结果                        prefix给拼串后的整个字符串加前缀            prefixOverrides="" 前缀覆盖，去掉整个字符串前面多于的字符串            suffix=""：后缀，trim标签体中的结果是整个字符串拼接后的结果                        suffix给拼串后的整个字符串加后缀            suffixOverrides=""：后缀覆盖，去掉整个字符串后面多于的字符串        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>and<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--参照OGNL表达式--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                id=#{id} and            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName!=null and lastName!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                last_name like #{lastName} and            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email!=null and email.trim()!=<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                email=#{email} and            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--ognl会自动转换数字与字符串--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender==0 or gender==1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                gender=#{gender}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    public void updateEmp(Employee employee);        测试set--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateEmp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        update tbl_employee        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                last_name=#{lastName},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                email=#{email},            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                gender=#{gender}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">&gt;</span></span>        where id=#{id}        <span class="token comment">&lt;!--            update tbl_employee            &lt;trim prefix="set" suffixOverrides=","&gt;                &lt;if test="lastName!=null"&gt;                last_name=#{lastName},             &lt;/if&gt;             &lt;if test="email!=null"&gt;                email=#{email},             &lt;/if&gt;             &lt;if test="gender!=null"&gt;                gender=#{gender}             &lt;/if&gt;            &lt;/trim&gt;            where id=#{id}        --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    public List&lt;Employee&gt; getEmpsByConditionForeach(List&lt;Integer&gt; ids)--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpsByConditionForeach<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        select * from tbl_employee where id in        <span class="token comment">&lt;!--            collection:指定要遍历的集合：                   list类型的参数会特殊处理封装在map中，map的key叫list            item ：将当前遍历出的元素赋值给指定的变量            separator:元素之间的分隔符            open:遍历出所有的结果后拼接一个开始的字符            index:索引，遍历list时是索引                        如果遍历map时，index表示map的key，item即是值，例如有index=“index”用#{index}即可取出key            #{变量名}就能取出变量的值，也就是当前遍历的元素        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ids<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item_id<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span>                  <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            #{item_id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    foreach进行批量保存        插入多条记录时需要遍历，故使用foreach        插入单条记录直接用insert--&gt;</span><span class="token comment">&lt;!--    public void addEmps(List&lt;Employee&gt; emps);--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addEmps<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        insert into tbl_employee(last_name,email,gender,d_id)        values        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    这种方式需要连接数据库时配置allowMultiQueries=true--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addEmps2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emps<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            insert into tbl_employee(last_name,email,gender,d_id)            values(#{emp.lastName},#{emp.email},#{emp.gender},#{emp.dept.id})        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="两个内置参数"><a href="#两个内置参数" class="headerlink" title="两个内置参数"></a>两个内置参数</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--     两个内置参数：        _parameter:代表整个参数         单个参数：_parameter就是这个参数         多个参数：参数会被封装为一个map；_parameter就是代表这个map,        _databaseId:如果配置了databaseIdProvider标签。         _databaseId就是代表当前数据库的别名oracle--&gt;</span><span class="token comment">&lt;!--    public List&lt;Employee&gt; getEmpsTestInnerParameter(Employee employee,String lastName);--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpsTestInnerParameter<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_databaseId==<span class="token punctuation">'</span>mysql<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            select * from tbl_employee            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_parameter.get(<span class="token punctuation">'</span>arg0<span class="token punctuation">'</span>)!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                where last_name like #{arg1}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpsTestInnerParameter2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--bind：可以把OGNL表达式的值绑定在一个变量中，方便后来引用这个变量的值--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_lastName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span>+lastName+<span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_databaseId==<span class="token punctuation">'</span>mysql<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            select * from tbl_employee            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_parameter.get(<span class="token punctuation">'</span>arg0<span class="token punctuation">'</span>)!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                where last_name like #{_lastName}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sql片段抽取"><a href="#sql片段抽取" class="headerlink" title="sql片段抽取"></a>sql片段抽取</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    抽取可重用的sql片段，方便后面引用    引用时直接用&lt;include&gt;标签引用sql标签内容    1.经常将要查询的列名，或要插入的列名抽取出来，方便引用    2.引用时直接用&lt;include&gt;标签引用sql标签内容    3.include还可以自定义一些property，sql标签内部就能使用自定义的属性            include-property：取值的正确方式${prop},            #{不能使用这种方式}    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertColumn<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        employee_id,last_name,email    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bind绑定"><a href="#bind绑定" class="headerlink" title="bind绑定"></a>bind绑定</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    public List&lt;Employee&gt; getEmpsTestInnerParameter2(Employee employee,@Param("lastName") String lastName);--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>getEmpsTestInnerParameter2<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--bind：可以把OGNL表达式的值绑定在一个变量中，方便后来引用这个变量的值--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_lastName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>%<span class="token punctuation">'</span>+lastName+<span class="token punctuation">'</span>%<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_databaseId==<span class="token punctuation">'</span>mysql<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            select * from tbl_employee            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_parameter.get(<span class="token punctuation">'</span>arg0<span class="token punctuation">'</span>)!=null<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                where last_name like #{_lastName}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4、缓存"><a href="#4、缓存" class="headerlink" title="4、缓存"></a>4、缓存</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 两级缓存： * 一级缓存：（本地缓存）：sqlSession级别的缓存。一级缓存是一直开启的；SqlSession级别的一个Map *        与数据库同一次会话期间查询到的数据会放在本地缓存中。 *        以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库； * *        一级缓存失效情况（没有使用到当前一级缓存的情况，效果就是，还需要再向数据库发出查询）： *        1、sqlSession不同。 *        2、sqlSession相同，查询条件不同.(当前一级缓存中还没有这个数据) *        3、sqlSession相同，两次查询之间执行了增删改操作(这次增删改可能对当前数据有影响) *        4、sqlSession相同，手动清除了一级缓存（缓存清空） * *二级缓存：（全局缓存）：基于namespace级别的缓存：一个namespace对应一个二级缓存： *      工作机制： *      1、一个会话，查询一条数据，这个数据就会被放在当前会话的一级缓存中； *        2、如果会话关闭；一级缓存中的数据会被保存到二级缓存中；新的会话查询信息，就可以参照二级缓存中的内容； *        3、sqlSession===EmployeeMapper==&gt;Employee *                       DepartmentMapper===&gt;Department *              不同namespace查出的数据会放在自己对应的缓存中（map） *              效果：数据会从二级缓存中获取 *                 查出的数据都会被默认先放在一级缓存中。 *                 只有会话提交或者关闭以后，一级缓存中的数据才会转移到二级缓存中 *           使用： *              1）、开启全局二级缓存配置：&lt;setting name="cacheEnabled" value="true"/&gt; *              2）、去mapper.xml中配置使用二级缓存： *                 &lt;cache&gt;&lt;/cache&gt; *              3）、我们的POJO需要实现序列化接口 * **/</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFirstLevelCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">EmployeeMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmployeeMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Employee</span> emp01 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectEmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp01<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//xxxxx</span>            <span class="token comment">//1、sqlSession不同。</span>            <span class="token comment">//SqlSession openSession2 = sqlSessionFactory.openSession();</span>            <span class="token comment">//EmployeeMapper mapper2 = openSession2.getMapper(EmployeeMapper.class);</span>            <span class="token comment">//2、sqlSession相同，查询条件不同</span>            <span class="token comment">//3、sqlSession相同，两次查询之间执行了增删改操作(这次增删改可能对当前数据有影响)</span>            <span class="token comment">//mapper.addEmp(new Employee(null, "testCache", "cache", "1"));</span>            <span class="token comment">//System.out.println("数据添加成功");</span>            <span class="token comment">//4、sqlSession相同，手动清除了一级缓存（缓存清空）</span>            <span class="token comment">//openSession.clearCache();</span>            <span class="token class-name">Employee</span> emp02 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectEmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Employee emp03 = mapper.getEmpById(3);</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp02<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//System.out.println(emp03);</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp01<span class="token operator">==</span>emp02<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//openSession2.close();</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSecondLevelCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSession</span> sqlSession1 <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">EmployeeMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmployeeMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">EmployeeMapper</span> mapper2 <span class="token operator">=</span> sqlSession1<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmployeeMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Employee</span> emp01 <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectEmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp01<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第二次查询是从二级缓存中拿到的数据，并没有发送新的sql</span>            <span class="token comment">//mapper2.addEmp(new Employee(null, "aaa", "nnn", "0"));</span>            <span class="token class-name">Employee</span> emp02 <span class="token operator">=</span> mapper2<span class="token punctuation">.</span><span class="token function">selectEmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp02<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSession1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/01/4019537ded6120db.png"></p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    &lt;cache eviction="FIFO" flushInterval="60000" readOnly="false" size="1024"&gt;&lt;/cache&gt;--&gt;</span>    <span class="token comment">&lt;!--   eviction:缓存的回收策略：      • LRU – 最近最少使用的：移除最长时间不被使用的对象。      • FIFO – 先进先出：按对象进入缓存的顺序来移除它们。      • SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。      • WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。      • 默认的是 LRU。   flushInterval：缓存刷新间隔      缓存多长时间清空一次，默认不清空，设置一个毫秒值   readOnly:是否只读：      true：只读；mybatis认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。             mybatis为了加快获取速度，直接就会将数据在缓存中的引用交给用户。不安全，速度快      false：非只读：mybatis觉得获取的数据可能会被修改。            mybatis会利用序列化&amp;反序列的技术克隆一份新的数据给你。安全，速度慢   size：缓存存放多少元素；   type=""：指定自定义缓存的全类名；         实现Cache接口即可；   --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2022/01/b5f9d6e36e33eb24.png"></p><h3 id="第三方缓存整合mybatis"><a href="#第三方缓存整合mybatis" class="headerlink" title="第三方缓存整合mybatis"></a>第三方缓存整合mybatis</h3><p>可具体看mybatis的子项目例如，ehcache，redis-cache</p><h2 id="5、逆向工程"><a href="#5、逆向工程" class="headerlink" title="5、逆向工程"></a>5、逆向工程</h2><p><img src="https://s3.bmp.ovh/imgs/2022/01/d59e766ef9573d10.png"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span>        <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DB2Tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        jdbcConnection:指定如何连到数据库的--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbc:mysql://47.98.219.40:3306/mybatis<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Asd123!@#<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        &lt;javaTypeResolver&gt; 元素用于定义 Java 类型解析器的属性            详情看官方文档        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span> <span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        javaModelGenerator:指定javaBean生成策略            targetPackage:目标包名            targetProject:目标工程            --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.bean<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--            sqlMapGenerator：sql映射生成策略--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span>  <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\resources<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        指定mapper接口所在位置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mybatis.dao<span class="token punctuation">"</span></span>  <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.\src\main\java<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        table:指定要逆向分析哪些表,根据这些表创建javaBean--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tbl_dept<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Department<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tbl_employee<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMbg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> warnings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> overwrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> configFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src\\main\\resources\\mbg.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ConfigurationParser</span> cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationParser</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Configuration</span> config <span class="token operator">=</span> cp<span class="token punctuation">.</span><span class="token function">parseConfiguration</span><span class="token punctuation">(</span>configFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DefaultShellCallback</span> callback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultShellCallback</span><span class="token punctuation">(</span>overwrite<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MyBatisGenerator</span> myBatisGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBatisGenerator</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>    myBatisGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMyBatis3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">EmployeeMapper</span> mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">EmployeeMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//xxxExample是封装查询条件的</span>            <span class="token comment">//1.查询所有</span><span class="token comment">//            List&lt;Employee&gt; emps=mapper.selectByExample(null);</span><span class="token comment">//            emps.forEach(System.out::println);</span>            <span class="token comment">//2.查询带有条件的</span>                <span class="token comment">//封装员工查询条件的example</span>            <span class="token class-name">EmployeeExample</span> employeeExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmployeeExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            EmployeeExample.Criteria就是拼装查询条件的</span>            <span class="token class-name">EmployeeExample<span class="token punctuation">.</span>Criteria</span> criteria <span class="token operator">=</span> employeeExample<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            criteria<span class="token punctuation">.</span><span class="token function">andLastNameLike</span><span class="token punctuation">(</span><span class="token string">"%e%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            criteria<span class="token punctuation">.</span><span class="token function">andGenderEqualTo</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">EmployeeExample<span class="token punctuation">.</span>Criteria</span> criteria1 <span class="token operator">=</span> employeeExample<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            criteria1<span class="token punctuation">.</span><span class="token function">andEmailLike</span><span class="token punctuation">(</span><span class="token string">"%e%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            employeeExample<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>criteria1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> emps<span class="token operator">=</span>mapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>employeeExample<span class="token punctuation">)</span><span class="token punctuation">;</span>            emps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-Mybatis运行流程总结"><a href="#6-Mybatis运行流程总结" class="headerlink" title="6.Mybatis运行流程总结"></a>6.Mybatis运行流程总结</h2><p><img src="https://s3.bmp.ovh/imgs/2022/01/145680865b3f5678.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 1、获取sqlSessionFactory对象: * 解析文件的每一个信息保存在Configuration中，返回包含Configuration的DefaultSqlSession； * 注意：【MappedStatement】：代表一个增删改查的详细信息 *  * 2、获取sqlSession对象 * 返回一个DefaultSQlSession对象，包含Executor和Configuration; * 这一步会创建Executor对象； *  * 3、获取接口的代理对象（MapperProxy） * getMapper，使用MapperProxyFactory创建一个MapperProxy的代理对象 * 代理对象里面包含了，DefaultSqlSession（Executor） * 4、执行增删改查方法 *  * 总结： * 1、根据配置文件（全局，sql映射）初始化出Configuration对象 * 2、创建一个DefaultSqlSession对象， * 他里面包含Configuration以及 * Executor（根据全局配置文件中的defaultExecutorType创建出对应的Executor） *  3、DefaultSqlSession.getMapper（）：拿到Mapper接口对应的MapperProxy； *  4、MapperProxy里面有（DefaultSqlSession）； *  5、执行增删改查方法： *  1）、调用DefaultSqlSession的增删改查（Executor）； *  2）、会创建一个StatementHandler对象。 *  （同时也会创建出ParameterHandler和ResultSetHandler） *  3）、调用StatementHandler预编译参数以及设置参数值; *  使用ParameterHandler来给sql设置参数 *  4）、调用StatementHandler的增删改查方法； *  5）、ResultSetHandler封装结果 *  注意： *  四大对象每个创建的时候都有一个interceptorChain.pluginAll(parameterHandler); *  * @throws IOException */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7、插件编写原理"><a href="#7、插件编写原理" class="headerlink" title="7、插件编写原理"></a>7、插件编写原理</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 插件原理     * 在四大对象创建的时候     * 1、每个创建出来的对象不是直接返回的，而是     * interceptorChain.pluginAll(parameterHandler);     * 2、获取到所有的Interceptor（拦截器）（插件需要实现的接口）；     * 调用interceptor.plugin(target);返回target包装后的对象     * 3、插件机制，我们可以使用插件为目标对象创建一个代理对象；AOP（面向切面）     * 我们的插件可以为四大对象创建出代理对象；     * 代理对象就可以拦截到四大对象的每一个执行；     *     public Object pluginAll(Object target) {     for (Interceptor interceptor : interceptors) {     target = interceptor.plugin(target);     }     return target;     }     */</span>    <span class="token comment">/**     * 插件编写：     * 1、编写Interceptor的实现类     * 2、使用@Intercepts注解完成插件签名     * 3、将写好的插件注册到全局配置文件中     *     */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 完成插件签名： *    告诉MyBatis当前插件用来拦截哪个对象的哪个方法 */</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span>        <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">StatementHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token string">"parameterize"</span><span class="token punctuation">,</span>args <span class="token operator">=</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Statement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * @Description:拦截目标对象的目标方法执行     * @param invocation     * @return     * @throws Throwable     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"interceptor:"</span><span class="token operator">+</span>invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//动态改变sql运行参数，查1号员工改成3号员工</span>        <span class="token class-name">Object</span> target <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//拿到：StatementHandler==&gt;ParameterHandler===&gt;parameterObject</span>        <span class="token comment">//拿到target的元数据</span>        <span class="token class-name">MetaObject</span> metaObject <span class="token operator">=</span> <span class="token class-name">SystemMetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> value <span class="token operator">=</span> metaObject<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">"parameterHandler.parameterObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MapperMethod<span class="token punctuation">.</span>ParamMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置的参数是："</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        metaObject<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"parameterHandler.parameterObject"</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> proceed <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @Description:包装目标对象，为目标对象创建代理对象     * @param target     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"plugin:"</span><span class="token operator">+</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//借助wrap方法使用当前Interceptor保证我们的目标对象</span>        <span class="token class-name">Object</span> wrap <span class="token operator">=</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//返回代理对象</span>        <span class="token keyword">return</span> wrap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @Description:将插件注册时的properties设置进来     * @param properties     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插件注册信息："</span><span class="token operator">+</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span>        <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">StatementHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token string">"parameterize"</span><span class="token punctuation">,</span>args <span class="token operator">=</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Statement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//创建动态代理的时候，是按照插件配置顺序创建层层代理对象。</span><span class="token comment">//        执行目标方法的之后，按照逆向顺序执行</span><span class="token comment">//多个插件就会产生多层代理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySecondPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mysecondplugin:"</span><span class="token operator">+</span>invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"mysecondplugin:"</span><span class="token operator">+</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> wrap <span class="token operator">=</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> wrap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8、拾遗增补"><a href="#8、拾遗增补" class="headerlink" title="8、拾遗增补"></a>8、拾遗增补</h2><p><a href="https://www.bilibili.com/video/BV1mW411M737?p=83">尚硅谷MyBatis实战教程全套完整版(初学者零基础从入门到精通,好评如潮,资料齐全)</a></p><ul><li>PageHelper插件，使用方法可参考网上</li><li>Mybatis批量操作使用BatchExcutor</li><li>Mybatis使用存储过程</li><li>Mybatis使用自定义存储类型</li></ul><p>上述内容可看视屏了解基本操作，也可看网上介绍</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC学习笔记（三）孙哥说SpringMVC</title>
      <link href="/2022/01/11/springmvc-xue-xi-bi-ji-san-sun-ge-shuo-springmvc/"/>
      <url>/2022/01/11/springmvc-xue-xi-bi-ji-san-sun-ge-shuo-springmvc/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1i541157T2?spm_id_from=333.999.0.0">孙哥说SpringMVC(Thymeleaf版) 2021年12月10日开始</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC学习笔记（二）RequestContextHolder</title>
      <link href="/2022/01/11/springmvc-xue-xi-bi-ji-er-requestcontextholder/"/>
      <url>/2022/01/11/springmvc-xue-xi-bi-ji-er-requestcontextholder/</url>
      
        <content type="html"><![CDATA[<h3 id="9、使用SpringMVC提供的方式向Session域中共享数据"><a href="#9、使用SpringMVC提供的方式向Session域中共享数据" class="headerlink" title="9、使用SpringMVC提供的方式向Session域中共享数据"></a>9、使用SpringMVC提供的方式向Session域中共享数据</h3><p><a href="https://blog.csdn.net/yelllowcong/article/details/78569522">SpringMvc之值获取Session的两种方法-yellowcong</a></p><p><a href="https://blog.csdn.net/qq_34291570/article/details/89529554">SpringMVC从session存取值三种方法</a></p><h3 id="10、RequestContextHolder"><a href="#10、RequestContextHolder" class="headerlink" title="10、RequestContextHolder"></a>10、RequestContextHolder</h3><p><a href="https://www.jianshu.com/p/80165b7743cf"></a></p><p><a href="https://cloud.tencent.com/developer/article/1497802"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring源码学习笔记（一）</title>
      <link href="/2022/01/08/spring-yuan-ma-xue-xi-bi-ji-yi/"/>
      <url>/2022/01/08/spring-yuan-ma-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记(三)注解驱动</title>
      <link href="/2022/01/04/spring-xue-xi-bi-ji-san-zhu-jie-qu-dong/"/>
      <url>/2022/01/04/spring-xue-xi-bi-ji-san-zhu-jie-qu-dong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1hE411o7w7?from=search&amp;seid=8955608675661780135&amp;spm_id_from=333.337.0.0">黑马程序员Spring注解开发教程，包含框架Spring+SpringMVC+SrpingTest+SpringDat</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记(一)</title>
      <link href="/2022/01/04/git-xue-xi-bi-ji-yi/"/>
      <url>/2022/01/04/git-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV15Y411a751?from=search&amp;seid=10810665644985041016&amp;spm_id_from=333.337.0.0">玩转Git三剑客</a></p><p><a href="https://www.bilibili.com/video/BV1pW411A7a5?from=search&amp;seid=7871170733354169787&amp;spm_id_from=333.337.0.0">尚硅谷Git与GitHub基础全套完整版教程（快速上手，一套搞定）</a></p><p><a href="https://www.bilibili.com/video/BV1tf4y1e7yt?from=search&amp;seid=7871170733354169787&amp;spm_id_from=333.337.0.0">7小时学会Git 基础全套完整教程（从入门到精通）</a></p><h2 id="本地库和远程库"><a href="#本地库和远程库" class="headerlink" title="本地库和远程库"></a>本地库和远程库</h2><h3 id="团队内部协作"><a href="#团队内部协作" class="headerlink" title="团队内部协作"></a>团队内部协作</h3><img src="https://s2.loli.net/2022/01/04/fFjwTCUiXNs4xDe.png" alt="aaa1.png" style="zoom:50%;"><h3 id="跨域团队协作"><a href="#跨域团队协作" class="headerlink" title="跨域团队协作"></a>跨域团队协作</h3><img src="https://s2.loli.net/2022/01/04/IE1G6AxeT8NFgyJ.png" alt="aaa2.png" style="zoom:50%;"><h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2><ul><li><code>git&nbsp;init&nbsp;</code></li><li>设置签名：<ul><li><code>git&nbsp;config --global user.name&nbsp;'wmdsg'</code>,<code>git config&nbsp;--global&nbsp;user.email&nbsp;'...'</code></li></ul></li></ul><h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>状态查看：<code>git&nbsp;status</code>，查看工作区，暂存区的状态</li><li>添加操作：<code>git&nbsp;add&nbsp;[file name]</code>，将工作区的“新建或修改”添加到暂存区</li><li>提交：<code>git&nbsp;commit&nbsp;-m&nbsp;"commit message"&nbsp;[file name]</code>，将暂存区的内容提交到本地库</li></ul><h3 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h3><ul><li>查看版本记录：<code>git log</code> <ul><li><img src="https://s2.loli.net/2022/01/04/aMUQn6ZwyEBsOeX.png" alt="aaa3.png"></li><li>多屏显示控制方式：空格向下翻页 ,b 向上翻页 ,q 退出(超过了自动多屏)</li></ul></li><li><code>git log --pretty=oneline</code> 每个历史只显示一行(hash值和日志)<ul><li><img src="https://s2.loli.net/2022/01/04/GkK7sYqwFaZOUxH.png" alt="aaa4.png"></li></ul></li><li><code>git log --oneline</code>  每个历史只显示一行且显示hash的部分值<ul><li><img src="https://s2.loli.net/2022/01/04/OM4NRSaxYfT5UbI.png" alt="aaa5.png"></li></ul></li><li><code>git reflog</code>  显示历史只显示一行,并且显示指针(要移动到版本多少步)<ul><li><img src="https://s2.loli.net/2022/01/04/2KXHaeEFS3I1lOq.png" alt="aaa6.png"></li><li>HEAD@{移动到当前版本需要多少步}</li></ul></li></ul><h3 id="前进后退版本"><a href="#前进后退版本" class="headerlink" title="前进后退版本"></a>前进后退版本</h3><p><strong>本质：指针移动</strong></p><ul><li><p>基于索引值操作：<code>git reset --hard [局部索引值]</code></p><ul><li><code>git reset --hard a6ace91</code></li></ul></li><li><p>使用^符号：<strong>只能后退</strong>  <code>git reset --hard HEAD^^</code>         </p><p>注：一个^表示后退一步，n 个^表示后退 n 步</p></li><li><p><em><strong>使用~符号：只能后退</strong></em></p><p><em><strong>git reset –hard HEAD~n</strong></em> 注：表示后退 n 步</p><p><em><strong>git reset –hard HEAD~3</strong></em> 表示后退3步</p></li></ul><img src="https://s2.loli.net/2022/01/04/zNKr5dMsAXgYmEO.png" alt="aaa7.png" style="zoom:67%;">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络图解Http阅读笔记(一)</title>
      <link href="/2022/01/03/ji-suan-ji-wang-luo-tu-jie-http-yue-du-bi-ji-yi/"/>
      <url>/2022/01/03/ji-suan-ji-wang-luo-tu-jie-http-yue-du-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1js411g7Fw?from=search&amp;seid=9451959679525099004&amp;spm_id_from=333.337.0.0">HTTP协议详解</a></p><p><a href="https://www.bilibili.com/video/BV1V54y1y7c4?from=search&amp;seid=9451959679525099004&amp;spm_id_from=333.337.0.0">程序员入门必备教程—HTTP协议详解（真的很经典）</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络自顶向下阅读笔记(一)</title>
      <link href="/2022/01/03/ji-suan-ji-wang-luo-zi-ding-xiang-xia-yue-du-bi-ji-yi/"/>
      <url>/2022/01/03/ji-suan-ji-wang-luo-zi-ding-xiang-xia-yue-du-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cookie与Session学习笔记</title>
      <link href="/2022/01/03/cookie-yu-session-xue-xi-bi-ji/"/>
      <url>/2022/01/03/cookie-yu-session-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1s4411z7zq?from=search&amp;seid=7677066229213104440&amp;spm_id_from=333.337.0.0">Cookie和Session视频教程（完）</a></p><p><a href="https://www.bilibili.com/video/BV1bL411j7CU?from=search&amp;seid=7677066229213104440&amp;spm_id_from=333.337.0.0">Cookie和session到底是什么关系？一节课打通！#程序员</a></p><p> <a href="https://www.cnblogs.com/ityouknow/p/10856177.html">你真的了解 Cookie 和 Session 吗?</a></p><p><a href="https://www.bilibili.com/video/BV1GU4y1773x?from=search&amp;seid=10653232962308482038&amp;spm_id_from=333.337.0.0">B站终于有人将cookie，session，token将明白了</a></p><p><a href="https://www.bilibili.com/video/BV1b3411k7H2?from=search&amp;seid=10653232962308482038&amp;spm_id_from=333.337.0.0">终于有人将cookie，session，token鉴权讲明白了，老师一节课带你精通。</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Thymeleaf学习笔记(一)</title>
      <link href="/2022/01/02/thymeleaf-xue-xi-bi-ji-yi/"/>
      <url>/2022/01/02/thymeleaf-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV14h411v7gV?from=search&amp;seid=15960451770414313339&amp;spm_id_from=333.337.0.0">Thymeleaf模板技术详解</a></p><p><a href="https://blog.csdn.net/weixin_43688691/article/details/99069150">Thymeleaf中获取作用域中的数据</a></p><p><a href="https://blog.csdn.net/weixin_43925059/article/details/106258621">pringboot集成thymeleaf——遍历各种集合</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记（二）</title>
      <link href="/2021/12/31/spring-xue-xi-bi-ji-er/"/>
      <url>/2021/12/31/spring-xue-xi-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h2 id="spring部分原始注解"><a href="#spring部分原始注解" class="headerlink" title="spring部分原始注解"></a>spring部分原始注解</h2><h3 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h3><h3 id="给Bean加初始化和销毁方法"><a href="#给Bean加初始化和销毁方法" class="headerlink" title="给Bean加初始化和销毁方法"></a>给Bean加初始化和销毁方法</h3><h2 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h2><table><thead><tr><th align="center">注解</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@Configuration</td><td align="center">用于指定当前类是一个Spring配置类，创建容器时会从该类上加载注解</td></tr><tr><td align="center">@ComponentScan</td><td align="center">用于指定Spring在初始化时要扫描的包，作用和xml配置中的注解扫描器一样</td></tr><tr><td align="center">@Bean</td><td align="center">使用在方法上，标注该方法将返回值存储到Spring容器中</td></tr><tr><td align="center">@PropertitySource</td><td align="center">用于加载外部properties文件</td></tr><tr><td align="center">@Import</td><td align="center">用于导入其他配置类</td></tr></tbody></table><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p><a href="https://juejin.cn/post/6844903842476195848">Spring管理的@Configuration注解使用</a> </p><p><a href="https://www.jianshu.com/p/721c76c1529c">Spring @Configuration 注解介绍</a></p><h3 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h3><h3 id="使用全注解配置"><a href="#使用全注解配置" class="headerlink" title="使用全注解配置"></a>使用全注解配置</h3><ul><li>首先在一个类上声明@Configuration，表名这是核心配置类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment">//表示这是spring容器的核心配置类</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"org.example"</span><span class="token punctuation">)</span>  <span class="token comment">//注解扫描器</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DataSourceConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//主配置文件中引入分配置文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在声明@ComponentScan表示注解扫描器，可以扫描那些注解配置的对象</li><li>若想新建一个数据源配置，可新建一个类，添加@PropertySource引入properties文件</li><li>再在主配置类中引入从属配置类@Import</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//&lt;context:property-placeholder location="classpath:druid.properties"/&gt;</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:jdbc2.properties"</span><span class="token punctuation">)</span> <span class="token comment">//加载外部配置文件</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.user}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.pass}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span> <span class="token comment">//Spring将会把当前方法的返回值以指定名称存储到spring容器中</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">PropertyVetoException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>driver<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DruidDataSource</span> druidDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        druidDataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> druidDataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring集成Junit"><a href="#Spring集成Junit" class="headerlink" title="Spring集成Junit"></a>Spring集成Junit</h2><ol><li>导入spring集成junit的坐标</li><li>使用@RunWith注解替换原来的运行期</li><li>使用@ContextConfiguration指定配置文件或配置类</li><li>使用@AutoWired注入要测试的对象</li><li>创建测试方法测试</li></ol><ul><li>```xml<dependency>  <groupid>org.springframework</groupid>  <artifactid>spring-test</artifactid>  <version>5.2.5.RELEASE</version>  <scope>test</scope></dependency><pre class="line-numbers language-none"><code class="language-none">- ```java  @RunWith(SpringJUnit4ClassRunner.class)  //@ContextConfiguration("classpath:applicationContext.xml")//指定配置文件  @ContextConfiguration(classes = SpringConfiguration.class)//指定配置类  public class SpringJunitTest {        @Autowired      @Qualifier("dataSource")      private DataSource dataSource;        @Test      public void testDataSource() throws SQLException {          Connection connection=dataSource.getConnection();          System.out.println(connection);          connection.close();      }  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Spring集成web环境"><a href="#Spring集成web环境" class="headerlink" title="Spring集成web环境"></a>Spring集成web环境</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet.jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他跟基本javaweb一样</p><p><img src="https://s2.loli.net/2022/01/02/4N2GjeUAfTQXxgy.png" alt="aa1.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextLoderListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContextListener.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将Springcontext对象存储到ServletContext域中</span>        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> servletContextEvent<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"context"</span><span class="token punctuation">,</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> servletContextEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充context-parame知识"><a href="#补充context-parame知识" class="headerlink" title="补充context-parame知识"></a>补充context-parame知识</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>参数名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>参数值<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>//该元素用来声明应用范围(整个WEB项目)内的上下文初始化参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化过程：</p><ol><li><p>启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml。读两个节点: <listener></listener> 和 <context-param></context-param></p></li><li><p>接着容器会创建一个ServletContext(上下文)，整个WEB项目共享这个上下文</p></li><li><p>接着容器会将读取到<context-param>转化为键值对,并交给ServletContext</context-param></p></li><li><p>容器创建<listener></listener>中的类实例，即创建监听</p></li><li><p>在监听的类中会有一个contextInitialized(ServletContextEvent event)初始化方法，在这个方法中可以通过event.getServletContext().getInitParameter(“param-name设置的值”)来得到context-param设定的值。在这个类中还必须有一个contextDestroyed(ServletContextEvent event)销毁方法.用于关闭应用前释放资源，比如说数据库连接的关闭。</p></li><li><p>得到这个context-param的值之后,你就可以做一些操作了。注意,这个时候你的WEB项目还没有完全启动完成。这个动作会比所有的Servlet都要早。换句话说,这个时候,你对<context-param>中的键值做的操作,将在你的WEB项目完全启动之前被执行。</context-param></p></li><li><p>此处说明一下web.xml 的加载顺序：</p><p><em><strong>*context-param -&gt; listener -&gt; filter -&gt; servlet*</strong></em> ，而同个类型之间的实际程序调用的时候的顺序是根据对应的 mapping的顺序进行调用的。</p></li></ol><p>context-param和init-param区别：</p><p>application范围内的参数，存放在servletcontext中，在web.xml中配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>context/param<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>avalible during application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>servlet范围内的参数，只能在servlet的init()方法中取得，在web.xml中配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>myServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.anjz.web.servlet.MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>param1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>avalible in servlet init()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种参数在servlet里面可以通过getServletContext().getInitParameter(“context/param”)得到。<br>第二种参数只能在servlet的init()方法中通过this.getInitParameter(“param1”)取得。</p><h3 id="优化一：配置文件解耦"><a href="#优化一：配置文件解耦" class="headerlink" title="优化一：配置文件解耦"></a>优化一：配置文件解耦</h3><p>可以利用context-parame在web.xml中设置配置文件的值，在监听器中读取该值，创建spring应用上下文对象。</p><h3 id="Spring提供的获取应用上下文的工具"><a href="#Spring提供的获取应用上下文的工具" class="headerlink" title="Spring提供的获取应用上下文的工具"></a>Spring提供的获取应用上下文的工具</h3><p>上面的优化不要手动实现，Spring提供一个监听器CntextLoaderListener就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，提供一个客户端工具WebApplicationContextUtils供使用者获得该ApplicationContext对象。</p><p>我们要做的只有下面的事：</p><ul><li>在web.xml中配置ContextLoaderListener监听器（导入spring-web坐标）</li><li>使用WebApplicaitonContextUtils获得对象</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--如下配置Spring提供的ContextLoaderListener监听器--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfiguration<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>spring继承web环境步骤：</p><ol><li>配置ContextLoaderListener监听器（在此之前导入spring-web依赖）</li><li>使用WebApplicationContextUtils获取上下文</li></ol><h2 id="内部bean注入与级联赋值"><a href="#内部bean注入与级联赋值" class="headerlink" title="内部bean注入与级联赋值"></a>内部bean注入与级联赋值</h2><p><a href="https://python.iitter.com/other/146253.html">内部bean注入与级联赋值</a></p><h2 id="WebApplicationContext-介绍"><a href="#WebApplicationContext-介绍" class="headerlink" title="WebApplicationContext 介绍"></a>WebApplicationContext 介绍</h2><p><a href="https://blog.csdn.net/u012385190/article/details/81368172">Spring WebApplicationContext 介绍</a></p><p><a href="https://blog.csdn.net/yangshangwei/article/details/74962133">Spring-WebApplicationContext解读</a></p><h2 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h2><p><a href="https://www.cnblogs.com/aspirant/p/9082858.html">BeanFactory 简介以及它 和FactoryBean的区别(阿里面试)</a></p><h2 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h2><p><a href="https://www.cnblogs.com/caoyc/p/5630622.html">JdbcTemplate简介</a></p><h2 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h2><p><a href="http://itmyhome.com/spring/expressions.html">8. Spring 表达式语言 (SpEL)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性补充-Java8实战(一)</title>
      <link href="/2021/12/26/java8-xin-te-xing-bu-chong-java8-shi-zhan-yi/"/>
      <url>/2021/12/26/java8-xin-te-xing-bu-chong-java8-shi-zhan-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="复合Lambda表达式"><a href="#复合Lambda表达式" class="headerlink" title="复合Lambda表达式"></a>复合Lambda表达式</h2><p>许多函数式接口，比如用于传递Lambda表达式的Comparator，Function，Predicate都提供了允许你复合的方法，这意味着你可以把多个简单的Lambda复合成复杂的表达式。</p><h3 id="比较器复合"><a href="#比较器复合" class="headerlink" title="比较器复合"></a>比较器复合</h3><p><code>Comparator&lt;Apple&gt;&nbsp;c=Comparator.comparing(Apple::getWeight)</code></p><ol><li>如果对苹果逆序排列怎么搞，Comparator接口中有一个默认方法reversed可以使给定的比较器逆序。<code>inventory.sort(comparing(Apple::getWeight).reversed())</code>。</li><li><strong>比较器链</strong>*：要是两个苹果一样重怎么搞，<code>thenComparing</code>就是用来处理的。他接受一个函数作为参数，如果两个对象用第一个Comparator比较是一样的，就提供第二个Comparator。<ol><li><code>inventory.sort(comparing(Apple::getWeight)).reversed().thenComparing(Apple::getCountry)</code></li></ol></li></ol><h3 id="谓词复合"><a href="#谓词复合" class="headerlink" title="谓词复合"></a>谓词复合</h3><ol><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程ThreadLocal剖析</title>
      <link href="/2021/12/25/java-bing-fa-bian-cheng-threadlocal-pou-xi/"/>
      <url>/2021/12/25/java-bing-fa-bian-cheng-threadlocal-pou-xi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV17v411N71j?p=2">【直击要害】阿里P8架构师带你深度剖析ThreadLocal，实现原理、使用场景、源码分析……全场干货！超详细！_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1fA411b7SX?from=search&amp;seid=18107784017580251977&amp;spm_id_from=333.337.0.0">只有马士兵老师能把ThreadLocal底层原理、内存泄漏分析的这么测透_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1SD4y1D7r2?from=search&amp;seid=18107784017580251977&amp;spm_id_from=333.337.0.0">【真实工作场景】中怎么用ThreadLocal_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1N741127FH?from=search&amp;seid=18107784017580251977&amp;spm_id_from=333.337.0.0">黑马程序员Java基础教程由浅入深全面解析threadlocal_哔哩哔哩_bilibili</a></p><p><a href="https://zhuanlan.zhihu.com/p/102744180">ThreadLocal，一篇文章就够了 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/192997550">ThreadLocal是什么？怎么用？为什么用它？有什么缺点？ - 知乎 (zhihu.com)</a></p><p><a href="https://www.jianshu.com/p/6fc3bba12f38">ThreadLocal作用、场景、原理 - 简书 (jianshu.com)</a></p><p><a href="http://www.threadlocal.cn/">一针见血ThreadLocal</a></p><p><a href="https://www.cnblogs.com/dolphin0520/p/3920407.html">Java并发编程：深入剖析ThreadLocal - Matrix海子 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程线程池源码解析（一）</title>
      <link href="/2021/12/25/java-bing-fa-bian-cheng-xian-cheng-chi-yuan-ma-jie-xi-yi/"/>
      <url>/2021/12/25/java-bing-fa-bian-cheng-xian-cheng-chi-yuan-ma-jie-xi-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程之Callable与Future学习</title>
      <link href="/2021/12/25/java-bing-fa-bian-cheng-zhi-callable-yu-future-xue-xi/"/>
      <url>/2021/12/25/java-bing-fa-bian-cheng-zhi-callable-yu-future-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程之fork-join框架学习</title>
      <link href="/2021/12/25/java-bing-fa-bian-cheng-zhi-fork-join-kuang-jia-xue-xi/"/>
      <url>/2021/12/25/java-bing-fa-bian-cheng-zhi-fork-join-kuang-jia-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性（二）Stream API</title>
      <link href="/2021/12/23/java8-xin-te-xing-er-stream-api/"/>
      <url>/2021/12/23/java8-xin-te-xing-er-stream-api/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Stream是Java8中处理集合的关键抽象概念，他可以指定你希望对集合进行的操作，可以执行非常复杂的查找，过滤和映射数据的操作。使用Stream API对集合数据进行操作，类似于使用SQL执行数据库查询，也可以使用Stream API来并行执行操作。</p><p>流是数据渠道，用于操作数据源。</p><ul><li>流不会自己存储数据</li><li>Stream不会改变源对象，他会返回一个具有新结果的流。</li><li>Stream操作时延迟的，意味着他们会等到需要结果时才执行。</li></ul><img src="https://s2.loli.net/2021/12/23/KmuxiAJ3qSdVgYL.png" alt="astream1.png" style="zoom:67%;">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb复习总结（一）</title>
      <link href="/2021/12/22/javaweb-fu-xi-zong-jie-yi/"/>
      <url>/2021/12/22/javaweb-fu-xi-zong-jie-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="servlet体系"><a href="#servlet体系" class="headerlink" title="servlet体系"></a>servlet体系</h2><h3 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h3><p>将servlet接口中其他方法做了默认空实现，定义servlet时可以继承，实现service</p><h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><p>对http协议的封装，继承了GenericServlet    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程之volatile重排序的理解</title>
      <link href="/2021/12/19/java-bing-fa-bian-cheng-zhi-volatile-chong-pai-xu-de-li-jie/"/>
      <url>/2021/12/19/java-bing-fa-bian-cheng-zhi-volatile-chong-pai-xu-de-li-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程之final与线程安全</title>
      <link href="/2021/12/19/java-bing-fa-bian-cheng-zhi-final-yu-xian-cheng-an-quan/"/>
      <url>/2021/12/19/java-bing-fa-bian-cheng-zhi-final-yu-xian-cheng-an-quan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程之StringBuilder与StringBuffer</title>
      <link href="/2021/12/19/java-bing-fa-bian-cheng-zhi-stringbuilder-yu-stringbuffer/"/>
      <url>/2021/12/19/java-bing-fa-bian-cheng-zhi-stringbuilder-yu-stringbuffer/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程之重排序笔记（一）</title>
      <link href="/2021/12/14/java-bing-fa-bian-cheng-zhi-chong-pai-xu-bi-ji-yi/"/>
      <url>/2021/12/14/java-bing-fa-bian-cheng-zhi-chong-pai-xu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xmmarlowe.github.io/2021/04/28/%E5%B9%B6%E5%8F%91/as-if-serial%E8%A7%84%E5%88%99%E5%92%8Chappens-before%E8%A7%84%E5%88%99/">as-if-serial规则和happens-before规则</a></p><p><a href="https://www.kancloud.cn/luoyoub/jvm-note/1890152">as-if-serial语义· jvm学习笔记 - 看云</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程之Java内存模型笔记（一）</title>
      <link href="/2021/12/14/java-bing-fa-bian-cheng-zhi-java-nei-cun-mo-xing-bi-ji-yi/"/>
      <url>/2021/12/14/java-bing-fa-bian-cheng-zhi-java-nei-cun-mo-xing-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/29881777">Java内存模型（JMM）总结</a></p><p><a href="https://zhuanlan.zhihu.com/p/58387104">Java 内存模型 ，一篇就够了！</a></p><p><a href="https://blog.csdn.net/javazejian/article/details/72772461">全面理解Java内存模型(JMM)及volatile关键字</a></p><p><a href="https://www.google.com.hk/search?q=java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B&amp;oq=java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B&amp;aqs=chrome..69i57j0i12i512l2j0i512j0i30l2.2089j0j15&amp;sourceid=chrome&amp;ie=UTF-8">java内存模型</a></p><p><a href="http://ifeve.com/jmm-cookbook-mb/">Java内存模型Cookbook（二）内存屏障</a></p><p><a href="http://gee.cs.oswego.edu/dl/jmm/cookbook.html">The JSR-133 Cookbook for Compiler Writers</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程HashMap源码笔记（一）</title>
      <link href="/2021/12/13/java-bing-fa-bian-cheng-hashmap-yuan-ma-bi-ji-yi/"/>
      <url>/2021/12/13/java-bing-fa-bian-cheng-hashmap-yuan-ma-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1H64y1X7yM?from=search&amp;seid=11357541238480938453&amp;spm_id_from=333.337.0.0">我敢说这是B站最详细的hashmap及ConcurrentHashMap底层原理解析，16个小时带</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程面试笔记(一)</title>
      <link href="/2021/12/13/java-bing-fa-bian-cheng-mian-shi-bi-ji-yi/"/>
      <url>/2021/12/13/java-bing-fa-bian-cheng-mian-shi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1F64y1b72p?from=search&amp;seid=236539970777791078&amp;spm_id_from=333.337.0.0">java面试知识点 之 CAS&amp;ABA问题</a></p><p><a href="https://space.bilibili.com/356571948/video"><strong>宝哥chbxw</strong></a></p><p><a href="https://www.bilibili.com/video/BV1kE411u7bj?from=search&amp;seid=10381573058838145833&amp;spm_id_from=333.337.0.0">【面试必问】Java并发基石-CAS原理实战 超详细 超多案例 全B站最牛版</a></p><p><a href="https://www.bilibili.com/video/BV1vt4y127Zq?from=search&amp;seid=10381573058838145833&amp;spm_id_from=333.337.0.0">java高并发，volatil关键字，CAS原理，AQS原理，阿里巴巴面试题，面试讲解系列（十五）</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程ThreadGroup分析（一）</title>
      <link href="/2021/12/12/java-bing-fa-bian-cheng-threadgroup-fen-xi-yi/"/>
      <url>/2021/12/12/java-bing-fa-bian-cheng-threadgroup-fen-xi-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/leoliu168/p/9928569.html">Java并发编程之ThreadGroup</a></p><p><a href="https://www.helloworld.net/p/7111439056">Java并发编程之：ThreadGroup</a></p><p><a href="https://juejin.cn/post/6844904085762605069">Java 并发编程(三) – ThreadGroup源码分析</a></p><p>更多优质博客可上网搜素</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程synchronized实现原理（一）</title>
      <link href="/2021/12/12/java-bing-fa-bian-cheng-synchronized-shi-xian-yuan-li-yi/"/>
      <url>/2021/12/12/java-bing-fa-bian-cheng-synchronized-shi-xian-yuan-li-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/75880892">深入理解synchronized底层原理，一篇文章就够了！</a></p><p><a href="https://blog.csdn.net/javazejian/article/details/72828483">深入理解Java并发之synchronized实现原理</a></p><p> <a href="https://www.cnblogs.com/aobing/p/12906927.html">死磕synchronized底层实现 </a></p><p><a href="https://juejin.cn/post/6844903726545633287">死磕Synchronized底层实现–概论</a></p><p><a href="https://www.google.com/search?q=synchronized+%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0&amp;oq=synchronized&amp;aqs=chrome.1.69i57j0i512l9.7537j0j15&amp;sourceid=chrome&amp;ie=UTF-8">synchronized 底层实现</a></p><p><a href="https://www.bilibili.com/video/BV1aJ411V763?p=15">Java面试热点问题，synchronized原理剖析与优化</a></p><p><a href="https://www.bilibili.com/video/BV1uy4y1k7Uf?p=1">【面试】Synchronized面试指导，下次面试绝对会用上，涨薪5000不是问题！</a></p><p><a href="https://www.bilibili.com/video/BV1AJ411y7yM?from=search&amp;seid=12335681693583579929&amp;spm_id_from=333.337.0.0">最新Java高并发编程全集（synchronized关键字与reentrantlock全解析）</a></p><p><a href="https://www.bilibili.com/video/BV1aJ411q7rT?from=search&amp;seid=12335681693583579929&amp;spm_id_from=333.337.0.0">这可能是B站上最深入解析的synchronized底层原理解析</a></p><p>主要参考：</p><p><a href="https://github.com/farmerjohngit/myblog/issues/13">死磕Synchronized底层实现–偏向锁</a></p><h2 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h2><p>在Java虚拟机中，普通对象在内存中分三块区域：对象头，实例数据，对齐填充数据。对象头包括markword和类型指针Klass_Word ,实例数据不用说了，padding就是为了保证对象大小为8字节的倍数，我们来具体说一下对象头的数据。</p><p>synchronized用的锁时存在Java对象头里的。如下图，以32位虚拟机为例</p><p>普通对象：</p><img src="https://s2.loli.net/2021/12/21/zxah6bWHZfTyRg2.png" alt="ahea.png" style="zoom:80%;"><p>数组对象：</p><img src="https://s2.loli.net/2021/12/21/Sl7h8IsWuemJCzo.png" alt="ahea.png" style="zoom:80%;"><p>而用到的锁的关键数据又是存在mark word里的。</p><h3 id="mark-word"><a href="#mark-word" class="headerlink" title="mark word"></a>mark word</h3><p><img src="https://s2.loli.net/2021/12/21/KH213hpJv8VAiWj.jpg" alt="aheac.jpg"></p><img src="https://s2.loli.net/2021/12/21/FznDtcHe7OBsPJr.jpg" alt="ahead.jpg" style="zoom:50%;"><p>mark word里在无锁的状态下32位依此存的是对象的hashcode占25bit，对象分代年龄4bit，1bit表示是否是偏向锁，最后两位是锁标志位。</p><p>在运行过程中，里面的数据会随着锁标志位的变化而变化，具体如下：</p><ul><li>当为偏向锁时前23位是偏向线程的ID，紧接着是2位的Epoch，然后4位的对象分代年龄，1位的偏向锁标记，最后两位锁标志位。</li><li>当为轻量级锁时，前30位表示当前线程栈帧中用于存储锁记录的地址，即一个指向锁记录的地址。</li><li>当为重量级锁时，前30位是操作系统提供的Monitor监视器对象的地址，也是一个指针。</li></ul><p>总结如下：</p><img src="https://s2.loli.net/2021/12/21/V6hZquIPTjr3BL9.png" alt="aheae.png" style="zoom:67%;"><h3 id="Klass-word"><a href="#Klass-word" class="headerlink" title="Klass word"></a>Klass word</h3><p>这个数据是用来标识对象是什么类型的，即指向该对象的Class对象。</p><h2 id="Monitor对象"><a href="#Monitor对象" class="headerlink" title="Monitor对象"></a>Monitor对象</h2><p>在最初的版本中synchronized关键字的实现原理是依赖这个Monitor对象（重量级锁），Monitor是操作系统的一种高级原语，JVM基于进入和退出Monitor对象实现方法同步和代码块同步，但两者实现细节不同，代码块同步是使用monitorenter和monitorexit指令实现的，而方法同步在JVM规范里并没有详细说明，但方法的同步仍然可以使用这两个指令实现。</p><p>monitorenter指令是在编译后插入到同步代码块开始位置，而monitorexit是插入到方法结束和异常处，JVM保证每个monitorenter必须有对应的monitorexit与之配对，任何对象都有一个monitor对象与之关联。当且一个monitor被持有后，它将处于锁定状态，线程执行monitorenter指令时，就会尝试获取对象的monitor所有权，即锁。</p><p>那具体来说，monitor对象是如何在同步代码块中起作用的呢？看如下图：</p><p><img src="https://s2.loli.net/2021/12/21/7N2VXhGROkaBQu4.png" alt="amonitor1.png"></p><img src="https://s2.loli.net/2021/12/21/1VqxRiZCSHoeWGP.png" alt="amonitor2.png" style="zoom:50%;"><p>我们模拟对一个对象加锁的过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>当一个线程比如Thread-2要获得对象obj的对象锁，他会首先检查obj对象是否关联了一个monitor对象，若没有表明没有线程获取到这个对象的锁，此时当前线程会向操作系统申请一个monitor对象，并将无锁（==暂且说他是无锁状态，实际上可能是处于偏向锁==）状态的mark_work前30位赋值为monitor对象的地址，即指向这个monitor对象。这个新生成的monitor对象的Owner值为null，此时当前线程会将它赋值为自己，这个过程表名此线程获得了对象锁。若在执行同步代码块的过程中，没有线程来竞争这个锁，那在执行完后将会恢复mark_word的值即返回为hashcode，分代年龄等值；若在执行过程中有线程来竞争这个锁，他同样会执行相同的过程，检查是否关联了monitor对象，发现关联了，检查Owner是否为null，发现不为null，便将自己防止在<code>EntryList</code>列表中，进入阻塞状态。</li><li>当执行到monitorexit时，要释放锁了，线程会唤醒在<code>EntryList</code>列表中的线程对象，让他们去重新竞争这个锁。有竞争力就必然会有公平与非公平之分，实际上它是非公平锁，即会唤醒所有线程同时去争抢这个锁。然后将Owner置为抢到锁的线程，注意这时候的mark_word状态都是重量锁状态。</li><li>你可能注意到了waitSet这个字段，它是对于那些曾经获得过锁，但因为某些条件等待，而处于waiting状态的线程，他们便会放到waitSet集合中。</li></ul><blockquote><p>注意：</p><ul><li>synchronized必须是进入同一个对象才有上述状态</li><li>不加synchronized的对象不会关联monitor对象</li></ul></blockquote><h3 id="基于字节码分析monitor加锁过程"><a href="#基于字节码分析monitor加锁过程" class="headerlink" title="基于字节码分析monitor加锁过程"></a>基于字节码分析monitor加锁过程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span> counter<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应字节码：</p><pre class="line-numbers language-none"><code class="language-none">public static void main(java.lang.String[]); descriptor: ([Ljava/lang/String;)V flags: ACC_PUBLIC, ACC_STATIC Code:    stack=2, locals=3, args_size=1    0: getstatic #2 // &lt;- lock引用 （synchronized开始）    3: dup    4: astore_1 // lock引用 -&gt; slot 1    5: monitorenter // 将 lock对象 MarkWord 置为 Monitor 指针    6: getstatic #3 // &lt;- i    9: iconst_1 // 准备常数 1    10: iadd // +1    11: putstatic #3 // -&gt; i    14: aload_1 // &lt;- lock引用    15: monitorexit // 将 lock对象 MarkWord 重置, 唤醒 EntryList    16: goto 24    19: astore_2 // e -&gt; slot 2     20: aload_1 // &lt;- lock引用    21: monitorexit // 将 lock对象 MarkWord 重置, 唤醒 EntryList    22: aload_2 // &lt;- slot 2 (e)    23: athrow // throw e    24: return    Exception table:    from to target type    6 16 19 any    19 22 19 any    LineNumberTable:    line 8: 0    line 9: 6    line 10: 14    line 11: 24    LocalVariableTable:    Start Length Slot Name Signature    0 25 0 args [Ljava/lang/String;    StackMapTable: number_of_entries = 2    frame_type = 255 /* full_frame */    offset_delta = 19    locals = [ class "[Ljava/lang/String;", class java/lang/Object ]    stack = [ class java/lang/Throwable ]    frame_type = 250 /* chop */    offset_delta = 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正常的应该是执行到monitorexit就结束了，那16-23那段代码是干什么的呢？</p><p>在字节码里有一个ExceptionTable，表示在同步代码块中如果出现异常将跳到哪。表示出现异常的话也会执行monitorexit释放锁。即程序始终会保证正确解锁。</p><h3 id="重量锁缺点"><a href="#重量锁缺点" class="headerlink" title="重量锁缺点"></a>重量锁缺点</h3><p>我们知道monitor是操作系统层面提供的原语，要使用系统调用就要保存相关寄存器，程序计数器等数据到线程的线程控制块中，执行系统调用陷入内核状态，特权级别提升，执行完加锁操作后，调用陷阱返回指令，将线程控制块中的数据恢复即程序计数器，相关寄存器等。这个过程的开销是相当昂贵的，故在Java1.6之后的版本中，为了减少锁获取和释放带来的性能消耗，引入了偏向锁，轻量级锁的优化。</p><h3 id="monitor对象补充"><a href="#monitor对象补充" class="headerlink" title="monitor对象补充"></a>monitor对象补充</h3><p>monitor对象中的关键词：</p><ul><li>EntryList</li><li>WaitList</li><li>cxq(ContentionList)</li><li>Owner</li><li>OnDeckThread</li><li>recursions</li></ul><h4 id="cxq-竞争列表"><a href="#cxq-竞争列表" class="headerlink" title="cxq(竞争列表)"></a>cxq(竞争列表)</h4><p>cxq是一个单向链表，被挂起的线程等待重新竞争锁的链表，monitor通过CAS将线程对象包装成ObjectWaiter写入列表头部。为了避免插入和取出元素的竞争，Owner会从列表尾部取元素。</p><p><img src="https://s2.loli.net/2021/12/22/dDJU2mWj6a1Bz8s.png" alt="aheai.png"></p><h4 id="EntryList（锁候选者列表）"><a href="#EntryList（锁候选者列表）" class="headerlink" title="EntryList（锁候选者列表）"></a>EntryList（锁候选者列表）</h4><p>EntryList是一个双向链表，当EntryList为空，cxq不为空时，Owner在unlock时，会将cxq中挂起的线程移动到EntryList中，并指定EntryList列表头部第一个线程为OnDeckThread。</p><p>而cxq与EntryList的区别是：cxq中的线程可以继续自旋等待锁，若达到自旋的阀值未获得锁，将会park挂起，而EntryList中的线程都是挂起线程。</p><h4 id="WaitList"><a href="#WaitList" class="headerlink" title="WaitList"></a>WaitList</h4><p>WaitList线程是Owner线程调用wait方法后的线程进入的地方，进入后的线程在调用notify()/notifyAll()，会被加入EntryList。</p><h4 id="OnDeckThread"><a href="#OnDeckThread" class="headerlink" title="OnDeckThread"></a>OnDeckThread</h4><p>可进行锁竞争的线程，若一个线程被设置为OnDeckThread，则表明其可以进行tryLock操作，若获取锁成功，则变为Owner，否则将其继续插回EntryList头部。</p><p>失败的原因：</p><p>OnDeckThread线程会跟cxq里自旋线程竞争锁。</p><h4 id="recursions（计数器）"><a href="#recursions（计数器）" class="headerlink" title="recursions（计数器）"></a>recursions（计数器）</h4><p>用来标识某个线程进入该锁的次数。</p><img src="https://s2.loli.net/2021/12/22/Vv8mXJCYGNOrQgS.png" alt="aheaj.png" style="zoom:80%;"><p>执行流程：</p><p>获取monitor</p><ol><li>线程先通过CAS尝试将monitor的owner设置为自己。</li><li>若成功，则判断线程是否是重入，是则recursions+1</li><li>若失败，则将自己封装成ObjectWaiter，通过CAS加入到cxq中</li></ol><p>释放monitor</p><ol><li>判断是否是重量级锁，是则继续流程</li><li>recursions-1</li><li>根据不同策略设置一个OnDeckThread</li></ol><h2 id="锁的优化"><a href="#锁的优化" class="headerlink" title="锁的优化"></a>锁的优化</h2><p>在详细说明锁的优化与升级过程之前我们先来看个小故事。</p><p>故事角色</p><p>老王 - JVM</p><p>小南 - 线程</p><p>小女 - 线程</p><p>房间 - 对象</p><p>房间门上 - 防盗锁 - Monitor</p><p>房间门上 - 小南书包 - 轻量级锁</p><p>房间门上 - 刻上小南大名 - 偏向锁</p><p>批量重刻名 - 一个类的偏向锁撤销到达 20 阈值</p><p>不能刻名字 - 批量撤销该类对象的偏向锁，设置该类不可偏向</p><p>小南要使用房间保证计算不被其它人干扰（原子性），最初，他用的是防盗锁，当上下文切换时，锁住门。这样，</p><p>即使他离开了，别人也进不了门，他的工作就是安全的。</p><p>但是，很多情况下没人跟他来竞争房间的使用权。小女是要用房间，但使用的时间上是错开的，小南白天用，小女</p><p>晚上用。每次上锁太麻烦了，有没有更简单的办法呢？</p><p>小南和小女商量了一下，约定不锁门了，而是谁用房间，谁把自己的书包挂在门口，但他们的书包样式都一样，因</p><p>此每次进门前得翻翻书包，看课本是谁的，如果是自己的，那么就可以进门，这样省的上锁解锁了。万一书包不是</p><p>自己的，那么就在门外等，并通知对方下次用锁门的方式。</p><p>后来，小女回老家了，很长一段时间都不会用这个房间。小南每次还是挂书包，翻书包，虽然比锁门省事了，但仍</p><p>然觉得麻烦。</p><p>于是，小南干脆在门上刻上了自己的名字：【小南专属房间，其它人勿用】，下次来用房间时，只要名字还在，那</p><p>么说明没人打扰，还是可以安全地使用房间。如果这期间有其它人要用这个房间，那么由使用者将小南刻的名字擦</p><p>掉，升级为挂书包的方式。</p><p>同学们都放假回老家了，小南就膨胀了，在 20 个房间刻上了自己的名字，想进哪个进哪个。后来他自己放假回老</p><p>家了，这时小女回来了（她也要用这些房间），结果就是得一个个地擦掉小南刻的名字，升级为挂书包的方式。老</p><p>王觉得这成本有点高，提出了一种批量重刻名的方法，他让小女不用挂书包了，可以直接在门上刻上自己的名字</p><p>后来，刻名的现象越来越频繁，老王受不了了：算了，这些房间都不能刻名了，只能挂书包</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>轻量级锁的使用场景是：尽管一个对象会被多个线程加锁，但他们加锁的时间是错开的即不存在竞争，此时synchronized加的是轻量级锁。</p><p>我们看下面的例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> obj<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">synchronized</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线程在执行同步代码块之前，JVM会先在当前线程的栈帧中创建用于存储锁记录的对象（Lock Record），这个锁记录对象包含什么数据呢，看图：</p><img src="https://s2.loli.net/2021/12/22/B27Q1laIJ3DfFRG.png" alt="aheaf.png" style="zoom:50%;"><p>第一个数据的前30位是锁记录的地址，后面两位是00，表示轻量级锁；第二个数据是锁对象的引用即obj。创建之后将对象头中的Mark Word比如啥hashcod，分代年龄等复制到锁记录中，官方程Displaced Mark World。然后线程尝试使用cas操作替换对象的mark word为指向锁记录的地址。</p><p>如下图：</p><img src="https://s2.loli.net/2021/12/22/4K7gBNMtdyw3mrf.png" alt="aheag.png" style="zoom:50%;"><p>如果替换成功了，对象头中存储的就是锁记录地址和状态00，表示加轻量锁。</p><p>如果替换失败了，有以下两种情况。</p><ul><li>如果是其他线程已经持有了该Object的轻量级锁，表明有竞争，进入锁膨胀状态。</li><li>如果是自己执行了synchronized锁重入，那再添加一条Lock Record作为重入锁计数。</li></ul><img src="https://s2.loli.net/2021/12/22/L4bsz2EiJ8AZMYC.png" alt="aheah.png" style="zoom:50%;"><p>当退出同步代码块时，如果有取值为null的锁记录，表示有重入，此时会重置锁记录，表示重入数减1.</p><p>当退出到最后一个所记录时，锁记录的值不为null，会使用cas操作将mark word的值返回给对象。</p><ul><li>若成功，则解锁成功</li><li>若失败，则表明轻量锁进行了锁膨胀，或已经升级成重量级锁，进入重量级锁解锁流程。</li></ul><h3 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h3><p>在尝试加轻量级锁的过程中，cas操作无法成功，这时是有其他线程为对象加了轻量锁，故进行锁膨胀，将轻量锁升级成重量锁。</p><img src="https://s2.loli.net/2021/12/22/sAUM47Ty9D3hV2c.png" alt="aheak.png" style="zoom:67%;"><p>Thread-1进行轻量锁加锁，发现此对象已经加了轻量锁，进入锁膨胀</p><ul><li>即为Object对象申请Monitor锁，让Object指向重量锁地址。</li><li>自己进入Monitor的cxq中。</li></ul><p><img src="https://s2.loli.net/2021/12/22/acWZw4EF7rQe3Nd.png" alt="aheam.png"></p><p>当Thread-0解锁时，使用cas将mark word恢复给对象头，失败，这时进入重量锁解锁流程，按照monitor地址找到monitor对象，设置owner为null，唤醒EntryList中的OnDeckThread</p><h3 id="自旋优化"><a href="#自旋优化" class="headerlink" title="自旋优化"></a>自旋优化</h3><p>上文我们讲到ContentionList里的线程会进行自旋抢锁。在重量锁竞争的时候，可以使用自旋来优化，如果当前线程自旋成功，则获得锁，避免了避免了将线程从挂起到唤醒的上下文切换的开销。</p><p>自旋重试成功：</p><img src="https://s2.loli.net/2021/12/22/YdnJeZ83QSOgVsp.png" alt="ahean.png" style="zoom:50%;"><p>自旋失败：</p><img src="https://s2.loli.net/2021/12/22/CaNWd5UnF7zcGqX.png" alt="aheao.png" style="zoom:50%;"><p>自旋会占用cpu时间，单核cpu自旋就是浪费，多核才能发挥出其优势。</p><ul><li>Java6之后的自旋锁是自适应的比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。</li><li>Java 7 之后不能控制是否开启自旋功能</li></ul><h3 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h3><p>重量级锁的流程就是典型的两阶段锁，关于两阶段锁的具体介绍看我操作系统笔记锁的介绍。</p><h3 id="阶段总结"><a href="#阶段总结" class="headerlink" title="阶段总结"></a>阶段总结</h3><p>至此我们讲了重量锁和轻量锁，那他们是怎么联系起来的呢？接下来我们就这两个锁状态，总结一下他们是如何进行锁升级的。</p><p>对于一个无锁状态的对象，当执行到要给这个对象加锁时，若对于这个对象加锁没有竞争或竞争很小，或先给他加轻量锁，在线程栈里创建锁记录对象，复制mark word的数据到锁记录中，然后进行cas操作替换mark word，替换的数据时锁记录的地址，此时便完成加锁，执行同步代码块。若在此期间没有线程争抢锁，则在解锁过程中，线程会根据对象头的锁记录地址找到锁记录，然后将hashcode，age， biased等数据通过cas操作恢复到mark word中，消除锁记录，线程变为无锁状态。</p><p>若在此期间有线程竞争锁，即时间重叠，进入锁膨胀过程，线程执行系统调用申请monitor对象，将对象头通过cas操作置为monitor的地址，同时将owner置为拥有轻量锁的线程，而另一个线程进入cxq中，进行自旋等待。在超过自旋阀值后，调用park挂起线程。在解锁时进入重量锁解锁流程。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>HotSpot的作者研究发现，大多数情况下，锁不仅不存在竞争，而且总是由同一线程获得，为了让线程获得锁的代价更低，引入偏向锁，当一个线程访问同步代码块获得锁时，会在对象头和栈帧中的锁记录中存储锁偏向的线程ID，以后该线程进入和退出同步块不需要进行cas操作，只是简单测试对象头的Mark word里是否存储当前线程的偏向锁。</p><p>java6引入偏向锁来进一步优化，只有第一次使用cas操作将线程ID设置到对象头的mark word里，之后发现线程ID就是自己表示没有竞争，不用重新cas，以后只要不发生竞争，这个对象就归该线程所有。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 同步块 A</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 同步块 B</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 同步块 C</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="C:/Users/FL8700F/AppData/Roaming/Typora/typora-user-images/image-20211222120612796.png" alt="image-20211222120612796" style="zoom:50%;"><p>一个对象创建时：</p><ul><li>如果开启了偏向锁（默认是开启的），那么对象创建后，arkword后三位为101，这时它的thread，poch，age都为0</li><li>但实际上偏向锁默认是延迟的，不会再程序启动时自动生效。如果想避免延迟，可以加VM参数：</li></ul><p><code>-XX:BiasedLockingStartupDelay=0</code>禁用延迟</p><ul><li>如果没有开启偏向锁，对象创建后，markword值为0x01，最后三位为001，他的hashcode，age都为0，只有第一次用到hashcode时才会赋值。</li></ul><p>接下来进行试验验证</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//添加虚拟机参数：-XX:BiasedLockingStartupDelay=0</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span>    <span class="token class-name">Dog</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ClassLayout</span> classLayout<span class="token operator">=</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"synchronized前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"synchronized中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"synchronized后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-none"><code class="language-none">11:08:58.117 c.TestBiased [t1] - synchronized 前00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 11:08:58.121 c.TestBiased [t1] - synchronized 中00000000 00000000 00000000 00000000 00011111 11101011 11010000 00000101 11:08:58.121 c.TestBiased [t1] - synchronized 后00000000 00000000 00000000 00000000 00011111 11101011 11010000 00000101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：</p><p>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中。即偏向锁采用一种等到竞争出现才释放锁的机制</p></blockquote><p>测试禁用</p><p>在上面测试代码运行时在添加 VM 参数 -XX:-UseBiasedLocking 禁用偏向锁。</p><pre class="line-numbers language-none"><code class="language-none">11:13:10.018 c.TestBiased [t1] - synchronized 前00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 11:13:10.021 c.TestBiased [t1] - synchronized 中00000000 00000000 00000000 00000000 00100000 00010100 11110011 10001000 11:13:10.021 c.TestBiased [t1] - synchronized 后00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上，直接加的轻量锁。</p><p>测试hashcode：</p><ul><li>正常状态对象一开始是没有 hashCode 的，第一次调用才生成</li></ul><h3 id="偏向锁撤销"><a href="#偏向锁撤销" class="headerlink" title="偏向锁撤销"></a>偏向锁撤销</h3><p>当有其他线程使用偏向锁对象时，会将偏向锁升级为轻量级锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span> <span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">TestBiased</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">TestBiased</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// 如果不用 wait/notify 使用 join 必须打开下面的注释</span> <span class="token comment">// 因为：t1 线程不能结束，否则底层线程可能被 jvm 重用作为 t2 线程，底层线程 id 是一样的</span> <span class="token comment">/*try { System.in.read(); } catch (IOException e) { e.printStackTrace(); }*/</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">TestBiased</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">TestBiased</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">[t1] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 [t2] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 [t2] - 00000000 00000000 00000000 00000000 00011111 10110101 11110000 01000000 [t2] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量重偏向"><a href="#批量重偏向" class="headerlink" title="批量重偏向"></a>批量重偏向</h3><p>如果对象虽然被多个线程访问，但没有竞争，这时偏向线程T1的对象仍可能重新偏向线程T2，即重置对象的ThreadID。</p><p>当偏向锁撤销次数超过阀值20次后在第20次，JVM会觉得我是不是偏向错了，于是后续不会进行锁撤销，而是进行批量重偏向。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span> list<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token punctuation">{</span> list<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"===============&gt; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Dog</span> d <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量撤销"><a href="#批量撤销" class="headerlink" title="批量撤销"></a>批量撤销</h3><p>当撤销锁次数超过阀值40次后，jvm会觉得这个类的对象根本就不该进行偏向，于是会将整个类的所有对象变为不可偏向，新建的对象也是不可偏向的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Thread</span> t1<span class="token punctuation">,</span>t2<span class="token punctuation">,</span>t3<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dog</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> loopNumber <span class="token operator">=</span> <span class="token number">39</span><span class="token punctuation">;</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loopNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Dog</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"===============&gt; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loopNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Dog</span> d <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"===============&gt; "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loopNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Dog</span> d <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"\t"</span> <span class="token operator">+</span> <span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t3<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintableSimple</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="并发编程三个问题"><a href="#并发编程三个问题" class="headerlink" title="并发编程三个问题"></a>并发编程三个问题</h2><p>此部分我们先将现象，详细原理我们在后面细说。</p><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>可见性即一个线程对共享变量修改后，另一个线程能立即获得修改后的值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisibilityTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Boolean_</span> boolean_<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Boolean_</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//共享变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>boolean_<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boolean_<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                boolean_<span class="token punctuation">.</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改了flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>略</p><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>程序中代码的执行顺序</p><p>不知题主是否了解JMM规范，JMM中关于synchronized有如下规定，线程加锁时，必须清空工作内存中共享变量的值，从而使用共享变量时需要从主内存重新读取；线程在解锁时，需要把工作内存中最新的共享变量的值写入到主存，以此来保证共享变量的可见性。(ps这里是个泛指，不是说只有在退出synchronized时才同步变量到主存)</p><p> <a href="https://www.cnblogs.com/chenssy/p/6393321.html">Java内存模型之happens-before</a></p><p><a href="https://zhuanlan.zhihu.com/p/126275344">happens-before是什么？JMM最最核心的概念，看完你就懂了</a></p><p><a href="http://ifeve.com/wp-content/uploads/2014/03/JSR133%E4%B8%AD%E6%96%87%E7%89%88.pdf">JSR-133：JavaTM内存模型与线程规范</a></p><h3 id="synchronized保证原子性原理"><a href="#synchronized保证原子性原理" class="headerlink" title="synchronized保证原子性原理"></a>synchronized保证原子性原理</h3><h3 id="synchronized保证可见性原理"><a href="#synchronized保证可见性原理" class="headerlink" title="synchronized保证可见性原理"></a>synchronized保证可见性原理</h3><h3 id="synchronized保证有序性原理"><a href="#synchronized保证有序性原理" class="headerlink" title="synchronized保证有序性原理"></a>synchronized保证有序性原理</h3><h3 id="synchronized可重入原理"><a href="#synchronized可重入原理" class="headerlink" title="synchronized可重入原理"></a>synchronized可重入原理</h3><h3 id="synchronized可重入的好处"><a href="#synchronized可重入的好处" class="headerlink" title="synchronized可重入的好处"></a>synchronized可重入的好处</h3><h3 id="synchronized不可中断性"><a href="#synchronized不可中断性" class="headerlink" title="synchronized不可中断性"></a>synchronized不可中断性</h3><p><a href="https://codeantenna.com/a/Olt1QepzWv#2_synchronized___interruptstop_66"> — synchronized/ReentrantLock两大特性（可重入性和不可中断性）介绍</a></p><p><a href="https://blog.csdn.net/deel_feel/article/details/105771902">为什么Synchronized不可中断？</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程编程核心技术读书笔记（二）</title>
      <link href="/2021/12/12/java-duo-xian-cheng-bian-cheng-he-xin-ji-zhu-du-shu-bi-ji-er/"/>
      <url>/2021/12/12/java-duo-xian-cheng-bian-cheng-he-xin-ji-zhu-du-shu-bi-ji-er/</url>
      
        <content type="html"><![CDATA[<h2 id="synchronized的脏读"><a href="#synchronized的脏读" class="headerlink" title="synchronized的脏读"></a>synchronized的脏读</h2><p>虽然在赋值时使用了同步，但取值时没有使用同步，出现意想不到的情况。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PublicVar</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> username<span class="token operator">=</span><span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> password<span class="token operator">=</span><span class="token string">"AA"</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> passworrd<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token operator">=</span>username<span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token operator">=</span>password<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getValue:"</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"username:"</span><span class="token operator">+</span>username<span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程编程核心技术读书笔记（一）</title>
      <link href="/2021/12/12/java-duo-xian-cheng-bian-cheng-he-xin-ji-zhu-du-shu-bi-ji-yi/"/>
      <url>/2021/12/12/java-duo-xian-cheng-bian-cheng-he-xin-ji-zhu-du-shu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h2><p>大多数情况下停止一个线程使用<code>Thread.interrupt()</code>，但这个方法不会终止正在运行的线程，需加入判断在可以完成线程停止。</p><p>通常有三种方法使线程停止：</p><ul><li>使用退出标志正常退出</li><li>使用<code>stop()</code>方法强行终止线程。</li><li>使用<code>interrupt()</code>方法终止线程。</li></ul><h3 id="使用interrupt停止"><a href="#使用interrupt停止" class="headerlink" title="使用interrupt停止"></a>使用interrupt停止</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程停止，退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment">//此种逻辑是while（true）的范围缩小，故在异常处理代码块中不需要重新设置中断标志</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程进入catch，停止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">MyThread</span> myThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sleep状态下停止线程"><a href="#sleep状态下停止线程" class="headerlink" title="sleep状态下停止线程"></a>sleep状态下停止线程</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在沉睡中停止"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyThread2</span> myThread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myThread2<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="为何不建议使用stop"><a href="#为何不建议使用stop" class="headerlink" title="为何不建议使用stop"></a>为何不建议使用stop</h3><h4 id="第一：stop已经过时"><a href="#第一：stop已经过时" class="headerlink" title="第一：stop已经过时"></a>第一：stop已经过时</h4><h4 id="stop会导致代码逻辑不完整"><a href="#stop会导致代码逻辑不完整" class="headerlink" title="stop会导致代码逻辑不完整"></a>stop会导致代码逻辑不完整</h4><p>stop是一种恶意的中断，即无论代码是否执行完整，会立马终止线程，造成业务的不确定性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    prinvate <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">sout</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">MyThread</span> thread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            thread<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行stop后，线程还没执行完整，stop便清除栈内信息，结束线程，导致run不完整。</p><p>这极度危险，因为我们根本不知道线程何时会终止，状态信息经过了什么修改，导致后续维护十分麻烦。</p><h4 id="stop破坏原子逻辑"><a href="#stop破坏原子逻辑" class="headerlink" title="stop破坏原子逻辑"></a>stop破坏原子逻辑</h4><p>多线程为了解决资源共享，使用了锁，避免资源不同步，但stop会丢弃线程持有的锁，造成原子性受损。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeStopThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO Auto-generated method stub</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO: handle exception</span><span class="token punctuation">}</span>a<span class="token operator">--</span><span class="token punctuation">;</span><span class="token class-name">String</span> tn<span class="token operator">=</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tn<span class="token operator">+</span><span class="token string">":a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">SafeStopThread</span> t<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SafeStopThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">Thread</span> t1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">/*   SafeStopThread s=new SafeStopThread();   new Thread(s).start();*/</span> <span class="token comment">// 不共享stop变量</span>      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//stop变量相同</span>   <span class="token punctuation">}</span>    t1<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a==1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序本意是只有一个线程进入临界区，但stop终止后，可能持有锁的线程逻辑还没执行完毕，就终止了，导致另一个线程进入了临界区，就好像有两个线程进入了临界区，因而出现错误。</p><h3 id="suspend和resume方法的缺点"><a href="#suspend和resume方法的缺点" class="headerlink" title="suspend和resume方法的缺点"></a>suspend和resume方法的缺点</h3><h4 id="易造成临界资源独占"><a href="#易造成临界资源独占" class="headerlink" title="易造成临界资源独占"></a>易造成临界资源独占</h4><p>此两方法易造成公共对象独占，导致其他对象都无法获取公共同步对象。</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>守护线程是特殊的线程，当进程中不存在非守护线程，则守护线程自动销毁，典型的守护线程是垃圾回收线程。守护线程是为其他线程运行提供服务。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库并发控制(一)</title>
      <link href="/2021/12/11/shu-ju-ku-bing-fa-kong-zhi-yi/"/>
      <url>/2021/12/11/shu-ju-ku-bing-fa-kong-zhi-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架面试题整理（一）</title>
      <link href="/2021/12/11/java-ji-he-kuang-jia-mian-shi-ti-zheng-li-yi/"/>
      <url>/2021/12/11/java-ji-he-kuang-jia-mian-shi-ti-zheng-li-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架源码阅读ArrayList（一）</title>
      <link href="/2021/12/11/java-ji-he-kuang-jia-yuan-ma-yue-du-arraylist-yi/"/>
      <url>/2021/12/11/java-ji-he-kuang-jia-yuan-ma-yue-du-arraylist-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程volatile详解</title>
      <link href="/2021/12/11/java-bing-fa-bian-cheng-volatile-xiang-jie/"/>
      <url>/2021/12/11/java-bing-fa-bian-cheng-volatile-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>@<a href="volatile%E8%AF%A6%E8%A7%A3">TOC</a></p><p><a href="https://zhuanlan.zhihu.com/p/111559032">volatile参考</a></p><h3 id="并发三大特性"><a href="#并发三大特性" class="headerlink" title="并发三大特性"></a>并发三大特性</h3><ol><li>原子性：一个或一组操作要么一起执行成功，要么就全部不执行，不能被打断。</li><li>有序性：为了提高程序的执行效率，编译器和处理器都会对程序中的指令进行重排序。</li><li>可见性：即一个线程对一个变量的修改对所有线程都是可见的。</li></ol><p>volatile只具备这三大特性中的两种，不具备原子性。<br>我们知道基本数据类型的单次读，单次写是具有原子性的，因此对volatile变量的单次读，写也是具有原子性的例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">i<span class="token operator">==</span><span class="token number">1</span><span class="token comment">//单次读</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token comment">//单次写，赋值</span>i<span class="token operator">++</span><span class="token comment">//复合操作，不具有原子性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过分析字节码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0<span class="token comment">//将this引用推送至栈顶</span>       <span class="token number">1</span><span class="token operator">:</span> dup<span class="token comment">//复制栈顶值this应用，并将其压入栈顶，即此时操作数栈上有连续相同的this引用；</span>       <span class="token number">2</span><span class="token operator">:</span> getfield      #<span class="token number">2</span>   <span class="token comment">//  弹出栈顶的对象引用，获取其字段race的值并压入栈顶。第一次操作</span>       <span class="token number">5</span><span class="token operator">:</span> iconst_1<span class="token comment">//将int型(1)推送至栈顶</span>       <span class="token number">6</span><span class="token operator">:</span> iadd<span class="token comment">// 弹出栈顶两个元素相加（race+1），并将计算结果压入栈顶。第二次操作</span>       <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">2</span>   <span class="token comment">//  从栈顶弹出两个变量（累加值，this引用），将值赋值到this实例字段race上。第三次操作，赋值</span>      <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）线程A，线程B同时执行getfield指令将i值压栈<br><img src="https://img-blog.csdnimg.cn/78d6b839a5f8450a94645b1c5dfb5c95.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtMTIzNDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>（2）执行i_const1将int（1）压栈<br><img src="https://img-blog.csdnimg.cn/3522a5e1a2154eceb82c8fa67bdf17ca.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtMTIzNDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>（3） 线程A执行iadd，putfield后将主存中值更新，而此时B线程栈内值还是旧值。<br><img src="https://img-blog.csdnimg.cn/c49810a6253341f3b6eaea7c83851d54.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtMTIzNDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>（4）B线程执行后续指令，此时发生错误。<br><img src="https://img-blog.csdnimg.cn/b2c1ef171683459d8327c3a0321f5b86.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dtMTIzNDU3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时用volatile显然是不合适的，这就要引入同步机制了。</p><h3 id="volatile可见性"><a href="#volatile可见性" class="headerlink" title="volatile可见性"></a>volatile可见性</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//未使用了volatile</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NonVolatileDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> stop <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//任务是否停止,普通变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>         <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//stop=false，不满足停止条件，继续执行</span>                <span class="token comment">//do someting</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stop=true，满足停止条件。"</span> <span class="token operator">+</span>                    <span class="token string">"停止时间："</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//保证主线程修改stop=true，在子线程启动后执行。</span>        stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程设置停止标识 stop=true。"</span> <span class="token operator">+</span>                <span class="token string">"设置时间："</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们希望执行stop=true后线程停止，但实际上并没有停止，这是因为线程制启动后会把相关变量读入自己的栈内存中，在运行过程中就从栈内存中取值，故我们修改主存中stop后，这对于线程是不可见的。</p><p>volatile关键字是Java提供的轻量级的同步机制，他为字段的访问提供了一种免锁机制，使用他不会引起线程的上下文切换和调度，因此他比synchronized执行效率更高，那volatile是可以完全替代synchronized吗？<br>事实上不是，我们知道volatile不具有原子性。</p><h3 id="volatile正确使用姿势"><a href="#volatile正确使用姿势" class="headerlink" title="volatile正确使用姿势"></a>volatile正确使用姿势</h3><p>使用volatile主要是为了保证字段访问的一致性，如果只使用volatile就能保证线程安全，那当然没问题，但很多时候需要我们自己编写同步来实现线程安全。<br>通常在以下场景使用volatile比较好。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">volatile</span> <span class="token keyword">boolean</span> stop<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//volatile 变量，用于停止请求的状态标识</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//停止请求</span>    stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stop<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断是否需要停止</span>        <span class="token comment">// do Something  </span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样只要任何一个线程调用了shutdown()，其他线程在执行doWork时都可以立即感知到stop变量的变化，这时就可以大胆的使用volatile。这种类型的状态标记的一个公共特性是：通常只有一种状态转换，如标志从false 转换为true。</p><h3 id="volatile实现原理"><a href="#volatile实现原理" class="headerlink" title="volatile实现原理"></a>volatile实现原理</h3><p>在了解原理之前，先了解一下cpu的相关术语</p><ol><li>内存屏障：一组处理器指令，用于实现内存操作的顺序限制。</li></ol><p>volatile是如何保证可见性的呢，通过查看汇编代码，可知有volatile修饰的共享变量进行写操作时会多出两行代码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x01a3deld: movb<span class="token punctuation">..</span>.0x01a3deld: lock<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查阅IA-32架构软件开发手册可知，Lock前缀指令在多核处理器会引发两件事情。<br>（1）将当前处理器缓存行数据协会系统内存。<br>（2）这个写回内存的操作会使其他cpu里缓存该内存地址的数据无效。<br>我们知道为了提高处理速度，处理器不直接和内存通信，而是先将内存数据读到内部缓存再操作，但操作完不知道何时会写入内存。如果对volatile变量写操作，则JVM对处理器发送Lock前缀的指令，将修改的值写入内存，但此时其他处理器缓存的值还是旧的，再次执行会有问题，因此，为了保存各个处理器缓存一致，就会实现一致性协议<br><a href="https://blog.csdn.net/zxp_cpinfo/article/details/53523697">缓存一致性协议</a><br>每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是否过期，当处理器发现缓存行对应的内存地址修改，就会将当前处理器缓存行设置成无效，当处理器再对数据修改时，会重新从系统内存中把数据读到缓存里。</p><h4 id="Lock前缀指令会引起处理器缓存写回内存"><a href="#Lock前缀指令会引起处理器缓存写回内存" class="headerlink" title="Lock前缀指令会引起处理器缓存写回内存"></a>Lock前缀指令会引起处理器缓存写回内存</h4><p>Lock前缀指令会导致在执行指令期间，声言处理器的LOCK#信号，在多处理环境中，Lock#信号确保在声言该信号期间。处理器可以独占任何共享内存。但LOCK#信号一般不锁总线，而是锁缓存，毕竟锁总线开销大，在锁操作时总是在总线上声明LOCK#信号，但在P6和目前的处理器上，如果访问的内存区域已经缓存在处理器内部，则不会声言LOCK#信号，相反，会锁定这块内存区域的缓存，并写回内存，并使用缓存一致性机制保证修改的原子性，此为“缓存锁定”。缓存一致性机制会阻止同时修改由两个以上处理器缓存的内存区域数据。</p><h4 id="一个处理器缓存写到内存会导致其他处理器缓存无效"><a href="#一个处理器缓存写到内存会导致其他处理器缓存无效" class="headerlink" title="一个处理器缓存写到内存会导致其他处理器缓存无效"></a>一个处理器缓存写到内存会导致其他处理器缓存无效</h4><p>在多核处理器系统中进行操作时1，处理器能嗅探其他处理器访问系统内存和它们内部的缓存，处理器使用嗅探技术保证内部缓存，系统内存和其他处理器的缓存在总线上保持一致，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址处于共享状态，那么正在嗅探的处理器将使缓存行无效，下次访问相同内存地址时强制执行缓存行填充。</p><h3 id="volatile使用的优化"><a href="#volatile使用的优化" class="headerlink" title="volatile使用的优化"></a>volatile使用的优化</h3><p><a href="https://developer.aliyun.com/article/135547">Java理论与实践: 正确使用 Volatile 变量</a></p><p><a href="https://www.cnblogs.com/bbgs-xc/p/12731769.html">Volatile禁止指令重排序（三） </a></p><p> <a href="https://tech.meituan.com/2014/09/23/java-memory-reordering.html">Java内存访问重排序的研究</a></p><p><a href="https://blog.51cto.com/u_15127650/2834299">volatile对指令重排的影响</a></p><p>重点关注第四个，逐个分析若当第二个操作是volatile写时将前一个操作移到后面会有什么问题</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程的艺术笔记（一）</title>
      <link href="/2021/12/11/java-bing-fa-bian-cheng-de-yi-zhu-bi-ji-yi/"/>
      <url>/2021/12/11/java-bing-fa-bian-cheng-de-yi-zhu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p>synchronized底层实现原理及java内存模型基础    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程笔记（一）</title>
      <link href="/2021/12/11/java-bing-fa-bian-cheng-bi-ji-wang-wen-jun-yi/"/>
      <url>/2021/12/11/java-bing-fa-bian-cheng-bi-ji-wang-wen-jun-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Kw411Z7dF?p=33">【尚硅谷】大厂必备技术之JUC并发编程2021新版_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1mq4y1J7oe?p=1">【光大人】JUC并发编程2021最新版快速入门全集系列_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1B7411L7tE?p=2&amp;spm_id_from=pageDriver">【狂神说Java】JUC并发编程最新版通俗易懂_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1W54y1B7tA?spm_id_from=333.999.0.0">2020全新Java多线程技术入门到精通，1天就能学会~_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1n64y1o7S4?p=3&amp;spm_id_from=pageDriver">Java多线程入门到精通-余胜军通俗易懂版本（超级详细）_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1hJ411D7k2?from=search&amp;seid=8616149183784563447&amp;spm_id_from=333.337.0.0">汪文君 JAVA 多线程编程实战 三个阶段全集(完)_哔哩哔哩_bilibili</a></p><p><a href="https://github.com/tuyrk/wangwenjun-thread">GitHub - tuyrk/wangwenjun-thread: 学习汪文君多线程《Java并发编程》视频教程的源码及笔记</a></p><p><a href="https://www.bilibili.com/video/BV1Rv411y7MU?from=search&amp;seid=16112548359462356495&amp;spm_id_from=333.337.0.0">Java多线程实战精讲-带你一次搞明白Java多线程高并发</a></p><p><a href="https://www.bilibili.com/video/BV1vE411D7KE?from=search&amp;seid=2851007755032912537&amp;spm_id_from=333.337.0.0">2020权威_juc 与 jvm <em>并发编程</em> Java 必学_阳哥- 尚硅谷</a></p><p><a href="https://www.bilibili.com/video/BV1Eb4y1b7BF?from=search&amp;seid=15791736904919096508&amp;spm_id_from=333.337.0.0">【并发编程与高并发架构】解决方案通俗易懂版，助你提升面试成功率</a></p><p><a href="https://www.bilibili.com/video/BV1gQ4y1N7gu?from=search&amp;seid=15094941282594707038&amp;spm_id_from=333.337.0.0">Java高性能编程-Java多线程开发</a></p><p><a href="https://www.bilibili.com/video/BV1Z54y1D7J7?from=search&amp;seid=4551009475132760887&amp;spm_id_from=333.337.0.0">java多线程 看这篇就够了</a></p><p><a href="https://www.bilibili.com/video/BV1F64y1b72p?from=search&amp;seid=236539970777791078&amp;spm_id_from=333.337.0.0">java面试知识点 之 CAS&amp;ABA问题</a></p><p><a href="https://b23.tv/S8qcyL3?share_medium=android&amp;share_source=qq&amp;bbid=XY958679B2000ACFA56E0F761618DCF71A2C7&amp;ts=1639413877717">JUC并发编程全套</a></p><h2 id="Thread类的设计模式"><a href="#Thread类的设计模式" class="headerlink" title="Thread类的设计模式"></a>Thread类的设计模式</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC笔记</title>
      <link href="/2021/12/10/springmvc-bi-ji-yi/"/>
      <url>/2021/12/10/springmvc-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Ry4y1574R?from=search&amp;seid=11910174403404399101&amp;spm_id_from=333.337.0.0">【尚硅谷】SpringMVC教程丨一套快速上手spring mvc</a></p><h2 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h2><p>MVC是软件架构思想，将软件按照模型，视图，控制器划分</p><p>M，model，指工程中的JavaBean，作用是处理数据</p><p>JavaBean分两类：</p><ul><li>实体类Bean，专门存储业务数据，如User</li><li>业务处理Bean，值Service或Dao对象，专门处理业务逻辑和数据访问</li></ul><p>V：view，视图层，指工程中的html页面作用是与用户交互，展示数据</p><p>C：controller，控制层，指工程中的servlet，接受请求响应</p><p>MVC工作流程：</p><p>用户通过视图层发送请求到服务器，在服务器中请求被Controller接受，Controller调用Model层处理，并将结果返回到controller，然后利用view返回给浏览器</p><h2 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h2><p>引入依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- SpringMVC --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 日志 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- ServletAPI --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- Spring5和Thymeleaf整合包 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>thymeleaf-spring5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置web.xml</p><p>注册SpringMVC前端控制器DispatcherServlet</p><ul><li>默认配置方式：</li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;!--    配置SpringMVC前端控制器--&gt;    &lt;servlet&gt;        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;SpringMVC&lt;/servlet-name&gt;&lt;!--        设置SpringMVC的核心控制器所能处理的请求路径            /所能匹配的请求是/login,或.html,.js方式的请求路径            但不能匹配.jsp请求的路径请求            而/*可以匹配任何请求--&gt;        &lt;url-pattern&gt;/&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此配置作用下，SpringMVC的配置文件默认位于WEB-INF下，默认名称为&lt;servlet-name&gt;-servlet.xml，例如，以下配置所对应SpringMVC的配置文件位于WEB-INF下，文件名为springMVC-servlet.xml</p><ul><li>扩展配置</li></ul><p>可通过init-param标签设置SpringMVC配置文件的位置和名称，通过load-on-startup标签设置SpringMVC前端控制器DispatcherServlet的初始化时间</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 配置SpringMVC的前端控制器，对浏览器发送的请求统一进行处理 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件的位置和名称 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- contextConfigLocation为固定值 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 使用classpath:表示从类路径查找配置文件，例如maven工程中的src/main/resources --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springMVC.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  作为框架的核心组件，在启动过程中有大量的初始化操作要做而这些操作放在第一次请求时才执行会严重影响访问速度因此需要通过此标签将启动控制DispatcherServlet的初始化时间提前到服务器启动时--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--        设置springMVC的核心控制器所能处理的请求的请求路径        /所匹配的请求可以是/login或.html或.js或.css方式的请求路径        但是/不能匹配.jsp请求路径的请求    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议使用扩展配置，使得SpringMVC的配置文件放在resources文件件下。</p><blockquote><p>注：</p><p>&lt;url-pattern&gt;标签中使用/和/*的区别：</p><p>/所匹配的请求可以是/login或.html或.js或.css方式的请求路径，但是/不能匹配.jsp请求路径的请求</p><p>因此就可以避免在访问jsp页面时，该请求被DispatcherServlet处理，从而找不到相应的页面</p><p>/*则能够匹配所有请求，例如在使用过滤器时，若需要对所有请求进行过滤，就需要使用/*的写法</p></blockquote><p>上述创建完成后便可在SpringMVC.xml文件中做一些视图配置等</p><h3 id="创建请求控制器"><a href="#创建请求控制器" class="headerlink" title="创建请求控制器"></a>创建请求控制器</h3><p>由于前端控制器对浏览器发送的请求进行了统一的处理，但是具体的请求有不同的处理过程，因此需要创建处理具体请求的类，即请求控制器</p><p>请求控制器中每一个处理请求的方法成为控制器方法</p><p>因为SpringMVC的控制器由一个POJO（普通的Java类）担任，因此需要通过@Controller注解将其标识为一个控制层组件，交给Spring的IoC容器管理，此时SpringMVC才能够识别控制器的存在</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建springMVC的配置文件"><a href="#创建springMVC的配置文件" class="headerlink" title="创建springMVC的配置文件"></a>创建springMVC的配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 自动扫描包 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.mvc.controller<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 配置Thymeleaf视图解析器 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.view.ThymeleafViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateEngine<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.SpringTemplateEngine<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                        <span class="token comment">&lt;!-- 视图前缀 --&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/WEB-INF/templates/<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                        <span class="token comment">&lt;!-- 视图后缀 --&gt;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.html<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>templateMode<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HTML5<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>characterEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    处理静态资源，例如html、js、css、jpg  若只设置该标签，则只能访问静态资源，其他请求则无法访问  此时必须设置&lt;mvc:annotation-driven/&gt;解决问题 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!-- 开启mvc注解驱动 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 处理响应中文内容乱码 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>defaultCharset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>supportedMediaTypes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>text/html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>application/json<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试HelloWorld"><a href="#测试HelloWorld" class="headerlink" title="测试HelloWorld"></a>测试HelloWorld</h3><h4 id="a-gt-实现对首页的访问"><a href="#a-gt-实现对首页的访问" class="headerlink" title="a>实现对首页的访问"></a>a&gt;实现对首页的访问</h4><p>在请求控制器中创建处理请求的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// @RequestMapping注解：处理请求和控制器方法之间的映射关系</span><span class="token comment">// @RequestMapping注解的value属性可以通过请求地址匹配请求，/表示的当前工程的上下文路径</span><span class="token comment">// localhost:8080/springMVC/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//设置视图名称</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b-gt-通过超链接跳转到指定页面"><a href="#b-gt-通过超链接跳转到指定页面" class="headerlink" title="b>通过超链接跳转到指定页面"></a>b&gt;通过超链接跳转到指定页面</h4><p>在主页index.html中设置超链接</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/hello}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>HelloWorld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在请求控制器中创建处理请求的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"target"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>浏览器发送请求，若请求地址符合前端控制器的url-pattern，该请求就会被前端控制器DispatcherServlet处理。前端控制器会读取SpringMVC的核心配置文件，通过扫描组件找到控制器，将请求地址和控制器中@RequestMapping注解的value属性值进行匹配，若匹配成功，该注解所标识的控制器方法就是处理请求的方法。处理请求的方法需要返回一个字符串类型的视图名称，该视图名称会被视图解析器解析，加上前缀和后缀组成视图的路径，通过Thymeleaf对视图进行渲染，最终转发到视图所对应页面</p><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p><a href="https://juejin.cn/post/6844903495649198093">超详细 Spring @RequestMapping 注解使用技巧</a></p><h3 id="1、-RequestMapping注解的功能"><a href="#1、-RequestMapping注解的功能" class="headerlink" title="1、@RequestMapping注解的功能"></a>1、@RequestMapping注解的功能</h3><p>从注解名称上我们可以看到，@RequestMapping注解的作用就是将请求和处理请求的控制器方法关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的控制器方法来处理这个请求。</p><h3 id="2、-RequestMapping注解的位置"><a href="#2、-RequestMapping注解的位置" class="headerlink" title="2、@RequestMapping注解的位置"></a>2、@RequestMapping注解的位置</h3><p>@RequestMapping标识一个类：设置映射请求的请求路径的初始信息</p><p>@RequestMapping标识一个方法：设置映射请求请求路径的具体信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestMappingController</span> <span class="token punctuation">{</span><span class="token comment">//此时请求映射所映射的请求的请求路径为：/test/testRequestMapping</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、-RequestMapping注解的value属性"><a href="#3、-RequestMapping注解的value属性" class="headerlink" title="3、@RequestMapping注解的value属性"></a>3、@RequestMapping注解的value属性</h3><p>@RequestMapping注解的value属性通过请求的请求地址匹配请求映射</p><p>@RequestMapping注解的value属性是一个字符串类型的数组，表示该请求映射能够匹配多个请求地址所对应的请求</p><p>@RequestMapping注解的value属性必须设置，至少通过请求地址匹配请求映射</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testRequestMapping}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的value属性--&gt;/testRequestMapping<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的value属性--&gt;/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span> <span class="token string">"/test"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、-RequestMapping注解的method属性"><a href="#4、-RequestMapping注解的method属性" class="headerlink" title="4、@RequestMapping注解的method属性"></a>4、@RequestMapping注解的method属性</h3><p>@RequestMapping注解的method属性通过请求的请求方式（get或post）匹配请求映射</p><p>@RequestMapping注解的method属性是一个RequestMethod类型的数组，表示该请求映射能够匹配多种请求方式的请求</p><p>若当前请求的请求地址满足请求映射的value属性，但是请求方式不满足method属性，则浏览器报错405：Request method ‘POST’ not supported</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的value属性--&gt;/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span> <span class="token string">"/test"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        method <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>1、对于处理指定请求方式的控制器方法，SpringMVC中提供了@RequestMapping的派生注解</p><p>处理get请求的映射–&gt;@GetMapping</p><p>处理post请求的映射–&gt;@PostMapping</p><p>处理put请求的映射–&gt;@PutMapping</p><p>处理delete请求的映射–&gt;@DeleteMapping</p><p>2、常用的请求方式有get，post，put，delete</p><p>但是目前浏览器只支持get和post，若在form表单提交时，为method设置了其他请求方式的字符串（put或delete），则按照默认的请求方式get处理</p><p>若要发送put和delete请求，则需要通过spring提供的过滤器HiddenHttpMethodFilter，在RESTful部分会讲到</p></blockquote><h3 id="5、-RequestMapping注解的params属性（了解）"><a href="#5、-RequestMapping注解的params属性（了解）" class="headerlink" title="5、@RequestMapping注解的params属性（了解）"></a>5、@RequestMapping注解的params属性（了解）</h3><p>@RequestMapping注解的params属性通过请求的请求参数匹配请求映射</p><p>@RequestMapping注解的params属性是一个字符串类型的数组，可以通过四种表达式设置请求参数和请求映射的匹配关系</p><p>“param”：要求请求映射所匹配的请求必须携带param请求参数</p><p>“!param”：要求请求映射所匹配的请求必须不能携带param请求参数</p><p>“param=value”：要求请求映射所匹配的请求必须携带param请求参数且param=value</p><p>“param!=value”：要求请求映射所匹配的请求必须携带param请求参数但是param!=value</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/test(username=<span class="token punctuation">'</span>admin<span class="token punctuation">'</span>,password=123456)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试@RequestMapping的params属性--&gt;/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>        value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/testRequestMapping"</span><span class="token punctuation">,</span> <span class="token string">"/test"</span><span class="token punctuation">}</span>        <span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">}</span>        <span class="token punctuation">,</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"password!=123456"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足params属性，此时页面回报错400：Parameter conditions “username, password!=123456” not met for actual request parameters: username={admin}, password={123456}</p></blockquote><h3 id="6、-RequestMapping注解的headers属性（了解）"><a href="#6、-RequestMapping注解的headers属性（了解）" class="headerlink" title="6、@RequestMapping注解的headers属性（了解）"></a>6、@RequestMapping注解的headers属性（了解）</h3><p>@RequestMapping注解的headers属性通过请求的请求头信息匹配请求映射</p><p>@RequestMapping注解的headers属性是一个字符串类型的数组，可以通过四种表达式设置请求头信息和请求映射的匹配关系</p><p>“header”：要求请求映射所匹配的请求必须携带header请求头信息</p><p>“!header”：要求请求映射所匹配的请求必须不能携带header请求头信息</p><p>“header=value”：要求请求映射所匹配的请求必须携带header请求头信息且header=value</p><p>“header!=value”：要求请求映射所匹配的请求必须携带header请求头信息且header!=value</p><p>若当前请求满足@RequestMapping注解的value和method属性，但是不满足headers属性，此时页面显示404错误，即资源未找到</p><h3 id="7、SpringMVC支持ant风格的路径"><a href="#7、SpringMVC支持ant风格的路径" class="headerlink" title="7、SpringMVC支持ant风格的路径"></a>7、SpringMVC支持ant风格的路径</h3><p>？：表示任意的单个字符</p><p>*：表示任意的0个或多个字符</p><p>**：表示任意的一层或多层目录</p><p>注意：在使用**时，只能使用/**/xxx的方式</p><h3 id="8、SpringMVC支持路径中的占位符（重点）"><a href="#8、SpringMVC支持路径中的占位符（重点）" class="headerlink" title="8、SpringMVC支持路径中的占位符（重点）"></a>8、SpringMVC支持路径中的占位符（重点）</h3><p>原始方式：/deleteUser?id=1</p><p>rest方式：/deleteUser/1</p><p>SpringMVC路径中的占位符常用于RESTful风格中，当请求路径中将某些数据通过路径的方式传输到服务器中，就可以在相应的@RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据，在通过@PathVariable注解，将占位符所表示的数据赋值给控制器方法的形参</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testRest/1/admin}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试路径中的占位符--&gt;/testRest<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRest/{id}/{username}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span><span class="token operator">+</span>id<span class="token operator">+</span><span class="token string">",username:"</span><span class="token operator">+</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//最终输出的内容为--&gt;id:1,username:admin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMVC如何获取请求参数"><a href="#SpringMVC如何获取请求参数" class="headerlink" title="SpringMVC如何获取请求参数"></a>SpringMVC如何获取请求参数</h2><h3 id="1、通过ServletAPI获取"><a href="#1、通过ServletAPI获取" class="headerlink" title="1、通过ServletAPI获取"></a>1、通过ServletAPI获取</h3><p>将HttpServletRequest作为控制器方法的形参，此时HttpServletRequest类型的参数表示封装了当前请求的请求报文的对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testParam"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username:"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">",password:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、通过控制器方法的形参获取请求参数"><a href="#2、通过控制器方法的形参获取请求参数" class="headerlink" title="2、通过控制器方法的形参获取请求参数"></a>2、通过控制器方法的形参获取请求参数</h3><p>在控制器方法的形参位置，设置和请求参数同名的形参，当浏览器发送请求，匹配到请求映射时，在DispatcherServlet中就会将请求参数赋值给相应的形参</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testParam(username=<span class="token punctuation">'</span>admin<span class="token punctuation">'</span>,password=123456)}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>测试获取请求参数--&gt;/testParam<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testParam"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testParam</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username:"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">",password:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>若请求所传输的请求参数中有多个同名的请求参数，此时可以在控制器方法的形参中设置字符串数组或者字符串类型的形参接收此请求参数</p><p>若使用字符串数组类型的形参，此参数的数组中包含了每一个数据</p><p>若使用字符串类型的形参，此参数的值为每个数据中间使用逗号拼接的结果</p></blockquote><h3 id="3、-RequestParam"><a href="#3、-RequestParam" class="headerlink" title="3、@RequestParam"></a>3、@RequestParam</h3><p>@RequestParam是将请求参数和控制器方法的形参创建映射关系</p><p>@RequestParam注解一共有三个属性：</p><p>value：指定为形参赋值的请求参数的参数名</p><p>required：设置是否必须传输此请求参数，默认值为true</p><p>若设置为true时，则当前请求必须传输value所指定的请求参数，若没有传输该请求参数，且没有设置defaultValue属性，则页面报错400：Required String parameter ‘xxx’ is not present；若设置为false，则当前请求不是必须传输value所指定的请求参数，若没有传输，则注解所标识的形参的值为null</p><p>defaultValue：不管required属性值为true或false，当value所指定的请求参数没有传输或传输的值为””时，则使用默认值为形参赋值</p><h3 id="5、-CookieValue"><a href="#5、-CookieValue" class="headerlink" title="5、@CookieValue"></a>5、@CookieValue</h3><p>@CookieValue是将cookie数据和控制器方法的形参创建映射关系</p><p>@CookieValue注解一共有三个属性：value、required、defaultValue，用法同@RequestParam</p><h3 id="6、通过POJO获取请求参数"><a href="#6、通过POJO获取请求参数" class="headerlink" title="6、通过POJO获取请求参数"></a>6、通过POJO获取请求参数</h3><p>可以在控制器方法的形参位置设置一个实体类类型的形参，此时若浏览器传输的请求参数的参数名和实体类中的属性名一致，那么请求参数就会为此属性赋值</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testpojo}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    性别：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>男<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>女<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    邮箱：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testpojo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testPOJO</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//最终结果--&gt;User{id=null, username='张三', password='123', age=23, sex='男', email='123@qq.com'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、解决获取请求参数的乱码问题"><a href="#7、解决获取请求参数的乱码问题" class="headerlink" title="7、解决获取请求参数的乱码问题"></a>7、解决获取请求参数的乱码问题</h3><p>解决获取请求参数的乱码问题，可以使用SpringMVC提供的编码过滤器CharacterEncodingFilter，但是必须在web.xml中进行注册</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--配置springMVC的编码过滤器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>forceResponseEncoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>SpringMVC中处理编码的过滤器一定要配置到其他过滤器之前，否则无效</p></blockquote><h2 id="域对象共享数据"><a href="#域对象共享数据" class="headerlink" title="域对象共享数据"></a>域对象共享数据</h2><h3 id="1、使用ServletAPI向request域对象共享数据"><a href="#1、使用ServletAPI向request域对象共享数据" class="headerlink" title="1、使用ServletAPI向request域对象共享数据"></a>1、使用ServletAPI向request域对象共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testServletAPI"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testServletAPI</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">{</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"testScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,servletAPI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、使用ModelAndView向request域对象共享数据"><a href="#2、使用ModelAndView向request域对象共享数据" class="headerlink" title="2、使用ModelAndView向request域对象共享数据"></a>2、使用ModelAndView向request域对象共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModelAndView"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">testModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/**     * ModelAndView有Model和View的功能     * Model主要用于向请求域共享数据     * View主要用于设置视图，实现页面跳转     */</span>     <span class="token class-name">ModelAndView</span> mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//向请求域共享数据</span>    mav<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"testScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,ModelAndView"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置视图，实现页面跳转</span>    mav<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mav<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、使用Model向request域对象共享数据"><a href="#3、使用Model向request域对象共享数据" class="headerlink" title="3、使用Model向request域对象共享数据"></a>3、使用Model向request域对象共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModel"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testModel</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"testScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,Model"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、使用map向request域对象共享数据"><a href="#4、使用map向request域对象共享数据" class="headerlink" title="4、使用map向request域对象共享数据"></a>4、使用map向request域对象共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testMap"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"testScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,Map"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、使用ModelMap向request域对象共享数据"><a href="#5、使用ModelMap向request域对象共享数据" class="headerlink" title="5、使用ModelMap向request域对象共享数据"></a>5、使用ModelMap向request域对象共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModelMap"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testModelMap</span><span class="token punctuation">(</span><span class="token class-name">ModelMap</span> modelMap<span class="token punctuation">)</span><span class="token punctuation">{</span>    modelMap<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"testScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,ModelMap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、Model、ModelMap、Map的关系"><a href="#6、Model、ModelMap、Map的关系" class="headerlink" title="6、Model、ModelMap、Map的关系"></a>6、Model、ModelMap、Map的关系</h3><p>Model、ModelMap、Map类型的参数其实本质上都是 BindingAwareModelMap 类型的</p><pre class="line-numbers language-none"><code class="language-none">public interface Model{}public class ModelMap extends LinkedHashMap&lt;String, Object&gt; {}public class ExtendedModelMap extends ModelMap implements Model {}public class BindingAwareModelMap extends ExtendedModelMap {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、向session域共享数据"><a href="#7、向session域共享数据" class="headerlink" title="7、向session域共享数据"></a>7、向session域共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testSession"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testSession</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">{</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"testSessionScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,session"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、向application域共享数据"><a href="#8、向application域共享数据" class="headerlink" title="8、向application域共享数据"></a>8、向application域共享数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testApplication"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testApplication</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">ServletContext</span> application <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"testApplicationScope"</span><span class="token punctuation">,</span> <span class="token string">"hello,application"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11、使用Thymeleaf获取域中的数据"><a href="#11、使用Thymeleaf获取域中的数据" class="headerlink" title="11、使用Thymeleaf获取域中的数据"></a>11、使用Thymeleaf获取域中的数据</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name">One</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token punctuation">{</span>model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"req"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"ses"</span><span class="token punctuation">,</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span><span class="token string">"App"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">//request域中的数据：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${req}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#request.getAttribute(<span class="token punctuation">'</span>req<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>//session中的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${session.ses}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#session.getAttribute(<span class="token punctuation">'</span>ses<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>//ServletContext中的数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#servletContext.getAttribute(<span class="token punctuation">'</span>app<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SpringMVC的视图"><a href="#SpringMVC的视图" class="headerlink" title="SpringMVC的视图"></a>SpringMVC的视图</h2><p>SpringMVC中的视图是View接口，视图的作用渲染数据，将模型Model中的数据展示给用户</p><p>SpringMVC视图的种类很多，默认有转发视图和重定向视图</p><p>当工程引入jstl的依赖，转发视图会自动转换为JstlView</p><p>若使用的视图技术为Thymeleaf，在SpringMVC的配置文件中配置了Thymeleaf的视图解析器，由此视图解析器解析之后所得到的是ThymeleafView</p><h3 id="1、ThymeleafView"><a href="#1、ThymeleafView" class="headerlink" title="1、ThymeleafView"></a>1、ThymeleafView</h3><p>当控制器方法中所设置的视图名称没有任何前缀时，此时的视图名称会被SpringMVC配置文件中所配置的视图解析器解析，视图名称拼接视图前缀和视图后缀所得到的最终路径，会通过转发的方式实现跳转</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testHello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../java_Spring%E6%A1%86%E6%9E%B6/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringMVC/%E7%AC%94%E8%AE%B0/img/img002.png"></p><h3 id="2、转发视图"><a href="#2、转发视图" class="headerlink" title="2、转发视图"></a>2、转发视图</h3><p>SpringMVC中默认的转发视图是InternalResourceView</p><p>SpringMVC中创建转发视图的情况：</p><p>当控制器方法中所设置的视图名称以”forward:”为前缀时，创建InternalResourceView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”forward:”去掉，剩余部分作为最终路径通过转发的方式实现跳转</p><p>例如”forward:/“，”forward:/employee”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testForward"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"forward:/testHello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../java_Spring%E6%A1%86%E6%9E%B6/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringMVC/%E7%AC%94%E8%AE%B0/img/img003.png" alt="image-20210706201316593"></p><h3 id="3、重定向视图"><a href="#3、重定向视图" class="headerlink" title="3、重定向视图"></a>3、重定向视图</h3><p>SpringMVC中默认的重定向视图是RedirectView</p><p>当控制器方法中所设置的视图名称以”redirect:”为前缀时，创建RedirectView视图，此时的视图名称不会被SpringMVC配置文件中所配置的视图解析器解析，而是会将前缀”redirect:”去掉，剩余部分作为最终路径通过重定向的方式实现跳转</p><p>例如”redirect:/“，”redirect:/employee”</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRedirect"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/testHello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/../../../../java_Spring%E6%A1%86%E6%9E%B6/%E5%B0%9A%E7%A1%85%E8%B0%B7SpringMVC/%E7%AC%94%E8%AE%B0/img/img004.png" alt="image-20210706201602267"></p><blockquote><p>注：</p><p>重定向视图在解析时，会先将redirect:前缀去掉，然后会判断剩余部分是否以/开头，若是则会自动拼接上下文路径</p></blockquote><h3 id="4、视图控制器view-controller"><a href="#4、视图控制器view-controller" class="headerlink" title="4、视图控制器view-controller"></a>4、视图控制器view-controller</h3><p>当控制器方法中，仅仅用来实现页面跳转，即只需要设置视图名称时，可以将处理器方法使用view-controller标签进行表示</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--path：设置处理的请求地址view-name：设置请求地址所对应的视图名称--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/testView<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>view-controller</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：</p><p>当SpringMVC中设置任何一个view-controller时，其他控制器中的请求映射将全部失效，此时需要在SpringMVC的核心配置文件中设置开启mvc注解驱动的标签：</p><p>&lt;mvc:annotation-driven /&gt;</p></blockquote><h2 id="RESTful案例"><a href="#RESTful案例" class="headerlink" title="RESTful案例"></a>RESTful案例</h2><h3 id="SpringMVC中mvc-default-servlet-handler-处理静态资源"><a href="#SpringMVC中mvc-default-servlet-handler-处理静态资源" class="headerlink" title="SpringMVC中mvc:default-servlet-handler(处理静态资源)"></a>SpringMVC中mvc:default-servlet-handler(处理静态资源)</h3><p><img src="https://img-blog.csdn.net/20180423202110505?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVqYXM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p>SpringMVC会将接收到的所有请求看作一个普通的请求，包括对静态资源的请求。这样，对于所有静态资源的请求也会被看作是后台控制器请求，导致找不到报404，这时可在全局配置文件中添加<code>&lt;mvc:default-servlet-handler/&gt;</code>，这样在启动时会定义一个DefaultServletHttpRequestHandler,他会对DispatcherServlet的请求处理，如果找不到，就会交给默认的Servlet处理，从而找到对应的静态资源。</p><h3 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h3><p>和传统 CRUD 一样，实现对员工信息的增删改查。</p><ul><li><p>搭建环境</p></li><li><p>准备实体类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>bean</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> lastName<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>   <span class="token comment">//1 male, 0 female</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> gender<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> id<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getLastName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> lastName<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLastName</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> email<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> gender<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setGender</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> lastName<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token class-name">Integer</span> gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>准备dao模拟数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>bean<span class="token punctuation">.</span></span><span class="token class-name">Employee</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Repository</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeDao</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employees <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">static</span><span class="token punctuation">{</span>      employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"E-AA"</span><span class="token punctuation">,</span> <span class="token string">"aa@163.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"E-BB"</span><span class="token punctuation">,</span> <span class="token string">"bb@163.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span> <span class="token string">"E-CC"</span><span class="token punctuation">,</span> <span class="token string">"cc@163.com"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span> <span class="token string">"E-DD"</span><span class="token punctuation">,</span> <span class="token string">"dd@163.com"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span> <span class="token string">"E-EE"</span><span class="token punctuation">,</span> <span class="token string">"ee@163.com"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> initId <span class="token operator">=</span> <span class="token number">1006</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         employee<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>initId<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> employees<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> employees<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>      employees<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2、功能清单"><a href="#2、功能清单" class="headerlink" title="2、功能清单"></a>2、功能清单</h3><table><thead><tr><th>功能</th><th>URL 地址</th><th>请求方式</th></tr></thead><tbody><tr><td>访问首页√</td><td>/</td><td>GET</td></tr><tr><td>查询全部数据√</td><td>/employee</td><td>GET</td></tr><tr><td>删除√</td><td>/employee/2</td><td>DELETE</td></tr><tr><td>跳转到添加数据页面√</td><td>/toAdd</td><td>GET</td></tr><tr><td>执行保存√</td><td>/employee</td><td>POST</td></tr><tr><td>跳转到更新数据页面√</td><td>/employee/2</td><td>GET</td></tr><tr><td>执行更新√</td><td>/employee</td><td>PUT</td></tr></tbody></table><h3 id="3、具体功能：访问首页"><a href="#3、具体功能：访问首页" class="headerlink" title="3、具体功能：访问首页"></a>3、具体功能：访问首页</h3><h5 id="a-gt-配置view-controller"><a href="#a-gt-配置view-controller" class="headerlink" title="a>配置view-controller"></a>a&gt;配置view-controller</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="b-gt-创建页面"><a href="#b-gt-创建页面" class="headerlink" title="b>创建页面"></a>b&gt;创建页面</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/employee}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>访问员工信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、具体功能：查询所有员工数据"><a href="#4、具体功能：查询所有员工数据" class="headerlink" title="4、具体功能：查询所有员工数据"></a>4、具体功能：查询所有员工数据</h3><h5 id="a-gt-控制器方法"><a href="#a-gt-控制器方法" class="headerlink" title="a>控制器方法"></a>a&gt;控制器方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/employee"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEmployeeList</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employeeList <span class="token operator">=</span> employeeDao<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"employeeList"</span><span class="token punctuation">,</span> employeeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"employee_list"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-gt-创建employee-list-html"><a href="#b-gt-创建employee-list-html" class="headerlink" title="b>创建employee_list.html"></a>b&gt;创建employee_list.html</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Employee Info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/js/vue.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataTable<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Employee Info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>lastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>options(<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/toAdd}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee : ${employeeList}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.id}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.lastName}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.email}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.gender}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteA<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteEmployee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/employee/<span class="token punctuation">'</span>+${employee.id}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/employee/<span class="token punctuation">'</span>+${employee.id}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、具体功能：删除"><a href="#5、具体功能：删除" class="headerlink" title="5、具体功能：删除"></a>5、具体功能：删除</h3><h5 id="a-gt-创建处理delete请求方式的表单"><a href="#a-gt-创建处理delete请求方式的表单" class="headerlink" title="a>创建处理delete请求方式的表单"></a>a&gt;创建处理delete请求方式的表单</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 作用：通过超链接控制表单的提交，将post请求转换为delete请求 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete_form<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- HiddenHttpMethodFilter要求：必须传输_method请求参数，并且值为最终的请求方式 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="b-gt-删除超链接绑定点击事件"><a href="#b-gt-删除超链接绑定点击事件" class="headerlink" title="b>删除超链接绑定点击事件"></a>b&gt;删除超链接绑定点击事件</h5><p>引入vue.js</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/js/vue.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除超链接</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteA<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deleteEmployee<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/employee/<span class="token punctuation">'</span>+${employee.id}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过vue处理点击事件</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span><span class="token string">"#dataTable"</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token comment">//event表示当前事件</span>            <span class="token function-variable function">deleteEmployee</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//通过id获取表单标签</span>                <span class="token keyword">var</span> delete_form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"delete_form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将触发事件的超链接的href属性为表单的action属性赋值</span>                delete_form<span class="token punctuation">.</span>action <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>href<span class="token punctuation">;</span>                <span class="token comment">//提交表单</span>                delete_form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//阻止超链接的默认跳转行为</span>                event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-gt-控制器方法"><a href="#c-gt-控制器方法" class="headerlink" title="c>控制器方法"></a>c&gt;控制器方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/employee/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>DELETE<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deleteEmployee</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    employeeDao<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/employee"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、具体功能：跳转到添加数据页面"><a href="#6、具体功能：跳转到添加数据页面" class="headerlink" title="6、具体功能：跳转到添加数据页面"></a>6、具体功能：跳转到添加数据页面</h3><h5 id="a-gt-配置view-controller-1"><a href="#a-gt-配置view-controller-1" class="headerlink" title="a>配置view-controller"></a>a&gt;配置view-controller</h5><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/toAdd<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>employee_add<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>view-controller</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="b-gt-创建employee-add-html"><a href="#b-gt-创建employee-add-html" class="headerlink" title="b>创建employee_add.html"></a>b&gt;创建employee_add.html</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Add Employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/employee}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    lastName:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    email:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    gender:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>male    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>add<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7、具体功能：执行保存"><a href="#7、具体功能：执行保存" class="headerlink" title="7、具体功能：执行保存"></a>7、具体功能：执行保存</h3><h5 id="a-gt-控制器方法-1"><a href="#a-gt-控制器方法-1" class="headerlink" title="a>控制器方法"></a>a&gt;控制器方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/employee"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addEmployee</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">{</span>    employeeDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/employee"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8、具体功能：跳转到更新数据页面"><a href="#8、具体功能：跳转到更新数据页面" class="headerlink" title="8、具体功能：跳转到更新数据页面"></a>8、具体功能：跳转到更新数据页面</h3><h5 id="a-gt-修改超链接"><a href="#a-gt-修改超链接" class="headerlink" title="a>修改超链接"></a>a&gt;修改超链接</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{<span class="token punctuation">'</span>/employee/<span class="token punctuation">'</span>+${employee.id}}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>update<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="b-gt-控制器方法"><a href="#b-gt-控制器方法" class="headerlink" title="b>控制器方法"></a>b&gt;控制器方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/employee/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getEmployeeById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Employee</span> employee <span class="token operator">=</span> employeeDao<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"employee"</span><span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"employee_update"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="c-gt-创建employee-update-html"><a href="#c-gt-创建employee-update-html" class="headerlink" title="c>创建employee_update.html"></a>c&gt;创建employee_update.html</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Update Employee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/employee}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>put<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.id}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    lastName:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.lastName}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    email:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.email}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--        th:field="${employee.gender}"可用于单选框或复选框的回显        若单选框的value和employee.gender的值一致，则添加checked="checked"属性    --&gt;</span>    gender:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.gender}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>male    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>field</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${employee.gender}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9、具体功能：执行更新"><a href="#9、具体功能：执行更新" class="headerlink" title="9、具体功能：执行更新"></a>9、具体功能：执行更新</h3><h5 id="a-gt-控制器方法-2"><a href="#a-gt-控制器方法-2" class="headerlink" title="a>控制器方法"></a>a&gt;控制器方法</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/employee"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">updateEmployee</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span><span class="token punctuation">{</span>    employeeDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:/employee"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理静态资源的过程"><a href="#处理静态资源的过程" class="headerlink" title="处理静态资源的过程"></a>处理静态资源的过程</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--    开放对静态资源的访问--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/Thinkingcao/article/details/90750916">mvc:default-servlet-handler(处理静态资源)</a></p><h2 id="HttpMessageConverter"><a href="#HttpMessageConverter" class="headerlink" title="HttpMessageConverter"></a>HttpMessageConverter</h2><p>HttpMessageConverter，报文信息转换器，将请求报文转换为Java对象，或将Java对象转换为响应报文</p><p>HttpMessageConverter提供了两个注解和两个类型：@RequestBody，@ResponseBody，RequestEntity，</p><p>ResponseEntity</p><h3 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h3><p>@RequestBody可以获取请求体，需要在控制器方法设置一个形参，使用@RequestBody进行标识，当前请求的请求体就会为当前注解所标识的形参赋值</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testRequestBody}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestBody"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> requestBody<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestBody:"</span><span class="token operator">+</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><p>requestBody:username=admin&amp;password=123456</p><h3 id="2、RequestEntity"><a href="#2、RequestEntity" class="headerlink" title="2、RequestEntity"></a>2、RequestEntity</h3><p>RequestEntity封装请求报文的一种类型，需要在控制器方法的形参中设置该类型的形参，当前请求的请求报文就会赋值给该形参，可以通过getHeaders()获取请求头信息，通过getBody()获取请求体信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRequestEntity"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testRequestEntity</span><span class="token punctuation">(</span><span class="token class-name">RequestEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> requestEntity<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestHeader:"</span><span class="token operator">+</span>requestEntity<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestBody:"</span><span class="token operator">+</span>requestEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br>requestHeader:[host:”localhost:8080”, connection:”keep-alive”, content-length:”27”, cache-control:”max-age=0”, sec-ch-ua:”” Not A;Brand”;v=”99”, “Chromium”;v=”90”, “Google Chrome”;v=”90””, sec-ch-ua-mobile:”?0”, upgrade-insecure-requests:”1”, origin:”<a href="http://localhost:8080&quot;">http://localhost:8080"</a>, user-agent:”Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36”]<br>requestBody:username=admin&amp;password=123</p><h3 id="3、-ResponseBody"><a href="#3、-ResponseBody" class="headerlink" title="3、@ResponseBody"></a>3、@ResponseBody</h3><p>@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testResponseBody"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：浏览器页面显示success</p><h3 id="4、SpringMVC处理json"><a href="#4、SpringMVC处理json" class="headerlink" title="4、SpringMVC处理json"></a>4、SpringMVC处理json</h3><p>@ResponseBody处理json的步骤：</p><p>a&gt;导入jackson的依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b&gt;在SpringMVC的核心配置文件中开启mvc的注解驱动，此时在HandlerAdaptor中会自动装配一个消息转换器：MappingJackson2HttpMessageConverter，可以将响应到浏览器的Java对象转换为Json格式的字符串</p><pre class="line-numbers language-none"><code class="language-none">&lt;mvc:annotation-driven /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>c&gt;在处理器方法上使用@ResponseBody注解进行标识</p><p>d&gt;将Java对象直接作为控制器方法的返回值返回，就会自动转换为Json格式的字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testResponseUser"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">testResponseUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器的页面中展示的结果：</p><p>{“id”:1001,”username”:”admin”,”password”:”123456”,”age”:23,”sex”:”男”}</p><p><font color="red">也可以利用JSONObject对象返回json数据，需要导包，具体可看网上讲解</font></p><p><a href="https://www.yuzhe-tech.com/2018/07/09/JSONObject/">JSONObject与JSONArray</a></p><h3 id="5、SpringMVC处理ajax"><a href="#5、SpringMVC处理ajax" class="headerlink" title="5、SpringMVC处理ajax"></a>5、SpringMVC处理ajax</h3><p>a&gt;请求超链接：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/testAjax}<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>testAjax<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>testAjax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>b&gt;通过vue和axios处理点击事件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/js/vue.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{/static/js/axios.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token operator">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token function-variable function">testAjax</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    method<span class="token operator">:</span><span class="token string">"post"</span><span class="token punctuation">,</span>                    url<span class="token operator">:</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>href<span class="token punctuation">,</span>                    params<span class="token operator">:</span><span class="token punctuation">{</span>                        username<span class="token operator">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span>                        password<span class="token operator">:</span><span class="token string">"123456"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>c&gt;控制器方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"username:"</span><span class="token operator">+</span>username<span class="token operator">+</span><span class="token string">",password:"</span><span class="token operator">+</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello,ajax"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6、-RestController注解"><a href="#6、-RestController注解" class="headerlink" title="6、@RestController注解"></a>6、@RestController注解</h3><p>@RestController注解是springMVC提供的一个复合注解，标识在控制器的类上，就相当于为类添加了@Controller注解，并且为其中的每个方法添加了@ResponseBody注解</p><h3 id="7、ResponseEntity"><a href="#7、ResponseEntity" class="headerlink" title="7、ResponseEntity"></a>7、ResponseEntity</h3><p>ResponseEntity用于控制器方法的返回值类型，该控制器方法的返回值就是响应到浏览器的响应报文</p><h2 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h2><h3 id="1、文件下载"><a href="#1、文件下载" class="headerlink" title="1、文件下载"></a>1、文件下载</h3><p>使用ResponseEntity实现下载文件的功能</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testDown"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">testResponseEntity</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//获取ServletContext对象</span>    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取服务器中文件的真实路径</span>    <span class="token class-name">String</span> realPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/static/img/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建输入流</span>    <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建字节数组</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//将流读到字节数组中</span>    is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建HttpHeaders对象设置响应头信息</span>    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置要下载方式以及下载文件的名字</span>    headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename=1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置响应状态码</span>    <span class="token class-name">HttpStatus</span> statusCode <span class="token operator">=</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">;</span>    <span class="token comment">//创建ResponseEntity对象</span>    <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> responseEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//关闭输入流</span>    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> responseEntity<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、文件上传"><a href="#2、文件上传" class="headerlink" title="2、文件上传"></a>2、文件上传</h3><p>文件上传要求form表单的请求方式必须为post，并且添加属性enctype=”multipart/form-data”</p><p>SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息</p><p>上传步骤：</p><p>a&gt;添加依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>b&gt;在SpringMVC的配置文件中添加配置：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--必须通过文件解析器的解析才能将文件转换为MultipartFile对象--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>c&gt;控制器方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testUp"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testUp</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> photo<span class="token punctuation">,</span> <span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token comment">//获取上传的文件的文件名</span>    <span class="token class-name">String</span> fileName <span class="token operator">=</span> photo<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//处理文件重名问题</span>    <span class="token class-name">String</span> hzName <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> hzName<span class="token punctuation">;</span>    <span class="token comment">//获取服务器中photo目录的路径</span>    <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> photoPath <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>photoPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        file<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">String</span> finalPath <span class="token operator">=</span> photoPath <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> fileName<span class="token punctuation">;</span>    <span class="token comment">//实现上传功能</span>    photo<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>finalPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十、拦截器"><a href="#十、拦截器" class="headerlink" title="十、拦截器"></a>十、拦截器</h1><h3 id="1、拦截器的配置"><a href="#1、拦截器的配置" class="headerlink" title="1、拦截器的配置"></a>1、拦截器的配置</h3><p>SpringMVC中的拦截器用于拦截控制器方法的执行</p><p>SpringMVC中的拦截器需要实现HandlerInterceptor</p><p>SpringMVC的拦截器必须在SpringMVC的配置文件中进行配置：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.atguigu.interceptor.FirstInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 以上两种配置方式都是对DispatcherServlet所处理的所有的请求进行拦截 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/testRequestEntity<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ref</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 以上配置方式可以通过ref或bean标签设置拦截器，通过mvc:mapping设置需要拦截的请求，通过mvc:exclude-mapping设置需要排除的请求，即不需要拦截的请求--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、拦截器的三个抽象方法"><a href="#2、拦截器的三个抽象方法" class="headerlink" title="2、拦截器的三个抽象方法"></a>2、拦截器的三个抽象方法</h3><p>SpringMVC中的拦截器有三个抽象方法：</p><p>preHandle：控制器方法执行之前执行preHandle()，其boolean类型的返回值表示是否拦截或放行，返回true为放行，即调用控制器方法；返回false表示拦截，即不调用控制器方法</p><p>postHandle：控制器方法执行之后执行postHandle()</p><p>afterComplation：处理完视图和模型数据，渲染视图完毕之后执行afterComplation()</p><h3 id="3、多个拦截器的执行顺序"><a href="#3、多个拦截器的执行顺序" class="headerlink" title="3、多个拦截器的执行顺序"></a>3、多个拦截器的执行顺序</h3><p>a&gt;若每个拦截器的preHandle()都返回true</p><p>此时多个拦截器的执行顺序和拦截器在SpringMVC的配置文件的配置顺序有关：</p><p>preHandle()会按照配置的顺序执行，而postHandle()和afterComplation()会按照配置的反序执行</p><p>b&gt;若某个拦截器的preHandle()返回了false</p><p>preHandle()返回false和它之前的拦截器的preHandle()都会执行，postHandle()都不执行，返回false的拦截器之前的拦截器的afterComplation()会执行</p><h3 id="4、WebRequestInterceptor"><a href="#4、WebRequestInterceptor" class="headerlink" title="4、WebRequestInterceptor"></a>4、WebRequestInterceptor</h3><h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><h3 id="1、基于配置的异常处理"><a href="#1、基于配置的异常处理" class="headerlink" title="1、基于配置的异常处理"></a>1、基于配置的异常处理</h3><p><a href="https://www.cnblogs.com/lvbinbin2yujie/p/10574812.html">Spring 异常处理三种方式 @ExceptionHandler</a></p><p>SpringMVC提供了一个处理控制器方法执行过程中所出现的异常的接口：HandlerExceptionResolver </p><p>HandlerExceptionResolver接口的实现类有：DefaultHandlerExceptionResolver和SimpleMappingExceptionResolver</p><p>SpringMVC提供了自定义的异常处理器SimpleMappingExceptionResolver，使用方式：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionMappings<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--        properties的键表示处理器方法执行过程中出现的异常        properties的值表示若出现指定异常时，设置一个新的视图名称，跳转到指定页面        --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ArithmeticException<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>error<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    exceptionAttribute属性设置一个属性名，将出现的异常信息在请求域中进行共享    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionAttribute<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ex<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、基于注解的异常处理"><a href="#2、基于注解的异常处理" class="headerlink" title="2、基于注解的异常处理"></a>2、基于注解的异常处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//@ControllerAdvice将当前类标识为异常处理的组件</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionController</span> <span class="token punctuation">{</span>    <span class="token comment">//@ExceptionHandler用于设置所标识方法处理的异常</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token comment">//ex表示当前请求处理中出现的异常对象</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handleArithmeticException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"ex"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十二、注解配置SpringMVC"><a href="#十二、注解配置SpringMVC" class="headerlink" title="十二、注解配置SpringMVC"></a>十二、注解配置SpringMVC</h1><p>使用配置类和注解代替web.xml和SpringMVC配置文件的功能</p><h3 id="1、创建初始化类，代替web-xml"><a href="#1、创建初始化类，代替web-xml" class="headerlink" title="1、创建初始化类，代替web.xml"></a>1、创建初始化类，代替web.xml</h3><p>在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口的类，如果找到的话就用它来配置Servlet容器。<br>Spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务交给它们来完成。Spring3.2引入了一个便利的WebApplicationInitializer基础实现，名为AbstractAnnotationConfigDispatcherServletInitializer，当我们的类扩展了AbstractAnnotationConfigDispatcherServletInitializer并将其部署到Servlet3.0容器的时候，容器会自动发现它，并用它来配置Servlet上下文。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebInit</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 指定spring的配置类     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">SpringConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 指定SpringMVC的配置类     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">WebConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 指定DispatcherServlet的映射规则，即url-pattern     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加过滤器     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CharacterEncodingFilter</span> encodingFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        encodingFilter<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        encodingFilter<span class="token punctuation">.</span><span class="token function">setForceRequestEncoding</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HiddenHttpMethodFilter</span> hiddenHttpMethodFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>encodingFilter<span class="token punctuation">,</span> hiddenHttpMethodFilter<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、创建SpringConfig配置类，代替spring的配置文件"><a href="#2、创建SpringConfig配置类，代替spring的配置文件" class="headerlink" title="2、创建SpringConfig配置类，代替spring的配置文件"></a>2、创建SpringConfig配置类，代替spring的配置文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfig</span> <span class="token punctuation">{</span><span class="token comment">//ssm整合之后，spring的配置信息写在此类中</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、创建WebConfig配置类，代替SpringMVC的配置文件"><a href="#3、创建WebConfig配置类，代替SpringMVC的配置文件" class="headerlink" title="3、创建WebConfig配置类，代替SpringMVC的配置文件"></a>3、创建WebConfig配置类，代替SpringMVC的配置文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment">//扫描组件</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mvc.controller"</span><span class="token punctuation">)</span><span class="token comment">//开启MVC注解驱动</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment">//使用默认的servlet处理静态资源</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span><span class="token class-name">DefaultServletHandlerConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        configurer<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//配置文件上传解析器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CommonsMultipartResolver</span> <span class="token function">multipartResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonsMultipartResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//配置拦截器</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">FirstInterceptor</span> firstInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FirstInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>firstInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//配置视图控制</span>        <span class="token comment">/*@Override    public void addViewControllers(ViewControllerRegistry registry) {        registry.addViewController("/").setViewName("index");    }*/</span>        <span class="token comment">//配置异常映射</span>    <span class="token comment">/*@Override    public void configureHandlerExceptionResolvers(List&lt;HandlerExceptionResolver&gt; resolvers) {        SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();        Properties prop = new Properties();        prop.setProperty("java.lang.ArithmeticException", "error");        //设置异常映射        exceptionResolver.setExceptionMappings(prop);        //设置共享异常信息的键        exceptionResolver.setExceptionAttribute("ex");        resolvers.add(exceptionResolver);    }*/</span>    <span class="token comment">//配置生成模板解析器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ITemplateResolver</span> <span class="token function">templateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WebApplicationContext</span> webApplicationContext <span class="token operator">=</span> <span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ServletContextTemplateResolver需要一个ServletContext作为构造参数，可通过WebApplicationContext 的方法获得</span>        <span class="token class-name">ServletContextTemplateResolver</span> templateResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextTemplateResolver</span><span class="token punctuation">(</span>                webApplicationContext<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/templates/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateResolver<span class="token punctuation">.</span><span class="token function">setTemplateMode</span><span class="token punctuation">(</span><span class="token class-name">TemplateMode</span><span class="token punctuation">.</span>HTML<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> templateResolver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//生成模板引擎并为模板引擎注入模板解析器</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SpringTemplateEngine</span> <span class="token function">templateEngine</span><span class="token punctuation">(</span><span class="token class-name">ITemplateResolver</span> templateResolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SpringTemplateEngine</span> templateEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateEngine<span class="token punctuation">.</span><span class="token function">setTemplateResolver</span><span class="token punctuation">(</span>templateResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> templateEngine<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//生成视图解析器并未解析器注入模板引擎</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ViewResolver</span> <span class="token function">viewResolver</span><span class="token punctuation">(</span><span class="token class-name">SpringTemplateEngine</span> templateEngine<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ThymeleafViewResolver</span> viewResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThymeleafViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        viewResolver<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        viewResolver<span class="token punctuation">.</span><span class="token function">setTemplateEngine</span><span class="token punctuation">(</span>templateEngine<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> viewResolver<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、测试功能"><a href="#4、测试功能" class="headerlink" title="4、测试功能"></a>4、测试功能</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java并发编程总复习加深入理解笔记（一）</title>
      <link href="/2021/12/10/java-bing-fa-bian-cheng-hei-ma-juc-shen-ru-li-jie-bi-ji-yi/"/>
      <url>/2021/12/10/java-bing-fa-bian-cheng-hei-ma-juc-shen-ru-li-jie-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV16J411h7Rd?from=search&amp;seid=16873817666180498597&amp;spm_id_from=333.337.0.0">黑马程序员全面深入学习Java并发编程，JUC并发编程全套教程</a></p><p><a href="https://github.com/Seazean/JavaNotes">并发笔记</a></p><h2 id="Sleep实现"><a href="#Sleep实现" class="headerlink" title="Sleep实现"></a>Sleep实现</h2><p>在没有利用CPU计算时，不要让while（true）空转浪费CPU时间，可以使用yield或sleep来让出cpu给其他程序使用。这在多线程编程中服务端不断接受请求的编写中很重要，可以防止CPU占用100%.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//休眠一会，让出CPU</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LockSupport学习"><a href="#LockSupport学习" class="headerlink" title="LockSupport学习"></a>LockSupport学习</h2><p><a href="https://www.jianshu.com/p/f1f2cd289205">LockSupport的用法及原理</a></p><p><a href="https://pdai.tech/md/java/thread/java-thread-x-lock-LockSupport.html">JUC锁: LockSupport详解</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（九）基于事件的并发</title>
      <link href="/2021/12/08/cao-zuo-xi-tong-dao-lun-bi-ji-jiu-ji-yu-shi-jian-de-bing-fa/"/>
      <url>/2021/12/08/cao-zuo-xi-tong-dao-lun-bi-ji-jiu-ji-yu-shi-jian-de-bing-fa/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/37804932">Threee easy pieces总结——并发(5)：基于事件的并发（event-based concurrency） - 知乎 (zhihu.com)</a></p><p><a href="https://www.zhihu.com/question/64727674">(11 封私信 / 80 条消息) 为什么基于事件驱动的服务器能实现高并发？ - 知乎 (zhihu.com)</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们目前所提到的并发似乎只能用线程来实现，实际上还有一种流行的并发方式是基于事件的并发。</p><p>基于事件的并发针对两方面的问题：</p><ul><li>多线程应用中，正确处理并发很有难度，如忘加锁，死锁等</li><li>开发者无法控制多线程在某一时刻的调度，程序员只是创建了线程，依赖操作系统合理地调度线程。要实现一个在不同负载下，都能良好运行的调度程序是很困难的。</li></ul><p>因此接下来的关键问题是：如何不用线程，同时又能保证对并发的控制，构建并发服务器呢？</p><h3 id="基本想法：事件循环"><a href="#基本想法：事件循环" class="headerlink" title="基本想法：事件循环"></a>基本想法：事件循环</h3><p>等待事件发生，当发生时，检查事件类型，然后对应处理。</p><pre class="line-numbers language-none"><code class="language-none">while(1){events=getEvents();for(e in events){processEvent(e);}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主循环依次等待事件发生，依次处理。处理事件的代码叫事件处理程序。处理程序在处理事件时，它是系统中唯一发生的活动，因此调度决定接下来处理哪个事件。这是对调度的显示控制，是基于事件处理的优点。</p><p>但这也带来一个更大的问题：基于事件的服务器如何决定哪个事件发生，尤其是网络和磁盘I/O，事件服务器如何确定是否有它的消息到达？</p><h3 id="select-和poll"><a href="#select-和poll" class="headerlink" title="select()和poll()"></a>select()和poll()</h3><p>大多数系统提供API，即select和poll系统调用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">int</span> nfds<span class="token punctuation">,</span>          fd_set <span class="token operator">*</span>restrict readfds<span class="token punctuation">,</span>          fd_set <span class="token operator">*</span>restrict writefds<span class="token punctuation">,</span>          fd_set <span class="token operator">*</span>restrict errorfds<span class="token punctuation">,</span>          <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>restrict timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>select() 检查I/O描述符集合，他们的地址通过readfds，writefds，和errorfds传入，分别查看它们中某些描述符是否准备好读取，准备好写入，或有异常情况处理，在每个集合中检查前nfds个描述符即0-nfds-1，返回时，select() 用给定请求操作准备好的描述符组成的子集替换给定描述符集合，返回就绪描述符总数。</p><p>==关于select的注意==：</p><ul><li>它可以让你检查描述符是否可以读取或需写入，前者让服务器确定新数据包已到达，且需要处理，后者让服务器知道何时回复。</li><li>超时参数通常设置为NULL，这会导致select无限期阻塞，知道某个描述符准备就绪，更常见的技术是设置为0，让select立即返回。</li></ul><h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        fd_set readFDS<span class="token punctuation">;</span>        <span class="token function">FD_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>readFDs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> fd<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>fd<span class="token operator">=</span>minFD<span class="token punctuation">;</span>fd<span class="token operator">&lt;</span>maxFD<span class="token punctuation">;</span>fd<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">FD_SET</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>readFDs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> rc<span class="token operator">=</span><span class="token function">select</span><span class="token punctuation">(</span>maxFD<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>readFDs<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> fd<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>fd<span class="token operator">=</span>midFD<span class="token punctuation">;</span>fd<span class="token operator">&lt;</span>maxFD<span class="token punctuation">;</span>fd<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">FD_ISSET</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>readFDs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">processFD</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在循环内部，使用FD_ZERO清除文件描述符集合，使用FD_SET注册FD，表示服务器关注的所有网络套接字，最后调用select查看哪些连接有可用的数据，使用FD_ISSET，事件服务器可以查看哪些描述符准备好数据并处理传入的数据。</p><h3 id="一个问题：阻塞系统调用"><a href="#一个问题：阻塞系统调用" class="headerlink" title="一个问题：阻塞系统调用"></a>一个问题：阻塞系统调用</h3><p>假设某个事件要求你发出可能会阻塞系统调用，如一个请求从客户端进入服务器，要求从磁盘读取文件将其内容返回给发出请求的客户端，事件处理程序将不得不发出open系统调用打开文件，通过一系列read来读取文件。因此可能需要很长时间才能提高服务。使用基于线程的服务器时，这不是问题：在发出I/O请求的线程挂起，等待I/O完成，其他线程运行。</p><p>但基于事件的方法意味着必须等待阻塞，这将会造成巨大资源浪费，因此在基于事件的系统中必须遵守一条规则：阻止系统调用。</p><h3 id="解决方案：异步I-O"><a href="#解决方案：异步I-O" class="headerlink" title="解决方案：异步I/O"></a>解决方案：异步I/O</h3><p>异步I/O接口能发出请求并在I/O完成之前将控制权返回给调用者，另外的接口能确定各种I/O是否完成。</p><p>如macOS上的AIO控制块。</p><pre class="line-numbers language-none"><code class="language-none">struct aiocb {int aio_fildes;off_t aio_offset;volatile void *aio_buf;size_t aio_nbytes;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>向文件发出异步读取，应用程序首先用相关信息填充此结构，要读取的文件描述符（aio_fildes），文件内偏移量（aio_offset），长度请求（aio_nbytes），最后是应该复制读取结果的目标内存位置（aio_buf）。</p><p>在填充此结构后，应用程序必须发出异步调用来读取文件<code>int&nbsp;aio_read(struct aiocb *aiocbp)</code>如果成功，它会立即返回应用程序。</p><p>然而这又带来一个问题，我们如何知道I/O何时完成？</p><p>可以利用<code>aio_error()</code>，它检查aiocbp引用的请求是否完成，若完成则返回0表示成功，若为完成则返回<code>EINPROGRESS</code>故，对每个未完成的异步IO，应用程序通过调用<code>aio_error()</code>周期性轮询，以确定I/O是否完成。</p><p>你可能注意到，当异步I/O变得很多时将会很影响效率，因为需要不断的轮询，故为了解决这个问题，系统提供了基于中断的方法。此方法使用signal在异步I/O完成时通知应用程序，从而消除轮询的开销。</p><h3 id="补充：UNIX信号"><a href="#补充：UNIX信号" class="headerlink" title="补充：UNIX信号"></a>补充：UNIX信号</h3><p>将信号传递给应用程序，让应用程序停止当前工作，处理信号处理程序，完成后将恢复先前的行为。</p><p>信号有如 HUP(挂断), INT(中断)，SEGV(段违规)等。例如当程序遇到段违规时，系统将发送SIGSEGV，如果程序配置为捕获信号，则可以运行一些代码来响应这个信号。若没有配置处理信号的程序，一些默认行为将生效。</p><pre class="line-numbers language-none"><code class="language-none">#include&lt;stdio.h&gt;#include&lt;signal.h&gt;void handle(int arg){printf("stop");}int main(){signal(SIGHUP,handle);while(1){;}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="另一个问题：状态管理"><a href="#另一个问题：状态管理" class="headerlink" title="另一个问题：状态管理"></a>另一个问题：状态管理</h3><p>当事件处理程序发出异步IO后，必须打包一些程序的状态，以便下一个事件处理程序在IO完成时使用。这个额外的工作在基于线程的程序中不需要，因为需要的状态保存在线程栈中。我们通过下面的例子来了解如何状态管理。</p><pre class="line-numbers language-none"><code class="language-none">int rc=read(fd,buffer,size);rc=write(sd,buffer,size);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在一个多线程程序中，当read返回时，代码立即知道该写入哪个套接字，因为信息存储于线程堆栈中。</p><p>在基于事件的系统中，为了执行相同的任务，首先使用AIO异步读取，当调用告诉我们读取完成时，服务器该怎么做？</p><p>一种解决方案是：在某些数据结构中记录完成处理事件需要的信息，当事件发生时，查找信息处理事件。</p><p>例如，将套接字描述符记录在由文件描述符fd索引的某种数据结构中如散列表。</p><h3 id="依然存在的问题"><a href="#依然存在的问题" class="headerlink" title="依然存在的问题"></a>依然存在的问题</h3><p>具体可查阅书籍资料。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（八）常见并发问题</title>
      <link href="/2021/12/08/cao-zuo-xi-tong-dao-lun-bi-ji-ba-chang-jian-bing-fa-wen-ti/"/>
      <url>/2021/12/08/cao-zuo-xi-tong-dao-lun-bi-ji-ba-chang-jian-bing-fa-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="有哪些类型的缺陷"><a href="#有哪些类型的缺陷" class="headerlink" title="有哪些类型的缺陷"></a>有哪些类型的缺陷</h2><p>对于目前主流的开源应用，常见的有以下两类缺陷：非死锁缺陷和死锁缺陷</p><h3 id="非死锁缺陷"><a href="#非死锁缺陷" class="headerlink" title="非死锁缺陷"></a>非死锁缺陷</h3><p>非死锁缺陷占并发问题的大多数，我们主要讨论其中的两种：违反原子性缺陷和错误顺序缺陷</p><h4 id="违反原子性缺陷"><a href="#违反原子性缺陷" class="headerlink" title="违反原子性缺陷"></a>违反原子性缺陷</h4><p>下面是MySQL中的例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Thread <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>thd<span class="token operator">-&gt;</span>proc_info<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">fputs</span><span class="token punctuation">(</span>thd<span class="token operator">-&gt;</span>proc_info<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>Thread <span class="token number">2</span><span class="token operator">:</span>thd<span class="token operator">-&gt;</span>proc_info<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个线程都要访问thd结构中的成员proc_info，第一个线程检查proc_info非空，打印，第二个线程设置为空，若出现当地一个线程，在调用fputs之前被中断，第二个线程运行将其置为空，当第一个线程恢复执行时，会出现程序崩溃。</p><p>这是违反了原子性，即检查proc_info非空和打印应该是原子的，但没有设计成原子的。我们可以考虑加锁来实现原子性。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">pthread_mutex_t</span> proc_info_lock <span class="token operator">=</span> PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span>Thread <span class="token number">1</span><span class="token operator">:</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc_info_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>thd<span class="token operator">-&gt;</span>proc_info<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>thd<span class="token operator">-&gt;</span>proc_info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc_info_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>Thread <span class="token number">2</span><span class="token operator">:</span><span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc_info_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>thd<span class="token operator">-&gt;</span>proc_info <span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>proc_info_lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="违反顺序缺陷"><a href="#违反顺序缺陷" class="headerlink" title="违反顺序缺陷"></a>违反顺序缺陷</h4><p>看下面的例子</p><pre class="line-numbers language-none"><code class="language-none">Thread 1:void init(){...mThread=PR_CreatThread(mMain,...);...}Thread 2:void mMain(...){...mState=mThread-&gt;State;...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线程2已经假定mThread已经初始化了，但若按照这种顺序：线程1没有先执行而是2先执行，就会出现空指针引用崩溃，还可能产生更奇怪的问题如线程2读到任意内存。</p><p>违反顺序的定义是：两个内存访问的预期顺序被打破了。我们可以通过加入同步来解决问题即锁加信号量实现。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pthread_mutex_mtLock<span class="token operator">=</span>PTHREAD_MUTEX_INITIALIZER<span class="token punctuation">;</span><span class="token class-name">pthread_cond_t</span> mtCond<span class="token operator">=</span>PTHREAD_COND_INITIALIZER<span class="token punctuation">;</span><span class="token keyword">int</span> mtInit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//状态变量</span>Thread <span class="token number">1</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>mThread<span class="token operator">=</span><span class="token function">PR_CreateThread</span><span class="token punctuation">(</span>mMain<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//signal that the thread has been created...</span>    <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtLock<span class="token punctuation">)</span><span class="token punctuation">;</span>    mtInit<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtCond<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtLock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>Thread <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">mMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>   <span class="token comment">//wait for the thread to be initialized...</span>   <span class="token function">pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtLock<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">while</span><span class="token punctuation">(</span>mtInit<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtCond<span class="token punctuation">,</span><span class="token operator">&amp;</span>mtLock<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mtLock<span class="token punctuation">)</span><span class="token punctuation">;</span>      mState<span class="token operator">=</span>mThread<span class="token operator">-&gt;</span>State<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>增加锁和条件变量，以及状态变量，初始化代码运行时将mtInit设置为1，并发出信号表明准备就绪。如果先线程2先运行，就会一直等待状态变量，后运行则正常运行。</p><p><strong>当线程之间的执行顺序很重要时，条件变量和锁能解决问题</strong></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>研究表明，大部分的非死锁问题是上述两类问题，我们应仔细研究，并更好避免他们。</p><h3 id="死锁缺陷"><a href="#死锁缺陷" class="headerlink" title="死锁缺陷"></a>死锁缺陷</h3><p>死锁是一种在复杂并发系统中出现的经典问题。</p><h4 id="为什么会发生死锁"><a href="#为什么会发生死锁" class="headerlink" title="为什么会发生死锁"></a>为什么会发生死锁</h4><p>你可能会想只要两个线程都用相同的抢锁顺序，死锁就不会发生，但是在大型代码库中，组件之间会有复杂的依赖，因此在设计大型系统的锁机制时，必须仔细地避免循环依赖</p><p>另一个原因是封装，具体可上网了解</p><h4 id="产生死锁的条件"><a href="#产生死锁的条件" class="headerlink" title="产生死锁的条件"></a>产生死锁的条件</h4><ul><li>互斥：线程对需要的资源互斥访问</li><li>持有并等待：线程持有了资源，同时又在等待其他资源</li><li>非抢占：线程获得的资源不能被抢占</li><li>循环等待：线程之间存在环路，环路上每个线程持有一个资源，而这个资源又是下一个线程需要的。</li></ul><p>只要四个条件中任意一个没有满足，就不会发生死锁。</p><h4 id="循环等待"><a href="#循环等待" class="headerlink" title="循环等待"></a>循环等待</h4><p>也许最实用的技术就是让代码不要产生循环等待。最直接的方法就是获取锁时提供全序。例如每个线程都是先申请L1，再申请L2，严格的顺序避免了循环等待。</p><p>当然复杂的系统锁的全序很难做到，因此偏序可能有用。</p><h4 id="持有并等待"><a href="#持有并等待" class="headerlink" title="持有并等待"></a>持有并等待</h4><p>通过原子抢锁来避免，如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">lock</span><span class="token punctuation">(</span>prevention<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">lock</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">lock</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span>prevention<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先抢到prevention，这就保证了不会有不合时宜的中断，避免了死锁。但不适用于封装，因为这个方案需要准确了解知道抢哪些琐，并且能提前抢到锁，而不是在真正需要的时候，可能降低了并发。</p><h4 id="非抢占"><a href="#非抢占" class="headerlink" title="非抢占"></a>非抢占</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">top<span class="token operator">:</span><span class="token function">lock</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">trylock</span><span class="token punctuation">(</span>L2<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">unlock</span><span class="token punctuation">(</span>L1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">goto</span> top<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：另一个线程也可以使用相同的加锁方法，但是不同的加锁顺序，程序仍然不会产生死锁，但又带来新的问题，活锁。两个线程可能一直抢锁失败，重复这一序列，系统一直运行这段代码，但不会有进展。通常可以在循环结束后，随机等待一个时间，再重复这个动作，减低线程间的重复干扰。</p><h4 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h4><p>完全避免互斥。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java源码级注解</title>
      <link href="/2021/12/08/java-yuan-ma-ji-zhu-jie/"/>
      <url>/2021/12/08/java-yuan-ma-ji-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="源码级注解处理"><a href="#源码级注解处理" class="headerlink" title="源码级注解处理"></a>源码级注解处理</h3><p>上面已经看到了如何分析正在运行的程序的注解，注解的另一种用法是自动处理源代码以产生更多源代码，配置文件，脚本等东西。</p><p>[java源码级注解处理+字节码级注解处理 - 开发者知识库 (itdaan.com)](<a href="https://www.itdaan.com/blog/2016/02/23/7fa3912a69d2f685b5529369f68df135.html#:~:text=%E3%80%901%E3%80%91%E6%BA%90%E7%A0%81%E7%BA%A7%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86">https://www.itdaan.com/blog/2016/02/23/7fa3912a69d2f685b5529369f68df135.html#:~:text=【1】源码级注解处理</a> 1）注解的用处之一： 就是自动生成包含程序额外信息的”附文件”。,Java EE 5使用注解极大地简化了编程模型。 2）源码级注解是将注解处理器添加到Java编译器中。)</p><p><a href="https://blog.csdn.net/u013815218/article/details/52432675">(168条消息) 源码级注解_walidake的博客-CSDN博客_源代码注释</a></p><p><a href="https://www.jianshu.com/p/6db8ad1b89c6">源码级注解 - 简书 (jianshu.com)</a></p><p>[java源码级注解处理+字节码级注解处理 - 开发者知识库 (itdaan.com)](<a href="https://www.itdaan.com/blog/2016/02/23/7fa3912a69d2f685b5529369f68df135.html#:~:text=%E3%80%901%E3%80%91%E6%BA%90%E7%A0%81%E7%BA%A7%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86">https://www.itdaan.com/blog/2016/02/23/7fa3912a69d2f685b5529369f68df135.html#:~:text=【1】源码级注解处理</a> 1）注解的用处之一： 就是自动生成包含程序额外信息的”附文件”。,Java EE 5使用注解极大地简化了编程模型。 2）源码级注解是将注解处理器添加到Java编译器中。)</p><p><a href="https://blog.csdn.net/u013815218/article/details/52432675">(168条消息) 源码级注解_walidake的博客-CSDN博客_源代码注释</a></p><p><a href="https://cn.bing.com/search?q=AbstractProcessor&amp;qs=n&amp;form=QBRE&amp;sp=-1&amp;pq=abstractprocessor&amp;sc=8-17&amp;sk=&amp;cvid=C637BA3626E842AA922E466431205927">AbstractProcessor - 国内版 Bing</a></p><p><a href="https://blog.csdn.net/Gaugamela/article/details/79694302">(168条消息) AbstractProcessor: 利用注解动态生成代码_ZhangJian的博客-CSDN博客_abstractprocessor</a></p><p><a href="https://blog.csdn.net/skycnlr/article/details/87869854">(168条消息) 注解处理器（Annoation Processor）_skycnlr的博客-CSDN博客_注解处理器</a></p><p><a href="https://www.jianshu.com/p/7af58e8e3e18">【Android】APT - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/github_35180164/article/details/52055994">(168条消息) Java注解处理器使用详解_Rukey7的博客-CSDN博客_注解处理器</a></p><p><a href="https://zhuanlan.zhihu.com/p/120718706">注解处理器（APT）了解一下 - 知乎 (zhihu.com)</a></p><p><a href="https://www.jianshu.com/p/d7567258ae85">注解处理器（Annotation Processor）简析 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/6db8ad1b89c6">源码级注解 - 简书 (jianshu.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="/2021/12/07/java8-xin-te-xing-yi-lamdar-biao-da-shi/"/>
      <url>/2021/12/07/java8-xin-te-xing-yi-lamdar-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1ut411g7E9?from=search&amp;seid=11351843026414822537&amp;spm_id_from=333.337.0.0">【Java】Java8新特性-Lambda表达式-Stream API等_尚硅谷__李贺飞</a></p><p><a href="https://www.bilibili.com/video/BV1ut411g7E9?from=search&amp;seid=11351843026414822537&amp;spm_id_from=333.337.0.0">Java8新特性-Lambda表达式-Stream API等_尚硅谷__李贺飞</a></p><p><a href="https://www.bilibili.com/video/BV1VW41127sh?from=search&amp;seid=11351843026414822537&amp;spm_id_from=333.337.0.0">java8实战</a></p><p><a href="https://www.bilibili.com/video/BV1Cb411J7xo?from=search&amp;seid=11351843026414822537&amp;spm_id_from=333.337.0.0">深入理解 Java8+jdk8 源码级思想 （完）</a></p><p><a href="https://www.bilibili.com/video/BV184411x7XA?from=search&amp;seid=6555071728934084147&amp;spm_id_from=333.337.0.0">宋宏康Java8/9/10/11新特性-2019-尚硅谷</a></p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>我们思考一个场景：假设现在有一个职员类如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span><span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">int</span> salary<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在一个List集合中存储着众多具有不同属性的职员对象，加入现在要给这和list集合按年龄进行过滤，通常的做法是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">filterByAge</span><span class="token punctuation">(</span><span class="token class-name">List</span> emps<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> e<span class="token operator">:</span>emps<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>age<span class="token operator">&lt;</span><span class="token number">500</span><span class="token punctuation">)</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这很正常，要是再来两需求，我们同样可以增加对应的方法，但随着需求的增多，类中的方法变的越来越多，而且他们的大部分代码相同，只有判断条件不同，即存在大量的冗余，此时我们要思考怎么去优化。</p><p>通常的做法是采用设计模式，定义一个接口如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后根据不同的需求去实现这个接口，那在我们的主类中只需要写一个方法就可以了，根据不同的需求实现接口，然后传入这个实现类的对象，调用它的判断方法即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span> emps<span class="token punctuation">,</span><span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> rule<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> e<span class="token operator">:</span>emps<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span> list<span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span>emps<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FilterByAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span> list2<span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span>emps<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">FilterByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>似乎这样写挺好的，但还不够，因为每有一个需求，都需要增加一个实现类，会导致类数量过多，那我们可以采用匿名内部类的方式去传入实现类。</p><p>我们可以知道匿名内部类会造成代码可读性的降低，而且它的关键代码只是方法中的那一段，其他的都是冗余的。如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">List</span> list<span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span>emps<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//关键代码只有这部分，其余的都是冗余的</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进一步提取，由此引出Lambda表达式，只需要关键代码即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">List</span> list<span class="token operator">=</span><span class="token function">filter</span><span class="token punctuation">(</span>emps<span class="token punctuation">,</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token operator">-&gt;</span> e<span class="token punctuation">.</span>salary<span class="token operator">&lt;</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只需传入核心逻辑即可</span>list<span class="token punctuation">.</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>明显代码简介明了，如果还想更加简洁，可以使用Stream API，这个我们后面再讲。</p><h3 id="Lambda语法格式"><a href="#Lambda语法格式" class="headerlink" title="Lambda语法格式"></a>Lambda语法格式</h3><ul><li><p>当函数式接口的方法无参数：</p><ul><li>```java<br>() -&gt; System.out.println(“Hello Lambda”);<pre class="line-numbers language-none"><code class="language-none">- 当有一个参数：  - ```java    (x) -&gt; System.out.println(x);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>当只有一个参数时，小括号可以省略不写</p></li><li><p>当有两个以上参数，且有多条语句时：</p><ul><li>```java<br>Comparator<integer> com=(x,y) -&gt; {<pre><code>System.out.println("sdfs");return Integr.compare(x,y);</code></pre>}<pre class="line-numbers language-none"><code class="language-none">- Lambda的参数列表的数据类型可以省略不写，JVM编译器通过上下文推断。### 内置函数式接口```java/** * 内置函数式接口 *  1.Consumer&lt;T&gt; :消费性接口 *         void accept(T t):可以对一个参数进行处理，没有返回值 *  2.Supplier&lt;T&gt;: 供给型接口 *          T get() :提供某个值 *  3.Function&lt;T，R&gt;:函数型接口 *          R apply(T t) *  4.Predicate&lt;T&gt; :断言型接口 *          boolean test(T): 用于做判断的方法 */public class TestLambda2 {    //Consumer&lt;T&gt; :    @Test    public void test1(){        happy(1000,(m) -&gt; System.out.println("大保健消费："+m));    }    public void happy(double money, Consumer&lt;Double&gt; consumer){        consumer.accept(money);    }    //Supplier&lt;T&gt;    @Test    public void test2(){        getNumList(10,()-&gt;{           return (int) (Math.random()*100);        });    }    public List&lt;Integer&gt; getNumList(int num, Supplier&lt;Integer&gt; sup){        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();        for (int i=0;i&lt;num;i++){            list.add(sup.get());        }        return list;    }    //Function&lt;T,R&gt;    @Test    public void test3(){        strHandler2("",(str)-&gt;{           return str.trim();        });    }    public String strHandler2(String s, Function&lt;String, String&gt; fun){        return fun.apply(s);    }    //Predicate&lt;T&gt;    @Test    public void test4(){        List&lt;String&gt; list= Arrays.asList("qwert","qwdssxe","qwers");        filter(list,s -&gt; s.length()==5);    }    public List&lt;String&gt; filter(List&lt;String&gt; list, Predicate&lt;String&gt; predicate){        List&lt;String&gt; list1=new ArrayList&lt;&gt;();        for (String s:list){            if (predicate.test(s))                list1.add(s);        }        return list1;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></integer></li></ul></li></ul><p>更丰富的功能可参考他们的子接口。</p><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><h4 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h4><p>方法引用是jdk 1.8中的新特性，通过与lambda结合可以进一步简化代码<br>在使用中主要有以下四种形式：</p><ol><li>静态方法引用          ClassName::staticMethod</li><li>类：：实例方法   ClassName::instanceMethod</li><li>对象：：实例方法   Object::instanceMethod</li></ol><p><strong>方法引用通常是用在赋给已经写好的函数式接口</strong><br>他会生成一个函数式接口的实例，通过这个引用你可以调用接口中的方法</p><h4 id="静态方法引用"><a href="#静态方法引用" class="headerlink" title="静态方法引用"></a>静态方法引用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Inter</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">handleString</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span><span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OneClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">contact</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span><span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> lambdaTest <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Oneclass</span> oneclass<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">OneClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Inter</span> one<span class="token operator">=</span><span class="token class-name">OneClass</span><span class="token operator">::</span><span class="token function">contact</span><span class="token punctuation">;</span><span class="token comment">//静态引用</span>        <span class="token class-name">Inter</span> two<span class="token operator">=</span>oneclass<span class="token operator">::</span><span class="token function">contact</span><span class="token punctuation">;</span><span class="token comment">//对象，此时需要把contact改为非静态</span>        <span class="token class-name">String</span> result2<span class="token operator">=</span>two<span class="token punctuation">.</span><span class="token function">handleString</span><span class="token punctuation">(</span><span class="token string">"adfs"</span><span class="token punctuation">,</span><span class="token string">"dfs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result<span class="token operator">=</span> one<span class="token punctuation">.</span><span class="token function">handleString</span><span class="token punctuation">(</span><span class="token string">"as"</span><span class="token punctuation">,</span><span class="token string">"ad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sout</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Inter</span> two<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span><span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token class-name">OneClass</span><span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token operator">=</span>two<span class="token punctuation">.</span><span class="token function">handleString</span><span class="token punctuation">(</span><span class="token string">"asfd"</span><span class="token punctuation">,</span><span class="token string">"adf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法引用直接赋给接口变量，则此接口变量就引用了一个接口实例。</p><h4 id="对象：：实例方法引用"><a href="#对象：：实例方法引用" class="headerlink" title="对象：：实例方法引用"></a>对象：：实例方法引用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ImTheOne</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">handleString</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OneClass</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">concatString</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">OneClass</span> oneClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OneClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ImTheOne</span> theOne <span class="token operator">=</span> oneClass<span class="token operator">::</span><span class="token function">concatString</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> theOne<span class="token punctuation">.</span><span class="token function">handleString</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//相当于以下效果</span>        <span class="token class-name">OneClass</span> oneClass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OneClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ImTheOne</span> theOne2 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> oneClass2<span class="token punctuation">.</span><span class="token function">concatString</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result2 <span class="token operator">=</span> theOne2<span class="token punctuation">.</span><span class="token function">handleString</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类：：实例方法"><a href="#类：：实例方法" class="headerlink" title="类：：实例方法"></a>类：：实例方法</h4><p>此种引用较为复杂，可以理解为你在引用一个对象的方法，而这个对象就是本身就是Lambda的一个参数，例如：<code>(String s)-&gt;s.toUpperCase()</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ImTheOne</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">handleString</span><span class="token punctuation">(</span><span class="token class-name">T</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OneClass</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> oneString<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">concatString</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>oneString <span class="token operator">+</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">startHandleString</span><span class="token punctuation">(</span><span class="token class-name">ImTheOne</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OneClass</span><span class="token punctuation">&gt;</span></span> imTheOne<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> imTheOne<span class="token punctuation">.</span><span class="token function">handleString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">OneClass</span> oneClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OneClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oneClass<span class="token punctuation">.</span>oneString <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> oneClass<span class="token punctuation">.</span><span class="token function">startHandleString</span><span class="token punctuation">(</span><span class="token class-name">OneClass</span><span class="token operator">::</span><span class="token function">concatString</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//相当于以下效果</span>        <span class="token class-name">OneClass</span> oneClass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OneClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oneClass2<span class="token punctuation">.</span>oneString <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token class-name">ImTheOne</span> theOne2 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> oneClass2<span class="token punctuation">.</span><span class="token function">concatString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result2 <span class="token operator">=</span> theOne2<span class="token punctuation">.</span><span class="token function">handleString</span><span class="token punctuation">(</span>theOne2<span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例二：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> score<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNameAndScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> score<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Student "</span><span class="token operator">+</span>  name <span class="token operator">+</span><span class="token string">"'s score is "</span> <span class="token operator">+</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">/*lambda表达式的用法：        TestInterface testInterface = (student, name, score) -&gt; student.setNameAndScore(name, score);*/</span>        <span class="token comment">//类的任意对象的实例方法引用的用法:</span>        <span class="token class-name">TestInterface</span> testInterface <span class="token operator">=</span> <span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">setNameAndScore</span><span class="token punctuation">;</span>        testInterface<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"DoubleBin"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@FunctionalInterface</span>    <span class="token keyword">interface</span> <span class="token class-name">TestInterface</span>    <span class="token punctuation">{</span>        <span class="token comment">// 注意：入参比Student类的setNameAndScore方法多1个Student对象，除第一个外其它入参类型一致</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Student</span> d<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<br>①方法引用的<strong>通用特性</strong>：方法引用的参数列表和返回值和函数式接口中的方法参数列表和返回值相同。</p><p>②函数式接口方法的参数列表的第一个参数会作为引用方法的隐式参数，即为该类的引用变量，例如String::compareToignoreCase等价于（x,y）-&gt;x.compareToIgnoreCase(y);==其实就是接口方法多一个对象引用变量==</p><h4 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h4><p>与方法引用很类似，只不过方法名为new，例如Person：：new是Person构造器的一个引用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ImTheOne</span> <span class="token punctuation">{</span>    <span class="token class-name">TargetClass</span> <span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TargetClass</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> oneString<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">TargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oneString <span class="token operator">=</span> <span class="token string">"default"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">TargetClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        oneString <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token class-name">ImTheOne</span> imTheOne <span class="token operator">=</span> <span class="token class-name">TargetClass</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">TargetClass</span> targetClass <span class="token operator">=</span> imTheOne<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span>oneString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//还可以</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> fun<span class="token operator">=</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token class-name">Employee</span> emp<span class="token operator">=</span>fun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//相当于以下效果</span>        <span class="token class-name">ImTheOne</span> imTheOne2 <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">TargetClass</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TargetClass</span> targetClass2 <span class="token operator">=</span> imTheOne2<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>targetClass2<span class="token punctuation">.</span>oneString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到集合部分此种方法会有很大的方便。</p><h4 id="数组：：new"><a href="#数组：：new" class="headerlink" title="数组：：new"></a>数组：：new</h4><p>也算构造器引用的一种</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ImTheOne</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">T</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ImTheOne</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> imTheOne <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stringArr <span class="token operator">=</span> imTheOne<span class="token punctuation">.</span><span class="token function">getArr</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此类引用需要注意的是函数式接口的方法必须有一个参数，而且只能有一个，代表未来的数组长度。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的静态代理与动态代理</title>
      <link href="/2021/12/07/java-zhong-de-jing-tai-dai-li-yu-dong-tai-dai-li/"/>
      <url>/2021/12/07/java-zhong-de-jing-tai-dai-li-yu-dong-tai-dai-li/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://www.bilibili.com/video/BV1F741157LA?p=6">【尚硅谷之Java基础】 动态代理与Java8新特性_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/qq_44715943/article/details/120785432">Java DynamicProxy【动态代理】_一只小菜鸡-CSDN博客</a></p><p><a href="https://www.cnblogs.com/zhai1997/p/12257150.html">设计模式（代理模式） - 怀梦想，致远方 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/techyc/p/3455950.html">Java的动态代理(dynamic proxy) - macemers - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/weixin_43320847/article/details/82938754">(167条消息) Java 中的代理(proxy)_lslxy1021的博客-CSDN博客_java proxy</a></p><p><a href="https://blog.csdn.net/yaomingyang/article/details/80981004">(167条消息) Java动态代理InvocationHandler和Proxy学习笔记_明洋的专栏-CSDN博客_invocationhandler</a></p><p><a href="https://www.jianshu.com/p/8ccdbe00ff06">Java代理（Proxy）模式 - 简书 (jianshu.com)</a></p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式是指：为其他对象提供一种代理以控制对这个对象的访问，在某些情况下，一个对象不适合或不能直接引用另一个对象，而代理对象可在客户类和目标对象间起到中介作用。</p><img src="https://s2.loli.net/2021/12/07/kosgqQvIX7mAnDP.png" alt="代理1.png" style="zoom:50%;"><p>使用代理模式的作用</p><ul><li>功能增强</li><li>控制访问：代理类不让你访问目标</li></ul><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><ul><li>代理类是自己手工实现的，自己创建类</li><li>你要代理的目标类是确定的</li></ul><p>模拟用户购买u盘的行为，用户是客户端，商家是代理，厂家是目标类</p><p>商家和厂家都是卖u盘的，故创建接口定义抽象方法</p><p>步骤：</p><ul><li>创建接口定义卖u盘方法</li><li>创建厂家，商家类，实现接口</li><li>创建客户类，调用商家的方法买u盘</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">厂家类<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsbKingFactory</span> <span class="token keyword">implements</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>        <span class="token comment">//厂家</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">85.0f</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">接口<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * @param amount:购买数量     * @return：价格     */</span>    <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Taobao</span> <span class="token keyword">implements</span> <span class="token class-name">UsbSell</span> <span class="token punctuation">{</span>    <span class="token comment">//商家代理的厂家</span>    <span class="token keyword">private</span> <span class="token class-name">UsbKingFactory</span> factory<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">UsbKingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//向厂家发送订单，商家再卖给用户</span>        <span class="token keyword">float</span> initPrice <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        initPrice<span class="token operator">+=</span><span class="token number">25</span><span class="token punctuation">;</span> <span class="token comment">//增强功能</span>        <span class="token comment">//在目标类调用完之后添加功能都是增强功能</span>        <span class="token keyword">return</span> initPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Taobao</span> taobao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Taobao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> sell <span class="token operator">=</span> taobao<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过淘宝的代理购买u盘价格为："</span><span class="token operator">+</span>sell<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==缺点：==</p><ul><li>当目标类增加时，代理类可能成倍增加，数量过多</li><li>当接口中功能改变了，会影响众多的商家，厂家类</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>在静态代理中，目标类很多时，可以使用动态代理，避免静态代理的缺点。</p><p>优点：</p><ul><li>代理类的数量可以很少</li><li>当你修改了接口中的方法，不会影响代理类</li><li>在程序执行过程中，使用jdk反射机制，创建代理对象，动态指定要代理的目标类</li></ul><p>使用jdk的Proxy实现代理，要求目标类与代理类实现相同的接口，若目标类不存在接口，则无法使用该方式。</p><p>对于无接口的类，要为其创建动态代理，使用CGLIB，其代理生成目标类的子类，且子类是增强的，子类对象就是代理对象，所以，使用CGLIB要求目标类能被继承，不能是final。</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>反射包三个类：<code>InvocationHandler</code>，<code>Method</code>，<code>Proxy</code></p><ul><li><p><code>InvocationHandler</code>:其中的方法，invoke表示代理对象要执行的功能代码，代理类要完成的功能就写在invoke中，代理类完成的功能有 1：调用目标类方法  2：增强方法</p><ul><li>```<br>public Object invoke(Object proxy, Method method, Object[] args)<pre><code>    throws Throwable;    </code></pre>Object proxy: jdk创建的代理对象，<br>Method method：目标类的方法，jdk提供method对象<br>Object[] args: 目标类的方法参数，jdk提供<pre class="line-numbers language-none"><code class="language-none">- `Method`: 表示目标类的方法，通过Method执行某个目标类的方法- `Proxy`：创建的代理对象  - ```    public static Object newProxyInstance(ClassLoader loader,                                              Class&lt;?&gt;[] interfaces,                                              InvocationHandler h)            throws IllegalArgumentException        1.ClassLoader 类加载器    2.Class&lt;?&gt;[] interfaces:接口，目标对象实现的接口    3.InvocationHandler：自己写的代理功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><p>实现动态代理的步骤：</p><ul><li>创建接口，定义目标类要完成的功能</li><li>创建目标类实现接口</li><li>创建InvocationHandler接口实现类，在invoke方法中</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">UsbKingFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsbKingFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MySellHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySellHandler</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UsbSell</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UsbSell</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                factory<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> price <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">sell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"代理对象的价格为："</span><span class="token operator">+</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>将方法调用到远程服务器</li><li>在运行的程序中将用户界面事件与动作关联起来</li><li>跟踪方法调用</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络传输中byte是怎么存储的</title>
      <link href="/2021/12/05/wang-luo-chuan-shu-zhong-byte-shi-zen-me-cun-chu-de/"/>
      <url>/2021/12/05/wang-luo-chuan-shu-zhong-byte-shi-zen-me-cun-chu-de/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解信号量笔记</title>
      <link href="/2021/12/04/shen-ru-li-jie-xin-hao-liang-bi-ji/"/>
      <url>/2021/12/04/shen-ru-li-jie-xin-hao-liang-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/booksyhay/article/details/82692362">(165条消息) The Little Book of Semaphores 信号量小书 中文版_booksyhay的专栏-CSDN博客</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（七）:信号量如何取代锁和条件变量</title>
      <link href="/2021/12/04/cao-zuo-xi-tong-dao-lun-bi-ji-qi-xin-hao-liang-ru-he-qu-dai-suo-he-tiao-jian-bian-liang/"/>
      <url>/2021/12/04/cao-zuo-xi-tong-dao-lun-bi-ji-qi-xin-hao-liang-ru-he-qu-dai-suo-he-tiao-jian-bian-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="信号量简述"><a href="#信号量简述" class="headerlink" title="信号量简述"></a>信号量简述</h2><p>信号量初始值能决定其行为，首先要初始化信号量，才能与其他函数交互。</p><p>在POSIX中，可以用两个函数来操纵：<code>sem_wait(),sem_post()</code></p><p><code>sem_wait()</code>要么立刻返回，要么会让调用线程挂起，知道一个<code>post</code>调用，也可能多个调用线程都调用<code>sem_wait()</code>,这些线程都在队列中等待唤醒。</p><p><code>sem_post()</code>并没有等待某些条件满足，它直接增加信号量的值，如果有等待线程，将唤醒其中一个。</p><p>当信号量为负数时，这就是等待线程的个数。</p><h3 id="二值信号量"><a href="#二值信号量" class="headerlink" title="二值信号量"></a>二值信号量</h3><p>信号量第一种用法是作为锁。</p><pre class="line-numbers language-none"><code class="language-none">sem_t m;sem_init(&amp;m,0,1);sem_wait(&amp;m);//critical section heresem_post(&amp;m);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种用法也叫作二值信号量。</p><h3 id="信号量作条件变量"><a href="#信号量作条件变量" class="headerlink" title="信号量作条件变量"></a>信号量作条件变量</h3><p>信号量也可用在一个线程暂停执行，等待某一条件成立场景。如一个线程要等待一个链表非空才能删除一个元素。此时通常一个线程等待条件成立，另一个线程修改条件，并发信号唤醒等待线程。</p><pre class="line-numbers language-none"><code class="language-none">sem_t s;void *child(void *arg){printf("child");sem_post(&amp;s);return NULL;}int main(){sem_init(&amp;s,0,x);printf("parent:begin");pthread_t c;Pthread_create(c,NULL,child,NULL);sem_wait(&amp;s);printf("parent:end");return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">我们希望看到这样的输出parent:beginchildparent:end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第一种：父线程创建子线程，但是子线程没有运行，父线程调用sem_wait会先于子线程调用，我们希望父线程等待子线程运行，故信号量初值设为0.父线程运行，信号量-1，睡眠等待，子线程运行，调用sem_post信号量增为0，唤醒父线程，完成。</li><li>子线程在父线程调用sem_wait之前结束，在这种情况下，子线程会先调用sem_post，信号量到1，然后父线程有机会运行，调用sem_wait,信号量到0，直接返回。</li></ul><h3 id="生产者-消费者"><a href="#生产者-消费者" class="headerlink" title="生产者/消费者"></a>生产者/消费者</h3><h4 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h4><p>用两个信号量empty和full表示缓冲区状态</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> buffer<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fill<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> use<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>buffer<span class="token punctuation">[</span>fill<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>fill<span class="token operator">=</span><span class="token punctuation">(</span>fill<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAX<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> tmp<span class="token operator">=</span>buffer<span class="token punctuation">[</span>use<span class="token punctuation">]</span><span class="token punctuation">;</span>use<span class="token operator">=</span><span class="token punctuation">(</span>use<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MAX<span class="token punctuation">;</span><span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">sem_t</span> empty<span class="token punctuation">;</span><span class="token class-name">sem_t</span> full<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设有两个线程，一个生产者，一个消费者，在一个CPU上，消费者先运行，调用sem_wait(&amp;full)，full初值为0，wait调用，睡眠，等待sem_post(），符合预期。</p><p>假设生产者先运行，执行到P1，调用sem_wait（&amp;empty）生产者继续运行，向缓冲区加入数据，调用sem_post(&amp;full),把full变为0，唤醒消费者。</p><p>当容量为1时，你可以发现更多的线程也是可以正常工作的，但容量增加，就会出现异常。</p><p>假设MAX=10，多个生产者，消费者，假设两个生产者几乎同时调用put，当第一个生产者添加数据，在更新fill之前被中断，第二个生产者将覆盖第一个生产者的数据，这显然不行，我们不能让数据丢失。</p><h4 id="增加互斥"><a href="#增加互斥" class="headerlink" title="增加互斥"></a>增加互斥</h4><p>向缓冲区加入元素和增加缓冲区索引是临界区，需要互斥。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">sem_t</span> empty<span class="token punctuation">;</span><span class="token class-name">sem_t</span> full<span class="token punctuation">;</span><span class="token class-name">sem_t</span> mutex<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仔细思考一下上述代码真的正确吗？会有什么问题？</p><p>我们来看这样一个场景，假设两个线程，一个生产者，一个消费者，消费者先运行，获得锁，然后对full信号量执行sem_wait()，此时没有数据，所以消费者阻塞，让出CPU，但消费者仍然持有锁，然后生产者运行，假设他能运行，将唤醒消费者，但锁被占用，此时发生死锁。</p><p>上面的场景发生循环等待，消费者持有互斥量，等待在full变量上，生产者可以发送full信号，但却在等待互斥变量。</p><h4 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">sem_t</span> empty<span class="token punctuation">;</span><span class="token class-name">sem_t</span> full<span class="token punctuation">;</span><span class="token class-name">sem_t</span> mutex<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读者-写者锁"><a href="#读者-写者锁" class="headerlink" title="读者-写者锁"></a>读者-写者锁</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java_NIO补充：Files和Path介绍</title>
      <link href="/2021/12/01/java-nio-bu-chong-files-he-path-jie-shao/"/>
      <url>/2021/12/01/java-nio-bu-chong-files-he-path-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="NIO中的Files，Paths"><a href="#NIO中的Files，Paths" class="headerlink" title="NIO中的Files，Paths"></a>NIO中的Files，Paths</h2><p><a href="https://zhuanlan.zhihu.com/p/166218014">Java8中的Files和Paths - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnblogs.com/devilwind/p/8623098.html">java Files类和Paths类的用法 (转) - devilwind - 博客园 (cnblogs.com)</a></p><p><a href="https://www.jianshu.com/p/3cb5ca04e3c8">Java NIO 教程(十五) Java NIO Files - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/17b8e042a90b">Java NIO 教程(十四) Java NIO Path - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/dnc8371/article/details/106702332">(160条消息) 了解java.nio.file.Path – 1_最佳 Java 编程-CSDN博客</a></p><p><a href="https://blog.csdn.net/u010889616/article/details/52694061">java Files类和Paths类的用法</a></p><p><a href="https://blog.csdn.net/zzzgd_666/article/details/88061390">java7后使用Files和Paths类来简单的实现文件的读取和写入和拷贝</a></p><p><a href="https://www.cnblogs.com/niumoo/p/13742641.html">和低效 IO 说再见，回头补一波 Java 7 的 NIO.2 特性 </a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Path</span>相关API<span class="token class-name">Path</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Path</span> other<span class="token punctuation">)</span> 如果other是绝对路径，返回other，否则返回<span class="token keyword">this</span>和other的组合路径<span class="token class-name">Path</span> <span class="token function">resolveSibling</span><span class="token punctuation">(</span><span class="token class-name">Path</span> other<span class="token operator">/</span><span class="token class-name">String</span> other<span class="token punctuation">)</span> 如果other是绝对路径，那返回other，否则返回<span class="token keyword">this</span>的父路径和other获得的路径<span class="token class-name">Path</span> <span class="token function">relative</span><span class="token punctuation">(</span><span class="token class-name">Path</span> other<span class="token punctuation">)</span> 返回other相对于<span class="token keyword">this</span>的相对路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><pre class="line-numbers language-none"><code class="language-none">byte[] bytes=Files.readAllBytes(Path);List&lt;String&gt; lines=Files.readAllLines(Path,charset);但Files类中的相关方法适合处理中等长度的文件，若文件较大，则用输入输出InputStream in=Files.newInputStream(path);OutputStream out=Files.newOutputStream(path);Reader in=Files.newBufferedReader(path,charset);Writer out=Files.newBufferedWriter(path,charset);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NIO中的Filelock文件加锁"><a href="#NIO中的Filelock文件加锁" class="headerlink" title="NIO中的Filelock文件加锁"></a>NIO中的Filelock文件加锁</h3><p>文件锁在 OS 中很常见，如果多个程序同时访问、修改同一个文件，很容易因为文件 </p><p>数据不同步而出现问题。给文件加一个锁，同一时间，只能有一个程序修改此文件， </p><p>或者程序都只能读此文件，这就解决了同步问题。 </p><p>文件锁是进程级别的，不是线程级别的。文件锁可以解决多个进程并发访问、修改同 </p><p>一个文件的问题，但不能解决多线程并发访问、修改同一文件的问题。使用文件锁时， </p><p>同一进程内的多个线程，可以同时访问、修改此文件</p><p>文件锁是当前程序所属的 JVM 实例持有的，一旦获取到文件锁（对文件加锁），要调 </p><p>用 release()，或者关闭对应的 FileChannel 对象，或者当前 JVM 退出，才会释放这 </p><p>个锁。 </p><p>一旦某个进程（比如说 JVM 实例）对某个文件加锁，则在释放这个锁之前，此进程不 </p><p>能再对此文件加锁，就是说 JVM 实例在同一文件上的文件锁是不重叠的（进程级别不 </p><p>能重复在同一文件上获取锁）</p><h4 id="文件锁分类"><a href="#文件锁分类" class="headerlink" title="文件锁分类"></a>文件锁分类</h4><ul><li>排它锁：又叫独占锁。对文件加排它锁后，该进程可以对此文件进行读写，该进程独 </li></ul><p>占此文件，其他进程不能读写此文件，直到该进程释放文件锁。 </p><ul><li>共享锁：某个进程对文件加共享锁，其他进程也可以访问此文件，但这些进程都只能 </li></ul><p>读此文件，不能写。线程是安全的。只要还有一个进程持有共享锁，此文件就只能读， </p><p>不能写。 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//对整个文件加锁，默认为排它锁。</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> booean shared<span class="token punctuation">)</span> <span class="token comment">//自定义加锁方式。前 2 个参数 指定要加锁的部分（可以只对此文件的部分内容加锁），第三个参数值指定是否是共 享锁。</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//对整个文件加锁，默认为排它锁</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> booean shared<span class="token punctuation">)</span> <span class="token comment">//自定义加锁方式。 如果指定为共享锁，则其它进程可读此文件，所有进程均不能写此文件，如果某进程 试图对此文件进行写操作，会抛出异常。</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>lock 是阻塞式的，如果未获取到文件锁，会一直阻塞当前线程，直到获取文件锁 tryLock 和 lock 的作用相同，只不过 tryLock 是非阻塞式的，tryLock 是尝试获取文 件锁，获取成功就返回锁对象，否则返回 <span class="token keyword">null</span>，不会阻塞当前线程。<span class="token keyword">boolean</span> <span class="token function">isShared</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//此文件锁是否是共享锁</span><span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//此文件锁是否还有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要锁定一个文件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FileChannel</span><span class="token operator">=</span><span class="token class-name">FileChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileLock</span> lock<span class="token operator">=</span>channel<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>或channel<span class="token punctuation">.</span><span class="token function">trylock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第一个调用会阻塞直至可获得锁，第二个调用会立即返回，要么返回锁，或null。这个文件将保持锁定直至通道关闭或调用==release()==,</p><pre class="line-numbers language-none"><code class="language-none">还可以：FileLock lock(long start,long size,boolean shared)FileLock trylock(long start,long size,boolean shared)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>shared为false，则锁定文件目的是读写，如果为true，则这个是共享锁，允许多个进程读。</p><p>要确保在操作完成后释放锁</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Filelock</span> lock<span class="token operator">=</span>channel<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>==注意事项：==</p><ul><li>在网络文件系统上锁定文件高度依赖于系统，因尽量避免。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记（一）</title>
      <link href="/2021/11/29/spring-xue-xi-bi-ji-yi/"/>
      <url>/2021/11/29/spring-xue-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1hN411X77N?p=8&amp;spm_id_from=pageDriver">Spring框架最新版视频教程_深入浅出spring框架【idea版】【通俗易懂】_哔哩哔哩_bilibili</a></p><p><a href="https://search.bilibili.com/all?keyword=Spring%E6%95%99%E7%A8%8B">Spring教程 _ 搜索结果_哔哩哔哩_Bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1gW411W7wy?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_session_id=52dff96c-c291-4225-8975-e70ddd6248a5&amp;share_source=QQ&amp;share_tag=s_i&amp;timestamp=1638179665&amp;unique_k=rjXu9xD">尚硅谷Spring注解驱动教程(雷丰阳源码级讲解)_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV185411477k?from=search&amp;seid=12185457074531684690&amp;spm_id_from=333.337.0.0">孙哥说Spring5 </a></p><p><a href="https://www.bilibili.com/video/BV1gX4y1g7Ec?from=search&amp;seid=12185457074531684690&amp;spm_id_from=333.337.0.0">Spring5入门到精通IDEA教学余胜军通俗易懂版本</a></p><p><a href="https://www.bilibili.com/video/BV1Yv411x7D2?from=search&amp;seid=12185457074531684690&amp;spm_id_from=333.337.0.0">Spring5 最完整最全面最详细教学乐字节</a></p><p><a href="https://www.bilibili.com/video/BV1WE411d7Dv?from=search&amp;seid=12185457074531684690&amp;spm_id_from=333.337.0.0">狂神说JavaSpring5最新完整教程IDEA版通俗易懂</a></p><p><a href="https://www.bilibili.com/video/BV1aR4y1H75S?from=search&amp;seid=14926798907123427269&amp;spm_id_from=333.337.0.0">2021吃透这些Java手写框架源码（Spring、Hashmap、Tomact、Mybatis、分布式）</a></p><p><a href="https://www.bilibili.com/video/BV1Vf4y127N5?from=search&amp;seid=14926798907123427269&amp;spm_id_from=333.337.0.0">尚硅谷Spring5框架教程（idea版）</a></p><p><a href="https://www.bilibili.com/video/BV1WZ4y1P7Bp?from=search&amp;seid=14926798907123427269&amp;spm_id_from=333.337.0.0">黑马程序员最全SSM框架教程|Spring+SpringMVC+MyBatis全套教程(</a></p><p><a href="https://www.bilibili.com/video/BV1KE411y7vx?p=1">最新 基于SSM开发的个人前后端博客系统 （毕业设计）_哔哩哔哩_bilibili</a></p><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><p>IoC，Inversion of Control ： 控制反转， 是一个理论，一个指导思想。  指导开发人员如何使用对象，管理对象的。 把对象的创建，属性赋值，对象的声明周期都交给代码之外的容器管理。</p><p>IOC分为控制和反转</p><p>控制：对象创建，属性赋值，对象生命周期管理</p><p>反转：把开发人员管理对象的权限转移给代码之外的容器实现，由容器完成对象管理</p><p>正转：开发人员在代码中使用new创建对象，开发人员掌握了对象的创建，属性赋值，开始到销毁的全部过程</p><h3 id="IOC实现：依赖注入（DI）"><a href="#IOC实现：依赖注入（DI）" class="headerlink" title="IOC实现：依赖注入（DI）"></a>IOC实现：依赖注入（DI）</h3><p>程序只需提供对象的名称即可，对象如何创建，如何从容器中查找，获取都由容器自己实现</p><h3 id="Spring的配置文件"><a href="#Spring的配置文件" class="headerlink" title="Spring的配置文件"></a>Spring的配置文件</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>spring标准配置文件1）根标签是beans2）beans后面是约束文件说明，可查看xml介绍3）beans里面是bean的声明4）bean是有spring容器管理的java对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DI：给属性赋值"><a href="#DI：给属性赋值" class="headerlink" title="DI：给属性赋值"></a>DI：给属性赋值</h3><p>spring调用无参构造函数创建对象，</p><p>给属性赋值可以使用    1）xml配置文件中的标签和属性  2）使用注解</p><p>DI分类：</p><ol><li><p>set注入 设值注入</p><pre><code>         2. 构造注入。</code></pre></li></ol><h4 id="基于xml的DI"><a href="#基于xml的DI" class="headerlink" title="基于xml的DI"></a>基于xml的DI</h4><p>在xml配置文件中使用标签和属性，完成对象创建</p><p>spring调用类的set方法，在set方法中完成属性赋值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--       DI：给属性赋值       1.set注入：spring调用类的set方法           java中简单类型：基本数据类型和String           简单类型的set注入：               &lt;bean id="xxx" class="xxx"&gt;                   &lt;property name="属性名" value="简单类型属性值" /&gt;                   ...               &lt;/bean&gt;       2.set注入           引用类型的赋值               &lt;bean id="xxx" class="xxx"&gt;                   &lt;property name="属性名" ref="bean的id"&gt;                   ...               &lt;/bean&gt;   --&gt;</span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case01.Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>school<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case01.School<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京大学<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京海淀区<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><p>spring调用类的有参构造方法，在创建对象时，给属性赋值</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--        构造注入：Spring调用类的有参构造，创建对象同时赋值            &lt;bean id="xxx" class="xxx"&gt;                &lt;constructor-arg&gt; 表示构造方法的一个形参                标签有属性：name：形参名                           index：索引                           value:简单类型形参值                           ref：引用类型值            &lt;/bean&gt;    --&gt;</span>    <span class="token comment">&lt;!--构造注入：使用name属性    --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case02.Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>李四<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>22<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--构造注入：使用index属性 ,Index属性可省略，但参数顺序需注意   --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case02.Student<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>26<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--构造注入声明File     --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myFile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.io.File<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:\\现代密码学<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>192191-文明作业.txt<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myschool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case02.School<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京大学<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京海淀区<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="引用类型的自动注入"><a href="#引用类型的自动注入" class="headerlink" title="引用类型的自动注入"></a>引用类型的自动注入</h4><p>spring可根据某些规则，给引用类型赋值，规则<code>byName</code>,<code>byType</code></p><ul><li>byName: java类中引用类型属性名称和spring容器中bean的id名称一样，且类型一样，则这些bean会赋值给引用类型。</li><li>byType： java类中引用类型数据和spring容器中bean的class是同源关系，这样的bean赋值给引用类型</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 引用类型自动注入：        1.byName            &lt;bean id="xxx" class="xxx" autowire="byName"&gt;        2.byType            同源关系：                1.java中引用数据类型和bean的class值是一样的                2.java中引用数据类型和bean的class值是父子类关系                3.java中引用数据类型和bean的class值是接口和实现类关系            &lt;bean id="xxx" class="xxx" autowire="byType"&gt;            注意：在xml配置文件中符合条件的对象只能有一个，否则报错    --&gt;</span>    <span class="token comment">&lt;!--byName 自动注入    --&gt;</span><span class="token comment">&lt;!--    &lt;bean id="myStudent" class="com.wm.case03.Student" autowire="byName"&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="name" value="李四"/&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="age" value="20"/&gt;--&gt;</span><span class="token comment">&lt;!--&amp;lt;!&amp;ndash;        &lt;property name="school" ref="myschool"/&gt;&amp;ndash;&amp;gt;--&gt;</span><span class="token comment">&lt;!--    &lt;/bean&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;bean id="school" class="com.wm.case03.School"&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="name" value="清华大学"/&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="address" value="北京海淀区"/&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;/bean&gt;--&gt;</span>    <span class="token comment">&lt;!--byType:自动注入 -相同class   --&gt;</span><span class="token comment">&lt;!--    &lt;bean id="myStudent" class="com.wm.case03.Student" autowire="byType"&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="name" value="张三"/&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="age" value="26"/&gt;--&gt;</span><span class="token comment">&lt;!--        &amp;lt;!&amp;ndash;        &lt;property name="school" ref="myschool"/&gt;&amp;ndash;&amp;gt;--&gt;</span><span class="token comment">&lt;!--    &lt;/bean&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;bean id="myschool" class="com.wm.case03.School"&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="name" value="航空大学"/&gt;--&gt;</span><span class="token comment">&lt;!--        &lt;property name="address" value="北京海淀区"/&gt;--&gt;</span><span class="token comment">&lt;!--    &lt;/bean&gt;--&gt;</span>    <span class="token comment">&lt;!--byType:自动注入 -父子类关系   --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myStudent<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case03.Student<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>byType<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>26<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--        &lt;property name="school" ref="myschool"/&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primarySchool<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.case03.PrimarySchool<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京大兴区<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>北京小学<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目中使用多个配置文件"><a href="#项目中使用多个配置文件" class="headerlink" title="项目中使用多个配置文件"></a>项目中使用多个配置文件</h3><p>分多个配置文件方式：</p><ul><li>按功能模块分，一个模块一个配置文件</li><li>按类的功能分：数据库相关操作的类在一个文件，service类一个配置文件，配置redis，事务等一个配置文件。</li></ul><h4 id="spring管理多个配置文件"><a href="#spring管理多个配置文件" class="headerlink" title="spring管理多个配置文件"></a>spring管理多个配置文件</h4><p>常用的是包含关系的配置文件，项目中有一个总的文件，里面有import包含其他配置文件</p><p>语法：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>其他文件的路径1<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>其他文件的路径2<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>例如： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:beans4/spring-school.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:beans4/spring-student.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>关键字：“classpath:”表示类路径，也就是类文件所在的目录，spring到类路径中加载文件什么时候用classpath：在一个文件要使用其他文件时需要使用classpath<span class="token comment">&lt;!--   包含关系的配置文件可以使用通配符，     --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:beans4/spring-*.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基于注解的DI"><a href="#基于注解的DI" class="headerlink" title="基于注解的DI"></a>基于注解的DI</h3><p>使用spring提供的注解完成java对象的创建 </p><p><a href="https://blog.csdn.net/Thinkingcao/article/details/71171222">(167条消息) @Component注解的含义_Thinkingcao的专栏-CSDN博客_component注解</a></p><p><a href="https://blog.csdn.net/tiantangdizhibuxiang/article/details/81784878">(167条消息) spring的@component注解的理解_天堂地址不详-CSDN博客</a></p><p><a href="https://www.cnblogs.com/clwydjgs/p/9255083.html">@Component注解的解析 - Dawnzhang - 博客园 (cnblogs.com)</a></p><h4 id="Component注解"><a href="#Component注解" class="headerlink" title="@Component注解"></a>@Component注解</h4><ul><li>对象类上加入注解：@Component</li><li>在spring配置文件中加上组件扫描器</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--    扫描多个包的三种方式：--&gt;</span>    <span class="token comment">&lt;!--第一：使用多次组件扫描器    --&gt;</span>    <span class="token comment">&lt;!--第二：使用分隔符（；或，）指定多个包--&gt;</span>    <span class="token comment">&lt;!--第三：使用父包    --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若没有声明对象名称，框架会默认生成名称为：类名首字母小写</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--读取外部的属性配置文件：    &lt;peoperty-placeholder: 读取properties这样的文件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:AnnotationBean/myconf.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>//    @Value(value = "李四)    //使用外部属性文件的值：${"key"}      @Value("${myname}")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/** * 和Component注解相同的： * 1）@Repository  ：放在DAO接口的实现类上的表示创建DAO对象，持久层对象，能访问数据库 * 2）@Service  ：放在业务层接口的实现类上，表示创建业务层对象，具有事务的功能 * 3）@Controller  ：放在控制器类上，创建控制器对象，属于表示层对象， *                  控制器能接受请求，把请求处理结果显示给用户 *  以上四个注解都是创建对象，但后三个有角色说明，表示对象时分层的，具有额外的功能。 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">/** * 简单类型属性赋值：@Value * @Value： * 位置：1）在属性定义上，无需set方法 *      2）在set方法上，得有set方法 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AutoWired"><a href="#AutoWired" class="headerlink" title="@AutoWired"></a>@AutoWired</h4><pre class="line-numbers language-none"><code class="language-none">/** * 引用类型 * @Autowired: spring提供的给引用类型赋值的使用自动注入 *              支持byname，byType，默认是byType *           位置 1）在属性定义上面，无需set方法 *               2）在set方法上面 * 属性：required：boolean类型，默认为true     *                true：spring在启动时创建容器对象时会检查引用类型是否赋值成功，     *                      若失败则终止程序运行，并报错     *                false：引用类型赋值失败，程序不报错，继续执行，引用类型为null * byname自动注入： *    1）@Autowired：给引用类型赋值 *    2）@Qualifer(Value="bean的id")：从容器中找到指定名称的对象 *                                    把这个对象赋给引用类型 */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h4><pre class="line-numbers language-none"><code class="language-none">/** * @Resource : 来自jdk中给引用类型赋值的支持byName，byType，默认是byName *          spring支持使用 * 默认使用byName注入，先使用byName，若失败，再使用ByType  * 只用byName注入：     * name属性=bean的id      @Resource(name="mySchool") */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h2><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><ul><li>Aspect：切面，给业务方法增加的功能，叫切面，一般是非业务功能，可复用。例如日志功能，事务提交，权限检查，参数检查等。</li></ul><p>==怎么理解AOP：==</p><ul><li>设计项目时，找出切面的功能</li><li>安排切面的执行时间，执行位置。</li></ul><h3 id="AOP的作用"><a href="#AOP的作用" class="headerlink" title="AOP的作用"></a>AOP的作用</h3><ul><li>让切面功能复用</li><li>让开发人员专注业务逻辑，提高效率</li><li>实现业务功能和非业务功能的解耦合</li><li>给存在的业务方法新增功能，不改源代码</li></ul><h3 id="AOP中的术语"><a href="#AOP中的术语" class="headerlink" title="AOP中的术语"></a>AOP中的术语</h3><ul><li>Aspect：切面，给业务方法增加的功能</li><li>JoinPoint：连接点，链接切面的业务方法，在这个业务方法执行时会同时切面的功能</li><li>Pointcut：切入点，是一个或多个连接点集合，表示这些方法执行时都会执行切面的功能</li><li>Target Object：给哪个对象增加切面功能，这个对象就是目标对象</li><li>Advice：通知增强处理，表示切面执行时间</li></ul><p>AOP是一个动态的思想，在程序运行期间创建代理，使用代理执行方法，增加切面功能，代理对象是在内存中的。</p><h3 id="Aspectj实现AOP"><a href="#Aspectj实现AOP" class="headerlink" title="Aspectj实现AOP"></a>Aspectj实现AOP</h3><h4 id="通知：基于注解"><a href="#通知：基于注解" class="headerlink" title="通知：基于注解"></a>通知：基于注解</h4><ul><li>@Before：前置通知</li><li>@AfterReturning：后置通知</li><li>Around：环绕通知</li><li>AfterThrowing：异常通知</li><li>After：最终通知</li></ul><h4 id="Pointcut位置"><a href="#Pointcut位置" class="headerlink" title="Pointcut位置"></a>Pointcut位置</h4><p><a href="https://blog.csdn.net/zl1zl2zl3/article/details/85066576">AspectJ的切入点表达式—execution表达式详解</a></p><p><a href="https://blog.csdn.net/gavin_john/article/details/80278284">AspectJ——基于注解的开发方式</a></p><p><a href="https://zhuanlan.zhihu.com/p/138187927">Spring5参考指南-AspectJ注解</a></p><p><a href="https://blog.csdn.net/u010502101/article/details/78823056">AspectJ 切面注解中五种通知注解：@Before、@After、@AfterRunning、@AfterThrowing、@Around</a></p><p><a href="https://www.yiibai.com/spring_aop/annotation_before_advice.html">Spring AOP基于注解的Before Advice</a></p><p><a href="https://codeantenna.com/a/A3mmhBqiV0">基于注解的Spring AOP注解用法详解</a></p><p><a href="https://segmentfault.com/a/1190000040208023">[Spring AOP使用篇：熟悉使用前置通知、后置通知、返回通知、异常通知，并了解其相关特性]</a></p><p><a href="https://cloud.tencent.com/developer/article/1661336">@Aspect 5种通知详解 | Spring系列第35篇</a></p><h2 id="Aspect-5种通知详解-Spring系列第35篇"><a href="#Aspect-5种通知详解-Spring系列第35篇" class="headerlink" title="@Aspect 5种通知详解 | Spring系列第35篇"></a>@Aspect 5种通知详解 | Spring系列第35篇</h2><p><strong>execution(&lt;修饰符模式&gt;? &lt;返回类型模式&gt; &lt;方法名模式&gt;(&lt;参数模式&gt;) &lt;异常模式&gt;?)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">execution</span><span class="token punctuation">(</span>modifiers<span class="token operator">-</span>pattern<span class="token operator">?</span> ret<span class="token operator">-</span>type<span class="token operator">-</span>pattern declaring<span class="token operator">-</span>type<span class="token operator">-</span>pattern<span class="token operator">?</span>name<span class="token operator">-</span><span class="token function">pattern</span><span class="token punctuation">(</span>param<span class="token operator">-</span>pattern<span class="token punctuation">)</span>            <span class="token keyword">throws</span><span class="token operator">-</span>pattern<span class="token operator">?</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="https://s2.loli.net/2021/12/09/ouqOZkahgWPlxFj.png" alt="Aspectj1.png" style="zoom:67%;"><p> <img src="https://s2.loli.net/2021/12/09/Df4oveItBc3iMsK.png" alt="Aspectj2.png"></p><h4 id="Before前置通知"><a href="#Before前置通知" class="headerlink" title="@Before前置通知"></a>@Before前置通知</h4><p>使用切面注解步骤：</p><pre class="line-numbers language-none"><code class="language-none">实现步骤：1.新建Maven项目2.加依赖：①spring-context  ②spring-aspectjs3.创建业务接口和实现类4.创建切面类，    1）在类上面加@Aspect    2)在类中定义方法，表示切面功能        在方法上加Aspect通知注解，如@Before(value="切入表达式")5.创建spring配置文件    1）声明目标对象    2）声明切面类对象    3）声明自动代理生成器6.测试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切面类：</p><pre class="line-numbers language-none"><code class="language-none">/** * @Aspect: 切面类注解 * 位置：放在某个类上， * 作业：表示当前类是切面类 */@Aspectpublic class MyAspect {    //定义方法，表示切面功能//1.方法是public  2.方法返回值是void    /**     * @Before前置通知     *      属性：value，切入点表达式，表示切面的执行位置。在这个方法执行时     *                  同时执行切面的功能     *       特点：     *       1）在目标方法之前执行     *       2）不影响目标方法执行     */    //execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)    //            throws-pattern?)    @Before(value = "execution(* *..SomeServiceImpl.do*(..))")    public void myBefore(){    //    System.out.println("前置通知："+new Date());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--声明目标对象--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>someService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode1.service.Impl.SomeServiceImpl<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--声明切面类对象    --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myAspect<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bjpowernode1.handler.MyAspect<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--声明自动代理生成器，目的是创建目标对象的代理      调用aspectj框架的功能，寻找spring容器的所有目标对象      把每个目标对象加入切面类的功能，生成代理，      这个代理对象就是修改内存的目标对象，这个目标对象就是代理对象    --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="JoinPoint获取方法相关信息"><a href="#JoinPoint获取方法相关信息" class="headerlink" title="JoinPoint获取方法相关信息"></a>JoinPoint获取方法相关信息</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 切面类的通知方法是可以有参数的    * JoinPoint：表示你正在执行的业务方法，相当于反射中的Method    * 使用要求：必须是参数列表第一个    * 作用：获取方法执行时的信息，如方法名称，方法参数集合    */</span>   <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.do*(..))"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myBefore2</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法的定义："</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法名："</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法参数："</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标对象:"</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知："</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> name <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"doSomething"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSomething通知方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doOtherthing通知方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AfterRuterning后置通知"><a href="#AfterRuterning后置通知" class="headerlink" title="@AfterRuterning后置通知"></a>@AfterRuterning后置通知</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAspect</span> <span class="token punctuation">{</span>    <span class="token comment">//定义方法，表示切面功能</span>    <span class="token comment">//方法定义：</span>    <span class="token number">1.</span>方法时<span class="token keyword">public</span>        <span class="token number">2.</span>返回值是<span class="token keyword">void</span>        <span class="token number">3.</span>方法有参数，最好是<span class="token class-name">Object</span>    <span class="token comment">/**     * @AfterRuterning:后置通知     *       属性：value：切入点表达式     *             returning：自定义的变量，表示目标方法的返回值     *                          自定义名称必须和通知方法的形参名一样     *   方法的参数：     *   Object res：表示目标方法的返回值使用res接收     *   类似于Object res =doOther()     *     *   1.在doOther返回值时String，Integer，Long等基本类型时，     *         在后置通知中，修改返回值，不会影响目标方法的最后调用结果     *   2.doOther返回值是对象类型时，在后置通知中修改，会影响目标方法最后调用结果。     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doOtherthing(..))"</span><span class="token punctuation">,</span>    returning <span class="token operator">=</span> <span class="token string">"res"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myAfterRuterning</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> jp<span class="token punctuation">,</span><span class="token class-name">Object</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标方法的定义："</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法名："</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> jp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token operator">:</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法参数："</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"目标对象:"</span><span class="token operator">+</span>jp<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> result<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>res<span class="token punctuation">;</span>        result<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"张三"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"切面方法中的返回值："</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Around通知"><a href="#Around通知" class="headerlink" title="@Around通知"></a>@Around通知</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 环绕方法定义：     *  1.方法是public     *  2.方法必须要返回值，是Object     *  3.方法必须有参数，是ProceedingJoinPoint     *     */</span>    <span class="token comment">/**     * 返回值：Object，表示调用目标方法希望得到的返回值，不一定是目标方法自己的返回值     * 参数：ProceedingJoinPoint：相当于反射中的Method     *          作用：执行目标方法，类似Method.invoke()     *特点：     *  1.在目标方法的前后都增强功能     *  2.能控制目标方法是否指向     *  3.修改目标方法的返回结果     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doFirstthing(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token class-name">MyAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Around方法执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>args<span class="token punctuation">.</span>length<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Object</span> arg <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arg<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                name<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">Object</span> proceed<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            proceed <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//相当于Method.invoke()</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AfterThrowing异常通知"><a href="#AfterThrowing异常通知" class="headerlink" title="@AfterThrowing异常通知"></a>@AfterThrowing异常通知</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 异常通知     * 1.方法是public     * 2.方法没有返回值     * 3.方法有参数时，Exception     */</span>    <span class="token comment">/**     * 属性：     *  1.value：切入点表达式     *  2.throwing：自定义变量，表示目标方法抛出的异常     *              变量名必须和通知方法的形参名一样     * 特点：     *  1.在目标方法抛出异常后执行，没有异常不执行     *  2.能获取到目标方法的异常信息     *  3.不是异常处理程序，可以得到异常的通知，从而发送邮件通知开发人员     *  4.看做是目标方法的监控程序     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doSecondthing(..))"</span><span class="token punctuation">,</span>throwing <span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">MyAfterThrowing</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知,异常原因是："</span><span class="token operator">+</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * 异常发生可以做         * 1.记录依次发送位置，时间，         * 2.发送邮件，通知开发人员         */</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="After最终通知"><a href="#After最终通知" class="headerlink" title="After最终通知"></a>After最终通知</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 最终通知方法定义： *  1.方法是public *  2.方法没要返回值 *  3.方法没有参数 */</span><span class="token comment">/** * 特点： * 1.在目标方法之后执行 * 2.总是会被执行 * 3.可以用来做程序的最后收尾工作例如清除临时变量 */</span><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doThirdthing(..))"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">MyAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Pointcut定义和管理切入点注解"><a href="#Pointcut定义和管理切入点注解" class="headerlink" title="@Pointcut定义和管理切入点注解"></a>@Pointcut定义和管理切入点注解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"mypt()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">MyAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * @Pointcut：定义和管理切入点的，不是通知注解 *  位置：在一个自定义方法上面，这个方法看做是切入点表达式的别名， *          其他通知注解中，可以使用方法别名就表示使用了切入点表达式 * */</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(* *..SomeServiceImpl.doThirdthing(..))"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring集成mybatis"><a href="#Spring集成mybatis" class="headerlink" title="Spring集成mybatis"></a>Spring集成mybatis</h2><h3 id="集成思路"><a href="#集成思路" class="headerlink" title="集成思路"></a>集成思路</h3><p>spring可以集成很多框架，集成使用的是IOC技术</p><p>mybatis执行sql语句需要有代理对象</p><ol><li>需要有Dao接口的代理对象，使用SqlSession.getMapper</li><li>需要sqlSessionFactory</li><li>数据源DataSource对象，使用一个功能更强大的连接池对象代替mybatis自己的pooledDataSource</li></ol><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">Spring集成mybatis：1.使用mysql 使用学生表，student2（id int 主键 自增，                                name varchar(80)                                age int）2.加入依赖，    spring依赖，mybatis依赖，mysql驱动，mybatis-spring依赖（用来在spring项目中创建mybatis对象的）    spring事务的依赖    mybatis和spring整合的时事务是自动提交的，4.创建实体类，Student，5.创建dao接口，和mapper文件，6.写mybatis主配置文件7.创建service接口和实现类8.创建spring配置文件    1）声明数据源：druid    2）声明sqlSessionFactoryBean类，类里面创建sqlSessionFactory    3）MapperScannerConfiguration类，用于创建dao代理对象    创建的都在spring容器中    4）声明service对象，把3）中的dao赋值给service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加依赖"><a href="#加依赖" class="headerlink" title="加依赖"></a>加依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    spring事务依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    mybatis依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    mybatis-spring集成的依赖--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>8.0.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    druid连接池--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.1.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">&gt;</span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">&gt;</span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><p>根据自己需要</p><h4 id="创建Dao接口"><a href="#创建Dao接口" class="headerlink" title="创建Dao接口"></a>创建Dao接口</h4><h4 id="写mybatis主配置文件"><a href="#写mybatis主配置文件" class="headerlink" title="写mybatis主配置文件"></a>写mybatis主配置文件</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.domain<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        &lt;mapper resource="com.wm.dao.StudentDao.xml"&gt;&lt;/mapper&gt;--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.dao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建service接口和实现类"><a href="#创建service接口和实现类" class="headerlink" title="创建service接口和实现类"></a>创建service接口和实现类</h4><p>根据自己需求</p><h4 id="创建spring配置文件"><a href="#创建spring配置文件" class="headerlink" title="创建spring配置文件"></a>创建spring配置文件</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:jdbc.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--    声明数据源--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    声明sqlSessionFactoryBean--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        指定数据源--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        指定mybatis的主配置文件--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--    声明MapperScannerConfiguration           此类的作用             1.循环basepackage的包，把包中的每个dao接口找到，调用sqlSession.getmapper()                创建代理对象，放入ioc容器中--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--        指定sqlsessionfactory--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>factory<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--        指定基本包，即dao接口的位置--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.dao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.wm.service.impl.StudentServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>studentDao<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="spring中的事务管理"><a href="#spring中的事务管理" class="headerlink" title="spring中的事务管理"></a>spring中的事务管理</h2><h3 id="5-1-事务的概念"><a href="#5-1-事务的概念" class="headerlink" title="5.1 事务的概念"></a>5.1 事务的概念</h3><p>什么事务？ 事务是一些sql序列的集合， 是多条sql， 作为一个整体执行。 </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">mysql执行事务beginTransaction 开启事务insert into student() values.....select * from student where id=1001update school set name=xxx where id=1005endTransaction   事务结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>什么情况下需要使用事务？ </p><p>一个操作需要多条（2条或2条以上的sql）sql语句一起完成， 操作才能成功。</p><h3 id="5-2-在程序中事务在哪说明"><a href="#5-2-在程序中事务在哪说明" class="headerlink" title="5.2 在程序中事务在哪说明"></a>5.2 在程序中事务在哪说明</h3><p>事务：加在业务类的方法上面（public方法上面），表示业务方法执行时，需要事务的支持。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountService</span><span class="token punctuation">{</span>       <span class="token keyword">private</span> <span class="token class-name">AccountDao</span> dao<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">MoneyDao</span> dao2<span class="token punctuation">;</span>   <span class="token comment">// 在service（业务类）的public方法上面，需要说明事务。</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trans</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">,</span> <span class="token class-name">Integer</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>       dao<span class="token punctuation">.</span><span class="token function">updateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       dao<span class="token punctuation">.</span><span class="token function">updateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       dao2<span class="token punctuation">.</span><span class="token function">insertA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDao</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyDao</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-事务管理器"><a href="#5-3-事务管理器" class="headerlink" title="5.3 事务管理器"></a>5.3 事务管理器</h3><h4 id="5-3-1-不同的数据库访问技术，处理事务是不同的"><a href="#5-3-1-不同的数据库访问技术，处理事务是不同的" class="headerlink" title="5.3.1 不同的数据库访问技术，处理事务是不同的"></a>5.3.1 不同的数据库访问技术，处理事务是不同的</h4><p>1）使用jdbc访问数据库， 事务处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stat<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    stat<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>mybatis执行数据库，处理事务</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token class-name">SqlSession</span><span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        session<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"insert into student..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"update school ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        session<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-3-2-spring统一管理事务，-把不同的数据库访问技术的事务处理统一起来。"><a href="#5-3-2-spring统一管理事务，-把不同的数据库访问技术的事务处理统一起来。" class="headerlink" title="5.3. 2 spring统一管理事务， 把不同的数据库访问技术的事务处理统一起来。"></a>5.3. 2 spring统一管理事务， 把不同的数据库访问技术的事务处理统一起来。</h4><p>​       使用spring的事务管理器，管理不同数据库访问技术的事务处理。 开发人员只需要掌握spring的事务处理一个方案， 就可以实现使用不同数据库访问技术的事务管理。</p><p>​    管理事务面向的是spring， 有spring管理事务，做事务提交，事务回顾。</p><h4 id="5-3-3-Spring事务管理器"><a href="#5-3-3-Spring事务管理器" class="headerlink" title="5.3.3 Spring事务管理器"></a>5.3.3 Spring事务管理器</h4><p>Spring框架使用事务管理器对象，管理所有的事务。</p><p>事务管理器接口： PlatformTransactionManager</p><p>​                   作用： 定义了事务的操作， 主要是commit(), rollback()</p><p>事务管理器有很多实现类： 一种数据库的访问技术有一个实现类。 由实现类具体完成事务的提交，回顾。</p><p>意味着： jdbc或者mybatis访问数据库有自己的事务管理器实现类 ： DataSourceTranactionManager</p><p>​                 hibernate框架，他的事务管理器实现类： HibernateTransactionManager.    </p><h4 id="5-3-4-事务的提交和回顾的时机"><a href="#5-3-4-事务的提交和回顾的时机" class="headerlink" title="5.3.4  事务的提交和回顾的时机"></a>5.3.4  事务的提交和回顾的时机</h4><p>什么时候提交事务，回滚事务 ？</p><p> 当你的业务方法正常执行时，没有异常，事务是提交的。 如果你的业务方法抛出了运行时异常， 事务是回滚的。</p><p>异常分类：</p><p>  Error： 严重错误。 回滚事务。</p><p>  Exception :  异常类，可以出来的异常情况</p><p>  1） 运行时异常： RuntimeException和他的子类都是运行时异常， 在程序执行过程中抛出的异常。 常见的运行时异常： NullPoinerException ,  NumberFormatException , ArithmeticException, IndexOutOfBoundsException.</p><ol start="2"><li>受查异常 ： 编写java代码的时候，必须出来的异常。 例如IOException ,  SQLException , FileNotFoundException </li></ol><p>怎么记忆：</p><p> 方法中抛出了运行时异常， 事务回滚，其他情况（正常执行方法，受查异常）就是提交事务。</p><h4 id="5-3-5-事务使用的AOP的环绕通知"><a href="#5-3-5-事务使用的AOP的环绕通知" class="headerlink" title="5.3.5 事务使用的AOP的环绕通知"></a>5.3.5 事务使用的AOP的环绕通知</h4><p>环绕通知：可以在目标方法的前和后都能增强功能，不需要修改代码代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring给业务方法在执行时，增加上事务的切面功能<span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"execution(*  所有的业务类中的方法)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">myAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>       <span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用spring的事务管理器，开启事务</span>       pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//执行目标方法 //doSome()</span>       <span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//业务方法正常执行，提交事务</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//业务方法正常执行，回滚事务</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务定义接口：TransactionDefinition"><a href="#事务定义接口：TransactionDefinition" class="headerlink" title="事务定义接口：TransactionDefinition"></a>事务定义接口：TransactionDefinition</h3><p>定义了有关事务控制的属性。</p><p>事务的属性：</p><ul><li>隔离级别</li><li>传播行为</li><li>事务的超时</li></ul><h4 id="5-4-1-隔离级别"><a href="#5-4-1-隔离级别" class="headerlink" title="5.4.1 隔离级别"></a>5.4.1 隔离级别</h4><p>隔离级别：控制事务之间影响的程度。</p><p>5个值，只有四个隔离级别</p><p>1）DEFAULT ： 采 用 DB 默 认 的 事 务 隔 离 级 别 。 MySql 的 默 认 为  REPEATABLE_READ； </p><p>​      Oracle 默认为 READ_COMMITTED。</p><p>2）READ_UNCOMMITTED：读未提交。未解决任何并发问题。<br>3）READ_COMMITTED：读已提交。解决脏读，存在不可重复读与幻读。<br>4）REPEATABLE_READ：可重复读。解决脏读、不可重复读，存在幻读<br>5）SERIALIZABLE：串行化。不存在并发问题。</p><h4 id="5-4-2-超时时间"><a href="#5-4-2-超时时间" class="headerlink" title="5.4.2 超时时间"></a>5.4.2 超时时间</h4><p>超时时间，以秒为单位 。 整数值。 默认是 -1</p><p>超时时间：表示一个业务方法最长的执行时间，没有到达时间没有执行完毕，spring回滚事务。</p><h4 id="5-4-3-传播行为"><a href="#5-4-3-传播行为" class="headerlink" title="5.4.3 传播行为"></a>5.4.3 传播行为</h4><p>传播行为有7个值。 </p><p>传播行为：业务方法在调用时，事务在方法之间的，传递和使用。</p><p>使用传播行为，标识方法有无事务。</p><p>PROPAGATION_REQUIRED<br>PROPAGATION_REQUIRES_NEW<br>PROPAGATION_SUPPORTS</p><p>以上三个需要掌握的。</p><p>PROPAGATION_MANDATORY<br>PROPAGATION_NESTED<br>PROPAGATION_NEVER<br>PROPAGATION_NOT_SUPPORTED</p><p>1） REQUIRED: spring默认传播行为， 方法在调用的时候，如果存在事务就是使用当前的事务，如果没有事务，则新建事务， 方法在新事务中执行。</p><p>2） SUPPORTS：支持， 方法有事务可以正常执行，没有事务也可以正常执行。</p><p>3）REQUIRES_NEW：方法需要一个新事务。 如果调用方法时，存在一个事务，则原来的事务暂停。 直到新事务执行完毕。  如果方法调用时，没有事务，则新建一个事务，在新事务执行代码。</p><h3 id="5-5-Spring框架使用自己的注解-Transactional控制事务"><a href="#5-5-Spring框架使用自己的注解-Transactional控制事务" class="headerlink" title="5.5 Spring框架使用自己的注解@Transactional控制事务"></a>5.5 Spring框架使用自己的注解@Transactional控制事务</h3><p>@Transactional注解， 使用注解的属性控制事务（隔离级别，传播行为，超时）</p><p>​    属性： </p><p>​     1. propagation ： 事务的传播行为， 他使用的 Propagation类的枚举值。例如 Propagation.REQUIRED</p><p>​     2.isolation ： 表示隔离级别， 使用Isolation类的枚举值，表示隔离级别。 默认 Isolation.DEFAULT</p><p>​     3.readOnly: boolean类型的值，表示数据库操作是不是只读的。默认是false</p><p>​     4.timeout： 事务超时，默认是-1， 整数值，单位是秒。 例如 timeout=20</p><p>​     5.rollbackFor：表示回滚的异常类列表， 他的值是一个数组，每个值是异常类型的class。 </p><p>​     6.rollbackForClassName：表示回滚的异常类列表,他的值是异常类名称，是String类型的值</p><p>​     7.noRollbackFor： 不需要回滚的异常类列表。 是class类型的。</p><p>​     8.noRollbackForClassName： 不需要回滚的异常类列表，是String类型的值</p><p> 位置：1）在业务方法的上面， 是在public方法的上面</p><p>​             2） 在类的上面。</p><p>注解的使用步骤：</p><p>1）在spring的配置文件，声明事务的内容</p><p>​      声明事务管理器，说明使用哪个事务管理器对象</p><p>​      声明使用注解管理事务， 开启是注解驱动</p><p>2）在类的源代码中，加入@Transactional.</p><p>事务的控制模式： 1. 编程式，在代码中编程控制事务。  2. 声明式事务。不用编码</p><p>例子：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">spring配置文件<span class="token comment">&lt;!--声明事务的控制--&gt;</span><span class="token comment">&lt;!--声明事务管理器--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--指定数据源DataSource--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myDataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--开启事务注解驱动： 告诉框架使用注解管理事务    transaction-manager:指定事务管理器的id--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>annotation-driven</span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">java代码<span class="token comment">//@Transactional 放在public方法的上面。表示方法有事务功能</span>    <span class="token comment">/*    第一种设置方式    @Transactional(            propagation = Propagation.REQUIRED,            isolation = Isolation.DEFAULT,            readOnly = false, timeout = 20,            rollbackFor = {NullPointerException.class,NotEnougthException.class})     */</span>    <span class="token comment">/*    第二种设置方式     @Transactional(            propagation = Propagation.REQUIRED,            isolation = Isolation.DEFAULT,            readOnly = false, timeout = 20     )     解释 rollbackFor 的使用；     1）框架首先检查方法抛出的异常是不是在 rollbackFor 的数组中， 如果在一定回滚。     2）如果方法抛出的异步不在 rollbackFor 数组， 框架会继续检查 抛出的异常 是不是 RuntimeException.        如果是RuntimeException， 一定回滚。     例如 抛出 SQLException , IOException     rollbackFor={SQLException.class, IOException.class}     */</span>    <span class="token comment">//第三种方式： 使用默认值 REQUIRED ， 发生运行时异常回滚。</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> goodsId<span class="token punctuation">,</span> <span class="token class-name">Integer</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>@Transactional使用的特点：</p><p>1.spring框架自己提供的事务控制</p><p>2.适合中小型项目。</p><p>3.使用方便，效率高。</p><h3 id="5-6-使用Aspectj框架在spring的配置文件中，声明事务控制"><a href="#5-6-使用Aspectj框架在spring的配置文件中，声明事务控制" class="headerlink" title="5.6  使用Aspectj框架在spring的配置文件中，声明事务控制"></a>5.6  使用Aspectj框架在spring的配置文件中，声明事务控制</h3><p> 使用aspectj的aop，声明事务控制叫做声明式事务</p><p> 使用步骤：</p><ol><li><p>pom.xml加入 spring-aspects的依赖</p></li><li><p>在spring的配置文件声明事务的内容</p><p>1）声明事务管理器</p><p>2）声明业务方法需要的事务属性</p><p>3）声明切入点表达式</p></li></ol><p>声明式事务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>声明式事务： 不用写代码 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">1.</span> 声明事务管理器<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span>                                <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"myDataSource"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token number">2.</span>声明业务方法的事务属性（隔离级别，传播行为，超时）        id<span class="token operator">:</span>给业务方法配置事务段代码起个名称，唯一值        transaction<span class="token operator">-</span>manager<span class="token operator">:</span>事务管理器的id    <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>tx<span class="token operator">:</span>advice id<span class="token operator">=</span><span class="token string">"serviceAdvice"</span> transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>给具体的业务方法增加事务的说明<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>tx<span class="token operator">:</span>attributes<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>               给具体的业务方法，说明他需要的事务属性               name<span class="token operator">:</span> 业务方法名称。                      配置name的值： <span class="token number">1.</span> 业务方法的名称； <span class="token number">2.</span> 带有部分通配符<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>的方法名称； <span class="token number">3</span> 使用<span class="token operator">*</span>               propagation<span class="token operator">:</span>指定传播行为的值               isolation：隔离级别               read<span class="token operator">-</span>only：是否只读，默认是<span class="token boolean">false</span>               timeout：超时时间               rollback<span class="token operator">-</span><span class="token keyword">for</span>：指定回滚的异常类列表，使用的异常全限定名称            <span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"buy"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> isolation<span class="token operator">=</span><span class="token string">"DEFAULT"</span>                       read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"false"</span> timeout<span class="token operator">=</span><span class="token string">"20"</span>                       rollback<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"java.lang.NullPointerException,com.bjpowernode.excetion.NotEnougthException"</span><span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>在业务方法有命名规则后， 可以对一些方法使用事务<span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"add*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRES_NEW"</span>                 rollback<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"java.lang.Exception"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"modify*"</span>                  propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> rollback<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"java.lang.Exception"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"remove*"</span>                  propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> rollback<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"java.lang.Exception"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>以上方法以外的 <span class="token operator">*</span> <span class="token operator">:</span>querySale<span class="token punctuation">,</span> findSale<span class="token punctuation">,</span> searchSale <span class="token operator">--</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"*"</span> propagation<span class="token operator">=</span><span class="token string">"SUPPORTS"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>attributes<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>advice<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>声明切入点表达式： 表示那些包中的类，类中的方法参与事务<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">&gt;</span>       <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>声明切入点表达式            expression：切入点表达式， 表示那些类和类中的方法要参与事务            id：切入点表达式的名称，唯一值            expression怎么写？      <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">"servicePointcut"</span> expression<span class="token operator">=</span><span class="token string">"execution(* *..service..*.*(..))"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>关联切入点表达式和事务通知<span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>aop<span class="token operator">:</span>advisor advice<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"serviceAdvice"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"servicePointcut"</span> <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声明式事务优缺点：</p><ol><li><p>缺点： 理解难， 配置复杂。</p></li><li><p>优点： 代码和事务配置是分开的。 控制事务源代码不用修改。</p><p>​             能快速的了解和掌控项目的全部事务。 适合大型项目。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java7新特性总结</title>
      <link href="/2021/11/27/java7-xin-te-xing-zong-jie/"/>
      <url>/2021/11/27/java7-xin-te-xing-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/6bc2e4c82f6b">Java 7的新特性</a></p><p><a href="https://blog.csdn.net/u014209205/article/details/79718689">java7新特性总结</a></p><p><a href="https://blog.csdn.net/hjm4702192/article/details/30078877">java7 新特性 总结版</a></p><p> <a href="https://www.cnblogs.com/leo-lsw/articles/java7new.html">Java7 新特性回顾</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis深入理解笔记（一）</title>
      <link href="/2021/11/27/redis-shen-ru-li-jie-bi-ji-yi/"/>
      <url>/2021/11/27/redis-shen-ru-li-jie-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247484966&amp;idx=1&amp;sn=86495501e12ad0c62476d98985d43c85&amp;source=41#wechat_redirect">面试中关于Redis的问题看这篇就够了 (qq.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unix网络编程笔记（一）I/O复用：select和poll</title>
      <link href="/2021/11/25/unix-wang-luo-bian-cheng-bi-ji-yi-select-he-epoll/"/>
      <url>/2021/11/25/unix-wang-luo-bian-cheng-bi-ji-yi-select-he-epoll/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/722819425dbd">Select、Poll、Epoll详解 - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/272891398">一文搞懂select、poll和epoll区别 - 知乎 (zhihu.com)</a></p><p><a href="https://www.itqiankun.com/article/select-poll-epoll">搞懂Select，Poll，Epoll的区别-IT乾坤技术博客 (itqiankun.com)</a></p><p><a href="https://www.cnblogs.com/Anker/p/3265058.html">select、poll、epoll之间的区别总结整理] - Rabbit_Dale - 博客园 (cnblogs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/367591714">深入浅出理解select、poll、epoll的实现 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/129089001">select、poll、epoll 是什么？有什么作用？ - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/wteruiycbqqvwt/article/details/90299610">(168条消息) 深入理解select、poll和epoll及区别_$好记性还是要多记录$-CSDN博客_epoll和select的区别</a></p><p><a href="https://www.cnblogs.com/kuotian/p/13199625.html">I/O多路复用之select、poll、epoll详解(+Redis) - kuotian - 博客园 (cnblogs.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/126278747">IO复用之select、poll、epoll模型 - 知乎 (zhihu.com)</a></p><p>视频：还可看下面用户的视频主页看更多视频</p><p><a href="https://www.bilibili.com/video/BV1jK4y1N7ST?spm_id_from=333.999.0.0">深入理解Linux中网络I/O复用并发模型</a></p><p><a href="https://www.bilibili.com/video/BV1zy4y1n78p?spm_id_from=333.999.0.0">Epoll 源码剖析第一部分</a></p><p><a href="https://www.bilibili.com/video/BV1jb41187m4?spm_id_from=333.999.0.0">epoll模型</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-NIO补充整理（一）</title>
      <link href="/2021/11/23/java-nio-bu-chong-zheng-li-yi/"/>
      <url>/2021/11/23/java-nio-bu-chong-zheng-li-yi/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://tech.meituan.com/2016/11/04/nio.html">美团技术团队Java NIO浅析</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-Netty笔记</title>
      <link href="/2021/11/23/java-nettty-bi-ji/"/>
      <url>/2021/11/23/java-nettty-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1py4y1E7oA?from=search&amp;seid=5033301309557305986&amp;spm_id_from=333.337.0.0">黑马程序员Netty全套教程，全网最全Netty深入浅出教程，Java网络编程的王者</a></p><h2 id="NIO基础"><a href="#NIO基础" class="headerlink" title="NIO基础"></a>NIO基础</h2><h3 id="处理消息边界"><a href="#处理消息边界" class="headerlink" title="处理消息边界"></a>处理消息边界</h3><p>首先我们要知道为什么要处理消息边界问题，考虑这样一个场景，在网络中数据都是以字节进行传送的，假如本地为接收某个消息只分配了16个字节的缓冲区，但对方却传来远大于16字节的数据，这样会导致接收不完整或者接收的消息解析出来是乱码，你可能会想循环接收啊，但无论怎样我们都需要一个连续的空间来存储这些数据，才会正确解码。</p><p><strong>思路</strong></p><ul><li>一种思路时固定消息长度，数据包的大小一样，服务器按预定长度读取，但明显回传输不必要的数据，影响带宽。</li><li>另一种是按分隔符拆分，但这样需要遍历消息，效率低。</li><li>还一种是TLV格式，即Type，Length，Value，类型和长度已知，便容易分配合适的buffer，缺点是buffer需要提前分配，如果内容过大，影响server的吞吐量。</li></ul><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">sequenceDiagram participant c1 as 客户端1participant s as 服务器participant b1 as ByteBuffer1participant b2 as ByteBuffer2c1 -&gt;&gt; s: 发送 01234567890abcdef3333\rs -&gt;&gt; b1: 第一次 read 存入 01234567890abcdefs -&gt;&gt; b2: 扩容b1 -&gt;&gt; b2: 拷贝 01234567890abcdefs -&gt;&gt; b2: 第二次 read 存入 3333\rb2 -&gt;&gt; b2: 01234567890abcdef3333\r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面我们采用拆分分隔符并扩容的办法实现消息便捷处理。</p><p>下面的实现有如下注意点：</p><ul><li>用于buffer是线程不安全的，因此使得每个channel有一个自己的buffer</li><li>利用buffer的position和limit判断消息是否越界。</li></ul><p>拆分函数如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> buffer<span class="token punctuation">)</span><span class="token punctuation">{</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> oldLimit<span class="token operator">=</span>buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>oldLimit<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ByteBuffer</span> target <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                target<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>oldLimit<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        buffer<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用compact压缩函数，即有分隔符则压缩，若没有则有position==limit。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//1.创建selector，管理多个channel</span><span class="token comment">//        ByteBuffer buf = ByteBuffer.allocate(16);</span>            <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2.建立selector和channel的联系</span>            ssc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>            ssc<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//附件，使得每个channel独有自己的buf</span>                            socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">ByteBuffer</span> buf<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span>key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//处理消息越界情况</span>                            channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">//判断是否越界</span>                            <span class="token function">split</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                <span class="token comment">//越界了</span>                                buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token class-name">ByteBuffer</span> newBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                newBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                                key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>newBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                        key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//防止客户端异常断开，导致服务器出现关闭。</span>                        <span class="token comment">/**                         * 不管服务端异常关闭还是正常关闭，都会触发读事件，正常关闭read返回-1，若不remove，这个                         * 事件会一直存在于key集合中，因此需要remove，                         * 异常关闭read会报异常，如果不cancel，这个事件同样会一直存在于key集合中，导致一直报错，                         * 故要在catch中cancel                         */</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ByteBuffer大小分配</strong></p><ul><li>每个 channel 都需要记录可能被切分的消息，因为 ByteBuffer 不能被多个 channel 共同使用，因此需要为每个 channel 维护一个独立的 ByteBuffer</li><li>ByteBuffer 不能太大，比如一个 ByteBuffer 1Mb 的话，要支持百万连接就要 1Tb 内存，因此需要设计大小可变的 ByteBuffer<ul><li>一种思路是首先分配一个较小的 buffer，例如 4k，如果发现数据不够，再分配 8k 的 buffer，将 4k buffer 内容拷贝至 8k buffer，优点是消息连续容易处理，缺点是数据拷贝耗费性能，参考实现 <a href="http://tutorials.jenkov.com/java-performance/resizable-array.html">http://tutorials.jenkov.com/java-performance/resizable-array.html</a></li></ul></li></ul><h3 id="处理write事件"><a href="#处理write事件" class="headerlink" title="处理write事件"></a>处理write事件</h3><p><strong>一次无法写完的例子</strong></p><ul><li>非阻塞模式下，无法保证把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值（代表实际写入字节数）</li><li>用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，但这样又会导致占用内存过多，就有两阶段策略<ul><li>当消息处理器第一次写入消息时，才将 channel 注册到 selector 上</li><li>selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册</li><li>如果不取消，会每次可写均会触发 write 事件</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteServer</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ssc<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ssc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SelectionKey</span> sckey <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 1. 向客户端发送内容</span>                <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> write <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 3. write 表示实际写了多少字节</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实际写入字节:"</span> <span class="token operator">+</span> write<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 4. 如果有剩余未读字节，才需要关注写事件</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// read 1  write 4</span>                    <span class="token comment">// 在原有关注事件的基础上，多关注 写事件</span>                    sckey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>sckey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 把 buffer 作为附件加入 sckey</span>                    sckey<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> write <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实际写入字节:"</span> <span class="token operator">+</span> write<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 写完了</span>                    key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_CONNECT <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isConnectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    count <span class="token operator">+=</span> sc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程优化NIO"><a href="#多线程优化NIO" class="headerlink" title="多线程优化NIO"></a>多线程优化NIO</h3><p>之前我们写的代码只有一个selector，没有充分利用多核cpu，现在进行多线程改进。</p><p>分两组选择器：</p><ul><li>单线程配一个选择器，专门处理accept事件</li><li>创建cpu核心数的线程，为每个线程配一个选择器，轮流处理read事件</li></ul><p><strong>多线程优化</strong></p><p><img src="https://s3.bmp.ovh/imgs/2022/02/40cd636b6f0b182b.png"></p><p>我们写一个内部类worker，用于分配线程处理读写事件。思考worker需要有的属性。</p><ul><li>Thread</li><li>name</li><li>Selector，每个worker一个selector。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> start<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> sc<span class="token punctuation">,</span><span class="token class-name">ByteBuffer</span> buf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>start<span class="token punctuation">)</span><span class="token punctuation">{</span>                thread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                selector<span class="token operator">=</span><span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                start<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               <span class="token class-name">SelectionKey</span> key<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                   selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">while</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       key <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                           <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span>key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token class-name">ByteBuffer</span> buf<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span>key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token class-name">Server</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                               <span class="token comment">//越界了</span>                               buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               <span class="token class-name">ByteBuffer</span> newBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               newBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                               key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>newBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token punctuation">}</span>                       <span class="token punctuation">}</span>                        <span class="token comment">//还可根据之前讲的一次写入大量数据，进行可写事件注册</span>                       <span class="token comment">//此处只关注可读事件。</span>                       keys<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>                   e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是有：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"boss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Selector</span> boss <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ssc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>boss<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>      ssc<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//1.创建固定数量的worker</span>      <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Worker</span><span class="token punctuation">[</span><span class="token punctuation">]</span> workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          workers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">"worker-"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//计数器</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>boss<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> boss<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>workers<span class="token punctuation">[</span>atomicInteger<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span> workers<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但运行之后很快发现这样的代码存在问题，他接收不到消息！！，思考原因，我们可以发现在socketChannel.register(worker.selector,SelectionKey.OP_READ,buf);代码中使用到了work.selector,而在执行worker.register();启动线程，在run中也用到了work.selector,但selector.select();会使得线程阻塞，若run先执行导致socketChannel.register执行不了，故此时worker无法监听读事件，其关键在于两个线程的执行顺序问题，我们思考能不能将socketChannel.register和run在同一线程中执行呢，这样便可以控制先后，于是采用了ConcurrentLinkedQueue,专门用户在线程间传递任务，使得执行顺序得以控制。</p><p>于是worker的register成了这样：</p><p>(添加了这样的属性<code>private ConcurrentLinkedQueue&lt;Runnable&gt; queue=new ConcurrentLinkedQueue&lt;&gt;();</code>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> sc<span class="token punctuation">,</span><span class="token class-name">ByteBuffer</span> buf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>start<span class="token punctuation">)</span><span class="token punctuation">{</span>                thread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                selector<span class="token operator">=</span><span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                start<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//向队列添加任务，但不会立即执行</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">,</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClosedChannelException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//唤醒selector的阻塞</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在run中添加</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Runnable</span> task <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                       task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Selector的wakeup方法"><a href="#Selector的wakeup方法" class="headerlink" title="Selector的wakeup方法"></a>Selector的wakeup方法</h3><p><a href="https://blog.csdn.net/qq_27384769/article/details/80650373">NIO的selector.wakeup的实现</a></p><p><a href="http://ifeve.com/selectors/">Java NIO系列教程（六） Selector</a></p><p><a href="https://developer.51cto.com/article/306359.html">Java NIO的wakeup剖析</a></p><p><a href="https://my.oschina.net/7001/blog/1509533">Java NIO wakeup实现原理</a></p><h3 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h3><p><a href="https://www.cnblogs.com/yangzhenlong/p/8359875.html">ConcurrentLinkedQueue使用和方法介绍 </a></p><p><a href="https://juejin.cn/post/6844903602427805704">并发容器之ConcurrentLinkedQueue</a></p><p><a href="https://www.cnblogs.com/tong-yuan/p/ConcurrentLinkedQueue.html">死磕 java集合之ConcurrentLinkedQueue源码分析 </a></p><p><a href="https://houbb.github.io/2020/10/17/lock-09-ConcurrentLinkedQueue-source-code">ConcurrentLinkedQueue</a></p><h2 id="Netty入门"><a href="#Netty入门" class="headerlink" title="Netty入门"></a>Netty入门</h2><p><img src="https://s3.bmp.ovh/imgs/2022/02/e6f2edaeb8a9e713.png"></p><h3 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java-io-RandomAccessFile类详解</title>
      <link href="/2021/11/22/java-io-randomaccessfile-lei-xiang-jie/"/>
      <url>/2021/11/22/java-io-randomaccessfile-lei-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/360e37539266">Java IO流详解（三）——RandomAccessFile - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/qq_31615049/article/details/88562892">(158条消息) RandomAccessFile简介与使用_LJHSkyWalker的博客-CSDN博客_randomaccessfile</a></p><p><a href="https://www.cnblogs.com/jyy599/p/12076662.html">RandomAccessFile 详解 - 一场屠夫的战争 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java尚硅谷+黑马NIO笔记</title>
      <link href="/2021/11/21/java-nio-bi-ji/"/>
      <url>/2021/11/21/java-nio-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1E64y1h7Z4?p=2&amp;spm_id_from=pageDriver">【尚硅谷】2021新版Java NIO详细教程（一套带你掌握IO API/javanio）_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/donkeyboy001/article/details/86842029">(158条消息) Java NIO 的实现原理解析_donkeyboy001的博客-CSDN博客_java nio实现原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/65340485">Java NIO原理 图文分析及代码实现 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/348973425">Java Socket NIO解析 - 知乎 (zhihu.com)</a></p><p><a href="https://ifeve.com/overview/">Java NIO系列教程（一） Java NIO 概述 | 并发编程网 – ifeve.com</a></p><p><a href="https://blog.csdn.net/luliuliu1234/article/details/61915000">(158条消息) NIO核心框架介绍_Jessy-CSDN博客_nio框架</a></p><p><a href="https://blog.csdn.net/u011381576/article/details/79876754">(158条消息) Java NIO？看这一篇就够了！_u011381576的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/7fff40637683">彻底搞懂NIO效率高的原理 - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/3b2a15374aab">Java高级主题（三）下——NIO体系结构 - 简书 (jianshu.com)</a></p><p><a href="https://vimsky.com/examples/usage/bytebuffer-allocatedirect-method-in-java-with-examples.html">Java ByteBuffer allocateDirect()用法及代码示例 - 纯净天空 (vimsky.com)</a></p><p><a href="https://www.cnblogs.com/woshijpf/articles/3723364.html">java.nio.Buffer flip()方法的用法详解 - woshijpfgg - 博客园 (cnblogs.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1409261">Java 中的伪异步 IO - 云+社区 - 腾讯云 (tencent.com)</a></p><p><a href="https://www.jianshu.com/p/eb02699ecd11">java 伪异步通信模型详解 - 简书 (jianshu.com)</a></p><p><a href="https://www.cnblogs.com/Joanna-Yan/p/7723174.html">Java IO编程全解（三）——伪异步IO编程 - Joanna.Yan - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/afan249/article/details/78305499">(159条消息) 伪异步I/O_afan249的博客-CSDN博客_伪异步</a></p><p><a href="https://blog.csdn.net/jiaomingliang/article/details/46012185">(159条消息) javaNIO原理（含代码）及与 同步阻塞IO 、伪异步IO比较_jiaomingliang的专栏-CSDN博客</a></p><h2 id="基于BIO任意文件上传"><a href="#基于BIO任意文件上传" class="headerlink" title="基于BIO任意文件上传"></a>基于BIO任意文件上传</h2><p><strong>客户端</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>                <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\dlei\\Desktop\\BIO,NIO,AIO\\文件\\java.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//  1、请求与服务端的Socket链接</span>            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span> <span class="token punctuation">,</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//  2、把字节输出流包装成一个数据输出流</span>            <span class="token class-name">DataOutputStream</span> dos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//  3、先发送上传文件的后缀给服务端</span>            dos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">".png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//  4、把文件数据发送给服务端进行接收</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>                dos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dos<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>服务端</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    目标：服务端开发，可以实现接收客户端的任意类型文件，并保存到服务端磁盘。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">ServerSocket</span> ss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Socket</span> socket <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 交给一个独立的线程来处理与这个客户端的文件通信需求。</span>                <span class="token keyword">new</span> <span class="token class-name">ServerReaderThread</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerReaderThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ServerReaderThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment">// 1、得到一个数据输入流读取客户端发送过来的数据</span>            <span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2、读取客户端发送过来的文件类型</span>            <span class="token class-name">String</span> suffix <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">readUTF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端已经成功接收到了文件类型："</span> <span class="token operator">+</span> suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3、定义一个字节输出管道负责把客户端发来的文件数据写出去</span>            <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\dlei\\Desktop\\BIO,NIO,AIO\\文件\\server\\"</span><span class="token operator">+</span>                    UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>suffix<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4、从数据输入流中读取文件数据，写出到字节输出流中去</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> dis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端接收文件保存成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>课件笔记博客版</p><p><a href="https://blog.csdn.net/weixin_46633487/article/details/114223239">(159条消息) NIO深入剖析_芜湖芜香蛋的博客-CSDN博客</a></p><p><a href="https://gitee.com/yjp245/bio-learning/blob/master/BIO%E3%80%81NIO%E3%80%81AIO.md#%E7%AC%AC%E5%9B%9B%E7%AB%A0-java-nio%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90">BIO、NIO、AIO.md · 收破烂/BIO学习 - Gitee.com</a></p><h2 id="NIO三大核心部分"><a href="#NIO三大核心部分" class="headerlink" title="NIO三大核心部分"></a>NIO三大核心部分</h2><p>NIO 有三大核心部分：<strong>Channel( 通道) ，Buffer( 缓冲区), Selector( 选择器)</strong></p><h3 id="Buffer缓冲区"><a href="#Buffer缓冲区" class="headerlink" title="Buffer缓冲区"></a>Buffer缓冲区</h3><p>缓冲区本质上是一块可以写入数据，然后可以从中读取数据的内存。这块内存被包装成NIO Buffer对象，并提供了一组方法，用来方便的访问该块内存。相比较直接对数组的操作，Buffer API更加容易操作和管理。</p><h3 id="Channel通道"><a href="#Channel通道" class="headerlink" title="Channel通道"></a>Channel通道</h3><p>Java NIO的通道类似流，但又有些不同：既可以从通道中读取数据，又可以写数据到通道。但流的（input或output)读写通常是单向的。 通道可以非阻塞读取和写入通道，通道可以支持读取或写入缓冲区，也支持异步地读写。</p><h3 id="Selector选择器"><a href="#Selector选择器" class="headerlink" title="Selector选择器"></a>Selector选择器</h3><p>Selector是 一个Java NIO组件，可以能够检查一个或多个 NIO 通道，并确定哪些通道已经准备好进行读取或写入。这样，一个单独的线程可以管理多个channel，从而管理多个网络连接，提高效率</p><ul><li>每个 channel 都会对应一个 Buffer</li><li>一个线程对应Selector ， 一个Selector对应多个 channel(连接)</li><li>程序切换到哪个 channel 是由事件决定的</li><li>Selector 会根据不同的事件，在各个通道上切换</li><li>Buffer 就是一个内存块 ， 底层是一个数组</li><li>数据的读取写入是通过 Buffer完成的 , BIO 中要么是输入流，或者是输出流, 不能双向，但是 NIO 的 Buffer 是可以读也可以写。</li><li>Java NIO系统的核心在于：通道(Channel)和缓冲区 (Buffer)。通道表示打开到 IO 设备(例如：文件、 套接字)的连接。若需要使用 NIO 系统，需要获取 用于连接 IO 设备的通道以及用于容纳数据的缓冲 区。然后操作缓冲区，对数据进行处理。简而言之，Channel 负责传输， Buffer 负责存取数据</li></ul><h2 id="NIO核心一：缓冲区（Buffer）"><a href="#NIO核心一：缓冲区（Buffer）" class="headerlink" title="NIO核心一：缓冲区（Buffer）"></a>NIO核心一：缓冲区（Buffer）</h2><p>一个用于特定基本数据类 型的容器。由 java.nio 包定义的，所有缓冲区 都是 Buffer 抽象类的子类.。Java NIO 中的 Buffer 主要用于与 NIO 通道进行 交互，数据是从通道读入缓冲区，从缓冲区写入通道中的</p><p><strong>Buffer</strong> 就像一个数组，可以保存多个相同类型的数据。根 据数据类型不同 ，有以下 Buffer 常用子类：</p><ul><li>ByteBuffer</li><li>CharBuffer</li><li>ShortBuffer</li><li>IntBuffer</li><li>LongBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">XxxBuffer</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token operator">:</span> 创建一个容量为capacity 的 <span class="token class-name">XxxBuffer</span> 对象<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="缓冲区的基本属性"><a href="#缓冲区的基本属性" class="headerlink" title="缓冲区的基本属性"></a>缓冲区的基本属性</h3><ul><li><strong>容量（capacity）</strong>:作为一个内存块，Buffer具有一定的固定大小，也称为容量，常见后不能更改</li><li><strong>限制（limit）</strong>：表示缓冲区可以操纵的数据的大小，写入模式下，限制等于buffer容量，读取模式下限制等于写入的数据量。</li><li><strong>位置（position）</strong>：下一个要读取或写入的数据索引，</li><li><strong>标记（mark）与重置（reset）</strong>：标记是一个索引，通过Buffer中的mark方法指定buffer中特定的position做标记，之后可通过reset恢复到这个标记位置</li></ul><p><img src="https://i.loli.net/2021/11/23/CQgD9bf1dikt8cZ.png" alt="allocate.png"></p><p><img src="https://i.loli.net/2021/11/23/2WZTcXrmPM4jFUd.png" alt="put方法.png"></p><p><img src="https://i.loli.net/2021/11/23/b7K1YS6TwBfRsg3.png" alt="flip方法.png"></p><p>==flip方法将position置为初始位置，将limit置为此时已经写入的位置，常用于读模式==</p><h3 id="Buffer常见API"><a href="#Buffer常见API" class="headerlink" title="Buffer常见API"></a>Buffer常见API</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Buffer</span> clear（）清空缓冲区并返回对缓冲区的引用<span class="token class-name">Buffer</span> flip（）将缓冲区的界限设置为当前位置，并将当前位置设置为<span class="token number">0</span><span class="token keyword">int</span> capacity（）返回<span class="token class-name">Buffer</span>的容量<span class="token keyword">boolean</span> hasRemaining（）判断缓冲区是否还有元素<span class="token keyword">int</span> limit（）返回<span class="token class-name">Buffer</span>界限<span class="token class-name">Buffer</span> mark（）对缓冲区做标记<span class="token keyword">int</span> position（）返回缓冲区当前位置<span class="token class-name">Buffer</span> position（<span class="token keyword">int</span> n）将设置当前缓冲区当前位置为n<span class="token keyword">int</span> remaining（）返回position和limit之间元素的个数<span class="token class-name">Buffer</span> reset（）将位置position转到以前设置的mark<span class="token class-name">Buffer</span> rewind将位置设为<span class="token number">0</span>，取消设置的mark<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="缓冲区数据操作"><a href="#缓冲区数据操作" class="headerlink" title="缓冲区数据操作"></a>缓冲区数据操作</h3><pre class="line-numbers language-none"><code class="language-none">Buffer所有子类提供两个用于数据操作的方法：get（）put（）获取Buffer中数据：get（）：读取单个字节get（byte[] dst）批量读取多个字节到dstget（int index）：读取指定索引位置字节放入数据到Buffer中put（byte b）：将给定单个字节写入缓冲区当前位置put（byte[] src）:将src中字节写入缓冲区当前位置put（int index，byte b）：将指定字节写入缓冲区中索引位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用Buffer读写数据一般遵循以下四个步骤：</strong></p><ul><li>1.写入数据到Buffer</li><li>2.调用flip()方法，转换为读取模式</li><li>3.从Buffer中读取数据</li><li>4.调用buffer.clear()方法或者buffer.compact()方法清除缓冲区</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestBuffer</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//分配直接缓冲区</span>      <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">isDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"itheima"</span><span class="token punctuation">;</span>            <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      buf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//mark() : 标记</span>      buf<span class="token punctuation">.</span><span class="token function">mark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//reset() : 恢复到 mark 的位置</span>      buf<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//判断缓冲区中是否还有剩余数据</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment">//获取缓冲区中可以操作的数量</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"itheima"</span><span class="token punctuation">;</span>      <span class="token comment">//1. 分配一个指定大小的缓冲区</span>      <span class="token class-name">ByteBuffer</span> buf <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------allocate()----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//2. 利用 put() 存入数据到缓冲区中</span>      buf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------put()----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3. 切换读取数据模式</span>      buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------flip()----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4. 利用 get() 读取缓冲区中的数据</span>      <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      buf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>dst<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dst<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------get()----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//5. rewind() : 可重复读</span>      buf<span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------rewind()----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//6. clear() : 清空缓冲区. 但是缓冲区中的数据依然存在，但是处于“被遗忘”状态</span>      buf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------clear()----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>buf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="直接缓冲区与非直接缓冲区"><a href="#直接缓冲区与非直接缓冲区" class="headerlink" title="直接缓冲区与非直接缓冲区"></a>直接缓冲区与非直接缓冲区</h3><p>byte buffer可以使两种类型，一种是基于直接内存的（非堆内存，是系统IO的直接内存），另一种是非直接内存，即进程内的堆内存，对于直接内存，JVM将会在IO操作上具有更高的性能，它直接作用与本地操作系统的IO操作，而非直接内存，即堆内存，如果要进行IO操作，会先从本进程内的堆内存复制到直接内存，再利用本地IO处理。</p><p>数据流向：</p><p>==本地IO–&gt;写入直接内存–&gt;复制到非直接内存–&gt;复制到直接内存–&gt;本地IO==</p><p>在做IO处理时，比如网络发送大量数据时，直接内存具有更高效率，使用<code>allocateDirect</code>创建，但它比申请普通堆内存耗费更多性能，不过这部分数据是在JVM之外的，不会占用应用内存，所有当有很大数据要缓存时，且生命周期长，比较适合使用直接内存，一般来说如果不是能带来明显性能提升，推荐使用堆内存，字节缓冲区是直接内存还是非直接内存可通过调用isDirect确定。</p><ul><li>有很大的数据存储，且生命周期很长</li><li>频繁的IO操作，如网络并发场景时</li></ul><p>以上两种推荐使用直接内存。</p><h2 id="NIO核心二：通道（Channel）"><a href="#NIO核心二：通道（Channel）" class="headerlink" title="NIO核心二：通道（Channel）"></a>NIO核心二：通道（Channel）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>通道表示IO源与目标打开的连接，Channel类似于传统的流，只不过Channel本身不能直接访问数据，只能与Buffer进行交互。</p><p>类似于流但又有区别</p><ul><li>通道可以同时进行读写，而流只能进行读或写。</li><li>通道可以实现异步读写数据</li><li>通道可以从缓冲区读数据也可以写数据</li><li>BIO的stream是单向的，如FileInputStream只能进行读，而NIO通道是双向的，可以读也可以写。</li></ul><h3 id="常见的Channel"><a href="#常见的Channel" class="headerlink" title="常见的Channel"></a>常见的Channel</h3><ul><li>==FileChannel：==用于读取写入，映射，和操作文件的通道</li><li>==DatagramChannel：==通过UDP读写网络数据</li><li>==SocketChannel：==通过TCP读写网络数据</li><li>==ServerSocketChannel：==监听新进来的TCP连接，对每一个连接都会创建一个==socketChannel==</li></ul><h3 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h3><p>获取通道方式调用支持通道的对象的getChannel</p><ul><li>FileInputChannel</li><li>FileOutputChannel</li><li>RandomAccessFile</li><li>DatagramSocket</li><li>Socket</li><li>ServerSocket</li><li>其它方式是使用Files类的静态方法newByteChannel（）</li></ul><h4 id="FileChannel常用方法"><a href="#FileChannel常用方法" class="headerlink" title="FileChannel常用方法"></a>FileChannel常用方法</h4><pre class="line-numbers language-none"><code class="language-none">int read（ByteBuffer dst）从Channel读取数据到ByteBufferlong read（ByteBuffer[] dsts）将Channel中的数据分散到ByteBuffer【】int write（ByteBuffer src）将ByteBuffer中的数据写到Channel中long write（ByteBuffer[] srcs）将ByteBuffer[]中的数据写到Channellong position（）返回此通道的文件位置FileChannel position(long p)设置通道的文件位置，long size（）返回此通道文件当前大小FileChannel truncate（long s）将此通道的文件截取为给定大小void force（boolean metaData）强制将通道的数据存入磁盘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p><strong>本地读写数据</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 1、字节输出流通向目标文件</span>            <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"data01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 2、得到字节输出流对应的通道Channel</span>            <span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 3、分配缓冲区</span>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello,黑马Java程序员！"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 4、把缓冲区切换成写出模式</span>            buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"写数据到文件中！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 1、定义一个文件字节输入流与源文件接通</span>        <span class="token class-name">FileInputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"data01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2、需要得到文件字节输入流的文件通道</span>        <span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3、定义一个缓冲区</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4、读取数据到缓冲区</span>        channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 5、读取出缓冲区中的数据并输出即可</span>        <span class="token class-name">String</span> rs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buffer<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Buffer完成文件复制</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 源文件</span>    <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\dlei\\Desktop\\BIO,NIO,AIO\\文件\\壁纸.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\dlei\\Desktop\\BIO,NIO,AIO\\文件\\壁纸new.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 得到一个字节字节输入流</span>    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 得到一个字节输出流</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 得到的是文件通道</span>    <span class="token class-name">FileChannel</span> isChannel <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileChannel</span> osChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 分配缓冲区</span>    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// 必须先清空缓冲然后再写入数据到缓冲区</span>        buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 开始读取一次数据</span>        <span class="token keyword">int</span> flag <span class="token operator">=</span> isChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 已经读取了数据 ，把缓冲区的模式切换成可读模式</span>        buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 把数据写出到</span>        osChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    isChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    osChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"复制完成！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分散（Scatter）和聚集（Gather）</strong></p><p>分散读取（Scatter ）:是指把Channel通道的数据读入到多个缓冲区中去</p><p>聚集写入（Gathering ）是指将多个 Buffer 中的数据“聚集”到 Channel。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//分散和聚集</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span><span class="token class-name">RandomAccessFile</span> raf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1. 获取通道</span><span class="token class-name">FileChannel</span> channel1 <span class="token operator">=</span> raf1<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2. 分配指定大小的缓冲区</span><span class="token class-name">ByteBuffer</span> buf1 <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ByteBuffer</span> buf2 <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3. 分散读取</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bufs <span class="token operator">=</span> <span class="token punctuation">{</span>buf1<span class="token punctuation">,</span> buf2<span class="token punctuation">}</span><span class="token punctuation">;</span>channel1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bufs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">:</span> bufs<span class="token punctuation">)</span> <span class="token punctuation">{</span>byteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bufs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bufs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bufs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> bufs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4. 聚集写入</span><span class="token class-name">RandomAccessFile</span> raf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"2.txt"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileChannel</span> channel2 <span class="token operator">=</span> raf2<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bufs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>TransferFrom和TransferTo</strong></p><p>从目标通道中去复制原通道数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 1、字节输入管道</span>    <span class="token class-name">FileInputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"data01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileChannel</span> isChannel <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2、字节输出流管道</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"data03.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileChannel</span> osChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3、复制</span>    osChannel<span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>isChannel<span class="token punctuation">,</span>isChannel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>isChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    isChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    osChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把原通道数据复制到目标通道</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token comment">// 1、字节输入管道</span>    <span class="token class-name">FileInputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"data01.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileChannel</span> isChannel <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2、字节输出流管道</span>    <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"data04.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileChannel</span> osChannel <span class="token operator">=</span> fos<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3、复制</span>    isChannel<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span>isChannel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> isChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> osChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>    isChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    osChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h4><p><a href="https://zhuanlan.zhihu.com/p/27679281">内存映射(memory map) - 知乎 (zhihu.com)</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">RandomAccessFile</span> raf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"d:\\atguigu\\01.txt"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">FileChannel</span> fc <span class="token operator">=</span> raf<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MappedByteBuffer</span> mbb <span class="token operator">=</span> fc<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">FileChannel<span class="token punctuation">.</span>MapMode</span><span class="token punctuation">.</span>READ_WRITE<span class="token punctuation">,</span> start<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    mbb<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     mbb<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1023</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    raf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符集Charset"><a href="#字符集Charset" class="headerlink" title="字符集Charset"></a>字符集Charset</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Charset常用静态方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Charset</span> <span class="token function">forName</span><span class="token punctuation">(</span><span class="token class-name">String</span> charsetName<span class="token punctuation">)</span><span class="token comment">//通过编码类型获取Charset对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SortedMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Charset</span><span class="token punctuation">&gt;</span></span> <span class="token function">availableCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 获取系统支持的所有编码<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Charset</span> <span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 获取虚拟机默认的编码方式<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSupported</span><span class="token punctuation">(</span><span class="token class-name">String</span> charserName<span class="token punctuation">)</span> 判断是否支持该编码类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">//Charset常用普通方法public final String name() 获得charset对象的编码类型（String）public abstract CharsetEncoder newEncoder() 获得编码器对象public abstract CharsetDecoder newDecoder() 获取解码器对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ServerSocketChannel"><a href="#ServerSocketChannel" class="headerlink" title="ServerSocketChannel"></a>ServerSocketChannel</h3><p><a href="https://zhuanlan.zhihu.com/p/34523023">NIO ServerSocketChannel监听端口问题 - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnblogs.com/yueweimian/p/6262211.html">ServerSocketChannel实现多Selector高并发server - 魔方爸爸 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.jianshu.com/p/2b658824ed76">Java NIO 教程(九) ServerSocketChannel - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/083350b63d92">ServerSocketChannel - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/yhl_jxy/article/details/79335692">(160条消息) 【NIO】ServerSocketChannel_yhl_jxy的博客-CSDN博客</a></p><p><a href="http://tutorials.jenkov.com/java-nio/server-socket-channel.html#closing-a-serversocketchannel">Java NIO ServerSocketChannel (jenkov.com)</a></p><p>非阻塞模式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileChannelAccept</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> GREETING <span class="token operator">=</span> <span class="token string">"Hello java nio.\r\n"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span> <span class="token comment">// default</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            port <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>GREETING<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                buffer<span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SocketChannel"><a href="#SocketChannel" class="headerlink" title="SocketChannel"></a>SocketChannel</h3><p><a href="https://www.jianshu.com/p/eeed1c7aec2d">Java NIO 教程(八) SocketChannel - 简书 (jianshu.com)</a></p><p><a href="https://www.jianshu.com/p/ba3bf3c62018">探究socketChannel原理 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/billluffy/article/details/78036998">(160条消息) SocketChannel—各种注意点_billluffy的博客-CSDN博客_socketchannel</a></p><p><a href="https://blog.csdn.net/dingshuo168/article/details/106288202">(160条消息) 深入理解NIO - Selector、ServerSocketChannel、SocketChannel底层原理_javaThinker的专栏-CSDN博客</a></p><p><a href="https://www.cnblogs.com/Jack-Blog/p/12061595.html">NIO-SocketChannel源码分析 - 杰哥很忙 - 博客园 (cnblogs.com)</a> </p><h3 id="DatagramChannel"><a href="#DatagramChannel" class="headerlink" title="DatagramChannel"></a>DatagramChannel</h3><p><a href="https://www.cnblogs.com/qjm201000/p/10296012.html">java-NIO-DatagramChannel（UDP） - qjm201000 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/mjorcen/p/4199289.html">DatagramChannel - mjorcen - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/skh2015java/article/details/106694626">(160条消息) Java NIO之Channel详细理解_skh2015java的博客-CSDN博客</a></p><h2 id="NIO核心三：选择器（selector）"><a href="#NIO核心三：选择器（selector）" class="headerlink" title="NIO核心三：选择器（selector）"></a>NIO核心三：选择器（selector）</h2><p><a href="https://www.cnblogs.com/snailclimb/p/9086334.html">Java NIO之Selector（选择器） - SnailClimb - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/jjzhk/article/details/39553613">(160条消息) Java NIO之多个Selector的实现_JJZHK-CSDN博客_java nio 多个selector</a></p><p><a href="https://zhuanlan.zhihu.com/p/27434028">Java NIO(6): Selector - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/u010412719/article/details/52809669">(160条消息) 《Java 源码分析》：Java NIO 之 Selector(第一部分Selector.open())_wojiushimogui的博客-CSDN博客_selector.open()</a></p><p><a href="https://cloud.tencent.com/developer/article/1648648">Java NIO实现原理之Selector - 云+社区 - 腾讯云 (tencent.com)</a></p><p><a href="https://blog.csdn.net/u010412719/article/details/52819191">(160条消息) 《Java 源码分析》：Java NIO 之 Selector(第二部分selector.select())_wojiushimogui的博客-CSDN博客_selector.select()</a></p><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><img src="https://i.loli.net/2021/11/24/Qt1A6oOEUxaYqWT.png" alt="selectableChannel.png" style="zoom:67%;"><p>选择器selector是SelectableChannel对象的多路复用器，Selector可以同时监控多个SelectableChannel的IO状况，也就是说，Selector可使一个线程管理多个Channel，Selector是非阻塞的核心。</p><ul><li>Java的NIO用非阻塞的IO，可用一个线程处理多个客户端的连接，就会使用Selector</li><li>Selector能检测多个注册通道上是否有事件发生，（多个Channel以事件的方式注册到同一个Selector上）如果有事件发生，便获取事件然后对事件进行相应处理，这样就可以对每个事件进行相应处理，只用一个单线程管理多个管道即多个连接请求。</li><li>只有在连接/通道真正有读写事件时，才会进行读写，大大减少系统开销，不必为每个连接创建一个线程，不用维护多个线程。</li><li>避免多线程间上下文切换的开销。</li></ul><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">创建<span class="token class-name">Selector</span> 调用<span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>创建<span class="token class-name">Selector</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>向选择器注册通道，SelectableChannel.register(Selector sel，int ops);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServerSocketChannel</span> ssChannel<span class="token operator">=</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ssChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ssChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9898</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Selector</span> selector <span class="token operator">=</span><span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ssChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当调用register（Selector sel，int ops）将通道注册选择器时，选择器对通道内的事件监听，需要通过第二个参数ops指定，如下：</p><ul><li>读：<code>SelectionKey.OP_READ</code></li><li>写：<code>SelectionKey.OP_WRITE</code></li><li>连接：<code>SelectionKey.OP_CONNECT</code></li><li>接收：<code>SelectionKey.OP_ACCEPT</code></li><li>若监听不止一个事件，可用<code>|</code>连接</li></ul><h4 id="轮询获取“准备就绪事件”"><a href="#轮询获取“准备就绪事件”" class="headerlink" title="轮询获取“准备就绪事件”"></a>轮询获取“准备就绪事件”</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlen</span><span class="token punctuation">(</span><span class="token string">"一轮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取当前选择器中所有注册通道中已经准备就绪的事件集</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> it<span class="token operator">=</span>selector<span class="token punctuation">.</span><span class="token function">selectedKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SelectionKey</span> sk<span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//是接收事件就绪</span>            <span class="token class-name">SocketChannel</span> sChannel ssChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">SocketChannel</span> sChannel <span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteBuffer</span> buf<span class="token operator">=</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>sChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buf<span class="token punctuation">.</span>clear<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端流程：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SocketChannel</span> sChannel<span class="token operator">=</span><span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ByteBuffer</span> buf<span class="token operator">=</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> scan<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>scan<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> str<span class="token operator">=</span>scan<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDataFormate</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    buf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理服务端大量写入到客户端场景"><a href="#处理服务端大量写入到客户端场景" class="headerlink" title="处理服务端大量写入到客户端场景"></a>处理服务端大量写入到客户端场景</h4><h4 id="一次无法写完例子"><a href="#一次无法写完例子" class="headerlink" title="一次无法写完例子"></a>一次无法写完例子</h4><ul><li>非阻塞模式下，无法保证把 buffer 中所有数据都写入 channel，因此需要追踪 write 方法的返回值（代表实际写入字节数）</li><li>用 selector 监听所有 channel 的可写事件，每个 channel 都需要一个 key 来跟踪 buffer，但这样又会导致占用内存过多，就有两阶段策略<ul><li>当消息处理器第一次写入消息时，才将 channel 注册到 selector 上</li><li>selector 检查 channel 上的可写事件，如果所有的数据写完了，就取消 channel 的注册</li><li>如果不取消，会每次可写均会触发 write 事件</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteServer</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ssc<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ssc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SelectionKey</span> sckey <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 1. 向客户端发送内容</span>                <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> write <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 3. write 表示实际写了多少字节</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实际写入字节:"</span> <span class="token operator">+</span> write<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 4. 如果有剩余未读字节，才需要关注写事件</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// read 1  write 4</span>                    <span class="token comment">// 在原有关注事件的基础上，多关注 写事件</span>                    sckey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>sckey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 把 buffer 作为附件加入 sckey</span>                    sckey<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> write <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实际写入字节:"</span> <span class="token operator">+</span> write<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 写完了</span>                    key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>                    key<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WriteClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_CONNECT <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isConnectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    count <span class="token operator">+=</span> sc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="简单群聊"><a href="#简单群聊" class="headerlink" title="简单群聊"></a>简单群聊</h4><p>==服务端代码==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>    <span class="token comment">//定义一些属性</span>    <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ServerSocketChannel</span> serverChannel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverChannel<span class="token operator">=</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverChannel<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Server</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> sk <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> socketChannel <span class="token operator">=</span> serverChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>socketChannel<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"dassvf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token function">readClientData</span><span class="token punctuation">(</span>sk<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @Description: 接收当前客户端数据，并转发给其他客户端     * @param sk     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readClientData</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> sk<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SocketChannel</span> socketChannel<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            socketChannel<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建缓冲区</span>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> read <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>read<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接收到客户端："</span><span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">sendMsgToAllClient</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//            e.printStackTrace();</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 离线了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                socketChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>                exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @Description: 把信息转给所有客户端     * @param msg     * @param socketChannel     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendMsgToAllClient</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端转发消息：当前处理线程："</span><span class="token operator">+</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过selector.keys()可获得所有注册在此选择器的时间，进而获得所有通道</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> sk<span class="token operator">:</span> selector<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">SelectableChannel</span> channel <span class="token operator">=</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>channel <span class="token keyword">instanceof</span> <span class="token class-name">SocketChannel</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>channel<span class="token operator">==</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">ByteBuffer</span> wrap <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span>channel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>wrap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==客户端代码==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token comment">//用于客户端也要接收消息故需要selector监听事件</span>    <span class="token keyword">private</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SimpleDateFormat</span> simpleDateFormat<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            simpleDateFormat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy.MM.dd 'at' HH:mm:ss z"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            selector<span class="token operator">=</span><span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token operator">=</span><span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//定义一个线程专门用来接收消息，不可能一个线程既进行读又进行写</span>        <span class="token class-name">Client</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    client<span class="token punctuation">.</span><span class="token function">readInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">String</span> c<span class="token operator">=</span>scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client<span class="token punctuation">.</span><span class="token function">sendToServer</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendToServer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"说："</span><span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">SelectionKey</span> sk <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token class-name">SocketChannel</span> channel<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span>sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.iteye.com/blog/shift-alt-ctrl-1841324">NIO-SelectableChannel详解 - 深入一点,你会更加快乐 - ITeye博客</a></p><h2 id="SelectionKey应用"><a href="#SelectionKey应用" class="headerlink" title="SelectionKey应用"></a>SelectionKey应用</h2><p><a href="https://blog.csdn.net/lhxaiee123/article/details/76375338">(160条消息) Java NIO学习（二）SelectionKey详解_lhxaiee123的博客-CSDN博客_selectionkey</a></p><h2 id="NIO中的Pipe"><a href="#NIO中的Pipe" class="headerlink" title="NIO中的Pipe"></a>NIO中的Pipe</h2><p><a href="https://blog.csdn.net/qq_38989232/article/details/76238167">(160条消息) Java NIO-之管道Pipe的用法_清风竹雨-CSDN博客_java nio pipe</a></p><p><a href="https://cloud.tencent.com/developer/article/1369329">第九节 netty前传-NIO pipe - 云+社区 - 腾讯云 (tencent.com)</a></p><p><a href="https://www.cnblogs.com/mjorcen/p/4199583.html">管道Pipe - mjorcen - 博客园 (cnblogs.com)</a></p><p>Java NIO 管道是 2 个线程之间的单向数据连接。Pipe 有一个 source 通道和一个 sink </p><p>通道。数据会被写到 sink 通道，从 source 通道读取。 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（六）条件变量,睡眠/唤醒机制</title>
      <link href="/2021/11/21/cao-zuo-xi-tong-dao-lun-bi-ji-liu-tiao-jian-bian-liang-shui-mian-huan-xing-ji-zhi/"/>
      <url>/2021/11/21/cao-zuo-xi-tong-dao-lun-bi-ji-liu-tiao-jian-bian-liang-shui-mian-huan-xing-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="条件变量"><a href="#条件变量" class="headerlink" title="条件变量"></a>条件变量</h1><p>我们之前讨论了锁，然而锁不是并发程序设计所需的唯一原语，本章我们来讨论条件变量。</p><p>很多情况下线程需要检查某一条件满足后才能继续运行，例如父线程需要等待子线程是否执行完毕。该如何实现呢？</p><p>下面我提供一种自旋检查的方法。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">volatile</span> <span class="token keyword">int</span> done<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">child</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    done<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent:begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> c<span class="token punctuation">;</span>    <span class="token function">Pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>child<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>done<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显这种自旋的方案效率不高，因为父线程自旋会浪费CPU时间。我们希望能让父线程休眠直到满足条件再运行。</p><h3 id="初识条件变量"><a href="#初识条件变量" class="headerlink" title="初识条件变量"></a>初识条件变量</h3><p>线程可以使用条件变量等待一个条件成真。条件变量是一个显示队列，当某些条件不满足时，线程将自己加入队列，另外某个线程，当他改变上述状态时，就可以唤醒一个或多个等待线程。</p><p>线程要睡眠是调用<code>wait（）</code>，当线程想唤醒等待在某个条件变量上的线程时，调用==signal（）==，如下所示。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> done<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">pthread_mutex_t</span> m<span class="token operator">=</span>PTHREAD_MUTES_INITIALIZER<span class="token punctuation">;</span>pthread_cond_c c<span class="token operator">=</span>PTHREAD_COND_INITIALIZER<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">thr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    done<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">child</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">thr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">thr_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>done<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent:begin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">pthread_t</span> p<span class="token punctuation">;</span>    <span class="token function">Pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">,</span>child<span class="token punctuation">,</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">thr_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent:end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wait调用有一个参数，是互斥量，它假定wait调用时，这个互斥量是已经上锁的，wait的职责是释放锁，并让调用线程休眠，当线程被唤醒时，必须重新获得锁。这样的步骤是为了在线程休眠时，防止产生一些竞态条件。下面我们来评价一下这段代码。</p><ul><li>第一种情况是：父线程创建出子线程，但自己继续运行，然后马上调用thr_join等待子线程，这种情况下父线程会先获得锁，检查子线程还没有完成，调用wait休眠，子线程最终得以运行，调用thr_exit()，唤醒父线程，并将done设置为1.最后父线程得以运行，从wait调用返回获得锁，释放锁，打印最后的话。</li><li>第二种情况是：子线程创建后立刻运行，设置变量为done，调用signal（），唤醒其他线程，但此时没有其他休眠线程，因此直接结束，然后父线程运行，调用join，发现条件满足，直接结束。</li><li>最后一点要说明的是你可能注意到代码中是用while来循环检查条件变量，这是因为在线程唤醒过程中会出现假唤醒情况。</li></ul><p>为了更好理解上面这段代码中每一部分的重要性，我们来看下面的例子。</p><ul><li>你可能会怀疑done变量是否需要，你会觉得只要条件变量不就行了吗？</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">thr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">thr_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设父线程创建子线程后，子线程立刻运行，执行唤醒，但此时没有休眠线程，于是直接结束，然后父线程调用join，调用wait，此时将永久休眠下去。</p><ul><li>再来看如果在发送信号时不加锁会怎样？</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">thr_exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    done<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">thr_join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>done<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果父线程在调用join，执行if，判断done==0之后被中断了，于是子线程执行，调用signal，唤醒线程，此时没有休眠线程，然后换父线程运行，那父线程将永久休眠下去。</p><blockquote><p>注意：发信号时应总是持有锁。</p><p>简单有效的做法是在使用条件变量发送信号时应持有锁，即调用signal时。这不是建议而是wait语义的强制要求，wait调用总是假设你已经持有锁了，调用者睡眠之前会释放锁，以及返回前会持有锁。</p></blockquote><h2 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h2><p>有界缓冲区是共享资源，我们需要通过同步机制来访问，以免产生竞态条件。</p><h3 id="有问题的方案"><a href="#有问题的方案" class="headerlink" title="有问题的方案"></a>有问题的方案</h3><p>假设只有一个生产者一个消费者，显然put和get之中会有临界区，故此时给代码加锁没用，我们还需借助条件变量。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">cond_t</span> cond<span class="token punctuation">;</span><span class="token class-name">mutex_t</span> mutex<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cond<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当只有一个生产者和消费者时，上述代码能正常运行，但如果超过一个线程，这个方案会有严重问题。</p><p>先来看第一个问题：</p><p>假设两个消费者Tc1和Tc2，一个生产者Tp，首先一个消费者先开始执行，获得锁，检查缓冲区是否可以消费，等待释放锁。</p><p>接着生产者运行，获取锁，检查缓冲区是否满，没满，给缓冲区加数字，然后发送信号，关键的是这让第一个消费者不再睡在条件变量上，进入就绪队列，此时它可以运行，但还未运行，生产者继续运行，发现环翠区满，睡眠。这时问题发生了，另一个消费者Tc2抢先执行，消费了缓冲区里面的值，然后睡眠，现在假设Tc1运行，在从wait返回前它获取锁，，然后调用get（），但此时缓冲区无法消费，出现错误。</p><p>原因很简单，Tc1被唤醒后，在它运行前，缓冲区的状态已经改变，发信号只是唤醒他们，但并不保证在它运行前一直是所期望的状态。</p><h3 id="较好的但仍有问题的方案，用while代替if"><a href="#较好的但仍有问题的方案，用while代替if" class="headerlink" title="较好的但仍有问题的方案，用while代替if"></a>较好的但仍有问题的方案，用while代替if</h3><p>为防止出现假唤醒，当消费者Tc1被唤醒后，再次检查共享变量。</p><p>但仍有问题，我们只用了一个条件变量。</p><p>来看这样一种情况，假设两个消费之Tc1和Tc2，都睡眠了此时生产者开始运行，唤醒一个消费者，假设是Tc1，并开始睡眠，Tc1开始运行，，发现缓冲区是满的，于是消费，然后开始唤醒一个线程，那他应该唤醒谁呢？很显然应该唤醒生产者，但是如果它唤醒了消费者，那三个线程最终会永久休眠下去，这很可怕。</p><p>因此，我们应让信号具有指向性，即消费者唤醒生产者，生产者唤醒消费者。</p><h3 id="单缓冲区的生产者-消费者方案"><a href="#单缓冲区的生产者-消费者方案" class="headerlink" title="单缓冲区的生产者/消费者方案"></a>单缓冲区的生产者/消费者方案</h3><p>使用两个条件变量以便正确发送信号。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">cond_t</span> empty<span class="token punctuation">,</span>fill<span class="token punctuation">;</span><span class="token class-name">mutex_t</span> mutex<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fill<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fill<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最终的生产者-消费者方案"><a href="#最终的生产者-消费者方案" class="headerlink" title="最终的生产者/消费者方案"></a>最终的生产者/消费者方案</h3><p>我们现在有了可用的方案，但不太通用，我们进行修改，提高并发和效率。具体来说就是增加更多缓冲区，这样在睡眠之前可以生产多个值。同样在睡眠之前可以多消费几个值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> buffer<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fill_ptr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> use_ptr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    buffer<span class="token punctuation">[</span>fill_ptr<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">;</span>    fill_ptr<span class="token operator">=</span>fill_ptr<span class="token operator">+</span><span class="token number">1</span><span class="token operator">%</span>MAX<span class="token punctuation">;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp<span class="token operator">=</span>bufffer<span class="token punctuation">[</span>use_ptr<span class="token punctuation">]</span><span class="token punctuation">;</span>    use_ptr<span class="token operator">=</span>use_ptr<span class="token operator">+</span><span class="token number">1</span><span class="token operator">%</span>MAX<span class="token punctuation">;</span>    count<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">producer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span>MAX<span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fill<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">consumer</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>loops<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fill<span class="token punctuation">,</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="覆盖条件"><a href="#覆盖条件" class="headerlink" title="覆盖条件"></a>覆盖条件</h3><p>下面的例子摘自Lampson和Redell关于操作系统的论文。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> bytesLeft<span class="token operator">=</span>MAX_HEAP_SIZE<span class="token punctuation">;</span><span class="token comment">//need lock and condition too</span><span class="token class-name">cond_t</span> c<span class="token punctuation">;</span><span class="token class-name">mutex_t</span> m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>byteLeft<span class="token operator">&lt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">Pthread_cond_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    bytesLeft<span class="token operator">-=</span>size<span class="token punctuation">;</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Pthread_mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    bytesLeft<span class="token operator">+=</span>size<span class="token punctuation">;</span>    <span class="token function">Pthread_cond_signal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Pthread_mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当分配内存时可能会因为内存不足而等待，相应的，线程释放内存时，会发信号说有更多内存空间，但代码中有一个问题，该唤醒那个等待线程？</p><p>假设目前没有空闲内存，线程Ta调用allocate（100），接着线程Tb请求较少内存allocate（10），他们都等待在条件上睡眠，没有足够空闲内存来分配。</p><p>假定第三个线程调用了free（50），遗憾的是当他发信号唤醒等待线程时，可能不会唤醒申请10字节的线程，而唤醒申请100字节的线程，那这样就存在问题。</p><p>Lampson和Redell的方案很直接，用Pthread_cond_broadcast()唤醒所有线程，当然不利的一面是会影响性能，因为不必要的唤醒了其他等待线程，但这些等待线程马上会再次睡眠。</p><p>Lampson和Redell把这种条件变量叫做覆盖条件，，他能覆盖所有需要唤醒线程的场景。</p><p>一般来说如果你发现程序只有改成广播信号才能正常工作（但你认为不需要），可能是程序有缺陷，修复它。但对于上述内存分配的例子，只能使用广播信号，因为你无法确定那些线程该唤醒，线程所申请的内存空间是千变万化的，无法定义相应条件变量，那干脆唤醒所有线程。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（五）基于锁的并发数据结构</title>
      <link href="/2021/11/21/cao-zuo-xi-tong-dao-lun-bi-ji-wu-ji-yu-suo-de-bing-fa-shu-ju-jie-gou/"/>
      <url>/2021/11/21/cao-zuo-xi-tong-dao-lun-bi-ji-wu-ji-yu-suo-de-bing-fa-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用查找算法总结</title>
      <link href="/2021/11/20/chang-yong-cha-zhao-suan-fa-zong-jie/"/>
      <url>/2021/11/20/chang-yong-cha-zhao-suan-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_39241397/article/details/79344179">(158条消息) 七大查找算法_Jibert的博客-CSDN博客_查询算法</a></p><p><a href="https://www.jianshu.com/p/3445be2d9956">常用查找算法 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/hejun_haitao/article/details/52663040">(158条消息) 常用查找算法总结_hjhomw的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/liudemeng/p/11387369.html">常见的查找算法 - liudemeng - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（四）并发介绍及锁</title>
      <link href="/2021/11/20/cao-zuo-xi-tong-dao-lun-bi-ji-si-bing-fa-jie-shao-ji-suo/"/>
      <url>/2021/11/20/cao-zuo-xi-tong-dao-lun-bi-ji-si-bing-fa-jie-shao-ji-suo/</url>
      
        <content type="html"><![CDATA[<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>本部分将为单个运行进程通过新的抽象即：线程。一个程序一般只有一个执行点，但多线程程序有多个执行点，多个程序计数器。但与进程不同的是，线程共享地址空间，因此他们可以访问相同的数据。</p><p>每个线程私有程序计数器，如果两个线程在同一个处理器上运行，则从一个线程切换到另一个线程时必定发生上下文切换，对于进程，上下文切换是将状态保存到PCB中，而对于线程，是将状态保存到TCB中，但是与进程相比，线程切换有一点主要的区别：就是地址空间不变，即不需要切换当前使用的页表。看如下地址空间分布：</p><img src="https://i.loli.net/2021/11/21/4EZQY2GUkTr9gVf.jpg" alt="线程地址空间.jpg" style="zoom:67%;"><p>两个栈跨越了进程的地址空间，所有位于栈上的变量，参数，返回值和其他东西，都将被放在相关线程的栈中。</p><h3 id="不可控的调度"><a href="#不可控的调度" class="headerlink" title="不可控的调度"></a>不可控的调度</h3><p>我们知道在多线程程序中若修改共享变量很容易发生错误，究其原因还是因为调度策略和中断所引起的多线程进入临界区，即不可控调度和不合时宜的中断引起了错误。下面我们来看一个例子。如我们想给counter加一个数字，在计算机中这个执行一般分三步</p><pre class="line-numbers language-none"><code class="language-none">mov 0x8049a1c,eaxadd 0x1,eaxmov eax,0x8049a1c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从内存地址中取出值放入寄存器，再给寄存器加1，然后再存入寄存器。假设有两个线程，一个线程此时将counter加载进了eax，并加1，此时假设为51，不幸的是发生了中断，操作系统进行线程切换，保存状态到TCB（程序计数器，寄存器包括eax），切换到第二个线程，他从内存地址中加载值为50，加1为51，然后存入地址，执行完毕，此时发生时钟中断，切换回原来那个线程，他此时应该执行存储，但他存储的也将是51，这就不对了，本来该是52啊</p><p>这种情况即竞态条件，多个线程争夺同一个资源且对访问顺序敏感时，就存在竞态条件。要解决这个问题，我们需要互斥。即只能有一个线程进入临界区（产生竞态条件的代码片段）</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>问题产生的原因是发生了不合时宜的中断，我们要做的是消除这种中断，方式是是上述操作以原子性方式执行，即不能在指令中间中断。</p><h3 id="睡眠-唤醒"><a href="#睡眠-唤醒" class="headerlink" title="睡眠/唤醒"></a>睡眠/唤醒</h3><p>除了访问共享变量，还有一种交互即在一个线程继续之前必须等待另一个线程完成某些操作，如进程执行磁盘IO，进入睡眠，当IO完成时，进程从睡眠中唤醒，继续执行。</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>通过对并发的介绍，我们了解到并发的一个基本问题，我们希望原子方式执行一系列指令，但由于但处理器中断和多处理器并发执行，这个就难以实现，我们故引入锁</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>锁就是一个变量，他保存了锁在某一时刻的状态，要么是可用的表示线程表示线程不持有锁，要么是被占用的表示线程持有锁。</p><p>lock和unlock。lock尝试获取锁，如果没有其他线程持有锁，该线程获得锁，进入临界区；如果另一个线程对相同的锁变量调用lock，他不会获得锁，不能进入临界区。锁的持有者一旦调用unlock（），锁就可用。其他等待线程便会注意到锁状态的变化，便会获取该锁。</p><h3 id="评价锁"><a href="#评价锁" class="headerlink" title="评价锁"></a>评价锁</h3><p>在实现锁之前得先确定目标，先建立一些标准</p><ul><li>第一是：能否提供互斥</li><li>第二是公平性：当锁可用时，是否每一个竞争线程有公平得到锁的机会，或是否有竞争锁的线程会饿死</li><li>第三是性能：使用锁之后增加的时间开销。<ul><li>①没有竞争时，只有一个线程抢锁，释放锁的开支如何</li><li>②单CPU上多个线程竞争，性能如何？</li><li>③多CPU，多线程时性能如何</li></ul></li></ul><h3 id="控制中断"><a href="#控制中断" class="headerlink" title="控制中断"></a>控制中断</h3><p>最早提供的互斥解决方案是在临界区关闭中断，这是为单处理器设计的方案。</p><p>使用特殊的硬件指令关闭中断，保证临界区的代码不会被中断，结束后打开中断。但这种方式存在较大安全问题，这种方法允许所有线程执行特权操作，即信任这种机制不会滥用，众所周知，信任每一个程序这必然导致危险。</p><ul><li>第一：可能存在贪婪程序，在关闭中断后一直霸占控制权。</li><li>第二：不支持多处理器。多个线程运行在不同的CPU上，每个线程试图进入同一临界区，关闭中断也没有，因为他可以运行在其他处理器上。</li><li>第三：关闭中断可能导致中断丢失，可能导致严重的系统问题。如磁盘完成了IO，但CPU错失了这一事实，那操作系统如何唤醒等待IO的进程呢？</li></ul><p>最后就是与正常指令相比，执行速度慢，效率低</p><p>因此只有在很有限的情况下才会用关闭中断实现互斥原语。在某些情况下操作系统本身会采用屏蔽中断的方式，保证自己数据结构的原子性。因为操作系统内部不存在信任问题。</p><h2 id="实现锁的尝试"><a href="#实现锁的尝试" class="headerlink" title="实现锁的尝试"></a>实现锁的尝试</h2><h3 id="测试并设置指令（原子交换）"><a href="#测试并设置指令（原子交换）" class="headerlink" title="测试并设置指令（原子交换）"></a>测试并设置指令（原子交换）</h3><p>因为关闭中断的方式无法工作在多处理器上，系统设计者开始让硬件支持锁。</p><p>最简单的硬件支持是测试并设置指令，也叫原子交换。</p><p>思想很简单：用一个变量标记锁是否被持有。第一个线程进入临界区，调用lock，检查标志，然后设置标志，占用锁，解释后，调用unlock，清除标志释放锁。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lock_t</span> <span class="token punctuation">{</span><span class="token keyword">int</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token class-name">lock_t</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">{</span>    mutex<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>mutex<span class="token operator">-&gt;</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    mutex<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>mutex<span class="token punctuation">)</span><span class="token punctuation">{</span>    mutex<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==评价：==</p><p><img src="https://i.loli.net/2021/11/21/SaMgjCuNG56hQLn.jpg" alt="testandset.jpg"></p><p>不合时宜的中断可能两个线程都进入临界区；除了这个还有线程等待时采用了自旋的技术，这会浪费时间，尤其在单处理器上，一个等待线程等待的目标线程甚至无法运行。</p><h3 id="实现可用的自旋锁"><a href="#实现可用的自旋锁" class="headerlink" title="实现可用的自旋锁"></a>实现可用的自旋锁</h3><p>上面的问题在于可能出现不可控的中断，于是将测试并设置指令合并为原子操作。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">testAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>old_ptr<span class="token punctuation">,</span><span class="token keyword">int</span> new<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> old<span class="token operator">=</span><span class="token operator">*</span>old_ptr<span class="token punctuation">;</span><span class="token operator">*</span>old_ptr<span class="token operator">=</span>new<span class="token punctuation">;</span><span class="token keyword">return</span> old<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lock_t</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">lock_t</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    lock<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>flag<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    lock<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看一下这个锁为什么能工作。</p><p>场景一：当一个线程进入临界区时调用lock，没有其他线程持有锁，返回0，跳出while循环，获取锁，当线程进入离开临界区时，调用unlock清除flag</p><p>场景二：当一个线程持有锁，另一线程调用lock进入自旋，当持有锁的线程释放锁后，本线程退出循环获得锁进人临界区。</p><p>可以看到当把测试并设置合并为原子操作后就实现了一个互斥原语。在单处理器上需要抢占式调度，不然自旋锁将永远不会放弃CPU。</p><h3 id="评价自旋锁"><a href="#评价自旋锁" class="headerlink" title="评价自旋锁"></a>评价自旋锁</h3><ul><li>正确性是满足了，即实现了互斥</li><li>公平性：自旋锁能保证不产生线程饥饿吗，事实上他不提供任何公平性保证，是否产生饥饿取决于调度策略。</li><li>性能：我们分一下情况<ul><li>单CPU：性能开销巨大，假设锁被抢占，那调度器会挨个运行其他线程，且其他线程都自旋一个时间片，这显然不合适，浪费大量CPU周期</li><li>多CPU：自旋锁性能不错（线程数大致等于CPU），因为临界区一般很短，自旋的线程很快就能得到调度，没有浪费过多CPU。</li></ul></li></ul><h3 id="比较并交换原语"><a href="#比较并交换原语" class="headerlink" title="比较并交换原语"></a>比较并交换原语</h3><p>某些系统提供了另一个硬件原语即比较并交换。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">CompareAndSwap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">int</span> expected<span class="token punctuation">,</span><span class="token keyword">int</span> new<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> actual<span class="token operator">=</span><span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>actual<span class="token operator">==</span>expected<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>ptr<span class="token operator">=</span>new<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> actual<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">CompareAndSwap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>flag<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能发现他与测试并设置十分类似，确实，如果只用它实现自旋锁，它的行为等价于自旋锁。</p><p>但你稍后将会发现这条指令的强大之处。</p><h3 id="链接并加载和条件式存储指令"><a href="#链接并加载和条件式存储指令" class="headerlink" title="链接并加载和条件式存储指令"></a>链接并加载和条件式存储指令</h3><p>一些平台提供了实现临界区的一对指令。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">LoadLinked</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">StoreConditional</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>no one has updated <span class="token operator">*</span>ptr since the LoadLinked to this adress<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token operator">*</span>ptr<span class="token operator">=</span>value<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">LoadLinked</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>flag<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">StoreConditional</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token operator">-&gt;</span>flag<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    lock<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有上一次加载的地址在此期间没有更新，才会返回1成功。</p><p>我们来看看它是如何防止不合时宜中断的。</p><p>此时flag=0；当一个线程调用lock，进入加载，返回0，在执行条件式存储之前被中断了，此时另一线程也进入加载，此时两个线程都将执行条件式存储，但只有一个线程能成功进入临界区，另一个线程必须重新尝试获取锁。</p><h3 id="自旋过多怎么办？"><a href="#自旋过多怎么办？" class="headerlink" title="自旋过多怎么办？"></a>自旋过多怎么办？</h3><p>基于硬件的锁简单，有效，但在某些场景下这种解决方案效率会很低下。</p><p>以两个线程运行在单处理器上为例：当一个线程持有锁时，被中断，另一个线程去获取锁，开始自旋，然后必须等到另一个线程再次运行释放锁，他才会不自旋，即不浪费CPU周期。</p><p>在类似场景下，若有N个线程抢占锁，就会浪费N-1个时间片。</p><p>因此我们发现只有硬件支持是不够的，还需更多支持。</p><h3 id="让出CPU"><a href="#让出CPU" class="headerlink" title="让出CPU"></a>让出CPU</h3><p>我们接下来要解决的问题是如何减少浪费的CPU周期。</p><p>一种简单的办法是当要自旋是直接放弃CPU。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flag<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        yield<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>yield原语是线程主动放弃CPU，使得线程由运行变为就绪。</p><p>直接考虑许多线程的情况（100个线程），同时抢占一把锁时，这99个线程会一直处于让出CPU状态，知道持有锁线程释放锁。虽然比原来执行自旋减少了成本，但上下文切换的成本是实实在在存在的，仍然不够理想。除此之外，还可能造成线程饿死，一个线程可能一直处于让出状态。</p><h3 id="使用队列，休眠代替自旋"><a href="#使用队列，休眠代替自旋" class="headerlink" title="使用队列，休眠代替自旋"></a>使用队列，休眠代替自旋</h3><p>前面的方法如果调度不合理，线程可能一直自旋或一直处于让出状态，都会造成浪费，不能防止饿死。</p><p>我们必须添加某种控制，释放锁时，谁能抢到锁，为了做到这一点，我们需要操作系统提供更多的支持，并需要队列来保存等待的线程。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">lock_t</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span>    <span class="token keyword">int</span> guard<span class="token punctuation">;</span>   <span class="token class-name">queue_t</span> <span class="token operator">*</span>q<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">lock_t</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">lock_init</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>    m<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    m<span class="token operator">-&gt;</span>guard<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">queue_init</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-&gt;</span>guard<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        m<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        m<span class="token operator">-&gt;</span>guard<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">queue_add</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">,</span><span class="token function">gettid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token operator">-&gt;</span>guard<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token class-name">lock_t</span> <span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token operator">-&gt;</span>guard<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">queue_empty</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>        m<span class="token operator">-&gt;</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">unpark</span><span class="token punctuation">(</span><span class="token function">queue_remove</span><span class="token punctuation">(</span>m<span class="token operator">-&gt;</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token operator">-&gt;</span>guard<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>guard基本起到了自旋锁的作用，线程在获取锁和释放锁时但可能被中断，从而导致其他线程自旋，但自旋等待时间是很有限的，因为每次获取锁时都会将m-guard置为0，只会自旋一次，即使在讲guard置为1后发生了中断，下一个线程也会将guard置为0，从而使得后来线程不会过多地自旋。</li><li>在lock中，如果线程不能获取锁，线程会把自己加入队列，然后休眠，让出CPU</li><li>当要唤醒另一个线程时flag并没有设置为0，而是直接把锁从释放线程传递给下一个获得锁的线程</li><li>在park调用之前如果一个线程在调用park之前，此时另一个线程执行了park，假定他睡到锁可用之前，然后切换到另一个线程，释放锁，那第一个线程可能会永远睡下去，称为唤醒/等待竞争。</li></ul><p>为了唤醒/等待，采用setpark系统调用，表明一个线程马上要被park，如果刚好另一个线程被调度，且调用了unpark，那么后续的park会直接返回，而不是一直睡眠。</p><h3 id="两阶段锁"><a href="#两阶段锁" class="headerlink" title="两阶段锁"></a>两阶段锁</h3><p>目前我们看到，为了构建更有效率的锁，一个操作系统提供一种支持，其他操作系统也提供了支持，但细节不同。</p><p>例如Linux提供了futex，每个futex都关联一个特定的物理内存位置，也有一个实现建立的内核队列，调用者通过futex调用来睡眠或唤醒。</p><p>具体来说有两个调用。调用futex_wait(address,expected)时，如果address处的值等于expected，就会让线程睡眠，否则，调用立即返回。调用futex_wake(address)唤醒等待队列在的一个线程。</p><p>两阶段锁意识到自旋可能很有用，尤其是在很快要释放锁的场景，因此两阶段锁的第一阶段会先自旋一段时间，希望他可以获取锁。</p><p>如果第一阶段没有获取锁，第二阶段调用者会睡眠，直到锁可用。</p><p><a href="https://blog.csdn.net/lovesummerforever/article/details/78556737">(158条消息) （一 附）多进程 多线程 与 cpu 、操作系统_Xinghf-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/2cfd551055d7">启动一个最简单的Java main程序时，有多少个线程被创建 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/u012780337/article/details/105342122">(158条消息) 程序计数器（PC ） 详解_u012780337的专栏-CSDN博客_程序计数器pc</a></p><p><a href="https://www.cnblogs.com/enjoyitlife/p/12093960.html">面试题：线程A打印1-10数字，打印到第5个数字时，通知线程B - 进击的大兵 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.codeleading.com/article/75282740092/">面试题：线程A打印1-10数字，打印到第5个数字时，通知线程B - 代码先锋网 (codeleading.com)</a></p><p><a href="https://www.codeleading.com/article/81165961440/">Thread.sleep()为什么要抛出中断异常 - 代码先锋网 (codeleading.com)</a></p><p><a href="http://ifeve.com/">并发编程网 – ifeve.com | 让天下没有难学的技术</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>“反射详解”</title>
      <link href="/2021/11/19/java-zhong-de-fan-she/"/>
      <url>/2021/11/19/java-zhong-de-fan-she/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中的注解</title>
      <link href="/2021/11/19/java-zhong-de-zhu-jie/"/>
      <url>/2021/11/19/java-zhong-de-zhu-jie/</url>
      
        <content type="html"><![CDATA[<p>[java注解的使用 - chenweicool - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/chentang/p/13959831.html#:~:text=Java%E6%B3%A8%E8%A7%A3%E6%98%AF%E9%99%84%E5%8A%A0%E5%9C%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%83%E4%BF%A1%E6%81%AF%EF%BC%8C%E7%94%A8%E4%BA%8E%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%90%E8%A1%8C%E6%97%B6%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90%E5%92%8C%E4%BD%BF%E7%94%A8%EF%BC%8C%E8%B5%B7%E5%88%B0%E8%AF%B4%E6%98%8E%E3%80%81%E9%85%8D%E7%BD%AE%E7%9A%84%E5%8A%9F%E8%83%BD%E3%80%82">https://www.cnblogs.com/chentang/p/13959831.html#:~:text=Java注解是附加在代码中的一些元信息，用于编译和运行时进行解析和使用，起到说明、配置的功能。</a> 注解不会影响代码的实际逻辑，仅仅起到辅助性的作用。 包含在java.lang.annotation包中。,注解的定义类似于接口的定义，使用%40interface来定义，定义一个方法即为注解类型定义了一个元素，方法的声明不允许有参数或throw语句，返回值类型被限定为原始数据类型、字符串String、Class、enums、注解类型，或前面这些的数组，方法可以有默认值。 注解并不直接影响代码的语义，但是他可以被看做是程序的工具或者类库。 它会反过来对正在运行的程序语义有所影响。 注解可以从源文件、class文件或者在运行时通过反射机制多种方式被读取。)</p><p><a href="https://zhuanlan.zhihu.com/p/37701743">java注解-最通俗易懂的讲解 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/85612062">Java注解总结（史上最全，有这一篇就够了） - 知乎 (zhihu.com)</a></p><p><a href="https://www.yiibai.com/java/java-annotation-tutorial.html">Java注解 - Java教程™ (yiibai.com)</a></p><p><a href="https://www.jianshu.com/p/28edf5352b63">Java:Annotation(注解)–原理到案例 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/javazejian/article/details/71860633">(167条消息) 深入理解Java注解类型(@Annotation)_zejian的博客-CSDN博客_java注解</a></p><p><a href="https://www.bilibili.com/video/BV16Q4y1S7vJ?p=28">达内Java反射与注解_2021新版精讲教程，小白也能听懂的底层实现原理_哔哩哔哩_bilibili</a></p><p><a href="https://blog.csdn.net/qq_30347133/article/details/83686068">(167条消息) JAVA注解开发（精讲）_林夕_影的博客-CSDN博客_java注解</a></p><h2 id="注解概述"><a href="#注解概述" class="headerlink" title="注解概述"></a>注解概述</h2><p>注解是那些插入到源代码中，使用其他工具对其进行处理的标签，工具可以在源代码层次上操作，或处理编译器在其中放了注解的类文件。</p><p>注解不会改变程序编译方式，包含与不包含注解的代码生成相同的虚拟机指令。</p><p>下面是一些可能的注解用法：</p><ul><li>附属文件的自动生成，例如部署描述符或bean信息类</li><li>测试，日志，事务语义等代码自动生成。</li></ul><h3 id="注解的小例子"><a href="#注解的小例子" class="headerlink" title="注解的小例子"></a>注解的小例子</h3><p>在详细了解注解前，我们先通过一个示例来体会他的作用。</p><p>在Java中注解当做一个修饰符，注解中的元素会被工具读取，除了注解类，成员，局部变量，注解可放置在许多地方。后面将一一列举。</p><p>在用户界面编程中，一件令人讨厌的事就是组装事件源上的监听器，我们设计一个注解来免除这个差事。<code>@ActionListenerFor(source="button")</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActionListenerInstaller</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">processAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cl<span class="token operator">=</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Method</span> m<span class="token operator">:</span>cl<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ActionListenerFor</span> a<span class="token operator">=</span>m<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">ActionListenerFor</span> <span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token class-name">Field</span> f<span class="token operator">=</span>cl<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">addListener</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>obj<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ReflectiveOperationException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span><span class="token keyword">final</span> <span class="token class-name">Object</span> param<span class="token punctuation">,</span><span class="token keyword">final</span> <span class="token class-name">Method</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">var</span> handler<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span><span class="token class-name">Method</span> mm<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Throwable</span><span class="token punctuation">{</span>             <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token class-name">Object</span> listener<span class="token operator">=</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">ActionListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Method</span> adder<span class="token operator">=</span>source<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"addActionListener"</span><span class="token punctuation">,</span><span class="token class-name">ActionListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adder<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ActionListenerFor</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在你的界面代码中，将调用ActionListenerInstaller.processAnnotations(this)；</p><p>其可以枚举某个对象的所有方法，首先获取其ActionListenerFor注解，利用AnnotationElement接口中的getAnnotation方法，Method，Constructor，Field，Class，Package都实现了这个接口。</p><p>然后可以通过source方法查找成员域。</p><p>对于每一个被注解的方法，都会生成<code>ActionListener</code>接口的代理对象，其<code>actionPerformed</code>方法将调用这个被注解的方法。</p><p>注解是在运行时被处理的，另外也可以在源码级别上进行处理，这样源代码生成器将产生用于添加监听器的代码，注解也可以在字节码级别被处理。</p><h2 id="注解语法"><a href="#注解语法" class="headerlink" title="注解语法"></a>注解语法</h2><pre class="line-numbers language-none"><code class="language-none">利用@interface定义<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个元素声明都以这种形式：<code>type&nbsp;elementName();</code>或<code>type elementName()&nbsp;default&nbsp;value</code></p><p>所有注解接口都隐式扩展自<code>java.lang.annotation.Annotation接口</code>换句话说，你无法扩展注解接口</p><p>注解元素的类型为下列之一：</p><ul><li>基本类型</li><li>String</li><li>Class</li><li>enum</li><li>注解类型</li><li>由前面所属的类型组成的数组</li></ul><pre class="line-numbers language-none"><code class="language-none">public @interface BugReport{enum Status {1,2,3,4};boolean showStopper() default false;String assigned() default "none";Class&lt;?&gt; testCase();Status status();Reference ref()  //一个注解类型String[] report();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><p>类型注解可出现在下列地方：</p><p><img src="https://s2.loli.net/2021/12/08/JBDyordsqgVERbM.jpg" alt="类型注解.jpg"></p><h3 id="标准注解"><a href="#标准注解" class="headerlink" title="标准注解"></a>标准注解</h3><table><thead><tr><th>注解接口</th><th>应用场合</th><th>目的</th></tr></thead><tbody><tr><td>Deprecated</td><td>全部</td><td>将项标记为过时</td></tr><tr><td>SuppressWarnings</td><td>除包和注解之外所有情况</td><td>阻止给定类型的警告信息</td></tr><tr><td>FunctionalInterface</td><td>接口</td><td>将接口标记为只有一个抽象方法的函数式接口</td></tr><tr><td>Resource</td><td>类，接口，方法，域</td><td>为注入而标记</td></tr><tr><td>Generated</td><td>全部</td><td></td></tr><tr><td>Target</td><td>注解</td><td>指明可以应用这个注解的那些项</td></tr><tr><td>Retention</td><td>注解</td><td>指明这个注解可以保留多久</td></tr><tr><td>Doucumented</td><td>注解</td><td>指明这个注解应该包含在注解项文档中</td></tr><tr><td>Inherited</td><td>注解</td><td>指明这个注解应用于一个类时，能自动被其子类继承</td></tr><tr><td>Repeatable</td><td>注解</td><td>指明这个注解可以在同一项应用多次</td></tr></tbody></table><p>用于管理资源的注解</p><p>@PostConstruct和@PreDestory注解用于控制对象生命周期的环境中，如Web容器，应用服务器标记了这些注解的方法应该在对象被构建之后或移除之前被调用。</p><h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><p>@Target元注解应用于一个注解，可限制注解应用到哪些项上。</p><pre class="line-numbers language-none"><code class="language-none">@Target({ElementType.TYPE,ElementType.METHOD})public @interface BugReport<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下图显示了枚举类型ElementType</p><table><thead><tr><th>元素类型</th><th>注解适合场合</th><th>元素类型</th><th>注解适用场合</th></tr></thead><tbody><tr><td>ANNOTATION_TYPE</td><td>注解类型</td><td>FIELD</td><td>成员域包括enum常量</td></tr><tr><td>PACKAGE</td><td>包</td><td>PARAMETER</td><td>方法或构造器参数</td></tr><tr><td>TYPE</td><td>类，接口，注解类型，enum</td><td>LOCAL_VARIABLE</td><td>局部变量</td></tr><tr><td>METHOD</td><td>方法</td><td>TYPE_PARAMETER</td><td>用于类型参数</td></tr><tr><td>CONSTRUCTOR</td><td>构造器</td><td>TYPE_USE</td><td>任何地方</td></tr></tbody></table><p>@Retention元注解制定一条注解应该保留多长时间，默认值是<code>RetentionPolicy.CLASS</code></p><table><thead><tr><th>保留规则</th><th>描述</th></tr></thead><tbody><tr><td>SOURCE</td><td>不包含在类文件中的注解</td></tr><tr><td>CLASS</td><td>包含在类文件中的注解，但虚拟机不需要将他们载入</td></tr><tr><td>RUNTIME</td><td>包含在类文件中的注解，由虚拟机载入，通过反射API获取</td></tr></tbody></table><p>@Documented元注解为像Jacadoc这样的归档工具提供提示。应该像处理其他修饰符一样来处理归档注解。其他注解不会纳入归档范围。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ActionListenerFor</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在被其标注过的方法将会在归档中出现这条注解。如果某个注解是暂时的，就不该对其进行归档。</p><p>@Inherited元注解只能应用于对类的注解，如果一个类具有继承注解，它所有子类都自动带有同样的注解，这使得创建一个与Serializable这样的标记接口具有相同运行方式的注解变得容易。</p><p>假设定义了一个继承注解<code>@Persistent</code>来指明一个类对象可以存储到数据库中，那该持久类的子类就会自动被注解为持久性的。</p><pre class="line-numbers language-none"><code class="language-none">@Inheritedpublic @interface Persistent{}@Persistentclass Employee{...}class Manager extends Employee{...}  //这个子类也自动标注为@Persistent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在持久化机制去查找存储在数据库中的对象时，就会同时探测到Employee对象和Manager对象。</p><p>@Repeatable元注解。对于jdk8来说，将同类型的注解多次应用到某一项是合法的，为了向后兼容，可重复注解的实现者需要提供一个容器注解，将这些重复注解存储到数组中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">TestCases</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">TestCase</span><span class="token punctuation">{</span><span class="token class-name">String</span> <span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Stirng</span> <span class="token function">expected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@interface</span> <span class="token class-name">TestCases</span><span class="token punctuation">{</span><span class="token class-name">TestCase</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论何时，只要用户提供两个或多个@TestCase注解，他们就会自动包装到@TestCases注解中。即需要在可重复注解中声明注解数组类。</p><p>==注意：==</p><p>在处理可重复注解必须仔细，如果调用getAnnotation来查找某个可重复注解，而该注解又确实重复了，就会得到null，这是因为重复注解被包装到容器注解中了，此时调用getAnnotationByType，这会遍历容器注解，并给出一个可重复注解的数组。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（三）进程调度</title>
      <link href="/2021/11/19/cao-zuo-xi-tong-dao-lun-bi-ji-san-jin-cheng-diao-du/"/>
      <url>/2021/11/19/cao-zuo-xi-tong-dao-lun-bi-ji-san-jin-cheng-diao-du/</url>
      
        <content type="html"><![CDATA[<h2 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h2><p>在讨论操作系统中进程调度前，我们先做出如下假设：</p><ul><li>每个工作运行相同的时间</li><li>所有工作同时到达</li><li>一旦开始，每个工作保持运行直到完成</li><li>所有工作只是用CPU，不执行IO操作</li><li>每个工作运行时间已知</li></ul><h3 id="先进先出（FIFO）"><a href="#先进先出（FIFO）" class="headerlink" title="先进先出（FIFO）"></a>先进先出（FIFO）</h3><p>看一个例子：</p><p>3个工作A,B,C大致在相同时间到达系统，假设A比B早，B比C早一点点。每个工作运行10s，看周转时间：（110+20+30）/3=20；现在我们放宽假设1，即A运行100s，B,C运行10s，令人不快的是系统平均周转时间是比较高的，这通常被称为护航效应，一些耗时较少的潜在资源消费者被排在重量级消费者后。这很明显让人感觉这个调度策略不太好，那怎么办呢？这个策略的问题在于运行时间较短的任务被迫需要等待较长的时间，我们看下一个策略。</p><h3 id="最短任务优先（SJF）"><a href="#最短任务优先（SJF）" class="headerlink" title="最短任务优先（SJF）"></a>最短任务优先（SJF）</h3><p>从名字也很容易看出这个调度策略的思想，事实上，在所有任务同时到达时，SJF确实是一个最优的调度算法。但显示情况很难做到任务同时到达，我们假设A先到达，B,C在A运行10s后到达，这种情况下周转时间反而不会提升多少，性能没有较大提升。</p><p>这个调度策略的问题在于它是非抢占式调度，导致轻量级的任务被迫等待重量级任务完成后再执行。那我们设计一种抢占式调度策略。</p><h3 id="最短完成时间优先-STCF"><a href="#最短完成时间优先-STCF" class="headerlink" title="最短完成时间优先(STCF)"></a>最短完成时间优先(STCF)</h3><p>这是一种抢占式调度，当新工作进入系统时，确定新工作和正在运行的工作谁的剩余时间少就执行谁，即可能设计进程上下文切换。此时周转时间能大大提升，可以看到当所有工作同时到达时，SJF最优，不同时到达时STCF最优。</p><p>但用户在使用系统时也希望交互性好，即当用户发动请求时能立刻得到响应，于是引入响应时间这个指标。前面的调度策略虽然周转时间好，但响应时间性能不太好，这很明显。于是有以下新的调度策略</p><h3 id="轮转"><a href="#轮转" class="headerlink" title="轮转"></a>轮转</h3><p>即在一个时间片里运行一个工作，然后切换到运行队列中下一个任务循环往复，知道所有任务完成。这个时间片需是时钟中断周期的整数倍，这样才能完成进程切换。很明显这种调度策略的性能依赖于时间片的设置，太短不好，因为会进行过多的上下文切换，这是要付出代价的，通常会使其设置的较长，以便摊销上下文切换的成本，而又不影响系统及时响应。但你是否注意到响应时间是保证了，那周转时间呢？假设A,B,C每个运行5s，RR为1s，那平均周转时间是14，很糟糕。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件安全复习</title>
      <link href="/2021/11/14/ruan-jian-an-quan-fu-xi/"/>
      <url>/2021/11/14/ruan-jian-an-quan-fu-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="攻击模式"><a href="#攻击模式" class="headerlink" title="攻击模式"></a>攻击模式</h3><ul><li>被动攻击<ul><li>信息泄露</li><li>流量分析</li></ul></li><li>主动攻击<ul><li>伪装攻击</li><li>重放攻击</li><li>消息篡改</li><li>拒绝服务</li></ul></li></ul><h3 id="恶意软件"><a href="#恶意软件" class="headerlink" title="恶意软件"></a>恶意软件</h3><p>未被授权的情况下以破坏软硬件设备，窃取用户信息，干扰用户正常使用为目的的软件或代码</p><p>什么是软件漏洞：</p><ul><li>漏洞是信息系统自身具有的弱点或缺陷</li><li>漏洞存在环境通常是特定的</li><li>漏洞具有可利用性，若攻击者利用了这些漏洞将给信息系统安全带来严重威胁和经济损失</li></ul><p>安全漏洞的定义：</p><p>安全漏洞是产品的缺陷，可能使攻击者破坏该产品的完整性，可用性，机密性</p><p>漏洞威胁：</p><ul><li>非法获取访问权限</li><li>拒绝服务</li><li>恶意代码植入</li><li>数据丢失泄露</li></ul><p>漏洞产生原因：</p><ul><li>技术因素：<ul><li>输入验证错误，访问验证错误</li><li>设计错误，配置错误</li></ul></li><li>非技术因素：<ul><li>缺乏软件开发规范</li><li>缺乏安全测试，安全维护</li></ul></li></ul><p>缓冲区移除漏洞利用：</p><p>修改内存数据，改变程序执行流程，执行恶意代码获取权限</p><h3 id="web漏洞-OWASP"><a href="#web漏洞-OWASP" class="headerlink" title="web漏洞-OWASP"></a>web漏洞-OWASP</h3><ul><li>A1-注入：将不受信任的数据作为命令或查询的一部分发送到解析器，产生SQL注入等；攻击者的恶意数据可以诱使解析器没有适当权限情况下执行命令</li><li>A2-失效的身份认证：通过错误的使用应用程序的身份认证和会话管理功能，攻击者能破译密码，密钥或会话令牌或利用其他开发缺陷暂时性或永久性冒充其他用户身份</li><li>A3-敏感数据泄露：对敏感数据加密</li><li>A4-XML外部实体：配置错误的XML处理器评估了XML文件中的外部实体引用。攻击者利用外部实体窃取使用URI文件处理器内部文件，从而实施攻击</li><li>A5-失效的访问控制：未对通过身份验证的用户实施恰当的访问控制。攻击者利用这些缺陷操作敏感数据。</li><li>A6-安全配置错误：由于不完整的临时配置，错误的HTTP标头配置等造成。我们需要对操作系统，框架，应用程序进行安全配置，并及时修补。</li><li>A7-跨站脚本：当应用程序的网页包含不信任的数据时，或使用能创建HTML或JavaScript的浏览器API更新网页时，会出现XSS，攻击者在受害者浏览器中执行脚本等</li><li>A8-不安全的序列化：不安全的序列化导致远程代码执行，或利用来进行攻击</li><li>A9-使用包含已知漏洞的组件：含有已知漏洞的组件被攻击者利用，造成严重数据丢失或服务器接管，同时破坏应用程序防御，造成影响。</li></ul><h4 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h4><p>应用描述：</p><p>几乎任何数据都能成为注入载体，攻击者可像解释器发送恶意数据，注入漏洞产生</p><p>普遍性：</p><p>注入漏洞很普遍，通常在SQL，Nosql查询语句，OS命令中，</p><p>技术：</p><p>导致数据丢失，泄露给无授权方，甚至主机被完全接管</p><p>应用程序脆弱：</p><ul><li>用户提供的数据没有经过应用程序验证，或过滤</li><li>动态查询语句或非参数化调用，在没有上下文感知转义情况下被用于解析器</li><li>恶意数据直接被使用，如SQL语句中包含恶意数据</li></ul><p>常见的注入：</p><p>SQL注入，OS命令，ORM</p><p>代码评审是最有效的检测应用程序注入的办法之一，其次是对参数，字段等的DAST扫描。</p><p>如何防止？</p><p>将数据与语句隔开</p><ul><li>使用安全的API，完全避免使用解释器，或提供参数化界面的接口，或迁移到ORM</li><li>使用正确的具有恰当规范化的输入验证方法</li><li>对任何剩余的动态查询使用该解释器特定的转义语法转义特殊字符。</li></ul><h4 id="失效的身份认证"><a href="#失效的身份认证" class="headerlink" title="失效的身份认证"></a>失效的身份认证</h4><p>应用描述：攻击者可获得数百万有效用户名和密码组合</p><p>普遍性：</p><p>大多数身份认证和访问管理系统设计与实现存在身份认证失效问题</p><p>技术：</p><p>攻击者只需访问几个账户，或只需管理员账户就可以破坏系统</p><p>应用程序脆弱：</p><ul><li>允许凭证填充，使得攻击者获得有效用户名和密码列表</li><li>允许默认的弱的众所周知的密码</li><li>使用明文，弱散列密码</li><li>当用户不活跃时，用户会话或认证令牌没有正确注销或失效。</li></ul><p>防止：</p><ul><li>实现多因素身份认证，防止自动，凭证填充</li><li>执行弱密码检查</li><li>将密码长度，复杂性，循环策略与现代基于证据的密码策略相一致</li><li>使用服务端安全内置会话管理器，登录后生成高度复杂的新随机会话ID</li></ul><h4 id="敏感数据泄露"><a href="#敏感数据泄露" class="headerlink" title="敏感数据泄露"></a>敏感数据泄露</h4><p>应用描述：攻击者不直接攻击密码，而是在传输过程中获取密钥，窃取数据等</p><p>常见的问题是不对敏感信息加密。在数据加密过程中，常见的问题是不安全的密钥生成管理，及使用弱加密算法等。</p><p>应用程序脆弱吗？</p><ul><li>在数据传输过程中是否使用明文传输，验证所有内部通信。</li><li>当数据被长期存储时，无论存在哪，是否被加密，包含备份</li><li>无论默认条件还是源代码中，是否还在使用任何脆弱的加密算法。</li><li>是否强制加密敏感数据。</li></ul><p>如何防止：</p><ul><li>对系统处理，存储或传输的数据分类，并进行访问控制</li><li>没必要保存的敏感数据，尽快删除</li><li>确保敏感数据加密，使用了最新的及加密算法</li><li>禁止缓存对包含敏感数据的响应</li></ul><h2 id="漏洞利用与发现"><a href="#漏洞利用与发现" class="headerlink" title="漏洞利用与发现"></a>漏洞利用与发现</h2><p>Exploit：</p><ul><li>漏洞利用的详细说明或漏洞利用程序，可以使软件，数据块等</li></ul><p>PayLoad：</p><ul><li>触发漏洞完成攻击的装载执行</li></ul><p>Shellcode：</p><ul><li>攻击代码</li></ul><p>Poc：</p><ul><li>漏洞利用机理说明</li></ul><p>Exploit：劫持目标控制权并跳转执行Shellcode</p><p>==漏洞利用过程==</p><ul><li>定位溢出点</li><li>编写Shellcode</li><li>修改/覆盖溢出点，执行Shellcode</li></ul><p>修改有以下分类：</p><ul><li>修改内存变量：影响程序执行的重要标志变量</li><li>修改代码逻辑：修改重要函数的关键逻辑</li><li>修改函数返回地址：调用Shellcode</li><li>攻击异常处理机制：SEH,FVEH</li><li>修改函数入口地址</li></ul><p>Shellcode典型功能：</p><ul><li>连接：正向反向连接</li><li>下载文件，执行代码</li><li>生成并运行</li></ul><p>漏洞挖掘技术：</p><ul><li><p>静态分析：不运行软件，通过对目标程序语法语义分析软件安全漏洞</p><ul><li>重点检查函数调用，返回状态，输入，缓冲区操作</li></ul></li><li><p>基于源代码：不安全的：文件结构，命名规则，堆栈指针</p><ul><li>基于反汇编：程序–》脚本语言</li></ul></li><li><p>优点</p><ul><li>不需要了解程序实现，较全面覆盖软件代码</li><li>易集成，自动化程度高</li></ul></li><li><p>局限：无法对潜在漏洞确认</p></li><li><p>动态分析：</p><ul><li>动态加载并运行调试器</li><li>输入追踪测试，堆栈比较</li><li>主要技术：<ul><li>植入：不影响程序语义，关键位置插入代码</li><li>动态切片：动态的数据流和控制流分析方式</li></ul></li><li>优点：<ul><li>运行时分析，准确率高</li><li>有针对检查，能确定相关模块表现</li></ul></li><li>局限：<ul><li>不容易找到分析点，效率不高</li><li>要求高，难以自动化</li></ul></li></ul></li><li><p>Fuzzing技术：黑盒模糊性测试，不关注软件功能业务和逻辑流程，重点关注软件健壮性。基于缺陷注入自动化测试，输入半随机数据，检测程序运行，记录并进一步分析程序发送的异常</p><ul><li>优点：不对源代码和二进制代码分析，自动化程度高，且发现的漏洞真正存在</li><li>缺点：不能发现访问控制漏洞，逻辑缺陷等</li><li>模糊测试过程：<ul><li>识别目标，识别输入，测试用例，异常监视，漏洞确认</li></ul></li><li>测试用例生成技术：<ul><li>预先输出测试用例：研究目标软件输入数据规约，依据知识生成用例</li><li>随机生成测试用例：生成随机数据，输入目标软件使其崩溃或异常</li><li>自动协议生成：研究目标软件输入数据规约，创建描述协议规约的方法，依据方法，修改数据，生成用例</li></ul></li></ul></li><li><p>Fuzzing技术：</p><ul><li>提高测试数据有效性，基于知识发现，了解目标软件所使用的文件格式，协议等，生成满足规约关系的测试数据</li><li>提高数据畸形度：简单变异技术和智能变异技术，</li><li>提高模糊测试的自动化程度</li></ul></li><li><p>二进制逆向分析：</p><ul><li>二进制代码–&gt;汇编或中间代码</li><li>一般方式：程序流程或数据格式逆向</li><li>分析技术：动态，静态分析，输入追踪测试</li><li>补丁比对：字节变化结构变化等。</li></ul></li></ul><h3 id="恶意软件-1"><a href="#恶意软件-1" class="headerlink" title="恶意软件"></a>恶意软件</h3><p>恶意代码分类：</p><ul><li>计算机病毒：一组能进行自我传播需要用户干预触发执行的破坏性程序代码</li><li>网络蠕虫：一组进行自我传播，不需要用户干预即可触发的破坏性程序代码</li><li>木马：看起来具有正常功能，但实际上隐藏很多用户不希望功能的程序，通常由控制端和被控制端组成。</li></ul><h4 id="计算机病毒"><a href="#计算机病毒" class="headerlink" title="计算机病毒"></a>计算机病毒</h4><p>传染性：修改别的程序将自身复制品传导到其他无毒对象上</p><p>破坏性：可能导致程序无法运行，删除计算机内文件</p><p>潜伏性：依附其他媒体寄生，到条件成熟才发作</p><p>==什么叫感染：==</p><p>在不影响目标程序正常功能的前提下使其具有病毒自己的功能即感染模块，触发模块，破坏模块</p><p>==什么是PE病毒==</p><p>​    以windowsPE程序为载体，寄生于PE文件，或windows系统的病毒程序</p><h5 id="传统文件感染病毒"><a href="#传统文件感染病毒" class="headerlink" title="传统文件感染病毒"></a>传统文件感染病毒</h5><p><img src="/../../../leetcode%E5%8A%A8%E5%9B%BE/%E6%96%87%E4%BB%B6%E7%97%85%E6%AF%92.png" alt="文件病毒"></p><ul><li>优点：被感染后的程序主体依然是目标程序，隐蔽性好</li><li>缺点：对病毒代码编写要求高，难以成功感染自校验程序</li></ul><h6 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h6><p>技术一：病毒重定位：</p><p>为什么需要重定位：程序编译后某些变量地址已经以二进制代码固定</p><p>重定位本质：修改实际地址与预期地址差异</p><p>解决方案：病毒运行过程中自我重定位</p><p>技术二：API函数地址自获取：</p><p>如何获取API函数地址：</p><ol><li>DLL文件引出函数节</li><li>kernel32.dll文件</li></ol><p>如何获取kernel32.dll中的API函数地址？</p><ol><li>获得kernel32.dll模块加载基地址</li><li>通过kernel32.dll引出目录表结构定位具体函数地址</li></ol><p>如何获取kernel32.dll模块基地址？</p><p>定位kernel32模块中任何一个地址，然后按照模块首地址特征，向低地址遍历定位PE文件头</p><p>引出函数节定位函数地址：</p><ol><li>通过函数名称查找函数地址</li></ol><p>技术三：目标程序遍历搜索：</p><p>通常以PE文件格式的的文件为感染目标，对目标搜索时，调用API</p><p>技术四：感染模块：</p><p>文件感染：</p><p>感染的关键：1. 病毒代码能够执行，在合适位置插入病毒，控制权交给病毒；2. 程序正常功能不被破坏。</p><p>添加新节点感染方式:</p><ol><li>判断文件开始两字节是否为MZ</li><li>判断PE文件标记</li><li>判断感染标记</li><li>获得目录个数</li><li>得到节表起始位置和最后节表末尾偏移</li><li>写入节表和病毒节</li><li>修正文件信息</li></ol><p>系统感染型：</p><ol><li>如何再次获得控制权：自启动</li><li>如何传播：可移动存储介质，网络共享，电子邮件</li></ol><p>熊猫烧香：</p><p>自启动方式：将自身拷贝至系统目录，修改注册表将自身设置为开机启动</p><p>感染与传播：感染可执行文件，搜索系统特定目录的可执行文件，将自身捆绑同时查找网页文件1插入代码；通过弱口令传播，访问局域网内共享文件夹，将病毒拷贝至此</p><p>自我隐藏：禁用安全软件，关闭进程，</p><p>破坏功能：开线程下载ddos程序发动恶意攻击，同时删除文件</p><h5 id="宏病毒"><a href="#宏病毒" class="headerlink" title="宏病毒"></a>宏病毒</h5><p>存在于数据文件中，使用宏语言编写，利用宏语言功能寄生其他数据文件</p><p>宏病毒传播：单个office文档-office模板，多个office文档</p><p>宏病毒的自我保护：</p><ul><li>禁止提示信息</li><li>屏蔽命令菜单</li><li>隐藏真实代码</li></ul><p>VBS病毒：使用VBScript编写，进行自我传播的破坏性程序，需要人工干预</p><p>VBS如何感染：自我复制感染文件，病毒中大部分代码可以直接附加在同类程序中</p><p>VBS自我保护：</p><ul><li>自变换与加密</li><li>巧用Execute函数</li><li>改变某些对象声明方法</li><li>尝试关闭反病毒软件</li></ul><h4 id="木马"><a href="#木马" class="headerlink" title="木马"></a>木马</h4><p>通过欺骗方式安装，在用户计算机中隐蔽运行，进行信息窃取，远程控制等破坏功能</p><p>远程控制型木马，信息获取型木马，破坏型木马</p><p>木马植入方式</p><ul><li>网页挂马植入：自动下载安装</li><li>电子邮件植入：附件形式</li><li>文档捆绑植入</li><li>U盘植入等</li></ul><p>木马结构：木马配置程序，控制端和被控制端</p><p>木马常见功能：</p><ul><li>文件管理：获取目标文件系统信息</li><li>进程管理：查看或暂停系统进程</li><li>服务管理：查看并管理目标系统服务</li><li>屏幕控制与截取</li><li>语音视频截获</li><li>远程Shell</li></ul><p>如何检测木马：静态文件特征，系统行为特征</p><p>软件著作权：</p><p>基本原则：创意和表达分离，保护创意的表达，不保护创意本身</p><p>保护对象：保护计算机程序，相关文档，不保护思想，概念发现等</p><p>软件专利权：</p><p>通过申请专利对软件的设计思想进行保护，而非对软件本身保护</p><p>著作权保护形式，专利保护内容</p><p>软件商业秘密权：</p><p>不为公众知悉，能为拥有者带来经济利益或竞争优势，并为拥有者采取保密措施的计算机软件或其他非专利成果</p><p>对象：源程序清单，开发计划等</p><p>软件商标权：Logo，图案，文字</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络是怎样连接的读书笔记（一）</title>
      <link href="/2021/11/12/wang-luo-shi-zen-yang-lian-jie-de-du-shu-bi-ji-yi/"/>
      <url>/2021/11/12/wang-luo-shi-zen-yang-lian-jie-de-du-shu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络复习笔记（一）</title>
      <link href="/2021/11/12/ji-suan-ji-wang-luo-fu-xi-bi-ji-yi/"/>
      <url>/2021/11/12/ji-suan-ji-wang-luo-fu-xi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>参考资料：</p><ul><li>亮白风格-图解网络-小林coding-v3.0</li><li><a href="https://www.bilibili.com/video/BV1c4411d7jb?from=search&amp;seid=11233455381088949891&amp;spm_id_from=333.337.0.0">计算机网络微课堂（有字幕无背景音乐版）</a></li><li>图解HTTP[上野 宣]</li><li><a href="https://juejin.cn/collection/6887457358591557640">计算机网络</a></li></ul><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h2><ul><li><p>电路交换：</p><ul><li><p>电话交换机接通电话线的方式成为电路交换</p></li><li><p>从通信资源分配角度看，交换是按某种方式动态分配传输线路的资源</p></li><li><p>电路交换的步骤：</p><ul><li>建立连接（分配资源）</li><li>通话（一直占用资源）</li><li>释放连接（归还资源）</li></ul><p>当使用电路交换传送计算机数据时线路传输效率较低，因为尽管空闲时计算机仍占有线路资源</p></li></ul></li><li><p>分组交换：<img src="https://s2.loli.net/2022/01/03/kQqKwBjnVh9Hrxv.png" alt="a111.png"></p></li><li><p>报文交换：不详细介绍。</p></li></ul><h2 id="三种交换方式对比"><a href="#三种交换方式对比" class="headerlink" title="三种交换方式对比"></a>三种交换方式对比</h2><p>电路交换：</p><ul><li>对于电路交换，通信之前首先建立连接，连接建立好之后使用连接进行数据传输，数据传送后，需释放连接，以归还之前建立连接所占用的通信线路资源。</li><li>中间的各结点交换机是直通形式，比特流直达终点。</li></ul><p>报文交换：</p><ul><li>可以随时发送报文，不需事先建立连接。报文先传送到相邻结点交换机，全部存储下来后进行查表转发，转发到下一个结点交换机。</li><li>整个报文需要在结点交换机上进行存储转发，由于不限制报文大小，因此需要各结点交换机具有较大存储空间。 </li></ul><p>分组交换：</p><ul><li>可以随时发送分组，不需事先建立连接，构成原始报文的一个个分组，依次在各节点交换机上存储转发，各结点交换机在发送分组同时，缓存收到的分组。</li><li>构成原始报文的分组，在各结点交换机上进行存储转发，相比报文交换，减少了转发时延，还可以避免过长的报文长时间占用链路，也有利于差错控制。</li></ul><p><img src="https://gitee.com/BloothOfYouth/image/raw/master//20201016103949.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论笔记（二）虚拟化：进程及API</title>
      <link href="/2021/11/12/cao-zuo-xi-tong-dao-lun-bi-ji-er-xu-ni-hua-jin-cheng-qie-huan-ji-api/"/>
      <url>/2021/11/12/cao-zuo-xi-tong-dao-lun-bi-ji-er-xu-ni-hua-jin-cheng-qie-huan-ji-api/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象：进程"><a href="#抽象：进程" class="headerlink" title="抽象：进程"></a>抽象：进程</h1><p>进程的非正式定义很简单：即运行中的程序，程序本身是没有生命周期的，知识存在磁盘上的指令，操作系统将这些字节运行起来，让程序发挥作用。</p><p>要让操作系统能同时运行多个程序我们的挑战是如何提供有许多CPU的假象？</p><p>操作系统通过虚拟化CPU，通过让一个进程只运行一个时间片，然后切换到其他进程，这就是时分共享技术，允许用户运行多个CPU，潜在开销是CPU共享，每个进程运行会慢一点。</p><p>那自然会引出多个程序运行时该选择那个程序先运行的问题。==调度策略==会做出决定。</p><h2 id="进程的构成"><a href="#进程的构成" class="headerlink" title="进程的构成"></a>进程的构成</h2><p>要理解进程构成就必须理解机器状态。</p><ul><li>进程的机器状态有一个明显的组成部分，即内存，指令在内存中，程序读取和写入的数据也在内存中，因此进程可以访问的内存也是进程的组成部分</li><li>机器状态的另一部分是寄存器，许多指令明确的读取或更新寄存器</li><li>特殊的寄存器也构成了机器状态的一部分，例如程序计数器PC，指示即将执行哪条指令，栈指针，帧指针等。</li></ul><h2 id="进程创建细节"><a href="#进程创建细节" class="headerlink" title="进程创建细节"></a>进程创建细节</h2><p>运行程序首先要将代码和静态数据加载进内存，加载到进程的地址空间。</p><p>早期操作系统中加载过程尽早完成，现代操作系统惰性加载，即尽在程序运行期间需要加载的代码或数据片段才会加载。</p><p>将代码和静态数据加载进内存后还需为程序运行时栈分配内存，栈用来存放局部变量，函数参数和返回地址。操作系统也可能会用参数来初始化栈，将参数填入main()，即argc，argv</p><p>操作系统也会为程序的堆分配内存，堆用于显示请求的动态数据分配。例如利用malloc（）</p><p>操作系统还将执行其他初始化任务，特别是输入输出，例如在Unix中默认情况下每个进程都有三个打开的文件描述符用于标准输入，输出，错误。</p><p>最后os为执行程序搭好了舞台，最后跳转到main例程，将CPU控制权交给新的进程。</p><h2 id="进程API"><a href="#进程API" class="headerlink" title="进程API"></a>进程API</h2><p>本部分将讲解一些关于进程的系统调用</p><h3 id="fork系统调用"><a href="#fork系统调用" class="headerlink" title="fork系统调用"></a>fork系统调用</h3><p>fork用于创建新进程</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"helloworld %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rc<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rc<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello i am child%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello i am parent%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fork调用新创建的进程几乎与调用进程完全一样，这时有两个完全一样的进程在运行（可能共享内存），并且都从fork（）系统调用返回，新创建的进程叫子进程，原来的进程是父进程，子进程不会从main开始执行，直接从fork（）处返回。</p><p>子进程并不是完全拷贝父进程，它拥有自己的私有内存，寄存器，程序计数器等，但它从fork返回的值不同，父进程返回的是子进程的pid，子进程返回0,。同时还会涉及到cpu调度问题，决定哪个进程先执行。</p><h3 id="wait系统调用"><a href="#wait系统调用" class="headerlink" title="wait系统调用"></a>wait系统调用</h3><p>父进程调用wait，延迟自己的执行，知道子进程执行完毕，当子进程执行完毕后，wait才返回父进程。</p><h3 id="exec系统调用"><a href="#exec系统调用" class="headerlink" title="exec系统调用"></a>exec系统调用</h3><p>fork调用只是在你想运行相同程序拷贝时有用，但当想运行不同程序时，exec族便可做这些事。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"helloworld %d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rc<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rc<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>rc<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello i am child%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> <span class="token operator">*</span>myargs<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        myargs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">strdup</span><span class="token punctuation">(</span><span class="token string">"wc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myargs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">strdup</span><span class="token punctuation">(</span><span class="token string">"p3.c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myargs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token function">execvp</span><span class="token punctuation">(</span>myargs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>myargs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> wc<span class="token operator">=</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello i am parent%d\n"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给定可执行程序的名称（如wc），和需要的参数（p3.c）exec会从可执行程序加载代码和静态数据，用它覆写自己的代码段，堆，栈及其他内存空间会被重新初始化，然后操作系统就执行改程序，将参数通过argv传递给该进程，它并没有创建新的进程，而是直接将当前进程转为另一个运行程序。</p><h1 id="机制-受限直接执行"><a href="#机制-受限直接执行" class="headerlink" title="机制:受限直接执行"></a>机制:受限直接执行</h1><p>构建虚拟化机制时存在挑战，第一是性能，第二是控制权。</p><h2 id="直接执行"><a href="#直接执行" class="headerlink" title="直接执行"></a>直接执行</h2><p>为了使程序尽快运行，只需使其在cpu上直接执行。当os希望程序启动时，其在进程列表中创建一个进程条目，为其分配内存，将程序代码和数据加载进内存，找到main，跳转到那里，开始运行用户的代码。执行完后再返回到内核。</p><p><img src="https://i.loli.net/2021/11/12/suqLKJUl45ZnfbG.jpg" alt="直接运行.jpg"></p><p>但这种协议存在问题：</p><ul><li>如何确保程序不做任何我们不希望他做的事呢？</li><li>当运行进程时操作系统如何让它停止并切换到另一个进程，从而实现时分共享呢？</li></ul><h2 id="受限制运行"><a href="#受限制运行" class="headerlink" title="受限制运行"></a>受限制运行</h2><p>基于上述问题，我们提出另一种协议</p><p>直接执行优点是快速，但如果进程希望执行某种受限操作，如磁盘发出I/O请求获取更多系统资源怎么办？</p><p>对于I/O或其他相关操作，一种方法是让所有进程直接执行任何事情，但这样做明显很不安全，因此我们引入==用户模式和内核模式==。</p><ul><li>在用户模式下运行的代码受到限制，其不能发出I/O请求或其他受限操作，否则会引发异常，从而终止程序。</li><li>在内核模式下，操作系统就以这种模式运行，在此模式下，代码可以做任何事情，包括特权操作，如发出I/O请求。</li></ul><p>基于此我们如何实现用户模式和内核模式的切换呢？</p><p>提供系统调用！几乎所有现代硬件都提供用户程序执行系统调用的能力，他允许内核小心地暴露某些关键功能，如访问文件系统，创建销毁进程分配内存等。</p><p>要执行系统调用，程序必须执行陷阱指令，该指令使得陷入内核并将特权级别提升为内核模式，此时系统可以执行任何特权操作，执行完系统调用后，操作系统执行一个特殊的从陷阱返回的指令，回到用户模式，将特权级别降为用户模式。</p><p>你可能会感觉切换是不是太简单了，实际上要完成切换，必须确保储存足够的调用者寄存器以便在操作系统发出陷阱返回指令时能正确返回。例如在x86上处理器会将程序计数器，标志和其他寄存器推入每个进程的内核栈，返回陷阱时从栈中弹出这些值来恢复寄存器和程序计数器等的值。</p><p>除此之外我们还有一个细节没讨论：当执行陷阱指令进入内核模式后，操作系统如何知道此时该执行的代码在什么地方。显然这不能由用户程序直接指定要跳转的地址，这很危险，这样做程序可以跳转到任意位置。因此我们通过设置陷阱表来实现。</p><p>在内核启动时，初始化陷阱表，即在内核模式下告诉硬件发生某些异常事件时该运行哪些代码，如当发生硬盘中断时，该运行哪里的代码。操作系统通常通过特殊指令通知硬件陷阱处理程序的位置。一旦硬件被通知，它们就会记住这些处理程序的位置，直到下一次重新启动。</p><p>下图在时间线内总结了该协议，我们假设每个进程有一个内核栈，在进入内核和离开内核时，寄存器和程序计数器等被保存和恢复。</p><img src="https://i.loli.net/2021/11/12/bar5jF1O3EAi2Q8.jpg" alt="受限运行.jpg" style="zoom:80%;"><ul><li>第一个阶段：内核初始化陷阱表，CPU记住它们的位置以供随后使用。内核通过特权指令执行此操作</li><li>第二个阶段：在执行陷阱返回指令时，内核会设置一些内容，如在进程列表中创建条目，分配内存，从而CPU切换到用户模式并开始运行该进程。当进程发出系统调用时重新陷入内核，然后再次从陷阱返回用户模式。</li></ul><p>但你是否注意到上述协议只适合运行单个进程，当需要运行多个进程时我们该如何实现进程之间的切换呢？在思考这个问题之前我们需明白一个事实即：CPU在执行进程时，操作系统是没有运行的，那他怎么做事情例如调度进程呢？</p><h2 id="在进程之间切换"><a href="#在进程之间切换" class="headerlink" title="在进程之间切换"></a>在进程之间切换</h2><p>此处我们要解决的关键问题是如何让操作系统有效地获取CPU控制权？</p><h3 id="协作方式：等待系统调用"><a href="#协作方式：等待系统调用" class="headerlink" title="协作方式：等待系统调用"></a>协作方式：等待系统调用</h3><p>大多数进程通过系统调用将CPU控制权返回给操作系统，以这种方式运行的系统通常包含一个显示的<code>yield</code>系统调用，他什么都不干，只是将控制权交给操作系统。</p><p>如果程序执行了某些非法操作，也会将控制权移交给操作系统，如除数为0，或访问无法访问的内存。但你是否想过会有这种流氓程序：他进入无限循环，且从不进行系统调用，那操作系统该如何获得控制权呢？</p><h3 id="非协作方式：操作系统进行控制"><a href="#非协作方式：操作系统进行控制" class="headerlink" title="非协作方式：操作系统进行控制"></a>非协作方式：操作系统进行控制</h3><p>事实证明，没有硬件的帮助，如果进程不进行系统调用，操作系统将无法获得控制权，那他就不能做任何事。</p><p>因此我们提供一种时钟中断机制，来定时产生中断，此时正在运行的进程停止运行，操作系统中预先设置的中断处理程序运行，操作系统获得CPU控制权，做他想做的事。</p><p>和之前的受限运行协议一样，操作系统也需要通知硬件在发生时钟中断时该运行哪些代码，因此在启动时，操作系统还需做这步操作。其次在启动操作系统时也必须启动时钟，一旦启动时钟，操作系统最终总会得到控制权。这是并发的核心。</p><h3 id="保存和恢复上下文"><a href="#保存和恢复上下文" class="headerlink" title="保存和恢复上下文"></a>保存和恢复上下文</h3><p>既然操作系统已经获得控制权，此时必须决定是继续执行正在运行的程序，还是切换进程执行，这个决定由调度程序做出。</p><p>如果决定切换，OS会执行一些底层代码，即上下文切换：操作系统要做的是为当前正在执行的进程保存一些寄存器的值，例如保存到它的内核栈，并为即将执行的进程恢复一些寄存器的值，从他的内核栈，这就可以确保在执行返回陷阱指令时，是返回到即将执行的进程，而不是上一个进程。</p><p>具体来说就是：为保存进程的上下文，操作系统会执行一些底层汇编代码，保存通用寄存器，程序计数器以及当前正在执行进程的内核栈指针，然后从另一个进程结构中恢复寄存器，程序计数器，并切换内核栈，供即将运行的程序使用。通过切换栈，内核在执行切换代码调用时是一个进程的上下文，在返回时，是另一个进程的上下文。</p><p>下图展示了整个过程的时间线，在这个例子中，进程A在运行，然后被中断时钟中断，硬件保存进程A的用户寄存器，程序计数器到内核栈中，进入内核，执行中断处理程序。在中断处理程序中，操作系统决定切换进程执行，此时调用switch例程，该例程仔细保存当前内核寄存器的值到进程A的进程结构，然后从b的进程结构恢复进程b的内核寄存器，最后通过陷阱返回，从内核栈恢复寄进程B的用户寄存器，跳到B的程序计数器，执行B。</p><p><img src="https://i.loli.net/2021/11/12/JSidW7uBs3LeE6A.jpg" alt="中断.jpg"></p><p>注意在此协议中，有两种类型的寄存器被保存/恢复，第一种是执行时钟中断时运行进程的用户寄存器由硬件隐式保存，使用该进程的内核栈；第二种是当操作系统决定从A切换到B时，进程A的内核寄存器被显示地保存在该进程的进程结构中。</p><h1 id="面试题：进程切换时是如何保存上下文的？"><a href="#面试题：进程切换时是如何保存上下文的？" class="headerlink" title="面试题：进程切换时是如何保存上下文的？"></a>面试题：进程切换时是如何保存上下文的？</h1><p>这个问题首先要说一下进程是如何运行的，运行一个线程有两种选择即直接运行或受限运行，很明显，直接运行很不安全，于是我们引入用户模式和内核模式使进程受限运行。在用户模式下进程不能执行一些特权操作如磁盘IO等，在内核模式下可以进行任何特权操作。此时如果进程想要进行一些IO操作怎么办呢？我们提供了系统调用，当用户进程想要进行一些特权操作时通过系统调用陷入内核模式，特权级别提升，于是系统执行磁盘IO执行完成之后从陷阱返回指令返回，要想正确的返回，就必须保存足够的调用者寄存器，程序计数器以便返回。通常每个进程都有一个内核栈，当进入内核模式时，将相关寄存器和程序计数器的值压入内核栈，当cpu返回用户模式时则从栈中恢复这些值。那当进入内核模式时硬件得知道执行哪里的代码，于是内核模式下启动时操作系统会初始化陷阱表，来告诉硬件发生某些异常事件时该执行哪里的代码，于是协议可以概括为，内核模式下启动，设置陷阱表，进程列表上创建进程条目，为进程分配内存，加载代码，初始化栈堆等，跳转到main例程，当执行系统调用时，将寄存器值，程序计数器等压入内核栈，跳转到硬件处理程序，操作系统完成操作，调用陷阱返回指令，从内核栈中弹出相关寄存器值，跳到下一个程序计数器，然后main执行完毕，释放内存。</p><p>这是一个进程运行的情况，单cpu下，进程运行时，操作系统是没有运行的，那如何让操作系统重新获得控制权呢？以前是进程通过系统调用进入内核模式，但可能存在流氓程序，于是只能单独设置时钟中断程序，同理，当发生中断时，得让时钟知道执行哪里的代码，即中断处理程序，故也得在启动时通知时钟。通过时钟我们保证了操作系统定能获得控制权，那获得了控制权就该作出决定了，继续执行当前进程还是切换进程，如果是切换进程，则将当前进程用户寄存器，程序计数器，内核栈指针压入内核栈，转向内核模式，执行switch例程，此时再将当前进程的内核寄存器保存到进程结构中，同时从另一个进程结构中恢复他的寄存器，从陷阱返回，在从他的内核栈中弹出值，恢复相关用户寄存器，程序计数器，然后执行另一个进程，至此就完成了进程切换。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>操作系统导论读书笔记（一）附面试题整理</title>
      <link href="/2021/11/11/cao-zuo-xi-tong-dao-lun-du-shu-bi-ji-yi-fu-mian-shi-ti-zheng-li/"/>
      <url>/2021/11/11/cao-zuo-xi-tong-dao-lun-du-shu-bi-ji-yi-fu-mian-shi-ti-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p> 本系列将记录本人学习阅读《操作系统导论》这本书时的一些感受和学到的新知识。</p><hr><h1 id="操作系统介绍"><a href="#操作系统介绍" class="headerlink" title="操作系统介绍"></a>操作系统介绍</h1><p>操作系统的三个核心思想便是：虚拟化，并发，持久性，在学习操作系统时必须要深刻理解这三个概念在操作系统设计中的体现。</p><h2 id="由程序运行过程引入"><a href="#由程序运行过程引入" class="headerlink" title="由程序运行过程引入"></a>由程序运行过程引入</h2><p>程序在运行时会发生什么？非常简单，处理器从内存中读取一条指令，进行解码，然后执行，例如两数相加，访问内存，跳转函数等，但随着软件的发展，我们为了让系统更易于使用，我们希望在运行一个程序的同时，其他事情也能同步进行，于是被我们称为操作系统的软件应运而生。他能让程序共享内存，程序与设备交互，甚至同时运行多个程序，那我们开始思考，他是怎么实现的呢？</p><h3 id="虚拟化CPU"><a href="#虚拟化CPU" class="headerlink" title="虚拟化CPU"></a>虚拟化CPU</h3><p>事实证明，在硬件帮助下，操作系统将但个CPU转换成看似无限数量的CPU，让多个程序看似同时运行。</p><h3 id="虚拟化内存"><a href="#虚拟化内存" class="headerlink" title="虚拟化内存"></a>虚拟化内存</h3><p>每个进程访问自己的私有虚拟地址空间，操作系统以某种方式映射到机器的物理内存上，一个运行的程序的内存不会影响其他进程的地址空间。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>事实证明，在并发程序中会出现一些奇怪的问题，这些问题与指令如何执行有关，例如加值：需要三条指令，将值从内存加载进寄存器，再递增，在将其保存回内存。这不是以原子方式执行，所有奇怪的事情会发生。</p><h3 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中ResourceBundle类使用</title>
      <link href="/2021/11/11/java-zhong-resourcebundle-lei-shi-yong/"/>
      <url>/2021/11/11/java-zhong-resourcebundle-lei-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/mupengfei6688/article/details/79060014">(150条消息) JAVA中ResourceBundle使用详解_OovEver的专栏-CSDN博客_resourcebundle</a></p><p><a href="https://blog.csdn.net/Afflatus_f/article/details/97814026">(150条消息) Redis连接池工具类并加载配置文件以及测试_狗凡的博客-CSDN博客</a></p><p><a href="https://www.w3cschool.cn/intellij_idea_doc/intellij_idea_doc-zpft2er5.html">使用ResourceBundle_w3cschool</a></p><p><a href="https://jishuin.proginn.com/p/763bfbd286cc">java.util.ResourceBundle用法详解-技术圈 (proginn.com)</a></p><p><a href="https://www.w3cschool.cn/intellij_idea_doc/intellij_idea_doc-zpft2er5.html">使用ResourceBundle_w3cschool</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap七大遍历方式</title>
      <link href="/2021/11/11/hashmap-qi-da-bian-li-fang-shi/"/>
      <url>/2021/11/11/hashmap-qi-da-bian-li-fang-shi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1623343">HashMap 的 7 种遍历方式与性能分析！(强烈推荐) - 云+社区 - 腾讯云 (tencent.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Jedis使用教程</title>
      <link href="/2021/11/08/jedis-shi-yong-jiao-cheng/"/>
      <url>/2021/11/08/jedis-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/a1038eed6d44">https://www.jianshu.com/p/a1038eed6d44</a></p><p><a href="https://blog.csdn.net/top_code/article/details/51292240">https://blog.csdn.net/top_code/article/details/51292240</a></p><p><a href="https://tool.oschina.net/uploads/apidocs/">https://tool.oschina.net/uploads/apidocs/</a></p><p><a href="https://blog.csdn.net/CYY941027/article/details/109110455">https://blog.csdn.net/CYY941027/article/details/109110455</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Type接口</title>
      <link href="/2021/11/08/java-zhong-de-type-jie-kou/"/>
      <url>/2021/11/08/java-zhong-de-type-jie-kou/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/linghu-java/p/8067886.html">Java中的Type - linghu_java - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中json转换--&gt;Gson工具包的使用</title>
      <link href="/2021/11/07/java-yu-json-zhuan-huan-gson-gong-ju-bao-de-shi-yong/"/>
      <url>/2021/11/07/java-yu-json-zhuan-huan-gson-gong-ju-bao-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/yiguang_820/article/details/105930458">(145条消息) gson.jar包免费下载_yiguang_820的博客-CSDN博客_gson jar包</a></p><p><a href="https://blog.csdn.net/zhuwukai/article/details/82884419">(145条消息) Gson的介绍和使用_zhuwukai的博客-CSDN博客_gson使用</a></p><p><a href="https://www.cnblogs.com/yixiu868/p/8401938.html">Java创建和解析Json数据方法（五）——Google Gson包的使用 - yixiu868 - 博客园 (cnblogs.com)</a></p><p><a href="https://cloud.tencent.com/developer/article/1662930">https://cloud.tencent.com/developer/article/1662930</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中代码块，静态代码快，构造代码块等的执行顺序</title>
      <link href="/2021/11/07/java-zhong-dai-ma-kuai-jing-tai-dai-ma-kuai-gou-zao-dai-ma-kuai-deng-de-zhi-xing-shun-xu/"/>
      <url>/2021/11/07/java-zhong-dai-ma-kuai-jing-tai-dai-ma-kuai-gou-zao-dai-ma-kuai-deng-de-zhi-xing-shun-xu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：java中Static静态代码快，构造代码块，普通代码块，构造函数的执行顺序本篇博客将带大家一起探究</p></blockquote><h2 id="代码块的分类"><a href="#代码块的分类" class="headerlink" title="代码块的分类"></a>代码块的分类</h2><p>基本上代码块分为三种，<em>静态代码快</em>，<em>构造代码块</em>，<em>普通代码块</em></p><p>代码块执行顺序：==静态代码快== —&gt; ==构造代码块== —&gt; ==普通代码块==</p><p>继承中代码块执行顺序：==父类静态代码快== —&gt; ==子类静态代码快== —&gt; ==父类构造代码块== —&gt;==父类构造器== —&gt; ==子类构造代码块== —&gt; ==子类构造器==</p><h3 id="静态代码快"><a href="#静态代码快" class="headerlink" title="静态代码快"></a>静态代码快</h3><p>Java静态代码块中的代码会在类加载JVM时运行，且只被执行一次，即这些代码不需要实例就能被调用，静态代码块常用来执行类属性的初始化。</p><p><strong>关于Static静态代码块的五个小结点</strong></p><ul><li>Java静态代码块中的代码会在类加载JVM时运行，且只被执行一次</li><li>静态块常用来执行类属性的初始化</li><li>静态块优先于各种代码块以及构造函数，如果一个类中有多个静态代码块，会按照书写顺序依次执行</li><li>静态代码块可以定义在类的任何地方中除了方法体中【这里的方法体是任何方法体】</li><li>静态代码块不能访问普通变量</li></ul><h3 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h3><ul><li>构造代码块在创建对象时被调用，每次创建对象都会调用一次</li><li>构造代码块优先于构造函数执行，同时构造代码块的运行依赖于构造函数</li><li><strong>构造代码块在类中定义</strong></li></ul><h3 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h3><ul><li>普通代码块定义在方法体中</li><li>普通代码块与构造代码块的格式一致都是<code>{}</code></li><li>普通代码块与构造代码块唯一能直接看出的区别是<strong>构造代码块是在类中定义的，而普通代码块是在方法体中定义的</strong></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Initializationblock</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> intA<span class="token punctuation">;</span>    <span class="token keyword">int</span> intB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Initializationblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造器00000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Initializationblock</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一个参数的构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        intA <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        intB <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造初始化块11111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造初始化块22222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造初始化块33333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//静态初始化块</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态初始化块01010101"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态初始化块0202020202"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token comment">/* 初始化块一 * 因为静态块是在类的初始化阶段完成的， * 因此在创建某个类的第二个对象时，该类的静态块就不会执行了 *  * 在单个类中，静态初始化块，初始化块，构造器 * 多个类的继承中初始化块、静态初始化块、构造器的执行顺序在继承中，先后执行父类A的静态块，父类B的静态块，最后子类的静态块，然后再执行父类A的非静态块和构造器，然后是B类的非静态块和构造器，最后执行子类的非静态块和构造器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Initializationblock</span> initializationblock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Initializationblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initializationblock<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多打印几个对象的目的是：好看出Static静态代码块只执行一次！！！</span>        <span class="token class-name">Initializationblock</span> initializationblock2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Initializationblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//因为静态块是在类的初始化阶段完成的，因此在创建某个类的第二个对象时，该类的静态块就不会执行了</span>        initializationblock2<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Initializationblock</span> initializationblock3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Initializationblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initializationblock3<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">静态初始化块<span class="token number">01010101</span>静态初始化块<span class="token number">0202020202</span>构造初始化块<span class="token number">11111</span>构造初始化块<span class="token number">22222</span>构造初始化块<span class="token number">33333</span>无参构造器<span class="token number">00000000</span>普通初始化块<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>构造初始化块<span class="token number">11111</span>构造初始化块<span class="token number">22222</span>构造初始化块<span class="token number">33333</span>无参构造器<span class="token number">00000000</span>普通初始化块构造初始化块<span class="token number">11111</span>构造初始化块<span class="token number">22222</span>构造初始化块<span class="token number">33333</span>无参构造器<span class="token number">00000000</span>普通初始化块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得出结论：执行顺序 <strong>静态代码块 &gt; 构造代码块 &gt; 构造函数 &gt; 普通代码块</strong></p><h2 id="继承中各代码块的执行顺序"><a href="#继承中各代码块的执行顺序" class="headerlink" title="继承中各代码块的执行顺序"></a>继承中各代码块的执行顺序</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseOne</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">BaseOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseOne构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseOne初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseOne静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseTwo</span> <span class="token keyword">extends</span> <span class="token class-name">BaseOne</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">BaseTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseTwo构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseTwo初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseTwo静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseThree</span> <span class="token keyword">extends</span> <span class="token class-name">BaseTwo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">BaseThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseThree构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseThree初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BaseThree静态初始化块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>gx<span class="token punctuation">.</span>initializationblock</span><span class="token punctuation">;</span><span class="token comment">/*     注：这里的ABC对应BaseOne、BaseTwo、BaseThree  * 多个类的继承中初始化块、静态初始化块、构造器的执行顺序     在继承中，先后执行父类A的静态块，父类B的静态块，最后子类的静态块，     然后再执行父类A的非静态块和构造器，然后是B类的非静态块和构造器，最后执行子类的非静态块和构造器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BaseThree</span> baseThree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BaseThree</span> baseThree2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseThree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">BaseOne</span>静态初始化块<span class="token class-name">BaseTwo</span>静态初始化块<span class="token class-name">BaseThree</span>静态初始化块<span class="token class-name">BaseOne</span>初始化块<span class="token class-name">BaseOne</span>构造器<span class="token class-name">BaseTwo</span>初始化块<span class="token class-name">BaseTwo</span>构造器<span class="token class-name">BaseThree</span>初始化块<span class="token class-name">BaseThree</span>构造器<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token class-name">BaseOne</span>初始化块<span class="token class-name">BaseOne</span>构造器<span class="token class-name">BaseTwo</span>初始化块<span class="token class-name">BaseTwo</span>构造器<span class="token class-name">BaseThree</span>初始化块<span class="token class-name">BaseThree</span>构造器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个类的继承中初始化块、静态初始化块、构造器的执行顺序为：先后执行父类A的静态块，父类B的静态块，最后子类的静态块，然后再执行父类A的非静态块和构造器，然后是B类的非静态块和构造器，最后执行子类的非静态块和构造器【注：这里的ABC对应BaseOne、BaseTwo、BaseThree 】</p><p>结论：多个类的继承中初始化块、静态初始化块、构造器的执行顺序为：父类静态块——&gt;子类静态块——&gt;父类代码块——&gt;父类构造器——&gt;子类代码块——&gt;子类构造器</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中的正则表达式</title>
      <link href="/2021/11/07/java-zhong-de-zheng-ze-biao-da-shi/"/>
      <url>/2021/11/07/java-zhong-de-zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.w3cschool.cn/java/java-regex-character-classes.html">Java 正则表达式元字符_w3cschool</a></p><p><a href="https://cn.bing.com/search?q=java%E4%B8%ADMatche%E5%BA%95%E5%B1%82%E5%8C%B9%E9%85%8D%E6%9C%BA%E5%88%B6r&amp;qs=n&amp;form=QBRE&amp;sp=-1&amp;pq=java%E4%B8%ADmatche%E5%BA%95%E5%B1%82%E5%8C%B9%E9%85%8Djizhir&amp;sc=0-21&amp;sk=&amp;cvid=B49BD899CAF1463B97E363E4CC0EE1B7">java中Matche底层匹配机制r - 搜索 (bing.com)</a></p><p><a href="https://blog.csdn.net/lxcnn">(156条消息) 雁过无痕_-过客-_CSDN博客-正则基础,.NET正则,Javascript正则领域博主</a></p><p><a href="https://www.yiibai.com/java/java_regular_expressions.html">Java正则表达式 - Java教程™ (yiibai.com)</a></p><p><a href="https://blog.csdn.net/weixin_43860260/article/details/91417485">(156条消息) Java 正则表达式的用法和实例_Lemon-CSDN博客_java 正则表达式</a></p><p><a href="https://www.yiibai.com/java/java_regular_expressions.html">Java正则表达式 - Java教程™ (yiibai.com)</a></p><p>1.正则在线测试网站：<a href="https://regexr-cn.com/">https://regexr-cn.com/</a><br>2.正则练习：<a href="https://codejiaonang.com/">https://codejiaonang.com/</a></p><h1 id="Java中正则表达式相关API介绍"><a href="#Java中正则表达式相关API介绍" class="headerlink" title="Java中正则表达式相关API介绍"></a>Java中正则表达式相关API介绍</h1><p>利用正则表达式通常会有以下形式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token class-name">RegExp</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">Pattern</span> pattern<span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">RegExp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Matcher</span> matcher<span class="token operator">=</span>pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    sout<span class="token punctuation">.</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来看这个例子：</p><p><img src="https://i.loli.net/2021/11/16/EvURYnGDtaOr47m.png" alt="RegExp1.png"></p><p>当RegExp只有一个分组时：</p><p><code>matcher.find()</code>完成的任务：</p><ol><li>根据指定的规则，定位满足的子字符串如（1998）</li><li>找到后，将子字符串开始的索引记录到matcher对象的group数组中<ol><li><code>group[0]=0</code>,把该子字符串的结束索引+1，记录到<code>group[1]=4</code></li></ol></li><li>同时记录<code>oldLast</code>值记为子字符串的解释+1即为4，下次find时，就从oldLast开始匹配</li></ol><p>group源码如下：</p><p><img src="https://i.loli.net/2021/11/16/byo8qMrOzRAX5lm.png" alt="group.png"></p><p>截取时，根据<code>group[0]=0</code>,和<code>group[1]=4</code>从content截取</p><p>再次找到时将<code>group[0]和group[1]</code>刷新，记录新的匹配串。</p><p>当RegExp有分组时，即有括号时：</p><p>例如<code>(\\d\\d)(\\d\\d)</code></p><ol><li><p>根据指定的规则，定位满足的子字符串如（1998）</p></li><li><p>找到后，将子字符串开始的索引记录到matcher对象的group数组中</p><ol><li>总的子字符串<code>group[0]=0</code>,<code>group[1]=4</code>，</li><li>第一组字符串：<code>group[2]=0</code>，<code>group[3]=2</code>，第二组字符串：<code>group[4]=2</code>，<code>group[5]=4</code></li><li>更多的分组继续往后记</li></ol></li></ol><h2 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h2><h3 id="字符匹配符"><a href="#字符匹配符" class="headerlink" title="字符匹配符"></a>字符匹配符</h3><p><img src="https://i.loli.net/2021/11/16/n6tCioms4gRTDbO.png" alt="字符匹配符.png"></p><p><img src="https://i.loli.net/2021/11/16/cd9CJSlzra4PT5s.png" alt="字符匹配符2.png"></p><p><img src="https://i.loli.net/2021/11/16/hzLyf6Tsbw8logY.png" alt="case_insentive.png"></p><p><img src="https://i.loli.net/2021/11/16/cE3GKW7q6JoySQO.png" alt="Reg2.png"></p><h3 id="选择匹配符"><a href="#选择匹配符" class="headerlink" title="选择匹配符"></a>选择匹配符</h3><p><img src="https://i.loli.net/2021/11/16/TmLh23OxG7JziCp.png" alt="选择匹配.png"></p><h3 id="正则限定符"><a href="#正则限定符" class="headerlink" title="正则限定符"></a>正则限定符</h3><p><img src="https://i.loli.net/2021/11/16/pgBaoI84Pl3fQiA.png" alt="限定符.png"></p><p><img src="https://i.loli.net/2021/11/16/cueMfsv62QmqHRY.png" alt="限定符2.png"></p><h3 id="正则定位符"><a href="#正则定位符" class="headerlink" title="正则定位符"></a>正则定位符</h3><p><img src="https://i.loli.net/2021/11/16/QUIiLd92gXNbkR8.png" alt="定位符1.png"></p><h3 id="捕获分组"><a href="#捕获分组" class="headerlink" title="捕获分组"></a>捕获分组</h3><p><img src="https://i.loli.net/2021/11/16/316rpGqjxYFyUVI.png" alt="正则分组2.png"></p><p><img src="https://i.loli.net/2021/11/16/71Klw3AYQFdEWG8.png" alt="正则分组1.png"></p><h3 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h3><p><img src="https://i.loli.net/2021/11/19/3nONTwHqCLZdEze.png" alt="非捕获分组1.png"></p><p>示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> content<span class="token operator">=</span><span class="token string">"韩顺平教育，韩顺平学习，韩顺平同学"</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"韩顺平(?:教育|学习|同学)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//返回结果：</span>韩顺平教育韩顺平学习韩顺平同学    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> content<span class="token operator">=</span><span class="token string">"韩顺平教育，韩顺平学习，韩顺平同学"</span><span class="token punctuation">;</span>        <span class="token class-name">Pattern</span> compile <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"韩顺平(?:教育|学习)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> compile<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//返回结果</span>韩顺平韩顺平<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h3><p><img src="https://i.loli.net/2021/11/19/SAhYVZMs2BDEFL5.png" alt="非贪婪匹配1.png"></p><h3 id="匹配URL"><a href="#匹配URL" class="headerlink" title="匹配URL"></a>匹配URL</h3><p><img src="https://i.loli.net/2021/11/20/4YBvR3G8feOqWI5.png" alt="匹配url.png"></p><h3 id="Matcher类"><a href="#Matcher类" class="headerlink" title="Matcher类"></a>Matcher类</h3><p><img src="https://i.loli.net/2021/11/20/TJjSsYLR1kobfQD.png" alt="matches类.png"></p><p><img src="https://i.loli.net/2021/11/20/KPqr3ugkSVd8CZ7.png" alt="matcher的startend.png"></p><h3 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h3><p><img src="https://i.loli.net/2021/11/20/hI7oAgfdnEyMzlq.png" alt="方向引用.png"></p><p><img src="https://i.loli.net/2021/11/20/d7YnXoTxP86hHKy.png" alt="反向引用案例.png"></p><h4 id="结巴去重案例"><a href="#结巴去重案例" class="headerlink" title="结巴去重案例"></a>结巴去重案例</h4><p><img src="https://i.loli.net/2021/11/20/Zi3uestfkrlWOFJ.png" alt="去重.png"></p><h4 id="String中spilt"><a href="#String中spilt" class="headerlink" title="String中spilt"></a>String中spilt</h4><p><img src="https://i.loli.net/2021/11/22/GkBINs6owydMiuh.png" alt="spilt.png"></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://i.loli.net/2021/11/22/J8plCIBv3x7MDTa.png" alt="RegExp练习1.png"></p><p><img src="https://i.loli.net/2021/11/22/wEgCI7TLxfhtnPl.png" alt="answer1.png"></p><p><img src="https://i.loli.net/2021/11/22/WQYkTUis6uj3Ba8.png" alt="exercise2.png"></p><p><img src="https://i.loli.net/2021/11/22/1FY7SnchAJse4Rk.png" alt="answer2.png"></p><p><img src="https://i.loli.net/2021/11/22/DLGQOKrmj26NVoe.png" alt="练习3.png"></p><p><img src="https://i.loli.net/2021/11/22/LqAufQeEY9zdThO.png" alt="answer3.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法详解</title>
      <link href="/2021/11/02/kmp-suan-fa-xiang-jie/"/>
      <url>/2021/11/02/kmp-suan-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>位图bitmap</title>
      <link href="/2021/10/30/wei-tu-bitmap/"/>
      <url>/2021/10/30/wei-tu-bitmap/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/u012491646/article/details/103302704#:~:text=%E4%BD%8D%E5%9B%BE%E5%85%B6%E6%9C%AC%E8%B4%A8%E5%B0%B1%E6%98%AF%E5%88%A9%E7%94%A8hash%E5%87%BD%E6%95%B0%E6%98%A0%E5%B0%84%E7%9A%84%E4%B8%80%E7%A7%8D%20map%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9F%A5%E9%81%93java%E4%B8%AD%E7%9A%84hashmap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%B6%E5%BA%95%E5%B1%82%E4%BB%8D%E7%84%B6%E6%98%AF%E4%BB%A5hash%E5%87%BD%E6%95%B0%E6%98%A0%E5%B0%84%E7%9A%84%E6%95%B0%E5%AD%97%E4%BD%9C%E4%B8%BAkey%EF%BC%8C%E5%85%B6value%E6%98%AF%E4%BB%A5%20%E9%93%BE%E8%A1%A8,or%20%E6%95%B0%E7%BB%84%20%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%E7%9A%84%EF%BC%8C%E4%B8%80%E6%97%A6%E4%BD%BF%E7%94%A8%E4%BA%86hash%E5%87%BD%E6%95%B0%EF%BC%8C%E5%B0%B1%E6%84%8F%E5%91%B3%E7%9D%80%E5%AD%98%E5%9C%A8hash%E7%A2%B0%E6%92%9E%E7%9A%84%E5%8F%AF%E8%83%BD%E6%80%A7%E3%80%82.%20%E4%BD%8D%E5%9B%BE%E7%9A%84%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%85%B6%E6%9C%AC%E8%B4%A8%E5%B0%B1%E6%98%AF%E5%AF%B9hashMap%E7%9A%84%E4%B8%80%E7%A7%8D%E6%9B%B4%E5%8A%A0%E8%8A%82%E7%BA%A6%E5%86%85%E5%AD%98%E7%9A%84%E4%BC%98%E5%8C%96%EF%BC%8C%E5%85%B6%E7%9B%AE%E7%9A%84%E5%B0%B1%E6%98%AF%E6%A3%80%E6%B5%8B%E4%B8%80%E4%B8%AA%E5%80%BC%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E6%88%96%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%9C%A8%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%8C%E6%AF%94%E5%A6%82%E7%88%AC%E8%99%AB%E7%BB%93%E6%9E%84%E4%B8%AD%E7%9A%84url%E5%8E%BB%E9%87%8D%E5%8A%9F%E8%83%BD%EF%BC%8C%E7%BC%93%E5%AD%98%E5%AE%9E%E7%8E%B0%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%AD%89%E7%AD%89%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%AF%B4%E5%9C%A8%E5%AD%98%E5%9C%A8%E6%80%A7%E5%91%BD%E9%A2%98%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%B8%AD%E4%BC%9A%E7%BB%8F%E5%B8%B8%E7%A2%B0%E5%88%B0%E4%BD%8D%E5%9B%BE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%8C.">位图</a></p><p><a href="https://cloud.tencent.com/developer/article/1455213">位图redis</a></p><p><a href="https://www.cnblogs.com/zzm96/p/12822537.html">位图操作</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习笔记</title>
      <link href="/2021/10/30/redis-xue-xi-bi-ji/"/>
      <url>/2021/10/30/redis-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Nosql：泛指非关系型数据库，作为关系型数据库的补充<br>    作用：应对基于海量用户和海量数据前提下的数据处理问题<br>特征：</p><ul><li>可扩容</li><li>大数据量下高性能</li><li>灵活的数据模型</li><li>高可用</li></ul><p>常见的Nosal数据库</p><ul><li>redis</li><li>HBase</li><li>MongDB</li></ul><h2 id="Redis的数据类型"><a href="#Redis的数据类型" class="headerlink" title="Redis的数据类型"></a>Redis的数据类型</h2><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><h4 id="基本操作："><a href="#基本操作：" class="headerlink" title="基本操作："></a>基本操作：</h4><ol><li>添加数据：<code>set&nbsp;key&nbsp;value</code></li><li>获取数据：<code>get&nbsp;key</code></li><li>删除数据：<code>del&nbsp;key&nbsp;[key...]</code>     注：成功则返回1，失败返回0</li><li>获取多个数据：<code>mget&nbsp;key1&nbsp;key2...</code></li><li>添加多个数据：<code>mset&nbsp;key1&nbsp;value1&nbsp;key2&nbsp;value2...</code></li><li>追加信息到原始信息后部：<code>append&nbsp;key&nbsp;value</code></li><li>字符串长度：<code>strlen&nbsp;key</code></li></ol><h4 id="扩展操作"><a href="#扩展操作" class="headerlink" title="扩展操作"></a>扩展操作</h4><h5 id="类型一：数据库分表"><a href="#类型一：数据库分表" class="headerlink" title="类型一：数据库分表"></a>类型一：数据库分表</h5><p><img src="https://i.loli.net/2021/11/05/eWgncitCkrOGbLD.png" alt="redis-分表.png"></p><p>利用redis生成主键</p><p>解决方案：</p><ul><li>设置数值增加指定范围<ul><li><code>incr&nbsp;key</code></li><li><code>incrby key increment</code></li><li><code>incrbyfloat key&nbsp;increment&nbsp;</code></li></ul></li><li>设置数值减少指定范围<ul><li><code>decr&nbsp;key</code></li><li><code>decrby&nbsp;key&nbsp;increment</code></li></ul></li></ul><blockquote><p>说明:string在redis内部默认是字符串，当遇到增减类操作incr，decr时会转成数值型进行计算</p><p>redis的所有操作都是原子性的，采用单线程处理所有业务，命令是一个个执行的，无需考虑并发带来的数据影响。</p></blockquote><p>==redis用于控制数据库表主键id，为数据库表主键提供生成策略，保证数据库表主键的唯一性==</p><p>==此方案适用于所有数据库，支持数据库集群==</p><h5 id="类型二：数据时效性场景"><a href="#类型二：数据时效性场景" class="headerlink" title="类型二：数据时效性场景"></a>类型二：数据时效性场景</h5><p><img src="https://i.loli.net/2021/11/05/ySDmIZbcolC7fO9.png" alt="redis时效性.png"></p><p>解决方案：</p><ul><li>设置数据具有指定生命周期：<ul><li><code>setex&nbsp;key&nbsp;seconds&nbsp;value</code></li><li><code>pset&nbsp;key&nbsp;milliseconds&nbsp;value</code></li></ul></li></ul><p>==redis控制数据的生命周期，通过数据是否过期控制业务行为，适用于所有具有时效性的控制操作==</p><h5 id="类型三：数据怎么存放到redis中—key的命名规范"><a href="#类型三：数据怎么存放到redis中—key的命名规范" class="headerlink" title="类型三：数据怎么存放到redis中—key的命名规范"></a>类型三：数据怎么存放到redis中—key的命名规范</h5><img src="https://i.loli.net/2021/11/07/73dCQfSEb9eFhc8.png" alt="大V.png" style="zoom:50%;"><p><em>解决方案</em></p><ul><li>在redis中为大v设定信息，以用户主键，属性作为key，后台设定定时刷新</li></ul><pre class="line-numbers language-none"><code class="language-none">eg:  user:id:3506728370:fans    --&gt; 12210993 user:id:3509430234:blogs   --&gt; 6164 user:id:3523823428:focus   --&gt; 83<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在redis中以json格式存储大V用户信息，定时刷新（也可使用hash类型）</li></ul><pre class="line-numbers language-none"><code class="language-none">eg  user:id:4656115656  -&gt; {id:2324,name:春晚,fans:122,blogs:6164}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>==redis用于各种结构型高热度数据的访问加速==</p><p><strong>key的设置约定</strong></p><pre class="line-numbers language-none"><code class="language-none">表名：主键名：主键值：字段名eg1：   order：id：13133242：namenews：id：2344335：type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="string类型补充操作"><a href="#string类型补充操作" class="headerlink" title="string类型补充操作"></a>string类型补充操作</h4><ul><li>设置不存在的键值对,若key已经存在则不起作用：<code>setnx&nbsp;key&nbsp;value</code></li><li>设置多个已存在的键值对：<code>msetnx&nbsp;key&nbsp;value&nbsp;[key value...]</code></li><li>获取子字符串，截取字符串：<code>getrange&nbsp;key&nbsp;start&nbsp;end</code></li><li>为键值对设置新值并返回旧值：<code>getset&nbsp;key&nbsp;value</code></li></ul><h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h3><p>对象类数据存储如果具有频繁的更新需求就会显得笨重</p><img src="https://i.loli.net/2021/11/07/WdzpG3UtlsOy89I.png" alt="hash类型.png" style="zoom:50%;"><ul><li>新的存储需求：对一系列存储数据进行编组，方便管理，存储对象信息</li><li>需要存储结构：一个存储空间保存多个键值对</li></ul><p>==hash存储结构优化==</p><ul><li>如果field数量较少，存储结构优化为类数组结构</li><li>field较多时，存储结构使用hashMap结构</li></ul><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加/修改数据：<code>hset&nbsp;key&nbsp;field&nbsp;value</code></li><li>获取数据：<code>hget&nbsp;key&nbsp;field</code></li><li>获取全部数据：<code>hgetall&nbsp;key</code></li><li>删除数据：<code>hdel&nbsp;key&nbsp;field1&nbsp;[field2...]</code></li><li>添加/修改多个数据：<code>hmset&nbsp;key&nbsp;field1&nbsp;value&nbsp;[field2 value...]</code></li><li>获取多个数据：<code>hmget&nbsp;key&nbsp;field1&nbsp;[field2...]</code></li><li>获取哈希表中字段个数：<code>hlen&nbsp;key</code></li><li>获取哈希表中是否存在指定字段：<code>hexists&nbsp;key&nbsp;field</code></li></ul><h4 id="扩展操作-1"><a href="#扩展操作-1" class="headerlink" title="扩展操作"></a>扩展操作</h4><ul><li>获取哈希表中所有字段名或字段值 <code>hkeys&nbsp;key</code>, <code>hvals&nbsp;key</code></li><li>设置指定字段的数值数据增加指定范围：<code>hincrby&nbsp;key&nbsp;field&nbsp;increment</code>, <code>hincrbyfloat&nbsp;key&nbsp;field&nbsp;incrment</code></li></ul><h5 id="应用场景一"><a href="#应用场景一" class="headerlink" title="应用场景一"></a>应用场景一</h5><p><img src="https://i.loli.net/2021/11/08/7NOP5Xvhdr1EKBI.png" alt="hash-cart.png"></p><p>解决方案：</p><ul><li>以客户id作为key，每位客户创建一个hash存储结构存储对象</li><li>以商品编号作为field，购买数量作为value</li><li>添加商品：追加全新的field和value</li><li>浏览：遍历hash</li><li>更改数量：自增/自减，设置value</li><li>删除商品：删除field</li><li>清空：删除key</li></ul><p>==思考：当前仅仅将数据存到了redis，并没有起到加速作业，商品信息还需二次查询数据库==</p><p>改进：</p><ul><li>每条购物车中商品记录保存成两条field</li><li>field1专用于保存购买数量 <ul><li>命名格式：商品id：nums</li><li>保存数据：数值</li></ul></li><li>field2用于保存购物车显示的信息，包含文字描述，图片地址，商家信息等<ul><li>命名格式：商品id：info</li><li>保存数据：json</li></ul></li></ul><pre class="line-numbers language-none"><code class="language-none">hmset 001 g01:nums 100 g01:info {...}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但不同用户存在info大量信息重复，此时将==商品信息独立成一个hash==</p><p>为了防止已存在的商品信息重复添加，采用<code>hsetnx&nbsp;key&nbsp;field&nbsp;value</code></p><h5 id="应用场景二"><a href="#应用场景二" class="headerlink" title="应用场景二"></a>应用场景二</h5><p><img src="https://i.loli.net/2021/11/08/XysfURZd7wlSAKO.png" alt="hash-phone.png"></p><p>解决方案：</p><ul><li>以商家id作为key</li><li>将参与抢购的商品作为field</li><li>参与抢购的商品数量作为value</li></ul><p>==哈希类型可用于抢购，限购，限量发放优惠券等数据存储设计==</p><h3 id="lsit类型"><a href="#lsit类型" class="headerlink" title="lsit类型"></a>lsit类型</h3><ul><li>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分</li><li>需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序</li><li>list类型：保存多个数据，底层使用双向链表存储结构</li></ul><h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加/修改数据：<code>lpush&nbsp;key&nbsp;value1&nbsp;[value2...]</code><ul><li><code>rpush&nbsp;key&nbsp;value1&nbsp;[value2]</code></li></ul></li><li>获取数据：<code>lrange&nbsp;key&nbsp;start&nbsp;stop</code><ul><li><code>lindex&nbsp;key&nbsp;index</code></li><li><code>llen&nbsp;key</code></li></ul></li><li>获取并移除数据：<code>lpop&nbsp;key</code>，<code>rpop&nbsp;key</code></li><li>插入一个值到列表中，这个值在pivot之前或之后，，在列表key中，当pivot这个值不存在时，执行改名了无效，当key不存在时，key被看做空列表，该命令无效；该命令返回插入后列表的长度，如果pivot不存在，返回-1，key不存在或是空列表，返回0：<ul><li><code>linsert&nbsp;key&nbsp;AFTER|BEFORE&nbsp;pivot&nbsp;value</code></li></ul></li><li>修改列表指定元素的值：<code>lset&nbsp;key&nbsp;index&nbsp;value</code></li></ul><h4 id="扩展操作-2"><a href="#扩展操作-2" class="headerlink" title="扩展操作"></a>扩展操作</h4><ul><li>在固定时间内获取并移除数据，将按参数key出现的先后顺序依次检查各个列表，弹出第一个非空列表头元素。<ul><li><code>BLPOP&nbsp;key&nbsp;[key...]&nbsp;timeout</code></li><li><code>BRPOP&nbsp;key&nbsp;[key...]&nbsp;timeout</code></li></ul></li></ul><h5 id="业务场景一：朋友圈点赞"><a href="#业务场景一：朋友圈点赞" class="headerlink" title="业务场景一：朋友圈点赞"></a>业务场景一：朋友圈点赞</h5><img src="https://i.loli.net/2021/11/09/CpNmMTxDsIGPqow.png" alt="list1.png" style="zoom:50%;"><p>==解决方案==</p><ul><li>移除指定个数的元素，删除列表中与value相等的元素，当count等于0时，表示删除列表key中所有与value相等的元素；当count大于0时，删除count个；当count小于0时，删除count绝对值个<ul><li><code>lrem&nbsp;key&nbsp;count&nbsp;value</code></li></ul></li></ul><h5 id="场景二：实现安全列表"><a href="#场景二：实现安全列表" class="headerlink" title="场景二：实现安全列表"></a>场景二：实现安全列表</h5><blockquote><p>list用于在不同程序之间有序交换消息，一个客户端通过LPUSH命令将一条消息放入队/列，然后开启另一客户端等待数据，这个队列是不安全的，当一个客户端出现错误时，会导致其他客户端崩溃，数据丢失，此时可以用下面命令解决</p></blockquote><ul><li>为了保证未处理完的消息不丢失，使用RPOPLPUSH解决，返回一条消息后同时将这条消息保存到另一个列表<ul><li><code>RPOPLPUSH&nbsp;source&nbsp;destination</code> </li><li><code>BRPOPLPUSH&nbsp;source&nbsp;destination&nbsp;timeout</code></li></ul></li></ul><blockquote><p>使用以上命令也可以实现循环列表，将source和destination设为一样</p></blockquote><h5 id="list类型注意事项"><a href="#list类型注意事项" class="headerlink" title="list类型注意事项"></a>list类型注意事项</h5><ul><li>list保存的数据都是string类型</li><li>list具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈</li></ul><h5 id="场景三：用户的关注列表顺序展示等"><a href="#场景三：用户的关注列表顺序展示等" class="headerlink" title="场景三：用户的关注列表顺序展示等"></a>场景三：用户的关注列表顺序展示等</h5><p><img src="https://i.loli.net/2021/11/09/EZAxS37aeVWpjhb.png" alt="list2.png"></p><h3 id="set（集合）类型"><a href="#set（集合）类型" class="headerlink" title="set（集合）类型"></a>set（集合）类型</h3><ul><li>新的存储需求，存储大量数据，在查询方面听过更高的效率</li><li>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</li></ul><img src="https://i.loli.net/2021/11/09/5becsYELkXnRW4r.png" alt="set.png" style="zoom:50%;"><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><ul><li>添加数据：<code>sadd&nbsp;key&nbsp;member1&nbsp;[member2...]</code></li><li>获取全部数据：<code>smembers&nbsp;key</code></li><li>删除数据：<code>srem&nbsp;key&nbsp;member1&nbsp;[member2...]</code></li><li>获取集合数据总量：<code>scard&nbsp;key</code></li><li>判断集合中是否包含指定数据：<code>sismember&nbsp;key&nbsp;member</code></li></ul><h4 id="扩展操作-3"><a href="#扩展操作-3" class="headerlink" title="扩展操作"></a>扩展操作</h4><h5 id="场景一：set主要就是集合操作"><a href="#场景一：set主要就是集合操作" class="headerlink" title="场景一：set主要就是集合操作"></a>场景一：set主要就是集合操作</h5><p><img src="https://i.loli.net/2021/11/09/5qokrUCOscd13Jt.png" alt="set集合.png"></p><p>==解决方案==</p><ul><li>随机获取集合中指定数量的数据，当count为正数，返回数组，且各个元素不同，当为负数时，返回绝对值个元素数组，且元素可能重复：<ul><li><code>srandmember&nbsp;key&nbsp;[count]</code></li></ul></li><li>随机获取集合某个数据，并将该数据移出集合：<code>spop&nbsp;key&nbsp;[count]</code></li></ul><p>==redis用于随机推荐信息，例如热点歌单，热点新闻推荐==</p><h5 id="场景②：各个用户之间的好友共享，即朋友集合之间的操作"><a href="#场景②：各个用户之间的好友共享，即朋友集合之间的操作" class="headerlink" title="场景②：各个用户之间的好友共享，即朋友集合之间的操作"></a>场景②：各个用户之间的好友共享，即朋友集合之间的操作</h5><img src="https://i.loli.net/2021/11/09/1knSx3KDmsutdFE.png" alt="set.png" style="zoom:50%;"><img src="https://i.loli.net/2021/11/09/LUuk7A9shZS8DdC.png" alt="set.png" style="zoom:50%;"><p>==解决方案==</p><ul><li>求两个集合的交，并，差集<ul><li><code>sinter&nbsp;key1&nbsp;[key2...]</code></li><li><code>sunion&nbsp;key1&nbsp;[key2...]</code></li><li><code>sdiff&nbsp;key1&nbsp;[key2...]</code></li></ul></li><li>求两个集合的交，并，差集并存储到指定集合<ul><li><code>sinterstore&nbsp;destination&nbsp;key1&nbsp;[key2...]</code></li><li><code>sunionstore&nbsp;destination&nbsp;key1&nbsp;[key2...]</code></li><li><code>sdiffstore&nbsp;destination&nbsp;key1&nbsp;[key2...]</code></li></ul></li><li>将指定数据从原始集合移动到目标集合中<ul><li><code>smove&nbsp;source&nbsp;destination&nbsp;member</code></li></ul></li></ul><h5 id="场景三：权限校验"><a href="#场景三：权限校验" class="headerlink" title="场景三：权限校验"></a>场景三：权限校验</h5><img src="https://i.loli.net/2021/11/09/AU2Xq7kxj89NR1m.png" alt="set权限校验1.png" style="zoom:50%;"><p>==解决方案==</p><ul><li>依赖set集合数据不重复的特征，实现数据过滤</li><li>根据用户id获取用户所有角色</li><li>获取各个角色的操作权限集合并合并，得到用户的操作权限</li></ul><img src="https://i.loli.net/2021/11/09/JvFWo37sGk1lxE5.png" alt="set权限校验实例.png" style="zoom:80%;"><blockquote><p>校验工作：redis是提供基础数据还是校验结果？</p><p>在开发中最好是提供基础数据，不要把校验业务融入到redis中，而在业务层做</p></blockquote><h4 id="set注意事项"><a href="#set注意事项" class="headerlink" title="set注意事项"></a>set注意事项</h4><ul><li>set类型不允许数据重复</li><li>set虽然与hash存储结构相同，但无法启用hash中储值的空间</li></ul><h3 id="sorted-set类型"><a href="#sorted-set类型" class="headerlink" title="sorted_set类型"></a>sorted_set类型</h3><ul><li>新的存储需求：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序</li><li>需要的存储结构：即能排序，又能存储大量数据</li><li>sorted_set类型：在set的存储结构基础上添加可排序字段</li></ul><h4 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li><p>添加数据：<code>zadd&nbsp;key&nbsp;score1&nbsp;member1&nbsp;[score2 member2...]</code></p></li><li><p>获取全部数据(默认从小到大)：<code>zrange&nbsp;key&nbsp;start&nbsp;stop&nbsp;[withscores]</code></p><ul><li>逆序：<code>zrevrange&nbsp;key&nbsp;start&nbsp;stop&nbsp;[withscores]</code></li></ul></li><li><p>删除数据：<code>zrem&nbsp;key&nbsp;member&nbsp;[member2...]</code></p></li><li><p>按条件获取数据：</p><ul><li><code>zrangebyscore&nbsp;key&nbsp;min&nbsp;max&nbsp;[withscores]&nbsp;[limit]</code></li><li><code>zrevrangebyscore&nbsp;key&nbsp;max&nbsp;min&nbsp;[withscores]&nbsp;[limit]</code></li></ul></li><li><p>按条件删除数据：</p><ul><li><code>zremrangebyrank&nbsp;key&nbsp;start&nbsp;stop</code></li><li><code>zremrangebyscore key min max</code></li></ul></li></ul><blockquote><p>注意：</p><ul><li>min与max用于限定搜索查询的条件</li><li>start与stop限定查询范围，作用于索引</li><li>offset与count用于限定查询范围，作用域查询结果，表示分页</li></ul></blockquote><ul><li><p>获取集合数据总量：</p><ul><li><code>zcard&nbsp;key</code></li><li><code>zcount&nbsp;key&nbsp;min&nbsp;max</code></li></ul></li><li><p>集合的交，并操作：</p><ul><li>```<br>zinterstore destination numkeys key [key…] [weights weight [weight…]] [aggregate sum|min|max]<pre class="line-numbers language-none"><code class="language-none">  `zinterstore`默认情况下结果集中某个元素score是所有给定有序集合中该元素score的和。  使用weights选项来为每个给定的有序集合分别制定一个乘数，每个给定的有序集合所有元素的score在传递给聚合函数前都乘以这个数，不指定时默认为1  使用aggregate指定计算结果集的聚合方式  - sum：score求和  - min：所有有序集合中某个元素最小值作为结果集中该元素的score  - max：所有有序集合中某个元素最大值作为结果集中该元素的score- ```  zunionstore destination numkeys key [key...] [weights weight [weight...]] [aggregate sum|min|max]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="业务场景一：对网站热度排序，对直播间热度排序等"><a href="#业务场景一：对网站热度排序，对直播间热度排序等" class="headerlink" title="业务场景一：对网站热度排序，对直播间热度排序等"></a>业务场景一：对网站热度排序，对直播间热度排序等</h4><img src="https://i.loli.net/2021/11/11/U2muAVIf4c1lhZC.png" alt="zsort-1.png" style="zoom:67%;"><p>==解决方案==</p><ul><li>获取数据对应的排名：<ul><li><code>zrank&nbsp;key&nbsp;member</code></li><li><code>zrevrank&nbsp;key&nbsp;member</code></li></ul></li><li>获取或修改score值：<ul><li><code>zscore&nbsp;key&nbsp;member</code></li><li><code>zincrby&nbsp;key&nbsp;increment&nbsp;member</code></li></ul></li></ul><h4 id="场景二：时效性管理"><a href="#场景二：时效性管理" class="headerlink" title="场景二：时效性管理"></a>场景二：时效性管理</h4><p><img src="https://i.loli.net/2021/11/11/HmDjwWazZtXSgrh.png" alt="zsetex.png"></p><p>==解决方案==</p><p><img src="https://i.loli.net/2021/11/11/NsSQXIVbgPtB8xy.png" alt="zsetex2.png"></p><h4 id="场景三：带有权值的任务队列"><a href="#场景三：带有权值的任务队列" class="headerlink" title="场景三：带有权值的任务队列"></a>场景三：带有权值的任务队列</h4><p><img src="https://i.loli.net/2021/11/11/x1urKZRMXbSQNPk.png" alt="zsetweight.png"></p><p>==解决方案==</p><ul><li>对于带有权重的任务，优先处理权重高的任务，采用score记录权值</li></ul><h4 id="sorted-set注意事项"><a href="#sorted-set注意事项" class="headerlink" title="sorted_set注意事项"></a>sorted_set注意事项</h4><ul><li>score保存的是double类型</li><li>zsorted_set底层还是基于set结构，数据不能重复，如果重复添加数据，score会被反复覆盖</li></ul><h3 id="综合案例一"><a href="#综合案例一" class="headerlink" title="综合案例一"></a>综合案例一</h3><p><img src="https://i.loli.net/2021/11/11/GIB4tLYougXCTDO.png" alt="overall_case1.png"></p><p>==初级解决方案==</p><p><img src="https://i.loli.net/2021/11/11/GodHrsRKm16bgQM.png" alt="case1_solu1.png"></p><p>==改良解决方案==</p><p><img src="https://i.loli.net/2021/11/11/5eW7ATHauKcIpdn.png" alt="case1_solu2.png"></p><h3 id="综合案例二"><a href="#综合案例二" class="headerlink" title="综合案例二"></a>综合案例二</h3><p><img src="https://i.loli.net/2021/11/11/jYnKfLrBQH7kOeh.png" alt="case2.png"></p><p>==解决方案==</p><p><img src="https://i.loli.net/2021/11/11/cukYF5Gh1IvTHeK.png" alt="case2_solu1.png"></p><p><img src="https://i.loli.net/2021/11/11/lzMjuN9RvXHIOWg.png"></p><h3 id="linux中启动redis"><a href="#linux中启动redis" class="headerlink" title="linux中启动redis"></a>linux中启动redis</h3><ul><li><p>进入src指定端口启动：<code>./redis-server&nbsp;--port&nbsp;6380</code></p><ul><li>连接redis：<code>./redis-cli&nbsp;-h&nbsp;127.0.0.1&nbsp;-p&nbsp;6380</code></li></ul></li><li><p>使用配置文件启动：进入创建redis-6379.conf，输入：</p><ul><li><pre><code>port 6379daemonize yes//后台进程方式启动logfile “6379.log”//日志文件名dir /root/redis/redis-stable/data</code></pre><p>然后输入<code>./redis-server&nbsp;redis-6379.conf</code>启动redis。</p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>八大排序算法解析附代码</title>
      <link href="/2021/10/28/ba-da-pai-xu-suan-fa-jie-xi-fu-dai-ma/"/>
      <url>/2021/10/28/ba-da-pai-xu-suan-fa-jie-xi-fu-dai-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="1-基本思想"><a href="#1-基本思想" class="headerlink" title="1.基本思想"></a>1.基本思想</h2><p>在插入第<code>i</code>个记录时，<code>R1,R2,R3...</code>,已经排好序，这时将<code>Ri</code>，的关键字<code>ki</code>，依次与之前排好序的关键字比较，找到合适的位置插入即可，插入位置及其后的记录依次向后移动。</p><h2 id="2-性能"><a href="#2-性能" class="headerlink" title="2.性能"></a>2.性能</h2><ul><li>平均时间复杂度<code>O(n^2)</code></li><li>最差时间复杂度<code>O(n^2)</code></li><li>空间复杂度<code>O(1)</code></li><li>稳定性：稳定</li></ul><p>如果插入排序的目标是把n个元素的序列升序排列，采用插入排序在最好情况和最差情况如下</p><ul><li>最好情况：序列已经是升序，这种情况下，需要进行的比较操作为n-1次</li><li>最坏情况：序列是降序，需要比较<code>n(n-1)/2</code></li></ul><h2 id="代码实现-数组"><a href="#代码实现-数组" class="headerlink" title="代码实现-数组"></a>代码实现-数组</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> len<span class="token operator">=</span>a<span class="token punctuation">.</span>length<span class="token punctuation">,</span>insertNum<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        insertNum<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>insertNum<span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向后移</span>            <span class="token operator">--</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>insertNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p><a href="https://leetcode-cn.com/problems/insertion-sort-list/">147。对链表进行插入排序</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span><span class="token class-name">ListNode</span> next<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token operator">=</span>val<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">insertionSortList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> lastSorted<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>lastSorted<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lastSorted<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                lastSorted<span class="token operator">=</span>lastSorted<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                    pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                lastSorted<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cur<span class="token operator">=</span>lastSorted<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-改进思路"><a href="#4-改进思路" class="headerlink" title="4.改进思路"></a>4.改进思路</h2><p><a href="https://zhuanlan.zhihu.com/p/122293204">改进</a></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="1-基本思想-1"><a href="#1-基本思想-1" class="headerlink" title="1.基本思想"></a>1.基本思想</h2><p>通过一趟排序将待排序的记录被一个基准关键字划分为独立的两部分，关键字前半区均小于这个关键字，后半区均大于这个关键字，然后再分别对这两部分继续排序。其使用分治法。</p><p>实现逻辑：</p><ul><li>附设两个位置指示变量，初始分别指向第一个记录和最后一个记录</li><li>从序列中找出一个基准元素，通常是第一个，首先从<code>j</code>位置向前搜索，找到第一个关键字小于<code>pivot</code>的记录，将该记录移至<code>i</code>所指的位置，然后从<code>i</code>向后搜索，找到小于<code>pivot</code>的记录将其移到<code>j</code>所指的位置，重复此过程直到<code>i==j</code>。</li><li>递归搜寻前半区和后半区</li></ul><h2 id="2-性能-1"><a href="#2-性能-1" class="headerlink" title="2.性能"></a>2.性能</h2><p>快速排序的性能取决于递归的深度，可以用递归树描述递归算法执行情况。<code>[50,10,90,31,70,40,80,60,20]</code>，的递归树：</p><p><img src="https://image.51cto.com/files/uploadimg/20110826/222536597.jpg"></p><p>在最优情况下，Partiton每次都划分很均匀，那递归树的深度就是<code>logn+1</code>，故最优情况下快排的时间复杂度是<code>O(nlogn)</code></p><p>在最坏情况下，即待排序的序列正好是逆序或正序，那每次划分只得到一个比上一次划分少一个记录的子序列，另一个为空，如果递归树画出来就是一颗斜树，需要执行<code>n-1</code>次调用，故时间复杂度为<code>O(n</code></p><p><code>^2)</code></p><p>平均情况时为<code>O(nlogn)</code>。</p><h2 id="代码实现-数组-1"><a href="#代码实现-数组-1" class="headerlink" title="代码实现-数组"></a>代码实现-数组</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pivot<span class="token operator">=</span>data<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token operator">=</span>low<span class="token punctuation">,</span>j<span class="token operator">=</span>high<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;=</span>pivot<span class="token punctuation">)</span> <span class="token operator">--</span>j<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>pivot<span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>        data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pivot<span class="token punctuation">;</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>low<span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>low<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">partition</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> smallHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> largeHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> small<span class="token operator">=</span>smallHead<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> large<span class="token operator">=</span>largeHead<span class="token punctuation">;</span>        <span class="token keyword">int</span> pivot<span class="token operator">=</span>head<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>pivot<span class="token punctuation">)</span><span class="token punctuation">{</span>                small<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                small<span class="token operator">=</span>small<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                large<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                large<span class="token operator">=</span>large<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        large<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        small<span class="token punctuation">.</span>next<span class="token operator">=</span>largeHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> right<span class="token operator">=</span><span class="token function">quickSort</span><span class="token punctuation">(</span>largeHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        largeHead<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> left<span class="token operator">=</span><span class="token function">quickSort</span><span class="token punctuation">(</span>smallHead<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>left<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cur<span class="token punctuation">.</span>next<span class="token operator">=</span>right<span class="token punctuation">;</span>        <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode关于单调栈题解</title>
      <link href="/2021/10/28/leetcode-guan-yu-dan-diao-zhan-ti-jie/"/>
      <url>/2021/10/28/leetcode-guan-yu-dan-diao-zhan-ti-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="496-下一个更大元素I"><a href="#496-下一个更大元素I" class="headerlink" title="496.下一个更大元素I"></a><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496.下一个更大元素I</a></h1><h2 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h2><p>之前已经通过剖析单调栈的特性总结出了对于单调栈找出Next Greater Number高效率的模板，但此题的问题做了变化。此题有两个数组，第一个数组是第二个数组的子集，且两个数组相同元素在各自数组的索引不同，故在应用单调栈模板时得先解决对应元素在答案数组中的索引问题。</p><p>很朴素的思路是：</p><p>遍历<code>nums2</code>数组的每个元素，同时对于每个元素找其在<code>nums1</code>中的位置，若存在则返回其在<code>nums1</code>中的索引，进而利用这个索引存入答案数组的对应位置；若不存在，则略过此元素，为了保证正确性，还是要每个元素入栈。==很明显这个思路效率不高，因为每找一个元素都要遍历nums1，时间复杂度为O（mn）==代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n1<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n2<span class="token operator">=</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>time<span class="token operator">=</span>n1<span class="token punctuation">;</span>time<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token function">isExists</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">--</span>time<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">isExists</span><span class="token punctuation">(</span><span class="token keyword">int</span> goal<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>goal<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/28/u7iXQOUz8wT6lgv.png" alt="下一个更大元素I.png"></p><p>果然！！！</p><h2 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h2><p>基于以上问题，导致上述思路效率不高的主要问题是重复遍历，那我们想能不能不要每次都遍历<code>nums1</code>? 连接两个数组的桥梁是相等元素，一种呼之欲出的想法是我们把nums2中每个元素对应的Next Greater Number存起来，然后只遍历一次num1，直接查表不就行了，故我们借助哈希表来完成我们的思路。</p><ul><li>遍历nums2，将每个元素的Next Greater Number 存入哈希表</li><li>遍历nums1，查表得出结果，存入ans数组</li></ul><p>以空间换时间，立即将<code>O(mn)</code>的复杂度降到了<code>O(m+n)</code>，去除冗余操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n2<span class="token operator">=</span>nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> n1<span class="token operator">=</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n1<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="503-下一个更大的元素II"><a href="#503-下一个更大的元素II" class="headerlink" title="503.下一个更大的元素II"></a><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503.下一个更大的元素II</a></h1><p>循环数组，我们在单调栈剖析篇已经详细详解了循环数组该如何处理，故此题应该来说是很简单的。思路就赘述了。</p><h2 id="思路一：-1"><a href="#思路一：-1" class="headerlink" title="思路一："></a>思路一：</h2><p>我们可以使用单调栈解决本题。单调栈中保存的是下标，从栈底到栈顶的下标在数组 nums 中对应的值是单调不升的。</p><p>每次我们移动到数组中的一个新的位置 ii，我们就将当前单调栈中所有对应值小于 nums[i] 的下标弹出单调栈，这些值的下一个更大元素即为 nums[i]（证明很简单：如果有更靠前的更大元素，那么这些位置将被提前弹出栈）。随后我们将位置 ii 入栈。</p><p>但是注意到只遍历一次序列是不够的，例如序列 [2,3,1][2,3,1]，最后单调栈中将剩余 [3,1][3,1]，其中元素 [1][1] 的下一个更大元素还是不知道的。</p><p>一个朴素的思想是，我们可以把这个循环数组「拉直」，即复制该序列的前 n-1n−1 个元素拼接在原序列的后面。这样我们就可以将这个新序列当作普通序列，用上文的方法来处理。</p><p>而在本题中，我们不需要显性地将该循环数组「拉直」，而只需要在处理时对下标取模即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//把等于的也pop，留下的都是严格大于的，此为单增栈</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment">//s里存的是值</span>            ans<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下四道题采用相同的思想</p><h1 id="316-去除重复字母"><a href="#316-去除重复字母" class="headerlink" title="316.去除重复字母"></a><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">316.去除重复字母</a></h1><h2 id="思路一：贪心-单调栈"><a href="#思路一：贪心-单调栈" class="headerlink" title="思路一：贪心+单调栈"></a>思路一：贪心+单调栈</h2><p>这题与402.移除k位数字类似，贪心策略一样，只不过这题没有一个全局的删除次数k，而是删除重复字母，即对于每个字符c都有一个k值，即出现的次数</p><p>对于字符串建立一个字典，保存每个字母出现的次数，除此之外还需要额外的数组，判断当前字母是否已经进栈了。</p><ul><li>从左向右遍历字符串，对于每一个字符，其未被访问过，则开始判断是否满足单调栈，若不满足单调栈，则判断当前字符在剩余字符串中出现的次数是否大于0，即是否还有该字符，若大于0，则循环出栈顶，同时对于每个出栈的元素，其要重新被标记为未访问</li><li>每次循环后字典对应字符出现次数减1</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeDuplicateLetters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> vis<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//用于记录是否访问过</span>        <span class="token comment">//如果不借助额外空间判断是否重复，则需在每次循环中判断栈中所有元素，显然效率不高</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录每个字母出现的次数</span>        <span class="token keyword">int</span> size<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//开始维护单调递减栈，从栈底到栈顶单增</span>        <span class="token class-name">StringBuilder</span> sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>ch<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> n<span class="token operator">=</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        vis<span class="token punctuation">[</span>sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                        sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                vis<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//这个数字一定要在括号外面写，因为这个数字表示的是后续的字符串每个字符出现的次数</span>            num<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="402-移掉k位数字"><a href="#402-移掉k位数字" class="headerlink" title="402.移掉k位数字"></a><a href="https://leetcode-cn.com/problems/remove-k-digits/">402.移掉k位数字</a></h1><h2 id="思路一：贪心-单调栈-1"><a href="#思路一：贪心-单调栈-1" class="headerlink" title="思路一：贪心+单调栈"></a>思路一：贪心+单调栈</h2><p>对于两个相同长度的数字序列，最左边的数字决定了这两个数字的大小，故要使剩下的数字最小，需要保证靠前的数字尽可能小。给定一个长度为n的数字序列<code>[D0D1D2...]</code>，从左往右找到第一个位置 i 使得<code>Di-1&gt;Di</code>,并删去Di-1，如果不存在，说明整个数字序列单调递增，删去最后的数字即可。</p><p>基于此很容易想到单调栈。</p><p>对于每个数字，如果该数字小于栈顶元素，就不断弹出栈顶元素，直到</p><ul><li>栈为空</li><li>新的栈顶元素小于当前数字</li><li>已经删除了k位数字</li></ul><p>上述步骤处理完后我们要做一些额外的处理</p><ul><li>如果我们删除的数字数目m&lt;k,则此时要从数字序列尾部继续删除剩下的数目</li><li>如果最终数字序列存在前导0，应删除</li><li>最终的数字序列为空，则应返回0</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">removeKdigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//利用StringBuilder模拟栈的行为</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>num<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//如果原始字符数字本身就是单增的，再循环过程中一个也没移除，则从最后一位开始移除</span>        <span class="token comment">//能保证整体最小</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                k<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ans<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="456-132-模式"><a href="#456-132-模式" class="headerlink" title="456. 132 模式"></a><a href="https://leetcode-cn.com/problems/132-pattern/">456. 132 模式</a></h1><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p>分析132的特性，在确定一个数之后，如何快速的找到另外两个数</p><p>枚举i ：由于i是132结构中最小的数，那么相当于要在i后找一个对数（j，k），使得（j，k）都满足比i大，同时 j&gt;k，由于遍历是单向的，问题可以转化成先找k，找到之后判断[i,k]之间存在比k大的数即可</p><p>过程：</p><p>我们从后向前处理，维护一个单调递减的栈，同时使用k记录所有出栈元素的最大值，当我们遍历到i，只要满足发现<code>nums[i]&lt;k</code>，说明我们找到了132模式。这个k很关键，初始时我们将k初始化我<code>Integer.MIN_VALUE</code>，因此若要满足<code>nums[i]&lt;k</code>是不可能的，只有一种情况是，只要k值改变了，就代表出现了一个比栈顶元素大的元素，此时开始出栈；这之后，我们就只需要找<code>i</code>，因为满足条件的<code>j,k</code>已经找到了，即只要k有值，那<code>[i,k]</code>之间一定存在一个元素比k大，i又比k小，故满足132模式</p><p>举个例子：<code>[3,1,4,2]</code></p><ul><li>枚举到2，栈内元素<code>[2]</code>,<code>k=MIN_VALUE</code></li><li>枚举到4，不能进栈，2出栈更新k，4入栈，栈内元素<code>[4]</code>,k=2</li><li>枚举到 1：满足 nums[i] &lt; k，说明对于 i 而言，后面有一个比其大的元素（满足 i &lt; k 的条件），同时这个 k 的来源又是因为维护「单调递减」而弹出导致被更新的（满足 i 和 k 之间，有比 k 要大的元素）。因此我们找到了满足 132 结构的组合。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">find132pattern</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                k<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//nums[i]比栈内k之前的所有元素都大</span>            <span class="token punctuation">}</span>            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="769-最多能完成排序的块"><a href="#769-最多能完成排序的块" class="headerlink" title="769.最多能完成排序的块"></a><a href="https://leetcode-cn.com/problems/max-chunks-to-make-sorted/">769.最多能完成排序的块</a></h1><h2 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h2><p>个人感觉leetcode可能测试用例不够完善，评论区那些用暴力解法的都能过，但其实对于一些特殊数据例如<code>[2,0,3,4,5]</code>，暴力解法的答案是<code>0</code>，错误的，这题最标准的做法还应该是单调栈。</p><p>基于单调栈的特性我们来分析一下怎么应用到这题上。这题是要找数组所有的分块，很明显，对于某个索引<code>i</code>,他必须大于前面的分段的最大值，才能被重新划分到一个新段里。否则，这个索引<code>i</code>就必须划分到之前的段中，不一定是前一个段，可能这个<code>i</code>比前面所有的段的最大值都小，就代表前面的分段都不正确，要把这个<code>i</code>加进去后重新分段，那怎么体现分段的数目呢?—-栈内元素的个数~，为什么？</p><p>因为我们查找的规则是维护了一个单增栈，即碰到比当前栈顶元素大的元素，就入栈，表示找到一个新分段，但若碰到比栈顶元素小的元素，代表之前的分段不正确，要出栈，把当前元素加入到属于他那个段中，出栈的标准就是栈顶元素大于当前元素，直到碰到一个栈顶元素小于当前元素，此时代表栈内剩余元素的分段是正确的，而出栈的那些元素分段都不正确，要将当前元素加进来后分为整体一段，故此时需要把这整体一段的最大值入栈，代表当前段，至于为什么是最大值，看上面。</p><p>总的来说就是：</p><ul><li>如果当前元素大于栈顶元素说明找到了一个新的分段</li><li>如果当前元素小于栈顶元素，保存栈顶元素，然后将大于当前元素的所有元素出栈后，将之前保存的栈顶元素压入栈中，代表了一个分段。</li><li>最后返回栈中元素的个数即可，即每一段的最大值代表了当前段</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxChunksToSorted</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> len<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//将第一个元素入栈代表此时将第一个元素分为一段</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>s<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> max<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            s<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列详解</title>
      <link href="/2021/10/27/dan-diao-dui-lie-xiang-jie/"/>
      <url>/2021/10/27/dan-diao-dui-lie-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java集合ArrayList,LinkedList,Queue,Deque,ArrayDeque常用API</title>
      <link href="/2021/10/27/java-ji-he-arraylist-linkedlist-queue-deque-arraydeque-chang-yong-api/"/>
      <url>/2021/10/27/java-ji-he-arraylist-linkedlist-queue-deque-arraydeque-chang-yong-api/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java判断字符串是否为整数</title>
      <link href="/2021/10/27/java-pan-duan-zi-fu-chuan-shi-fou-wei-zheng-shu/"/>
      <url>/2021/10/27/java-pan-duan-zi-fu-chuan-shi-fou-wei-zheng-shu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/BlueLoveyyt/article/details/45424167">判断整数</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode题解:2021/10/26</title>
      <link href="/2021/10/26/leetcode-ti-jie-2021-10-26/"/>
      <url>/2021/10/26/leetcode-ti-jie-2021-10-26/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串解码"><a href="#字符串解码" class="headerlink" title="字符串解码"></a><a href="https://leetcode-cn.com/problems/decode-string/">字符串解码</a></h1><p>这种类型的题很明显不是递归就是栈，但这题有许多细节需要考虑，我在做这题的时候开始思路确实很明确，但由于一些细节问题忽略，导致多花了一些时间。</p><h2 id="解法一-：单栈解法"><a href="#解法一-：单栈解法" class="headerlink" title="解法一 ：单栈解法"></a>解法一 ：单栈解法</h2><p>我们把字母，数字，左括号，右括号，看成是独立的TOKEN，用一个辅助栈来维护，做法如下：</p><ul><li>当前字符为数字则取连续数位（这个坑一定要主要）组成一个字符串后进栈</li><li>当前字符为字母或左括号则直接进栈</li><li>当前字符为右括号，则一直出栈，知道遇到左括号，且出左括号后，此时栈顶一定为数字，只需倍长得到的括号内的字符序列。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ptr<span class="token punctuation">;</span><span class="token comment">//全局字符指针，设为全局是因为获取数字是在单独的一个函数中获取的</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> last<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ptr<span class="token operator">&lt;</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">String</span> digits<span class="token operator">=</span><span class="token function">getDigits</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'['</span><span class="token operator">||</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetter</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">StringBuilder</span> sub<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> ch<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sub<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">String</span> tmp<span class="token operator">=</span>sub<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> time<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>time<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sub<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ptr<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>ptr<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/2sWjGnmd7Stli6r.png" alt="单栈.png"></p><h2 id="解法二：双栈解法"><a href="#解法二：双栈解法" class="headerlink" title="解法二：双栈解法"></a>解法二：双栈解法</h2><p>一个栈用来保存数字，一个栈用来保存字符串，保存字符串的栈的栈顶始终是左括号左边的字符串，括号内的字符串用一个单独的String变量保存。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> multi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//保存数位的变量</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack_int<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stack_str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                multi<span class="token operator">=</span>multi<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">chatAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//把之前的字符串入栈</span>                stack_str<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>                <span class="token comment">//数字入栈</span>                stack_int<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>multi<span class="token punctuation">)</span><span class="token punctuation">;</span>                multi<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//出数字栈</span>                <span class="token keyword">int</span> repTime<span class="token operator">=</span>stack_int<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>repTime<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    res<span class="token operator">+=</span>res<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                res<span class="token operator">=</span>stack_str<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+=</span>res<span class="token punctuation">;</span><span class="token comment">//res保存单独是当前的完整字符串，栈顶保存的是括号左边的</span>                <span class="token comment">//之后若还是字母，就会直接加到res后，若是左括号，就会被压入字符栈，作为上一层的运算</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token operator">+=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/bTfc68yPNm7i5xj.png" alt="双栈.png"></p><h2 id="解法三：递归"><a href="#解法三：递归" class="headerlink" title="解法三：递归"></a>解法三：递归</h2><p>对于这种不知道有多少个子串的情况，即在不确定次数的情况下，使用递归非常合适</p><ul><li>如果当前位置是数字位，那么后面一定包含一个子串，采用递归得出这个子串的内容，再循环加入全局StringBuilder</li><li>如果是左括号，不需要做什么</li><li>如果是右括号，则退出递归</li><li>如果是字母，则直接加入全局的StringBuilder</li></ul><p>在递归中设置一个全局的循环，遍历整个字符串，这样可以搜寻到所有的子串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">decodeString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">recurve</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">StringBuilder</span> builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用stringBuilder来拼接全部的字符串</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//转成数字，其后一定跟着一个子串</span>                <span class="token keyword">int</span> repTime<span class="token operator">=</span><span class="token function">getDigits</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> sub<span class="token operator">=</span><span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>repTime<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">s<span class="token punctuation">.</span></span>CharAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回子串</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getDigits</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/uN89XfY1D6QipSd.png" alt="递归.png"></p><h1 id="迷你语法分析器"><a href="#迷你语法分析器" class="headerlink" title="迷你语法分析器"></a><a href="https://leetcode-cn.com/problems/mini-parser/">迷你语法分析器</a></h1><p>这题同样耗费了我许多时间，（我太菜了！）</p><h2 id="解法一：栈迭代"><a href="#解法一：栈迭代" class="headerlink" title="解法一：栈迭代"></a>解法一：栈迭代</h2><p>此题题目确实有点绕，但逻辑思路其实与上题一样，也是括号匹配。由于保证输入都是正确的，最后输出的一定是一个<code>NestedInteger</code>对象，故他要么是以 ‘[‘ 开头，要么是全为数字，在正是开始迭代前，可以做这样的判断。</p><ul><li>如果ch为<code>[</code> ，则代表有一个嵌套，此时创建一个空嵌套对象入栈。</li><li>如果ch为数字或<code>-</code>，则将连续数位的字符转成整数，同时加入栈顶的<code>NestedInteger</code>对象</li><li>如果ch为<code>,</code>，直接略过，不影响结果</li><li>如果ch为<code>]</code>，代表一个嵌套结束了，此时将栈顶的嵌套出栈，若出栈后不为空，则代表有上一层嵌套，将此层嵌套加入上一层，继续向后遍历；若为空则表示此层嵌套即为答案。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NestedInteger</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">NestedInteger</span> ans<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">NestedInteger</span><span class="token punctuation">&gt;</span></span> stack<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token operator">||</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> j<span class="token operator">=</span>index<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                index<span class="token operator">=</span>j<span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ans<span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/zygaeFTSsIDYEW4.png" alt="迷你语法分析2.png"></p><h2 id="解法二：递归"><a href="#解法二：递归" class="headerlink" title="解法二：递归"></a>解法二：递归</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">NestedInteger</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">NestedInteger</span> <span class="token function">recurve</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">NestedInteger</span> ni<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span> ch<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'-'</span><span class="token operator">||</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> j<span class="token operator">=</span>index<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> num<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                index<span class="token operator">=</span>j<span class="token punctuation">;</span>                ni<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NestedInteger</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ni<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">recurve</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ni<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/27/thkOPoi3wD5VSrg.png" alt="迷你语法分析.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调栈模板</title>
      <link href="/2021/10/26/dan-diao-zhan-mo-ban/"/>
      <url>/2021/10/26/dan-diao-zhan-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><h2 id="单调栈是什么？"><a href="#单调栈是什么？" class="headerlink" title="单调栈是什么？"></a>单调栈是什么？</h2><p>单调栈是一种特殊的栈，单调栈要求栈中的元素时单调递增或递减的</p><p>==是否严格递减或一般递减可以根据实际情况来==</p><p>这里我用<code>[a,b,c]</code>表示一个栈，其中左侧为栈底，右侧为栈顶，单调增还是单调减取决于出栈顺序，如果出栈顺序是单调增的，那就是单调递增栈，出栈元素时单调减的，那就是单调递减栈。</p><p>例如：</p><ul><li><code>[1,2,3,4]</code>是一个单调递减栈，<code>[1,3,2]</code>就不是一个合法的单调栈</li></ul><p>那定义一个这样的特性有什么用呢？这种限制能解决什么问题呢？</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>单调栈的用途不太广泛，只处理一种典型的问题，叫做<code>Next&nbsp;Greater&nbsp;Number</code>的原始问题，即给你一个数组，你返回一个等长数组，对应索引存储这下一个更大或更小元素，如果没有满足要求的，就存-1,。例：</p><p>数组<code>[2,1,2,4,3]</code>，你返回<code>[4,2,4,-1,-1]</code>。即第一个2后面的比2大的数字是4；1后面比比它大的数组是2. …。</p><p>这道题的暴力解法很容易想到，即对每个元素都向后扫描，找到第一个更大的元素即可，但这种解法的时间复杂度是<code>O(n^2)</code>，明显差强人意，那我们可以这样思考，把数组元素想象成并列站立的人，元素大小想象成人的身高，这些人站成一列，如何求元素<code>[2]</code>的Next Greater Number呢？，向后看去，第一个露出来的人即是满足要求的</p><p><img src="https://i.loli.net/2021/10/28/WdaFhKtm7OkfBYS.png" alt="单调栈1.png"></p><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//此为求单调增栈模板</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//存放答案</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//既然是找后面的满足要求的，很明显</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//矮个子都走开，此处为大于则是单增栈，小于则是单减栈</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//由于是从后遍历，故栈顶一定是最近满足要求的</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进栈，之后身高判断,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述算法的复杂度只有<code>O(n)</code>，每个元素只被push一次，pop一次。</p><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><p>数组T <code>[73,74,75,71,69,72,76,73]</code>，（华氏度）这个数组存放的是近几天的天气气温，返回一个数组，计算：对于每一天，你至少还要等多少天才能等到更暖和的气温？，如果等不到那一天，则填0。</p><p>分析：此题实际上也是求Next Greater Number，只不过答案数组存的不是索引了，而是满足要求的数和当前的索引之间的差。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">NextGreaterTemp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token class-name">T</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token class-name">T</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token class-name">T</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="场景二："><a href="#场景二：" class="headerlink" title="场景二："></a>场景二：</h3><p>除了解决Next Greater Number问题外，还有一种场景就是==怎么保证删除之后整体最小==的问题。通常对于这类问题，我们采用一种维护单调栈的算法流程来使得整体最小，（以下对应的是单调递减栈）算法流程如下：</p><p>我们给定一个数组<code>[1,3,4,5,2,9,6]</code></p><ol><li>首先压入 1，此时的栈为：[1]</li><li>继续压入 3，此时的栈为：[1,3]</li><li>继续压入 4，此时的栈为：[1,3,4]</li><li>继续压入 5，此时的栈为：[1,3,4,5]</li><li><strong>如果</strong>继续压入 2，此时的栈为：[1,3,4,5,2] 不满足单调递减栈的特性， 因此需要调整。如何调整？由于栈只有 pop 操作，因此我们只好不断 pop，直到满足单调递减为止。</li><li>上面其实我们并没有压入 2，而是先 pop，pop 到压入 2 依然可以保持单调递减再 压入 2，此时的栈为：[1,2]</li><li>继续压入 9，此时的栈为：[1,2,9]</li><li><strong>如果</strong>继续压入 6，则不满足单调递减栈的特性， 我们故技重施，不断 pop，直到满足单调递减为止。此时的栈为：[1,2,6]</li></ol><p>此时我们得到了整体最小的栈，但这样可能还是有点抽象，你还是无法体会这个整体最小的概念，我们把这种算法思想放到具体的题目中去。</p><h4 id="例一："><a href="#例一：" class="headerlink" title="例一："></a>例一：</h4><p>给定一个字符串表示的非负整数和一个整数k，移除这个数中的k个数字，使得剩下的数字最小如</p><p>输入<code>num="1432219",k=3</code>,输出1219，很明显，这里要维护一个单减栈，才能保证数字最小。</p><ol><li>输入1，此时栈为<code>[1]</code></li><li>输入4，满足单减栈特性，此时栈为<code>[1,4]</code></li><li>输入3，破坏了单减栈，故pop出数字4，此时栈<code>[1]</code>,3进栈满足单减栈</li><li>输入2，破坏了单减栈，pop出数字3，此时栈为<code>[1]</code>,2进栈，此时栈为<code>[1,2]</code></li><li>输入2，可以接受，此时栈为<code>[1,2,2]</code></li><li>输入1，pop出数字2，此时栈为<code>[1,2]</code>,由于已经到达k的上限，故后续数字依次入栈，栈最终为<code>[1,2,1,9]</code></li></ol><p>这样即得到了”整体最小“，另外，对于设计到字符串的整体最小，通常可以利用StringBuilder模拟栈的行为。</p><p><font color="red">但此题存在一个bug就是，如果字符序列本身就是单增的，那按上面的逻辑将一个也移除不了，那怎么此时决定移除策略呢？很明显从最后一位开始移除，能保证整体数字最小</font>&gt;</p><h4 id="例二："><a href="#例二：" class="headerlink" title="例二："></a>例二：</h4><p><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">316.去除重复字母</a></p><h2 id="如何处理循环数组"><a href="#如何处理循环数组" class="headerlink" title="如何处理循环数组"></a>如何处理循环数组</h2><p>同样是Next Greater Number，现在假设给你的数组是环形的，<code>[2,1,2,4,3]</code>,你返回数组<code>[4,2,4,-1,4]</code>,拥有了环形属性后，最后一个元素3饶了一大圈找到了比自己大的元素4.</p><p>我们知道计算机内存都是线性的，没有真正意义的环形数组，一般是通过<code>%</code>，来模拟环形。回到最初的问题，增加了环形属性后，问题的难点在于Next不一定是当前元素右边了，也有可能出现在左边，为了能判断左边的元素，我们考虑这样的思路==将原始数组翻倍，在后面接一个原始数组==，这样每个元素不仅可以比较自己右边的元素，也可以和左边的元素比较。</p><img src="https://i.loli.net/2021/10/28/ZCF12cYeoQlEItu.png" alt="单调栈循环数组.png" style="zoom:50%;"><p>代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">circuleNextGreaterNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> size<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>nums<span class="token punctuation">[</span>i<span class="token operator">%</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>i<span class="token operator">%</span>size<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">%</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="哨兵技巧"><a href="#哨兵技巧" class="headerlink" title="哨兵技巧"></a>哨兵技巧</h2><p>有些时候会用到数组全部元素，即栈中的元素最后都要出栈，很可能因为没有考虑边界问题而无法通过，所以可以使用哨兵法，例如在<code>[1,3,4,5,2,9,6]</code>末尾添加一个比数组元素都大或都小的元素如-1，此时可以简化代码逻辑。</p><h2 id="leetcode例题"><a href="#leetcode例题" class="headerlink" title="leetcode例题"></a>leetcode例题</h2><table><thead><tr><th align="center"><a href="https://leetcode-cn.com/problems/next-greater-element-i/">496.下一个更大元素I</a></th></tr></thead><tbody><tr><td align="center"><a href="https://leetcode-cn.com/problems/next-greater-element-ii/">503.下一个更大的元素II</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/create-maximum-number/">321.拼接最大数</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/remove-duplicate-letters/">316.去除重复字母</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/remove-k-digits/">402.移掉k位数字</a></td></tr><tr><td align="center"><a href="https://leetcode-cn.com/problems/smallest-subsequence-of-distinct-characters/">1081.不同字符最小序列</a></td></tr></tbody></table><p>参考：<a href="https://lucifer.ren/blog/2020/11/03/monotone-stack/">单调栈</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据机构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayDeque详解</title>
      <link href="/2021/10/25/arraydeque-xiang-jie/"/>
      <url>/2021/10/25/arraydeque-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.jianshu.com/p/2f633feda6fb">ArrayDeque</a></p><p><a href="https://blog.csdn.net/skh2015java/article/details/74840513">ArrayDeque操作</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中的fail-fast机制</title>
      <link href="/2021/10/25/java-zhong-de-fail-fast-ji-zhi/"/>
      <url>/2021/10/25/java-zhong-de-fail-fast-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h1><p>fast-fail机制即快速失败机制，是java集合中的一种错误检测机制，当迭代集合过程中在该集合结构发生改变时，就可能会发生fail-fast，抛出ConcurrentModificationException，fail机制并不保证在不同步情况下修改一定会抛出异常，只是尽最大努力抛出。</p><h2 id="fail-fast出现场景"><a href="#fail-fast出现场景" class="headerlink" title="fail-fast出现场景"></a>fail-fast出现场景</h2><p>在ArrayList，HashMap等集合中在单线程和多线程环境下都有可能出现fail-fast</p><h3 id="单线程环境下："><a href="#单线程环境下：" class="headerlink" title="单线程环境下："></a>单线程环境下：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Iterator</span> iterator<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hashNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用迭代器遍历的过程中，利用集合的remove方法时，会发生fail-fast</p><p>HashMap发生的fail-fast</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Iterator</span> it<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hashNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry<span class="token operator">=</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程环境下："><a href="#多线程环境下：" class="headerlink" title="多线程环境下："></a>多线程环境下：</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Mythread1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyThread2</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span><span class="token punctuation">{</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                                    <span class="token punctuation">}</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> atgs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Mythread1</span> th1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mythread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Mythread2</span> th2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Mythread2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        th2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="fail-fast出现的原理："><a href="#fail-fast出现的原理：" class="headerlink" title="fail-fast出现的原理："></a>fail-fast出现的原理：</h2><p>fail-fast是如何抛出ConcurrentModification，又是在什么情况下抛出的? 对于集合list ，map 都可以用迭代器遍历，而Iterator就是一个接口，具体实现还是要看集合类里的内部类去实现Iterator实现相关方法。这里以ArrayList为例：</p><p>当调用list.iterator()时其源码是：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Itr</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cursor<span class="token punctuation">;</span>       <span class="token comment">// index of next element to return</span>        <span class="token keyword">int</span> lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// index of last element returned; -1 if no such</span>        <span class="token keyword">int</span> expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> cursor <span class="token operator">!=</span> size<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> size <span class="token operator">&amp;&amp;</span> modCount <span class="token operator">==</span> expectedModCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// update once at end of iteration to reduce heap write traffic</span>            cursor <span class="token operator">=</span> i<span class="token punctuation">;</span>            lastRet <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中有三个属性</p><pre class="line-numbers language-none"><code class="language-none">int cursor;   //index of next element to returnint lastRet=-1 //index of last element returned int expectedModCount=modCount;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>cursor是集合遍历过程中即将遍历的元素的索引，lastRet是cursor-1，默认为-1，它主要记录刚刚遍历过从元素的索引，expectedModCount是fail-fast判断的关键变量，初始值为ArrayList中的modcount（记录了对于几个操作中的修改次数，与size不一样）</p><p>首先看看next方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> cursor<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> size<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchElementException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>elementData<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> elementData<span class="token punctuation">.</span>length<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cursor <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>lastRet <span class="token operator">=</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次调用next之前都会执行<code>checkForComdification()</code>，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>modCount <span class="token operator">!=</span> expectedModCount<span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到当<code>modcount!=expectedModCount</code>时抛出异常，但在一开始时，expectedModCount等于modCount，为什么会出现modCount！=expectedModCount ？ 对于expectedModCount在整个迭代过程中没有再发生改变，故可能发生改变的只有modCount ，我们知道当对ArrayList进行add，remove，clear时就会改变modCount，故当另一线程并发修改或同一线程遍历过程中，使modCount改变，就会抛出异常。</p><h2 id="避免fail-fast："><a href="#避免fail-fast：" class="headerlink" title="避免fail-fast："></a>避免fail-fast：</h2><h3 id="单线程解决"><a href="#单线程解决" class="headerlink" title="单线程解决"></a>单线程解决</h3><p>在单线程遍历过程中，如果进行remove操作，可以调用迭代器的remove方法而不是集合类的remove方法，</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkForComodification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">ArrayList</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lastRet<span class="token punctuation">)</span><span class="token punctuation">;</span>                cursor <span class="token operator">=</span> lastRet<span class="token punctuation">;</span>                lastRet <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                expectedModCount <span class="token operator">=</span> modCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentModificationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代器的remove方法不会使得expectedModCount!=modCount，故不会对遍历产生影响，但该方法不能指定remove的元素，故有局限性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Iterator</span> it<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多线程解决："><a href="#多线程解决：" class="headerlink" title="多线程解决："></a>多线程解决：</h3><p>使用java并发包中的类代替ArrayList，hashmap</p>]]></content>
      
      
      
        <tags>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ聊天室项目</title>
      <link href="/2021/10/24/qq-liao-tian-shi-xiang-mu/"/>
      <url>/2021/10/24/qq-liao-tian-shi-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>项目地址：<a href="https://gitee.com/xiaoclgitee/imitation-qq-chat-room">https://gitee.com/xiaoclgitee/imitation-qq-chat-room</a><br>项目提升：基于NIO，AIO 模型的群聊实现<a href="https://gitee.com/xiaoclgitee/chat-room">https://gitee.com/xiaoclgitee/chat-room</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap理解与解析</title>
      <link href="/2021/10/22/hashmap-li-jie-yu-jie-xi/"/>
      <url>/2021/10/22/hashmap-li-jie-yu-jie-xi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/91636401">为什么HashMap的长度是2的整数次幂？</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DDL语法总结</title>
      <link href="/2021/10/18/ddl-yu-fa-zong-jie/"/>
      <url>/2021/10/18/ddl-yu-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么JDK建议使用ArrayDeque实现栈</title>
      <link href="/2021/10/18/wei-shi-me-jdk-jian-yi-shi-yong-arraydeque-shi-xian-zhan/"/>
      <url>/2021/10/18/wei-shi-me-jdk-jian-yi-shi-yong-arraydeque-shi-xian-zhan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java中的浅拷贝与深拷贝</title>
      <link href="/2021/10/18/java-zhong-de-qian-kao-bei-yu-shen-kao-bei/"/>
      <url>/2021/10/18/java-zhong-de-qian-kao-bei-yu-shen-kao-bei/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>链表,二叉树,二分查找,排序,搜索相关代码模板</title>
      <link href="/2021/10/17/lian-biao-er-cha-shu-er-fen-cha-zhao-pai-xu-sou-suo-xiang-guan-dai-ma-mo-ban/"/>
      <url>/2021/10/17/lian-biao-er-cha-shu-er-fen-cha-zhao-pai-xu-sou-suo-xiang-guan-dai-ma-mo-ban/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据机构与算法专栏：跳表</title>
      <link href="/2021/10/13/shu-ju-ji-gou-yu-suan-fa-zhuan-lan-tiao-biao/"/>
      <url>/2021/10/13/shu-ju-ji-gou-yu-suan-fa-zhuan-lan-tiao-biao/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL实战专栏（三）索引</title>
      <link href="/2021/10/13/mysql-shi-zhan-zhuan-lan-san-suo-yin/"/>
      <url>/2021/10/13/mysql-shi-zhan-zhuan-lan-san-suo-yin/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法专栏：散列表及其在密码学的应用（一）</title>
      <link href="/2021/10/12/shu-ju-jie-gou-yu-suan-fa-zhuan-lan-san-lie-biao-ji-qi-zai-mi-ma-xue-he-mysql-zhong-de-ying-yong-yi/"/>
      <url>/2021/10/12/shu-ju-jie-gou-yu-suan-fa-zhuan-lan-san-lie-biao-ji-qi-zai-mi-ma-xue-he-mysql-zhong-de-ying-yong-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>此专栏用于本人完整全面地复习在面试及工作中常用的算法与数据结构，会辅以代码和基础知识讲解，包括刷题练习，解题思路等等。大致内容包括10个数据结构和10个算法：</p><p>数据结构：数组，链表，栈，队列，散列表，二叉树，堆，跳表，图，Trie树</p><p>算法：递归，排序，二分查找，搜索，哈希算法，贪心算法，分治算法，回溯，动态规划，字符串匹配</p><hr><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>对于一些数据结构如线性表，二叉搜索树，AVL树，B树，Trie树，跳表等，元素存储位置与元素关键码不存在直接的对应关系，在数据结构中搜索一个元素需要进行一系列的关键码的比较，搜索效率取决于搜索过程中的比较次数，散列表是表示集合和字典的一种有效方法，其将关键码通过哈希算法映射到哈希表中的某个位置上，然后根据关键码用同样的方式直接访问。</p><p>散列函数通常是一个压缩映像函数，通常关键码集合比散列表地址集合大得多，因此可能产生哈希冲突。</p><p>产生冲突就必须考虑如何解决冲突，冲突太多会直接降低搜索效率。如果能构造出一个地址分布较均匀的散列函数，使得关键码集合中任何一个关键码经过散列函数计算，得到的地址概率相等。就能有效减少冲突。</p><p>因此对于散列方法需要解决两个问题：</p><ul><li>设计计算简单且地址分布均匀的散列函数</li><li>拟定解决冲突的方法。</li></ul><p>设计散列函数这里不展开讲，主要介绍解决冲突的方法</p><h3 id="处理冲突的闭散列方法"><a href="#处理冲突的闭散列方法" class="headerlink" title="处理冲突的闭散列方法"></a>处理冲突的闭散列方法</h3><p>为了减少冲突，对散列表进行改造，设散列表HT有m个地址，将其改为m个桶，每个桶可存放s个元素，对于不同的关键码散列得到同一个地址，就产生了冲突，他们可以放在桶内不同位置，只有当桶内s个元素位置放满后才产生溢出。</p><p>通常s较小，因此桶内采取顺序搜索。</p><p>==线性探查==</p><p>需加入元素时，散列计算，确定桶号，若桶内已有元素，则紧随其后查看下一个桶。</p><p>公式为 $H_i=(H_0+i)\pmod m,i=1,2,…,m-1$，当循环m-1次就会回到开始探查的位置，说明表已满，不能再插入新的关键码。</p><p><strong>在闭散列的情形下不能随便物理删除表中元素，因为若删除会影响其他元素的搜索。</strong></p><p><strong>因此当散列表经常变动时，最好采用开散列的方法来处理冲突。</strong></p><p><em>优点</em></p><ul><li>无需附加空间</li><li>探测序列具有局部性，可以利用缓存减少IO</li></ul><p><em>缺点</em></p><ul><li>耗费时间，搜索效率低。</li><li>冲突增多，以往的冲突会导致后续连环的冲突。</li></ul><p>为解决耗费时间，提高搜索效率，我们发明了另一种探查法。</p><p>==二次探查法==</p><p>$H_i=(H_0+i^2)\mod m\quad H_i=(H_0+i^2)\mod m\quad i=1,2,3…$,H0是通过hash对元素关键码x进行计算得到的桶号，m是表的大小，应是一个值为4k+3的质数。</p><p>二次探查法形成的序列形如$H_0,H_0+1,H_0-1,H_0+4,H_0-4$</p><p><strong>定理</strong></p><p>当表的长度<code>TableSize</code>为质数且表的装载因子a不超过0.5时，新的表项一定能够插入，且任何一个位置都不会被探查两次。只要表中有一半是空的，就不会产生表满的问题。在插入时装载因子若超出0.5，必须将表长度扩充一倍。</p><h3 id="开散列方法"><a href="#开散列方法" class="headerlink" title="开散列方法"></a>开散列方法</h3><p>又称链地址法，先对关键码集合用某个散列函数计算位置，具有相同的散列码的关键码归属于同一个桶，通常各个桶内元素通过单链表连接。</p><p>设有n个关键码通过hash存在到散列表中的m个桶内，那么每个桶中同义词表平均长度为n/m，<strong>搜索平均长度为n/m的同义词表比搜索长度为n的顺序表搜索速度快的多。</strong></p><h3 id="散列表分析"><a href="#散列表分析" class="headerlink" title="散列表分析"></a>散列表分析</h3><p>选择合适的散列函数能得到均匀的地址分布，搜索过程中可不做多次探查。</p><p>冲突的出现与散列函数的选择，处理冲突的方法有关，理论上认为，各种分布均匀的散列函数对于同样一组关键码，造成冲突的程度是相同的，故散列表的性能主要取决于处理冲突的方法。</p><p><strong>定理</strong></p><p>==开散列法优于闭散列法，在散列函数中，模运算由于其他类型的散列函数，最差的是折叠法。==</p><h2 id="散列表及其在密码学中的应用"><a href="#散列表及其在密码学中的应用" class="headerlink" title="散列表及其在密码学中的应用"></a>散列表及其在密码学中的应用</h2><p>制作人：文明</p><p>微信：19871173328</p><hr><p>面试题：你对哈希表的理解</p><p>我对哈希表的理解主要有这几个方面</p><p>一。哈希表怎么使用</p><p>二。为什么会出现哈希表</p><p>三。哈希表的安全性，效率等</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL实战专栏番外篇：索引详解（一）</title>
      <link href="/2021/10/11/mysql-shi-zhan-zhuan-lan-fan-wai-pian-suo-yin-xiang-jie-yi/"/>
      <url>/2021/10/11/mysql-shi-zhan-zhuan-lan-fan-wai-pian-suo-yin-xiang-jie-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL实战专栏（一）基础架构</title>
      <link href="/2021/10/10/mysql-shi-zhan-zhuan-lan-yi-ji-chu-jia-gou/"/>
      <url>/2021/10/10/mysql-shi-zhan-zhuan-lan-yi-ji-chu-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近再看mysql45讲，想着光听和光看确实记忆不够深刻，于是有了这个念头：何不趁这个机会建立一个自己的复习专栏，不仅能复习，输出，还能在写作的过程中增更多的思考，于是这个系列诞生了</p><h1 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="Mysql总体逻辑架构"><a href="#Mysql总体逻辑架构" class="headerlink" title="Mysql总体逻辑架构"></a>Mysql总体逻辑架构</h2><p><img src="https://img2018.cnblogs.com/blog/1202638/201908/1202638-20190808003551255-429891607.png"></p><p>整体上看我们可以把Mysql架构分为Server层和存储引擎层两部分。Server层有连接器，查询缓存，分析器，优化器，执行器等，涵盖Mysql大多数核心服务功能，以及所有内置函数，所有跨存储引擎的功能都在这一层实现。如存储过程，触发器，视图等。</p><p>存储引擎的架构模式是插件式的，在Mysql5.5.5版本之后InnoDB存储引擎成为默认存储引擎。当然不同的存储引擎有不同的特性，对应不同的应用场景，我们可以在建表<code>create&nbsp;table</code>时通过在最末尾添加<code>engine=memory</code>来制定存储引擎。</p><p>不难看出所有存储引擎公用Server层。</p><h3 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h3><p>连接器负责跟客户端建立连接，获取权限，维持和管理连接。连接命令如下</p><p><code>mysql&nbsp;-h$ip&nbsp;-p$port&nbsp;-u$user&nbsp;-p</code>输完命令后可以在交互对话里输入密码，尽管可以直接在-p后加密码，但这很不安全，如果连的是生产服务器。强烈建议不要这样做。</p><p>==连接Mysql的几种方式：==</p><p>连接Mysql是一个连接进程和Mysql数据库实例进行通信。本质上是进程通信，我们常见的进程通信有管道，命名管道，TCP/IP套接字，UNIX域套接字等。</p><ul><li>TCP/IP：</li></ul><p>在密码认证通过后连接器会到权限表里查出当前用户的权限，之后在这个连接里面的操作都会基于此权限。判断逻辑。<strong>这就意味着一个用户成功建立连接后，即使你之后对这个用户权限做了改变，也不会影响已经读到的权限，只有新建立的连接才会使用新的权限。</strong></p><p>对于连接操作是十分耗费资源的操作，客户端如果太长时间没有向数据库进行操作，连接器会自动断开，这个时间由参数<code>wait_timeout</code>控制，默认8小时</p><p>当连接被断开后如果客户端再次发送请求，会受到错误提示，“Lost Connection to MySQL server during query”。此时只能进行重连。</p><ul><li>长连接：连接成功后客户端持续有请求，则一直使用同一个连接。</li><li>短连接：执行完一次或很少几次操作后便断开连接，使用时再重连。</li></ul><p>我们知道建立连接的过程不仅复杂而且耗费资源，因此我们应尽量减少建立连接的次数。</p><p>但有时使用长连接后，MySQL占用内存涨的特别快，这是因为执行过程中临时使用的内存时管理在连接对象里的，这些资源会在断开连接后释放，所以累积下来，导致内存占用过大，被系统强行杀掉OOM了，即Mysql异常重启了。</p><p>解决方案：</p><ul><li>定期断开长连接，或在执行一个占用内存过大的大查询后断开连接。</li><li>如果你使用的是MySQL5.7之后的版本，可以执行<code>mysql_request_cnnection</code>初始化资源，即释放，这样不需要重连和验证权限，之后恢复到初始连接状态。</li></ul><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>连接建立后便可以执行语句了，查询缓存中保存之前执行的语句和结果集，可能会议key-value的形式存储在内存中，key是查询的语句，value是返回的结果，当拿到一个语句后若能在缓存中找到key，则直接返回结果，否则进行后续操作。</p><p>==但大多数情况下建议不要使用查询缓存，因为弊往往大于利==</p><p>弊端：<strong>即这些缓存是针对于一张原表的查询结果，即意味着一旦更新表，这些缓存全部作废，因此对于更新压力大的表，查询缓存命中的效率非常低，除非业务有一张静态表，很长时间才更新，例如系统配置表，那在这张表上使用查询缓存是比较合适的</strong></p><p>需要注意的是MySQL8.0之后的版本直接将查询缓存的整块功能删除了。</p><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><p>如果没有命中缓存就要开始分析语句了。</p><ul><li>词法分析：分析器会先进行词法分析，识别出SQL语句里面的字符串分别是什么。例如把输入的select关键字识别出来，也要把字符串“T”识别成表名T，把字符串“ID”识别成“列ID”。<ul><li>你可能会问分析器是如何把这些关键字和字段名识别的？最直接的做法是对它做一个只读的查找树，Mysql在此出做了优化。然后对于字段，mysql实例中有一个数据库<code>INFORMATION_SCHEMA</code>保存其他数据库的信息，即元数据，如数据库或表名称，列数据类型访问权限等。</li></ul></li></ul><p>==ps：对于词法分析的内容应还有地方剖析，请参考google上博客==</p><ul><li>语法分析：词法分析后进行语法分析。判断是否符合MySQL语法。如果不对，则会受到错误提示。</li></ul><p>==ps：此处可查看博客关于语法分析的内容==</p><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><p>此时MySQL已经知道你要做什么了，但执行之前还要进行优化器处理。优化器是在表中存在多个索引时决定是用哪个索引；或在一个语句中有多表关联的时候，决定各个表的连接顺序。</p><p><code>select&nbsp;*&nbsp;from&nbsp;t1&nbsp;join&nbsp;t2&nbsp;on&nbsp;t1.c=10&nbsp;and&nbsp;t2.d=20</code></p><ul><li>既可先从表t1取出c=10的记录ID值，在根据ID关联到t2，判断t2的ID是否有等于20的。</li><li>也可以先从表t2取出ID=20的记录，再关联到t1，判断t1里的c是否等于10.</li></ul><p>两种策略执行结果是一样的，但执行效率不同，优化器就是决定选择哪一个方案的。</p><p>例如假设 t1上的扫描了 100 个数据行，t2 上扫描 50个数据行。</p><p>先根据A会有100个数据行，接着进行匹配找到其中的 30 个与 B 中的值匹配记录，其中就有 70 次是失败了。</p><p>先根据 B会有 50 个数据行，接着进行匹配找到其中的 30 个与 A中的值匹配的记录，只有 20次是失败的，很显然需要的计算和磁盘 I/O 更少。</p><p>因此MySQL的优化器主要干如下几个重要事情：</p><ul><li>选择最合适的索引</li><li>选择表扫还是走索引</li><li>选择表关联顺序</li><li>优化where子句</li><li>决定order by 和group by 是否走索引</li><li>尝试使用inner join 替换outer join</li><li>简化子查询，决定结果缓存</li></ul><p>==ps：此处应对每个事情进行扩展，可看博客==</p><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><p>此阶段开始执行语句。开始执行前先判断用户对表T有没有执行权限，若没有，就会返回以下错误提示。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> T <span class="token keyword">where</span> ID<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>ERROR <span class="token number">1142</span> <span class="token punctuation">(</span><span class="token number">42000</span><span class="token punctuation">)</span>: <span class="token keyword">SELECT</span> command denied <span class="token keyword">to</span> <span class="token keyword">user</span> <span class="token string">'b'</span><span class="token variable">@'localhost'</span> <span class="token keyword">for</span> <span class="token keyword">table</span> <span class="token string">'T'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有权限，在打开表，执行器会根据表引擎的定义，使用引擎提供的接口。例如下面这个例子。</p><p>ID字段没有索引，执行流程如下：</p><ol><li>调用InnoDB引擎接口去表第一行，判断ID是否为10，不是则跳过，是则将结果存在结果集</li><li>调用引擎接口取下一行，重复相同的判断逻辑，知道取这个表的最后一行。</li><li>执行器将结果集返回给客户端。</li></ol><p>对于有索引的表，逻辑也差不多。</p><p>在慢查询日志中你能看到rows_examined的字段，表示这个语句执行时调用引擎扫描了多少行。</p><p>在有些场景下，执行器调用一次，内部存储引擎扫描多行，故引擎扫描行数可能跟此字段不完全相同。</p><p>==ps：此处对于慢查询，mysql技术内幕上有介绍，建议查看并总结，也可看博客==</p><h3 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h3><p>前面了解了一条查询语句是经过连接器，分析器，优化器，执行器等模块最后到达存储引擎的。那么一条更新语句的执行流程是怎样的呢？我们知道MySQL可以恢复到半个月内任意一秒的状态，可你思考过这的原理是什么吗？</p><p>前面说过当表更新时，关于这个表的查询缓存会失效，与查询流程不一样的是更新流程还涉及两个重要的日志模块。即redo log（重做日志）和binlog（归档日志）。</p><p>==ps：此处只讲两种日志，关于其他日志文件及特性会在后续文章继续剖析==</p><h4 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h4><p>当前事务数据库系统普片都采用WAL技术，即<code>Write&nbsp;Ahead&nbsp;Log</code>策略，即当事务提交时先写重做日志，在修改页，并在适当的时候将修改页刷新到磁盘。这样当用于发生宕机(⊙o⊙)而导致的数据丢失时，通过重做日志可以完成数据的恢复，这也满足了ACID事务的D持久性的要求。</p><p>那么redo log是什么样的呢？</p><p>InnoDB中的redo log 是固定大小的，比如可以配置一组4个文件，每个文件大小1GB，那redo log大小可以记录4GB的操作，关于redo log是怎样记录的呢，事实上它是一个循环记录的过程，这也决定了它是固定大小的。从头开始写，写到末尾再开头循环。如图：</p><img src="https://img2018.cnblogs.com/blog/1202638/201908/1202638-20190810005247368-1074922371.png" style="zoom:67%;"><p>write pos 是当前记录的位置，一边写一边后移，checkpoint是当前要擦除的位置，一边擦除一边后移，擦除记录前要把记录更新到磁盘数据库表中。checkpoint之前的空间是已经擦除的空闲空间。</p><p>==ps：后续文章会详细讲解这个checkpoint技术怎么回事，具体参考MySQL技术内幕==</p><p>前面我们讲到有了redo log即使数据库宕机了，之前提交的记录都不会丢失。这被称为crash-safe</p><h5 id="redo-log如何刷新到磁盘"><a href="#redo-log如何刷新到磁盘" class="headerlink" title="redo log如何刷新到磁盘"></a>redo log如何刷新到磁盘</h5><p>我们知道InnoDB存储引擎内存除了缓冲池，还有重做日志缓冲，如图。InnoDB存储引擎先将重做日志信息放入缓冲区，然后按一定频率刷新到磁盘，一般情况下是每秒都会刷新到重做日志文件，因此混充没必要很大，只要在每秒提交的事务在缓冲大小之内即可。可通过参数<code>innodb_log_buffer_size</code>控制。那么在什么情况下重做日志缓冲会刷新到磁盘文件中呢？（注意这里的刷新只是刷新日志文件，并没有更新表数据，涉及表数据的更新还需要LRU列表和Flush列表）</p><p>==ps：这里提到LRU列表和Flush列表，后续文章会详细讲解这个技术==</p><p>==ps：包括接下来提到的Master&nbsp;Thread，也会详细讲解它的作用==</p><ul><li>Master Thread每一秒会将重做日志缓冲刷新到重做日志文件</li><li>每个事务提交时会将重做日志缓冲刷新到重做日志文件</li><li>当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲便刷新到日志文件</li></ul><p><img src="https://i.loli.net/2021/10/11/eM17tpBJnlFrxIC.jpg"></p><p>很重要的一点是redo log是何时写盘的，前面的描述可以猜测出是在事务开始之后逐步写盘的</p><p>之所以是逐步写入日志文件，而不是事务提交后才写入日志文件，原因在于上文讲的重做日志缓冲，默认是8M，InnoDB先将日志记录写入缓冲，再通过以上三种方式写入磁盘文件，然后再通过checkpoint技术在适当的时候将日志文件里的记录更新到数据库表中，并后移checkpoint，擦除当前记录。故写盘是随着事务的开始逐步进行的</p><blockquote><p>即使事务还没有提交，InnoDB仍会每秒将重做日志缓存刷新到日志文件，这也可以很好解释再大的事务提交，时间也很短暂。</p></blockquote><h4 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h4><p>MySQL整体其实就两块，一块是Server层，主要做MySQL功能层面的事，还有一块引擎层，负责存储相关。redo log是InnoDB引擎特有的日志，Server层也有自己的日志，binlog（归档日志）</p><p>你可能会问，为什么会有两份日志呢？</p><p>最开始的时候MySQL里并没有InnoDB引擎，其自带的是MyISAM，但它没有crash-safe的能力，binlog日志只能用于归档，InnoDB是以插件引入MySQL的，既然binlog没有crash-safe能力，那就让InnoDB单独使用一套日志系统。</p><p>两份日志有以下三点不同：</p><ul><li>redo log 是InnoDB引擎特有的，binlog是MySQL的Server层实现的，所有引擎都可以用</li><li>redo log 是物理日志，binlog是逻辑日志</li><li>redo log 是循环写的，空间固定，binlog可追加写，即文件写完后会切换到下一个文件，不会覆盖之前的日志</li></ul><p>了解以上后，我们来看看一条update语句的内部流程。</p><ol><li>执行器先找到引擎去ID=2这一行，ID是主键，引擎直接用树搜索找到这一行，如果ID=2这一行所在数据页本来就在内存中（LRU列表）就直接返回给执行器，否则先从磁盘读入内存，再返回</li><li>执行器拿到引擎给的数据行，再值加1，得到新数据，再调用引擎接口写入新数据</li><li>引擎将新数据更新到内存中，同时将这个更新操作记录到redo log日志中，此时redo log处于prepare状态，然后告知执行器执行完成，随时可以提交事务</li><li>执行器生成这个操作的binlog，并把binlog写入磁盘</li><li>执行器调用引擎接口提交事务，引擎则把redo log改成commit状态，更新完成</li></ol><p>过程如图：</p><img src="https://i.loli.net/2021/10/11/ek6pg2aFytU7rQ9.png" alt="redo log写入过程.png" style="zoom:80%;"><p>你可能注意到了redo log的写入拆成了两个步骤，prepare和commit。</p><h5 id="两阶段提交"><a href="#两阶段提交" class="headerlink" title="两阶段提交"></a>两阶段提交</h5><p>为什么有两阶段提交？这是为了让两份日志逻辑一致，这又回到了开头那个问题，怎么让数据库恢复到半个月内的任意一秒？</p><p>binlog会记录所有的逻辑操作，并且采用追加写，如果DBA说半个月内的都可以恢复，那备份系统中一定保存最近半月的所有binlog，同时系统定期做整库备份，定期取决于系统的重要性，可能一天一备，也可能一月一备。</p><p>例如需要恢复到某一秒，某天下午发现中午12点有一次误删表，需要找回数据，那可以这样做：</p><ul><li>首先找到最近的一次备份，如果运气好，可能是昨天晚上的备份，从这个备份恢复到临时库</li><li>然后从备份时间点开始，将备份的binlog依次取出。</li></ul><p>这样临时库就跟误删之前的库一样了，然后将临时库数据恢复到线上库中。</p><p>那回到两阶段提交问题本身，</p><p>用于redo log和binlog是两个独立逻辑，如果不用两阶段提交，就是谁先写的问题。</p><ol><li><strong>先写redo log再写binlog</strong>：假设redo log写完，事务提交，binlog还没写完就MySQL宕机了，用于前面所说，redo log写完之后，系统即使崩溃，仍能把数据恢复过来，因此此时恢复的是正确的，但由于binlog没写完就crash了，binlog里没有这个操作，因此之后备份日志时，存起来的binlog里面就没有这条语句，因此当需要用binlog恢复临时库时，用于binlog语句丢失，临时库就会少一次更新，恢复出来的值就不正确了</li><li><strong>先写binlog再写redo log</strong>：如果在binlog写完之后crash，用于redo log没写，崩溃恢复以后这个事务无效，但binlog里面已经记录了这个事务，故之后用binlog恢复库时就会多一个事务，恢复出来的值与原库不同。</li></ol><p>故如果不使用两阶段提交，那么数据库状态有可能和用它的日志恢复出来的库的状态不一样。</p><p>你可能会说，这个概率是不是太低了，平时也没有动不动就要恢复临时库的场景啊。</p><p>事实上，不只是误操作后要恢复数据，当需要扩容，即搭建一些备库来增加系统的读能力时，常见的做法就是全量备份加上应用binlog实现的，这个不一致会导致线上主从数据库不一致情况。</p><p>简单点说就是redo log和binlog都可以表示事务的提交状态，而两阶段的提交是让两个状态保持逻辑上的一致。</p><p><strong>redo log用于保证crash-safe能力。innodb_flush_log_at_trx_commit这个参数设置成1的时候，表示每次事务的redo log都直接持久化到磁盘。这个参数我建议你设置成1，这样可以保证MySQL异常重启之后数据不丢失。</strong></p><p><strong>sync_binlog这个参数设置成1的时候，表示每次事务的binlog都持久化到磁盘。这个参数我也建议你设置成1，这样可以保证MySQL异常重启之后binlog不丢失。</strong></p><p>==ps：关于日志，缓冲这块，在阅读mysql技术内幕之后会继续添加更多细节剖析==</p><h3 id="问答环节"><a href="#问答环节" class="headerlink" title="问答环节"></a>问答环节</h3><ol><li>如果表T中没有字段k，而你执行了这个语句 select * from T where k=1, 那肯定是会报“不存在这个列”的错误： “Unknown column ‘k’ in ‘where clause’”。你觉得这个错误是在我们上面提到的哪个阶段报出来的呢？</li></ol><p><strong>答：是在分析器的语法分析阶段报错的，在做词法分析时，把字符串切分成token流，这个过程主要依靠关键字如select，delete,这些关键字被采用树的结构存储起来，在这些关键字中间的token是不可区分的，切分万token之后，做语法检查，构建ast，做语义分析之后每个token’就有了自己的类型，这个类型便是通过查询数据库中保有的各个表的元数据得到的，故在做语义分析时就会得知这个字段不存在，故报错。</strong></p><ul><li>词法分析：从左到右一个一个字符读入程序，，对字符流进行扫描，根据构词规则识别单词</li><li>语法分析：在词法分析的基础上，将单词序列组合成各类语法短语，如程序，语句，表达式，语法分析程序判断源程序在结构上是否正确。</li><li>语义分析：此阶段任务是对结构上正确的源程序进行上下文有关性质的审查，进行类型审查。</li></ul><p>==ps：关于token流，ast等学了编译原理再来补充吧==</p><ol start="2"><li>前面我说到定期全量备份的周期“取决于系统重要性，有的是一天一备，有的是一周一备”。那么在什么场景下，一天一备会比一周一备更有优势呢？或者说，它影响了这个数据库系统的哪个指标？</li></ol><p><strong>答：在一天一备模式下，最坏情况也只需要应用一天的binlog，好处是“最长恢复时间”更短，一周一备最坏情况要应用一周的binlog，对应的系统指标是恢复目标时间(RTO)，要优化RTO就要付出成本，消耗更多存储空间，故这个指标需要根据业务重要性评估了。</strong></p><h3 id="物理日志与逻辑日志"><a href="#物理日志与逻辑日志" class="headerlink" title="物理日志与逻辑日志"></a>物理日志与逻辑日志</h3><p>【informix的逻辑日志和物理日志分析_freebile的技术博客_51CTO博客】<img src="file:///C:\Users\FL8700F\AppData\Roaming\Tencent\QQTempSys%W@GJ$ACOF(TYDYECOKVDYB.png" alt="img"><a href="https://mbd.baidu.com/ma/s/8M5Z73jt">https://mbd.baidu.com/ma/s/8M5Z73jt</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql技术内幕读书笔记（一）</title>
      <link href="/2021/10/10/mysql-ji-zhu-nei-mu-du-shu-bi-ji-yi/"/>
      <url>/2021/10/10/mysql-ji-zhu-nei-mu-du-shu-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java面试篇：异常</title>
      <link href="/2021/10/09/java-mian-shi-pian-yi-chang/"/>
      <url>/2021/10/09/java-mian-shi-pian-yi-chang/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq635785620/article/details/7781026">(45条消息) 常见的几种RuntimeException_我是谁的专栏-CSDN博客_runtimeexception</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试篇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器</title>
      <link href="/2021/10/06/bu-long-guo-lu-qi/"/>
      <url>/2021/10/06/bu-long-guo-lu-qi/</url>
      
        <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/43263751">详解布隆过滤器的原理，使用场景和注意事项 - 知乎 (zhihu.com)</a></p><p><a href="https://developer.aliyun.com/article/773205">布隆过滤器，这一篇给你讲的明明白白-阿里云开发者社区 (aliyun.com)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC学习（二）</title>
      <link href="/2021/10/05/jdbc-xue-xi-er/"/>
      <url>/2021/10/05/jdbc-xue-xi-er/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC学习"><a href="#JDBC学习" class="headerlink" title="JDBC学习"></a>JDBC学习</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="事务问题"><a href="#事务问题" class="headerlink" title="事务问题"></a>事务问题</h2><p>将一组语句构建成事务，当所有语句顺利执行后，事务可以被提交，否则如果某个语句遇到错误，事务将被回滚。这样可以保证数据库的完整性。</p><ul><li>默认情况下数据库处于自动提交模式，那么哪些操作会导致自动提交呢？<ul><li><code>DDL</code>操作一旦执行，都会自动提交，<code>setAutoCommit=false</code>语句对DDL操作无效</li><li><code>DML</code>操作可通过<code>setAutoCommit=false</code>设置取消自动提交</li><li>在关闭连接时也会自动提交</li></ul></li><li>保存点<code>Savepoint</code>：使用保存点可以细粒度的控制回滚操作，创建保存点意味着回滚只需返回这个点，而非放弃整个事务</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">excuteUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Savepoint</span> point<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">setSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ps<span class="token punctuation">.</span><span class="token function">excuteUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当不需要保存点时，释放保存点</span>conn<span class="token punctuation">.</span><span class="token function">releaseSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PreparedStatement批量更新"><a href="#PreparedStatement批量更新" class="headerlink" title="PreparedStatement批量更新"></a>PreparedStatement批量更新</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//提高效率的关键在于客户端与服务器的数据交互次数要尽可能少</span>    <span class="token comment">//思路是缓存sql语句</span>    <span class="token comment">/**     * addBatch(),executeBatch(),clearBatch()     * mysql服务器默认是关闭批处理服务的，需要通过一个参数让mysql开启对批处理的支持     * 即：?rewriteBatchedStatements=true   写下配置文件的url后     */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">batchOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//数据库是会自动提交数据的，因此先将sql缓存，在批量提交</span>        conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into goods(Name)values(?)"</span><span class="token punctuation">;</span>        ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">500</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                ps<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ps<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> throwables<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token operator">:</span>throwables<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="事务ACID属性即并发问题"><a href="#事务ACID属性即并发问题" class="headerlink" title="事务ACID属性即并发问题"></a>事务ACID属性即并发问题</h3><p>尽管之前在mysql中讲解了一些关于事务的问题，为了加强记忆与理解，在这里再次重复一遍。</p><ul><li>原子性：事务是一个不可分割的工作单位。</li><li>一致性：事务必须使数据库从一个一致性状态转换到另一个一致性状态</li><li>隔离性：一个事务的执行，不能被其他事物干扰，即在一个事务内部的操作及使用对并发的其他事务是隔离的。</li><li>持久性：事务一旦被提交，则其对数据库的影响是永久的。</li></ul><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="Druid（德鲁伊）数据库连接池"><a href="#Druid（德鲁伊）数据库连接池" class="headerlink" title="Druid（德鲁伊）数据库连接池"></a>Druid（德鲁伊）数据库连接池</h3><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><p><a href="https://www.bookstack.cn/read/Druid/1d92b48730157330.md">Druid使用手册</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDruid</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">Properties</span> pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">TestDruid</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataSource</span> ds <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>pro<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//其中，src下的配置文件为：【druid.properties】</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>test<span class="token operator">?</span>rewriteBatchedStatements<span class="token operator">=</span><span class="token boolean">true</span>username<span class="token operator">=</span>rootpassword<span class="token operator">=</span><span class="token number">123456</span>driverClassName<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>initialSize<span class="token operator">=</span><span class="token number">10</span>maxActive<span class="token operator">=</span><span class="token number">20</span>maxWait<span class="token operator">=</span><span class="token number">1000</span>filters<span class="token operator">=</span>wall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>详细配置参数</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="Apache-DBUtils实现CRUD操作"><a href="#Apache-DBUtils实现CRUD操作" class="headerlink" title="Apache-DBUtils实现CRUD操作"></a>Apache-DBUtils实现CRUD操作</h2><ul><li>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</li><li><img src="https://img-blog.csdnimg.cn/201905241930412.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3llcmVueXVhbl9wa3U=,size_16,color_FFFFFF,t_70"></li></ul><p>用ScalarHandler类处理特殊值，也可以自己实现ResultSetHandler接口来满足需求。</p><p><a href="https://www.cnblogs.com/yezhenhan/archive/2011/01/11/1932556.html">DButils详解</a></p><p>利用QueryRunner类。</p><p><img src="https://s2.loli.net/2021/12/29/ZDEUBzxLjeV5lCi.png" alt="a1.png"></p><h3 id="insert示例"><a href="#insert示例" class="headerlink" title="insert示例"></a>insert示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert_</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token class-name">QueryRunner</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        con <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">druidgetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into customers(name,email,birth)values(?,?,?)"</span><span class="token punctuation">;</span>        runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span>sql<span class="token punctuation">,</span><span class="token string">"sd"</span><span class="token punctuation">,</span><span class="token string">"ads"</span><span class="token punctuation">,</span><span class="token string">"1997-07-08"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>wm<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="query示例"><a href="#query示例" class="headerlink" title="query示例"></a>query示例</h3><p>query必然涉及到对结果集的处理，ResultSetHandler</p><ul><li>BeanHandler：用户封装表中的一条记录</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">QueryRunner</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">druidgetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select id,name,email,birth from customers where id=?"</span><span class="token punctuation">;</span>    <span class="token class-name">BeanHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Customer</span> query <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>BeanListHandler：封装多条记录</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">QueryRunner</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">druidgetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select id,name,email,birth from customers where id&lt;?"</span><span class="token punctuation">;</span>    <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> beanListHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> beanListHandler<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    query<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ArrayHandler：对一条记录的各个属性以数组的方式呈现</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery_3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">QueryRunner</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        con <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">druidgetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select id,name,email,birth from customers where id=?"</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayHandler</span> arrayHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> query <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> arrayHandler<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>wm<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ArrayListHandler：以此类推</li><li>MapHandler：将一条记录的对应字段作为key和value呈现。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery_4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">QueryRunner</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        con <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">druidgetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select id,name,email,birth from customers where id=?"</span><span class="token punctuation">;</span>        <span class="token class-name">MapHandler</span> mapHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> mapHandler<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>wm<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>ScalarHandler：用于特殊值的查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery_5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">QueryRunner</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        con <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">druidgetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select max(birth) from customers"</span><span class="token punctuation">;</span>        <span class="token class-name">ScalarHandler</span> scalarHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> query <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Date</span><span class="token punctuation">)</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> scalarHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>wm<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自定义ResultHandler接口实现类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery_5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">QueryRunner</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        con <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">druidgetConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select max(birth) from customers"</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> query <span class="token operator">=</span>  runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> sql<span class="token punctuation">,</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>wm<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span>JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向接口编程思想</title>
      <link href="/2021/10/05/mian-xiang-jie-kou-bian-cheng-si-xiang/"/>
      <url>/2021/10/05/mian-xiang-jie-kou-bian-cheng-si-xiang/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ResultSet详解</title>
      <link href="/2021/10/05/resultset-xiang-jie/"/>
      <url>/2021/10/05/resultset-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PreparedStatement详解</title>
      <link href="/2021/10/05/preparedstatement-xiang-jie/"/>
      <url>/2021/10/05/preparedstatement-xiang-jie/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC学习（一）</title>
      <link href="/2021/10/04/jdbc-xue-xi-yi/"/>
      <url>/2021/10/04/jdbc-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC学习（一）"><a href="#JDBC学习（一）" class="headerlink" title="JDBC学习（一）"></a>JDBC学习（一）</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="JDBC架构"><a href="#JDBC架构" class="headerlink" title="JDBC架构"></a>JDBC架构</h2><p>JDBC API支持用于数据库访问的两层和三层处理模型，通常使用两层</p><ul><li>JDBC API：提供应用程序到JDBC Manager的连接</li><li>JDBC Driver API ：支持JDBC Manager到驱动程序的连接</li></ul><p>JDBC API使用驱动程序管理器和特定于数据库的驱动程序来提供与异构数据库的透明连接。</p><p>JDBC驱动程序管理器确保使用正确的驱动程序访问每个数据源。 驱动程序管理器能够支持连接到多个异构数据库的多个并发驱动程序。</p><h3 id="常见的JDBC组件"><a href="#常见的JDBC组件" class="headerlink" title="常见的JDBC组件"></a>常见的JDBC组件</h3><ul><li>DriverManager：此类管理数据库驱动程序列表。 使用通信子协议匹配来自Java应用程序的连接请求和正确的数据库驱动程序。 识别JDBC下某个子协议的第一个驱动程序将用于建立数据库连接。</li><li>Driver：此接口处理与数据库服务器的通信。 您将很少直接与Driver对象进行交互。 而是使用DriverManager对象来管理此类对象。 它还抽象了与使用Driver对象相关的细节。</li><li>Connection：此接口包含用于联系数据库的所有方法。 连接对象表示通信上下文，即，与数据库的所有通信仅通过连接对象。</li><li>PreStatement&amp;Statement：您使用从此接口创建的对象将SQL语句提交到数据库。 除执行存储过程外，某些派生接口还接受参数。</li><li>ResultSet：在使用Statement对象执行SQL查询后，这些对象保存从数据库检索的数据。 它充当迭代器，允许您遍历其数据。</li><li>SQLException：此类处理数据库应用程序中发生的任何错误。</li></ul><img src="https://i.loli.net/2021/10/05/WYjGMfszQPlNSAO.png" alt="jdbc.png" style="zoom:60%;"><h3 id="JDBC获取数据库连接"><a href="#JDBC获取数据库连接" class="headerlink" title="JDBC获取数据库连接"></a>JDBC获取数据库连接</h3><ul><li>导入驱动包</li></ul><p><img src="https://i.loli.net/2021/10/05/iNmW4sgXyO657Fz.png" alt="jdbcDriver.png"></p><ul><li><p>注册驱动程序：</p><ul><li><code>Class.forname()</code>:注册驱动程序最常用的方法是使用Java的**Class.forName()**方法，将驱动程序的类文件动态加载到内存中，自动注册它。 此方法是首选，因为它允许您使驱动程序注册可配置和可移植。</li><li><code>DriverManager.registerDriver()</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>   <span class="token class-name">Driver</span> myDriver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span> myDriver <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error: unable to load driver class!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>DriverManager.getConnection()</code>：</p><ul><li>通常使用``getConnection（String url，Properties prop）`</li><li>对于mysql的url，格式为：``jdbc:mysql://hostname:[port]/databaseName?`?号后面可跟一些配置属性。</li><li>通常我们会使用一个配置文件如<code>jdbc.properties</code>,里面写上连接mysql的一些配置信息</li><li><img src="https://i.loli.net/2021/10/05/ZdNPnpAfKrOkVuD.png" alt="jdcbpro.png"></li></ul></li><li><p>关闭JDBC连接：在JDBC程序结束时，需要显式关闭与数据库的所有连接以结束每个数据库会话。 但是，如果您忘记了，Java的垃圾收集器将在清除过时对象时关闭连接。</p><p>依赖垃圾收集，特别是在数据库编程中，是一种非常糟糕的编程习惯。 您应该养成始终使用与连接对象关联的close（）方法关闭连接的习惯。</p><p>要确保关闭连接，您可以在代码中提供“finally”块。 无论是否发生异常，始终执行<em>finally</em>块。</p></li><li><p>最后附上完整代码：</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.实现了数据与代码的解耦</span><span class="token comment">//2.如果修改程序配置信息，只需修改文件不改代码，避免程序重新打包</span><span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token comment">//获取系统类加载器，自定义类都是系统类加载器加载</span>        <span class="token comment">//读取配置信息</span>        <span class="token class-name">InputStream</span> rs<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getClassLoader<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> pro<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> user<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> driver<span class="token operator">=</span>pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> con<span class="token operator">=</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JDBC数据库交互"><a href="#JDBC数据库交互" class="headerlink" title="JDBC数据库交互"></a>JDBC数据库交互</h2><table><thead><tr><th align="center">接口</th><th align="center">推荐用途</th></tr></thead><tbody><tr><td align="center">Statement</td><td align="center">使用对数据库的通用访问。 在运行时使用<strong>静态SQL语句</strong>时很有用。 Statement接口不能接受参数。</td></tr><tr><td align="center">PreparedStatement</td><td align="center">当您计划多次使用SQL语句时使用。 <code>PreparedStatement</code>接口在运行时接受输入参数。预编译的特性</td></tr><tr><td align="center">CallableStatement</td><td align="center">使用何时访问数据库存储过程。 <code>CallableStatement</code>接口也可以接受运行时输入参数。</td></tr></tbody></table><h3 id="PreparedStatement用法实例"><a href="#PreparedStatement用法实例" class="headerlink" title="PreparedStatement用法实例"></a>PreparedStatement用法实例</h3><p><code>PreparedStatement</code>:预编译SQL语句，存储在此对象中，可以高效多次执行该语句。，可传入带占位符的SQL语句，<code>String sql="insert into exam values(?,?,?)"</code>,也提供了填充占位符的方法，<code>setXxx(int index,Object val)</code>,index从1开始。当再次使用该语句时可调用<code>clearParameters()</code>清除参数，再重新设置参数。</p><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token comment">//对customers插入数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">InputStream</span> resourceAsStream <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resourceAsStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> user <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> password<span class="token operator">=</span>info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> driverClass <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driverClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into customers(name,email,birth) values(?,?,?)"</span><span class="token punctuation">;</span><span class="token comment">//问号将数据参数化</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"凡凡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"179566@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> sd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> sd<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2000-01-12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>       <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"update customers set name=? where id=?"</span><span class="token punctuation">;</span>       <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"热巴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通用的增删改"><a href="#通用的增删改" class="headerlink" title="通用的增删改"></a>通用的增删改</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//version1.0 后面可以加上事务</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">xiugai</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Connection</span> con<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">PreparedStatement</span> ps<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lines<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lines<span class="token operator">=</span>ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lines<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuery1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select id,name,email,birth from customers where id=?"</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> id<span class="token operator">=</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> email <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//利用专门类处理不同的属性值</span>            <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ORM编程思想</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通用的查询操作"><a href="#通用的查询操作" class="headerlink" title="通用的查询操作"></a>通用的查询操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对某个表的通用查询操作，封装到JavaBean中</span><span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">testQueryForCustomer</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">PrepareStatement</span> ps<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">ResultSet</span> rs<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rs<span class="token operator">=</span>ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取元数据，列数</span>        <span class="token class-name">ResultSetMetaData</span> metaData<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columns<span class="token operator">=</span>metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Customer</span> cus<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>columns<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">Object</span> columnval<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">String</span> columnName<span class="token operator">=</span>metaData<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Field</span> declaredField <span class="token operator">=</span> <span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//属性有可能是私有的</span>                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span>columnval<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>             <span class="token punctuation">}</span>        <span class="token keyword">return</span> cus<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询操作思想流程"><a href="#查询操作思想流程" class="headerlink" title="查询操作思想流程"></a>查询操作思想流程</h4><p><img src="https://i.loli.net/2021/10/05/l9QgxkqbrJE5KOA.png" alt="jdcbquery.png"></p><h4 id="针对于所有表的通用查询操作"><a href="#针对于所有表的通用查询操作" class="headerlink" title="针对于所有表的通用查询操作"></a>针对于所有表的通用查询操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//参数中提供JavaBean的类对象</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Object</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span><span class="token class-name">Connection</span> conn<span class="token operator">=</span><span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PrepareStatement</span> ps<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">ResultSet</span> rs<span class="token operator">=</span>ps<span class="token punctuation">.</span><span class="token function">excuteQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResultSetMetaData</span> metaData <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">T</span> t<span class="token operator">=</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>columnCount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Object</span> val<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnLable</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//返回多条记录时的通用查询操作</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getListForQuery</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span><span class="token class-name">Object</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSetMetaData</span> metaData <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> columnCount <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> arrayList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//            Order order=new Order();</span>            <span class="token class-name">T</span> t <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> columnCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//                String columnName = metaData.getColumnName(i + 1);  不推荐使用</span>                <span class="token class-name">String</span> columnLabel <span class="token operator">=</span> metaData<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果没有起别名，则返回列名</span>                <span class="token class-name">Field</span> declaredField <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                declaredField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> object <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                declaredField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arrayList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在使用完ResultSet，Statement，Connection对象后应立即调用close，这对象会占用规模较大的数据结构，占用数据库服务器上的有限资源。Statement对象的close方法将自动关闭与其所有相关联的结果集，同样Connection对象的close也将关闭该连接上的所有语句对象</strong></p><h4 id="SQLException"><a href="#SQLException" class="headerlink" title="SQLException"></a>SQLException</h4><p>SQLException有一个由多个SQLException对象构成的链，由于SQLException实现的Iterable<throwable>接口，故可遍历该链</throwable></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token operator">:</span>sqlException<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="插入Blog数据"><a href="#插入Blog数据" class="headerlink" title="插入Blog数据"></a>插入Blog数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsertBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>       <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"insert into customers(name,email,birth,photo) values(?,?,?,?)"</span><span class="token punctuation">;</span>       <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张宇豪"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"1710515@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">SimpleDateFormat</span> sd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Date</span> date <span class="token operator">=</span> sd<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"1990-10-14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">FileInputStream</span> fis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"images/mahuateng.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>       ps<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>       fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="读入Blob数据"><a href="#读入Blob数据" class="headerlink" title="读入Blob数据"></a>读入Blob数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReadBlob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> sql<span class="token operator">=</span><span class="token string">"select id,name,email,birth,photo from customers where id=?"</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Customer</span> customer<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>email<span class="token punctuation">,</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Blob</span> blob<span class="token operator">=</span>rs<span class="token punctuation">.</span><span class="token function">getBlob</span><span class="token punctuation">(</span><span class="token string">"photo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">InputStream</span> inblob <span class="token operator">=</span> blob<span class="token punctuation">.</span><span class="token function">getBinaryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileOutputStream</span> fos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"images/mahuateng2.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>inblob<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">closeConnection</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span>ps<span class="token punctuation">,</span>rs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ps：在设置了Blob类型之后，若仍报too large错误，则可尝试在mysql的my.ini文件中修改配置参数：max_allowed_packet=16M;</p><p>在相关Connection对象关闭后，PreparedStatement对象就无效了，但数据库会自动缓存预备语句，相同的查询被执行多次后，再次执行时会重用查询策略，无需过多考虑PreparedStatement的开销</p>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat学习（一）</title>
      <link href="/2021/10/01/tomcat-xue-xi-yi/"/>
      <url>/2021/10/01/tomcat-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> tomcat原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由LSB算法所引发的对byte类型的思考</title>
      <link href="/2021/09/29/you-lsb-suan-fa-suo-yin-fa-de-dui-byte-lei-xing-de-si-kao/"/>
      <url>/2021/09/29/you-lsb-suan-fa-suo-yin-fa-de-dui-byte-lei-xing-de-si-kao/</url>
      
        <content type="html"><![CDATA[<h1 id="Byte类型详解"><a href="#Byte类型详解" class="headerlink" title="Byte类型详解"></a>Byte类型详解</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><blockquote><p>参考文章：<a href="https://cloud.tencent.com/developer/article/1499063?from=14588">从强转Byte说起</a></p></blockquote><p>最近在写LSB算法时，遇到了许多字节运算与位运算，在byte与int之间的转换中一直出bug，百思不得其解，还以为代码逻辑有问题，最终在查找资料得知没想到Java中的byte类型有大学问，故通过这篇文章来剖析一下Java中的byte。</p><p><strong>前言：</strong></p><p>在计算机存储中以字节为单位，8bit组成一个字节，在网络数据传输中，大部分协议都是按字节一位位解析的，故搞清楚byte很有必要</p><h2 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h2><p>在java中除了boolean和char是无符号的，其余的基本数据类型都是有符号的，故最高位用来标识符号。我们通常以为若byte为正数，其最大值为<code>01111111</code>即127，若byte为负数其最小值为<code>11111111</code>即-127，但实际上真的是这样吗，这与许多教程中-128到127的结论不太吻合啊！！那这-128哪来的呢？我们可以试验一下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//结果</span><span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">10000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>-128表示为10000000，这不是-0嘛</p><p>实际上将-127打印出来你会发现也不是-127，而是-1</p><pre class="line-numbers language-none"><code class="language-none">byte b1 = (byte)-127 ;System.out.println(b1);//结果10000001//最后八位<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会这样呢？经过查询得知==：计算机中存储的都是补码，输出的都是原码==，即是以补码形式存储数值的，负数的补码是取反加1，正数的补码是本身，正如-127的存储形式转变过程是<code>11111111-》10000000+1=10000001</code>转成int就是<code>11111111111111111111111110000001</code></p><p>故对于int类型的-127转成byte直接截去前24位，存储后八位进去<code>10000001</code>,但这是补码，输出的时候转成原码还是-127。<font color="red">注意：若直接采用二进制或十六进制赋值，即byte b=0b11111111，则计算机会直接把这个二进制码存进去，即当成这就是补码，故你在输出的时候会发现这个值变为了-1</font></p><h2 id="运算机制"><a href="#运算机制" class="headerlink" title="运算机制"></a>运算机制</h2><p>在java中两个变量只要参与了运算，就可能会进行类型转变，即只要比int小的类型自动转成int，通常表达式中出现的最大数据类型决定了表达式最终结果的数据类型，例如int+long，结果为long</p><p>在通信中发送的byte数组是哪些bit接受到的就是哪些bit，没有符号位这一说。但在输出的时候就会考虑符号位了。</p><h2 id="byte转int为什么要-amp-oxff"><a href="#byte转int为什么要-amp-oxff" class="headerlink" title="byte转int为什么要&amp;oxff"></a>byte转int为什么要&amp;oxff</h2><p>在介绍这个内容之前我们先讲一些前置知识</p><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>面试时你可能遇到过诸如写出2*8最有效率的运算方法，无非就是考察对底层二进制的熟悉程度，不用说，当然是用位运算，所以掌握位运算在一些问题上会有高效率的解法。</p><ul><li><p>按位与 &amp;</p><ul><li><p>相同二进制位同为1，不同为0，利用这个特性，我们可以得知判断奇偶数不在用传统的n%2的方式了，直接用n&amp;1，结果为0即为偶数，为1就是奇数，为什么？</p><p>对于正数和0，补码与原码相同，1的前面都为0，故我们只关心最后以为，奇数肯定是1,1&amp;1则为1，故为奇数；</p><p>对于负数，原码转补码，奇数最后一位取反加1后仍为1，故也可以判断，</p></li></ul></li><li><p>按位异或 ^</p><ul><li>相同的二进制位数数字不同则为1，否则为0，异或有个特性是任何数与0异或，结果都是其本身，利用这个特性可解决一些特定的问题。</li></ul></li><li><p>取反 ~ :按位取反</p></li><li><p>左移 &lt;&lt;  :形如a&lt;&lt;b，将a的二进制位整体左移b位，高位溢出则移除，低位补0，因为位运算是cpu直接支持的，故是最有效率的运算。</p></li><li><p>右移 &gt;&gt;  : 前面讲到计算机中是以补码形式存储数值的，在在右移的时候要考虑符号位，若右移的是负数，则在高位补1，若为整数，则在高位补0.</p></li><li><p>无符号右移 &gt;&gt;&gt;  : 与右移唯一的不同在于无论什么数，移动都是高位补0，==没有无符号左移，因为符号位在左边，不存在补符号位的问题==</p></li></ul><p>学习了前面的知识后我们来讲讲我们的主题！！！</p><p>我们可以明白长字节数要往短转，直接强来肯定是不行的，而且搞清楚这个问题很有必要。在javaIO包中各种输入输出流的读写方法，很多参数都是字节数组，为了保证不同通讯终端数据兼容，发送和接收的都是字节序列，搞清楚很有必要。</p><p>在Java中怎么将int转换成byte还能成功还原呢，我们知道一个int占4个byte，即需要一个byte数组，直接上代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">int2Bytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> i<span class="token punctuation">;</span>        <span class="token keyword">return</span> bytes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/09/30/G1t4dzLsE2rPUxV.png" alt="byte转int.png"></p><p>其实很简单，只需要右移就好了，但是装进去了怎么还原呢，很明显想到左移，但真这么简单吗？</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bytes2Int</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 左移将原来的数先还原到对应的位置，再 按位或 将几个数进行合并</span>        <span class="token keyword">return</span> 　　bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>                <span class="token operator">|</span> bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>                <span class="token operator">|</span> bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span>                <span class="token operator">|</span> bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果真这样搞，那就等着大bug吧。我们知道计算机是以补码形式存储数值的，当我们进行以为运算时，byte，short，char类型会提升为32位的int，这时候就需要用0或1补位，如果是负数会补1，正数补0，为保证拼接起来的byte补码形式与原来int的补码形式相同，我们要先进行byte &amp; 0xff，提前补位，再通过 | 按位或即能正确拼接回int，这样才能保证数据不会发生异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">bytes2Int</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>　　  bytes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>                <span class="token operator">|</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>                <span class="token operator">|</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span>                <span class="token operator">|</span> <span class="token punctuation">(</span>bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为这个问题纠结了几天了，今天感觉算是豁然开朗了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb练习项目分析:javaweb教程P330-355</title>
      <link href="/2021/09/29/javaweb-lian-xi-xiang-mu-fen-xi-javaweb-jiao-cheng-p330-355/"/>
      <url>/2021/09/29/javaweb-lian-xi-xiang-mu-fen-xi-javaweb-jiao-cheng-p330-355/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础知识总结（一）</title>
      <link href="/2021/09/29/javase-ji-chu-zhi-shi-zong-jie-yi/"/>
      <url>/2021/09/29/javase-ji-chu-zhi-shi-zong-jie-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaSE基础知识总结（一）"><a href="#JavaSE基础知识总结（一）" class="headerlink" title="JavaSE基础知识总结（一）"></a>JavaSE基础知识总结（一）</h1><p>制作人：文明</p><p>微信：19871173328</p><h2 id="Java中的浅拷贝与深拷贝"><a href="#Java中的浅拷贝与深拷贝" class="headerlink" title="Java中的浅拷贝与深拷贝"></a>Java中的浅拷贝与深拷贝</h2><p><a href="https://juejin.cn/post/6844903806577164302">Java浅拷贝与深拷贝</a></p><p><a href="https://www.cnblogs.com/plokmju/p/7357205.html">细说浅拷贝与深拷贝</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaSE基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode每日一练</title>
      <link href="/2021/09/28/leetcode-mei-ri-yi-lian/"/>
      <url>/2021/09/28/leetcode-mei-ri-yi-lian/</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode每日一练"><a href="#leetcode每日一练" class="headerlink" title="leetcode每日一练"></a>leetcode每日一练</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></p><p>反转链表比较常规的思路有两种：迭代和递归</p><h3 id="方法一：迭代"><a href="#方法一：迭代" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h3><p>通常会设置两个辅助结点，一个前驱结点<code>pre=null</code>，一个当前结点<code>cur通常设置为head</code>。</p><ul><li>找一次迭代的过程，要实现链表反转，首先肯定要获取<code>cur</code>结点的后一节点指针<code>next</code>，方便后移，然后将cur的指向反转，指向pre，再<code>pre=cur</code>，<code>cur=next</code>这一组过程实现结点后移，之后的过程重复如此即可实现反转。</li><li>循环终止条件即为<code>cur!=null</code></li></ul><img src="https://i.loli.net/2021/09/28/kasnHzLEgiv9SVt.gif" alt="反转链表.gif" style="zoom:75%;"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>curr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==此代码可作为反转链表的模板，在遇到其他反转链表类似操作时，此代码可作为模板嵌入解决子问题==</p><ul><li>复杂度分析：时间复杂度O(n),n为链表长度，即遍历一次链表；空间复杂度O(1)，即定义的辅助结点。</li></ul><h3 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><p>思路与前面类似，只不过采用递归的思想，这里只贴代码。</p><p>递归求解步骤：</p><ul><li>明确要写的递归函数的功能，该怎么设计返回值</li><li>找递归问题的子问题，即一次调用之后会产生什么结果，即找递推关系</li><li>找到临界条件，确保子问题不会无限分解下去</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> pre<span class="token punctuation">,</span><span class="token class-name">ListNode</span> cur<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> pre<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>        pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>        cur<span class="token operator">=</span>curr<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">reverse</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反转链表（II）"><a href="#反转链表（II）" class="headerlink" title="反转链表（II）"></a>反转链表（II）</h2><p><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">反转链表(II)</a></p><h3 id="方法一：构造常用反转链表模板"><a href="#方法一：构造常用反转链表模板" class="headerlink" title="方法一：构造常用反转链表模板"></a>方法一：构造常用反转链表模板</h3><p>此题是将指定范围内的链表反转，这就涉及到这个范围内之外的结点怎么连接。但在范围之内，我们仍然可以直接使用反转模板，先反转，在利用几个记录指针，连接范围内的收尾，即可完成连接。具体在于先找到范围外最接近范围内链表的前驱结点和后继结点，切断链表，待内部反转完毕，再实现外部连接。</p><p>==链表移动tips:链表标号相减所得的次数即是从前一结点移动到后一节点的循环次数==</p><img src="https://i.loli.net/2021/09/28/nirPqb3K4NwOsYL.png" alt="反转链表2.png" style="zoom:75%;"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>y    <span class="token comment">//由于头结点可能存在反转，故设置哑结点，这是这类题的通用做法，避免分类讨论</span>       <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>       <span class="token comment">//找到pre</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token punctuation">}</span>              <span class="token class-name">ListNode</span> leftNode<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token class-name">ListNode</span> rightNode<span class="token operator">=</span>leftNode<span class="token punctuation">;</span>       pre<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>right<span class="token operator">-</span>left<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           rightNode<span class="token operator">=</span>rightNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token class-name">ListNode</span> succ<span class="token operator">=</span>rightNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>       rightNode<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token function">reverseList</span><span class="token punctuation">(</span>leftNode<span class="token punctuation">)</span><span class="token punctuation">;</span>       pre<span class="token punctuation">.</span>next<span class="token operator">=</span>rightNode<span class="token punctuation">;</span>       leftNode<span class="token punctuation">.</span>next<span class="token operator">=</span>succ<span class="token punctuation">;</span>       <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>curr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：头插法，思路巧妙"><a href="#方法二：头插法，思路巧妙" class="headerlink" title="方法二：头插法，思路巧妙"></a>方法二：头插法，思路巧妙</h3><p>前一方法的缺点在于若起始结束点分别在头尾，则要遍历两边链表，我们思考能不能只遍历一遍？于是有头插法：</p><img src="https://i.loli.net/2021/09/28/8k3LdAZwER7UNF5.png" alt="反转链表法2.png" style="zoom:67%;"><ul><li><code>pre</code>始终执行反转区域第一个节点left的前一个结点。</li><li><code>cur</code>永远指向反转区域left结点</li><li><code>next</code>指向cur下一节点，随着cur后移</li></ul><p>反转过程：</p><p><img src="https://i.loli.net/2021/09/28/5HzNvQi41TLFWVR.png" alt="屏幕截图 2021-09-28 223527.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ListNode</span> curr<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token operator">-</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           next<span class="token operator">=</span>curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           curr<span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>           next<span class="token punctuation">.</span>next<span class="token operator">=</span>curr<span class="token punctuation">;</span>           pre<span class="token punctuation">.</span>next<span class="token operator">=</span>next<span class="token punctuation">;</span>       <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复杂度分析：时间复杂度O(n)，至多只遍历链表一次；空间复杂度O(1)，使用常数个辅助指针。</li></ul><h2 id="82-删除排序链表中的重复元素-II"><a href="#82-删除排序链表中的重复元素-II" class="headerlink" title="82. 删除排序链表中的重复元素 II"></a>82. 删除排序链表中的重复元素 II</h2><h3 id="方法一：迭代-1"><a href="#方法一：迭代-1" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h3><p> <a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/">82. 删除排序链表中的重复元素 II</a></p><p>此题是只要出现重复的结点，就将这些节点全部删除，而不是删除到只剩一个。</p><p>链表是已经排好序的，故重复元素在链表中是连续出现的，因此只需遍历一次。由于头结点也可能被删除，故设置哑结点。</p><p>==注意由于是通过判断cur.next.val=cur.next.next.val,故要先确保不为空，要加判断==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> dummyNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">==</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//通过记录该值，方便后续删除</span>                <span class="token keyword">int</span> x<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">==</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>                    cur<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：递归-1"><a href="#方法二：递归-1" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><h2 id="86-分割链表"><a href="#86-分割链表" class="headerlink" title="86.分割链表"></a>86.分割链表</h2><h3 id="方法一：虚拟结点拆分再合并"><a href="#方法一：虚拟结点拆分再合并" class="headerlink" title="方法一：虚拟结点拆分再合并"></a>方法一：虚拟结点拆分再合并</h3><p>设置两个虚拟头结点，一个头结点连接所有小于x的结点，一个头结点连接所有大于或等于x的结点，这里有个误区就是不一定要所有小于x的都在x结点左边，大于x的都在x右边，只需要小于的在大于或等于的左边就行了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> smallHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> largeHead<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> small<span class="token operator">=</span>smallHead<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> large<span class="token operator">=</span>largeHead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>                small<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                small<span class="token operator">=</span>small<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                large<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>                large<span class="token operator">=</span>large<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        large<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        small<span class="token punctuation">.</span>next<span class="token operator">=</span>largeHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> smallHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法二：哨兵结点-双指针"><a href="#方法二：哨兵结点-双指针" class="headerlink" title="方法二：哨兵结点+双指针"></a>方法二：哨兵结点+双指针</h3><p>此题关键是找到第一个大于x的结点，即为分界点，此时用一个哨兵节点指向分界点，然后利用另一个移动指针持续往后搜索，将小于x的结点全部移到哨兵节点之后，遍历完后则小于x的结点全部在大于或等于x结点之前。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ListNode</span> dummyNode<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> pre<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token class-name">ListNode</span> cur<span class="token operator">=</span>dummyNode<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token operator">&amp;&amp;</span>cur<span class="token operator">!=</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token class-name">ListNode</span> tar<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                cur<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                tar<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next<span class="token operator">=</span>tar<span class="token punctuation">;</span>                pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token operator">&lt;</span>x<span class="token operator">&amp;&amp;</span>cur<span class="token operator">==</span>pre<span class="token punctuation">)</span><span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                pre<span class="token operator">=</span>pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dummyNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML学习</title>
      <link href="/2021/09/25/xml-xue-xi/"/>
      <url>/2021/09/25/xml-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSTL学习</title>
      <link href="/2021/09/25/jstl-xue-xi/"/>
      <url>/2021/09/25/jstl-xue-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL表达式介绍</title>
      <link href="/2021/09/25/el-biao-da-shi-jie-shao/"/>
      <url>/2021/09/25/el-biao-da-shi-jie-shao/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE常用工具类（日期篇）</title>
      <link href="/2021/09/23/javase-chang-yong-gong-ju-lei-ri-qi-pian/"/>
      <url>/2021/09/23/javase-chang-yong-gong-ju-lei-ri-qi-pian/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中Update resources和Update classes and resources、Redeploy、Restart server的区别</title>
      <link href="/2021/09/23/idea-zhong-update-resources-he-update-classes-and-resources-redeploy-restart-server-de-qu-bie/"/>
      <url>/2021/09/23/idea-zhong-update-resources-he-update-classes-and-resources-redeploy-restart-server-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA中Update-resources和Update-classes-and-resources、Redeploy、Restart-server的区别"><a href="#IDEA中Update-resources和Update-classes-and-resources、Redeploy、Restart-server的区别" class="headerlink" title="IDEA中Update resources和Update classes and resources、Redeploy、Restart server的区别"></a>IDEA中Update resources和Update classes and resources、Redeploy、Restart server的区别</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><p><img src="https://i.loli.net/2021/09/23/OMiZmapWuQNzyCA.png" alt="tomcat.png"></p><ul><li>update resources:更新静态资源，比如html，js，css等资源，再运行和调试模式下都是立即生效的。</li><li>update classes and resources  更新java，jsp等和静态资源，<ul><li>1.在java修改后，会被编译成class文件，然后覆盖到target/kao文件夹下，在IDE调试模式下会立即生效，在IDE运行模式下不立即生效，需要redeployed才生效</li><li>jsp被修改后，再次访问时会自动更新，由于是访问时才检测是否修改，是否重新编译，故在IDE运行模式下和调试模式下都是立即生效的</li></ul></li><li>redeployed  重新部署，发布到tomcat里，不是重启tomcat，而是把原来的删除，再把新的放进去</li><li>restart server  重启tmocat</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdbc连接mysql的url写法及常见属性</title>
      <link href="/2021/09/14/jdbc-lian-jie-mysql-de-url-xie-fa-ji-chang-jian-shu-xing/"/>
      <url>/2021/09/14/jdbc-lian-jie-mysql-de-url-xie-fa-ji-chang-jian-shu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="jdbc连接mysql的url写法及常见属性"><a href="#jdbc连接mysql的url写法及常见属性" class="headerlink" title="jdbc连接mysql的url写法及常见属性"></a>jdbc连接mysql的url写法及常见属性</h1><p>制作人：WenMing</p><p>微信：19871173328</p><hr><p><font color="green">URL=jdbc:mysql://[host][:port]/[database]</font></p><p>其后可跟性能参数：？[propertyName1=propertyValue1]&amp;[propertyName2=propertyValue2]…</p><p>MYSQL 8.0 以上版本数据库连接有所不同：</p><ol><li>MYSQL 8.0 以上版本驱动包为mysql-connector-java-8.0.16.jar</li><li>com.mysql.jdbc.Driver更换为 com.mysql.cj.jdbc.Driver</li></ol><p>重要参数如下：</p><table><thead><tr><th>参数名称</th><th>参数说明</th><th>缺省值</th><th>最低版本要求</th></tr></thead><tbody><tr><td>user</td><td>数据库用户名（用于连接数据库）</td><td></td><td>所有版本</td></tr><tr><td>password</td><td>用户密码（用于连接数据库）</td><td></td><td>所有版本</td></tr><tr><td>useUnicode</td><td>是否使用Unicode字符集，如果参数characterEncoding设置为gb2312或gbk，本参数值必须设置为true</td><td>false</td><td>1.1g</td></tr><tr><td>characterEncoding</td><td>当useUnicode设置为true时，指定字符编码。比如可设置为gb2312或gbk</td><td>false</td><td>1.1g</td></tr><tr><td>autoReconnect</td><td>当数据库连接异常中断时，是否自动重新连接？</td><td>false</td><td>1.1</td></tr><tr><td>autoReconnectForPools</td><td>是否使用针对数据库连接池的重连策略</td><td>false</td><td>3.1.3</td></tr><tr><td>failOverReadOnly</td><td>自动重连成功后，连接是否设置为只读？</td><td>true</td><td>3.0.12</td></tr><tr><td>maxReconnects</td><td>autoReconnect设置为true时，重试连接的次数</td><td>3</td><td>1.1</td></tr><tr><td>initialTimeout</td><td>autoReconnect设置为true时，两次重连之间的时间间隔，单位：秒</td><td>2</td><td>1.1</td></tr><tr><td>connectTimeout</td><td>和数据库服务器建立socket连接时的超时，单位：毫秒。 0表示永不超时，适用于JDK 1.4及更高版本</td><td>0</td><td>3.0.1</td></tr><tr><td>socketTimeout</td><td>socket操作（读写）超时，单位：毫秒。 0表示永不超时</td><td>0</td><td>3.0.1</td></tr></tbody></table><p>mysql常用配置：</p><p>jdbc:mysql://localhost:3306/数据库名?autoReconnect=true&amp;useUnicode=true&amp;characterEncoding=utf8</p><p>&amp;serverTimezone=GMT%2B8</p>]]></content>
      
      
      
        <tags>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Juni常用注解</title>
      <link href="/2021/09/12/juni-chu-tan/"/>
      <url>/2021/09/12/juni-chu-tan/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql部分知识整理(二)</title>
      <link href="/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li-er/"/>
      <url>/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li-er/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=103027&amp;auto=0&amp;height=66"></iframe><h1 id="mysql部分知识整理（二）"><a href="#mysql部分知识整理（二）" class="headerlink" title="mysql部分知识整理（二）"></a>mysql部分知识整理（二）</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><p><font color="red">本文续上文</font></p><h2 id="第六部分：mysql流程控制介绍"><a href="#第六部分：mysql流程控制介绍" class="headerlink" title="第六部分：mysql流程控制介绍"></a>第六部分：mysql流程控制介绍</h2><h3 id="6-1-分支结构"><a href="#6-1-分支结构" class="headerlink" title="6.1 分支结构"></a>6.1 分支结构</h3><h4 id="6-1-1-if函数"><a href="#6-1-1-if函数" class="headerlink" title="6.1.1 if函数"></a>6.1.1 if函数</h4><p>实现简单的双分支</p><p><code>if(表达式1,表达式2,表达式3)</code>；可应用在任何地方</p><h4 id="6-1-2-case结构"><a href="#6-1-2-case结构" class="headerlink" title="6.1.2 case结构"></a>6.1.2 case结构</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#结构一：</span><span class="token keyword">case</span> 变量<span class="token operator">|</span>表达式<span class="token operator">|</span>字段<span class="token keyword">when</span> 值 <span class="token keyword">then</span> 显示的值或语句<span class="token keyword">when</span> 值 <span class="token keyword">then</span> 显示的值或语句。。。<span class="token keyword">else</span> 显示的值或语句<span class="token keyword">end</span> <span class="token keyword">case</span>；<span class="token comment">#结构二：</span><span class="token keyword">case</span> <span class="token keyword">when</span> 条件 <span class="token keyword">then</span> 显示的值或语句<span class="token keyword">when</span> 条件 <span class="token keyword">then</span> 显示的值或语句。。。<span class="token keyword">else</span> 显示的值或语句<span class="token keyword">end</span> <span class="token keyword">case</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应用：</p><ul><li>可以作为表达式，嵌套在其他语句中使用，可以放在任何地方</li><li>作为独立的语句使用时，只能放在begin and内使用</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> test_case<span class="token punctuation">(</span><span class="token operator">in</span> score <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">case</span> <span class="token keyword">when</span> score<span class="token operator">&gt;=</span><span class="token number">90</span> <span class="token keyword">then</span> <span class="token keyword">select</span> <span class="token string">'A'</span><span class="token punctuation">;</span><span class="token keyword">when</span> score<span class="token operator">&gt;=</span><span class="token number">80</span> <span class="token keyword">then</span> <span class="token keyword">select</span> <span class="token string">'B'</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">select</span> <span class="token string">'C'</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span> <span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-1-3-if-elseif结构"><a href="#6-1-3-if-elseif结构" class="headerlink" title="6.1.3 if-elseif结构"></a>6.1.3 if-elseif结构</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">if</span> 条件<span class="token number">1</span> <span class="token keyword">then</span> 语句<span class="token number">1</span>；<span class="token keyword">elseif</span> 条件<span class="token number">2</span> <span class="token keyword">then</span> 语句<span class="token number">2</span>；。。。<span class="token keyword">else</span> 语句n；<span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只能应用在begin and中</p><h3 id="6-2-循环结构"><a href="#6-2-循环结构" class="headerlink" title="6.2 循环结构"></a>6.2 循环结构</h3><h4 id="6-2-1-语法"><a href="#6-2-1-语法" class="headerlink" title="6.2.1 语法"></a>6.2.1 语法</h4><ul><li><p>while</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span><span class="token keyword">while</span> 循环条件 <span class="token keyword">do</span>循环体；<span class="token keyword">end</span> <span class="token keyword">while</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>loop</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span><span class="token keyword">loop</span>循环体<span class="token keyword">end</span> <span class="token keyword">loop</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>repeat</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#类似于do-while</span><span class="token punctuation">[</span>标签：<span class="token punctuation">]</span> <span class="token keyword">repeat</span>循环体until 结束循环条件<span class="token keyword">end</span> <span class="token keyword">repeat</span> <span class="token punctuation">[</span>标签<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-2-2-案例"><a href="#6-2-2-案例" class="headerlink" title="6.2.2 案例"></a>6.2.2 案例</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 批量插入</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_while<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'asaf'</span><span class="token punctuation">,</span>aefsaaw<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token comment"># 批量插入，次数大于20则停止,iterate类似于continue，leave类似于break</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> test_while<span class="token punctuation">(</span><span class="token operator">in</span> insertCount <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>a: <span class="token keyword">while</span> i<span class="token operator">&lt;=</span>insertCount <span class="token keyword">do</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'as'</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> i<span class="token operator">&gt;=</span><span class="token number">20</span> <span class="token keyword">then</span> <span class="token keyword">leave</span> a<span class="token punctuation">;</span><span class="token keyword">set</span> i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span> a<span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>循环结构只能使用在begin end中。</p><h2 id="第七部分：触发器"><a href="#第七部分：触发器" class="headerlink" title="第七部分：触发器"></a>第七部分：触发器</h2><h2 id="第八部分：SQL数据类型"><a href="#第八部分：SQL数据类型" class="headerlink" title="第八部分：SQL数据类型"></a>第八部分：SQL数据类型</h2>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql部分知识整理(一)</title>
      <link href="/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li/"/>
      <url>/2021/09/10/mysql-bu-fen-zhi-shi-zheng-li/</url>
      
        <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&amp;id=1384026889&amp;auto=0&amp;height=66"></iframe><h1 id="mysql部分知识整理-一"><a href="#mysql部分知识整理-一" class="headerlink" title="mysql部分知识整理(一)"></a>mysql部分知识整理(一)</h1><p>制作人：文明</p><p>微信：19871173328</p><hr><h2 id="第一部分：事务"><a href="#第一部分：事务" class="headerlink" title="第一部分：事务"></a>第一部分：事务</h2><h3 id="1-1-事务概述"><a href="#1-1-事务概述" class="headerlink" title="1.1 事务概述"></a>1.1 事务概述</h3><ul><li><p>使用事务处理，确保成批的SQL操作要么全部执行要么全部不执行，来维护数据库的完整性。</p><p>当多个用户访问同一数据时，一个用户在更改数据过程中可能有其他同时执行更改的用户，为保证数据库记录从一个一致性状态变为另一个一致性状态，了解事务的相关特性有其必要。</p></li></ul><h3 id="1-2-事务特性（ACID）"><a href="#1-2-事务特性（ACID）" class="headerlink" title="1.2 事务特性（ACID）"></a>1.2 事务特性（ACID）</h3><ul><li>原子性 ：事务所有操作视为原子单位，对事务的操作只能完全提交或完全回滚</li><li>一致性 ：事务完成时，数据必须是一致性状态的转移，所有的变更都应用于事务的修改，确保数据的完整性。例如转账前后收发双方总钱数不变</li><li>隔离性 ：一个事务的操作必须与其他事务操作相隔离。进行事务查看数据时数据所处的状态要么是被另一并发事务修改之前的状态，要么是修改之后的状态，而不会是另一并发事务执行操作时中间的状态，这通过锁机制实现。</li><li>持久性 ：事务完成后，做的修改对数据影响是永久的。</li></ul><h3 id="1-3-mysql事务隔离级别"><a href="#1-3-mysql事务隔离级别" class="headerlink" title="1.3 mysql事务隔离级别"></a>1.3 mysql事务隔离级别</h3><p>mysql中提供四种事务隔离级别：READ UNCOMMITTED, READ COMMITTED, REPEATABLE READ, SERIALIZABLE 在了解之前先来看一下一些并发问题</p><p><img src="https://i.loli.net/2021/09/10/TgHx51AzeSsmMvu.png" alt="并发问题.png"></p><p>查看系统事务隔离级别：<code>select @@global.tx_isolation</code></p><p>设置事务隔离级别：<code>set global transaction isolation level ...</code></p><p>以下隔离级别一次越来越安全，但并发率越来越差。</p><ul><li>READ UNCOMMITTED ：该隔离级别，所有事务能看到其他事务未提交的修改，其性能不必其他级别高多少，很少使用，会产生脏读（设置隔离级别时最低要解决脏读问题）</li><li>READ COMMITTED ：大多数系统默认隔离级别。解决脏读，即事务只能看见提交事务的改变，但会引发不可重复读。即在同一事务期间可能会两次读出的数据不同。</li><li>REPEATABLE READ ：mysql默认隔离界别。解决不可重复读，能确保同一事务在并发读取数据行时看到同样数据行，但会产生幻读，即第一个事务对表中数据做了修改，这涉及全部数据行，但另一事务向表中插入了数据行，第一个事务就会发现多出了一行，且这行数据没有被我修改。</li><li>SERIALIZABLE：强制事务排序，解决幻读。即在每个读的数据行加上共享锁，这会导致大量超时现象。阻塞现象仅仅体现在读数据行上，进行其他操作不会阻塞。</li></ul><h3 id="1-4-使用事务相关操作"><a href="#1-4-使用事务相关操作" class="headerlink" title="1.4 使用事务相关操作"></a>1.4 使用事务相关操作</h3><ul><li><p>开启事务<code>start transaction</code></p></li><li><p>使用ROLLBACK</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">delete</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> orders<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提交事务commit，使用方法与rollback相同</p></li><li><p>设置保留点，简单的rollback与commit可以撤销和写入整个事务，但对于复杂的事务，只需要部分撤销或提交，此时设置保留点。<code>savepoint a1</code>退回时<code>rollback to a1</code></p></li><li><p>更改默认提交 <code>set autocommit=false</code></p></li></ul><h2 id="第二部分：约束"><a href="#第二部分：约束" class="headerlink" title="第二部分：约束"></a>第二部分：约束</h2><h3 id="2-1-常见约束"><a href="#2-1-常见约束" class="headerlink" title="2.1 常见约束"></a>2.1 常见约束</h3><ul><li>PRIMARY KEY：该表主键，主键默认加上NOT NULL，UNIQUE</li><li>FOREIGN KEY：外键，表示该属性是与之联系的某表的主键。<ul><li>特点：<ul><li>表的外键列类型和主表关联列类型兼容</li><li>主表的关联列必须是key，即主键或唯一</li><li>插入数据时先插主表，再插从表；删除数据时先删从表，再删主表</li></ul></li></ul></li><li>NOT NULL：非空</li><li>UNIQUE：属性唯一</li><li>DEFAULT：设置属性默认值</li><li>AUTO_INCREMENT：自增</li></ul><h3 id="2-2-添加约束的时机即约束相关操作"><a href="#2-2-添加约束的时机即约束相关操作" class="headerlink" title="2.2 添加约束的时机即约束相关操作"></a>2.2 添加约束的时机即约束相关操作</h3><ul><li><p>修改表时添加约束：</p><ul><li><p>添加约束，利用alter</p><p><code>alter table stu add constraint pk primary key(id)</code>或</p><p><code>alter table stu modify column id int primary key</code>添加主键</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_stu_major <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">#添加外键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> stu <span class="token keyword">add</span> <span class="token keyword">constraint</span> DF <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> age<span class="token punctuation">;</span><span class="token comment">#添加默认约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li><li><p>创建表时添加约束：</p><ul><li><p>添加列级约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token comment">#主键</span>    stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token comment">#非空</span>    seat <span class="token keyword">int</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">18</span>    majorid <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#列级约束只支持非空，默认，唯一，主键约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加表级约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> stu<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>    stuname <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    seat <span class="token keyword">int</span><span class="token punctuation">,</span>    age <span class="token keyword">int</span><span class="token punctuation">,</span>    majorid <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> pk <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> uq <span class="token keyword">unique</span><span class="token punctuation">(</span>seat<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">constraint</span> fk_stu_major <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>majorid<span class="token punctuation">)</span> <span class="token keyword">references</span> major<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>删除约束：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> <span class="token keyword">constraint</span> 约束名；<span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">modify</span> <span class="token keyword">column</span> 列名 。。。；<span class="token comment">#modify是万能的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="2-3-自增约束扩展"><a href="#2-3-自增约束扩展" class="headerlink" title="2.3 自增约束扩展"></a>2.3 自增约束扩展</h3><p>创建表时可以设置自增，设为自增的列插入值时可以忽略。</p><ul><li><p>标识列必须和key列搭配，即时主键或唯一</p></li><li><p>一个表至多一个自增列</p></li><li><p>标识列只能是数值型</p></li><li><p>修改表时设置和删除标识列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> tab_identify <span class="token keyword">modify</span> <span class="token keyword">column</span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">;</span><span class="token keyword">alter</span> <span class="token keyword">table</span> tab_identify <span class="token keyword">modify</span> <span class="token keyword">column</span> id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="第三部分：视图"><a href="#第三部分：视图" class="headerlink" title="第三部分：视图"></a>第三部分：视图</h2><h3 id="3-1-为什么使用视图"><a href="#3-1-为什么使用视图" class="headerlink" title="3.1 为什么使用视图"></a>3.1 为什么使用视图</h3><p>有时候查询很复杂，视图可以使用户不看整个数据库的数据，而只关心对自己有用的数据，其本质是一张虚拟的表，视图的列可以来自不同的表，其建立和删除不影响基本的表，<font color="green">但对试图内容的更新（添加，删除，修改）会影响基本表</font>，故当视图来自多个表时，不允许添加和删除数据。</p><h3 id="3-2-视图相关操作"><a href="#3-2-视图相关操作" class="headerlink" title="3.2 视图相关操作"></a>3.2 视图相关操作</h3><h4 id="3-2-1-创建视图"><a href="#3-2-1-创建视图" class="headerlink" title="3.2.1 创建视图"></a>3.2.1 创建视图</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token punctuation">[</span><span class="token operator">or</span> <span class="token keyword">replace</span><span class="token punctuation">]</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token punctuation">[</span><span class="token keyword">with</span><span class="token punctuation">[</span><span class="token keyword">cascaded</span><span class="token operator">|</span><span class="token keyword">LOCAL</span><span class="token punctuation">]</span><span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>CASCADED 表示更新视图时要满足有关视图和表的条件,在创建视图时建议加上此参数，这样从视图派生出新视图时，需考虑父视图的约束条件，保证数据的安全性。</p><h4 id="3-2-2-查看视图"><a href="#3-2-2-查看视图" class="headerlink" title="3.2.2 查看视图"></a>3.2.2 查看视图</h4><p>使用DESC 例如<code>desc&nbsp;viewname</code></p><p><strong>使用show tables 也可以查看视图</strong>，在mysql中，所有的视图定义都存在数据库<code>information_schema</code>的表views中，可以如此查看视图详细信息</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>views<span class="token keyword">where</span> table_name<span class="token operator">=</span><span class="token string">'viewname'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-2-3-修改视图-针对表结构"><a href="#3-2-3-修改视图-针对表结构" class="headerlink" title="3.2.3 修改视图(针对表结构)"></a>3.2.3 修改视图(针对表结构)</h4><p>当基本表的字段发生变化时，修改视图保持一致性，通过<code>create&nbsp;or&nbsp;replace&nbsp;view</code>或<code>alter</code>实现</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token keyword">with</span> <span class="token keyword">cascaded</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">view</span> viewname<span class="token keyword">as</span> <span class="token keyword">select</span> statement<span class="token keyword">with</span> <span class="token keyword">cascaded</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-2-4更新视图（针对表中字段内容）"><a href="#3-2-4更新视图（针对表中字段内容）" class="headerlink" title="3.2.4更新视图（针对表中字段内容）"></a>3.2.4更新视图（针对表中字段内容）</h4><p>与操纵基本表一样，select，update，insert，delete</p><h4 id="3-2-5-视图不能更新情况"><a href="#3-2-5-视图不能更新情况" class="headerlink" title="3.2.5 视图不能更新情况"></a>3.2.5 视图不能更新情况</h4><ul><li>视图包含UNION , UNOIN ALL , DISTINCT , GROUP BY , HAVING等关键字</li><li>常量视图 <code>create&nbsp;view&nbsp;view3&nbsp;as&nbsp;select&nbsp;'REBCCA'&nbsp;as&nbsp;name</code></li><li>包含子查询的视图也不能更新</li><li>视图中包含分组函数时不能更新视图</li></ul><h4 id="3-2-6-删除视图"><a href="#3-2-6-删除视图" class="headerlink" title="3.2.6 删除视图"></a>3.2.6 删除视图</h4><p><code>drop&nbsp;view&nbsp;viewname</code></p><h2 id="第四部分-：存储过程和函数"><a href="#第四部分-：存储过程和函数" class="headerlink" title="第四部分 ：存储过程和函数"></a>第四部分 ：存储过程和函数</h2><h3 id="4-1-存储过程"><a href="#4-1-存储过程" class="headerlink" title="4.1 存储过程"></a>4.1 存储过程</h3><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> procedure_name<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">SQL</span> 代码<span class="token keyword">end</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数的语法形式：<code>[IN|OUT|INOUT]&nbsp;param_name&nbsp;type</code>,<code>IN</code>可以做输入值，<code>OUT</code>可以做返回值，<code>INOUT</code>都可以做</p><ul><li><p>空参列表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> myp1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">insert</span> <span class="token keyword">into</span> admin<span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'asdq'</span><span class="token punctuation">,</span><span class="token string">'adqqe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带IN模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp2<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">from</span> boys bo<span class="token keyword">right</span> <span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boyfriend<span class="token keyword">end</span> $<span class="token keyword">call</span> myp2<span class="token punctuation">(</span><span class="token string">'adfs'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带OUT模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp3<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> boy <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span>name <span class="token keyword">into</span> boy<span class="token keyword">from</span> boys bo<span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boy<span class="token keyword">where</span> b<span class="token punctuation">.</span>name<span class="token operator">=</span>beautyName<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">call</span> myp3<span class="token punctuation">(</span><span class="token string">'asda'</span><span class="token punctuation">,</span><span class="token variable">@output</span><span class="token punctuation">)</span>$<span class="token keyword">select</span> <span class="token variable">@output$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#带多个IN和OUT参数</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp4<span class="token punctuation">(</span><span class="token operator">IN</span> beautyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> boyName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> userCP <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> bo<span class="token punctuation">.</span>name<span class="token punctuation">,</span>bo<span class="token punctuation">.</span>userCP <span class="token keyword">into</span> boyName<span class="token punctuation">,</span>userCP<span class="token keyword">from</span> boys bo<span class="token keyword">join</span> beauty b <span class="token keyword">on</span> bo<span class="token punctuation">.</span>id<span class="token operator">=</span>b<span class="token punctuation">.</span>boyfriendid<span class="token keyword">where</span> b<span class="token punctuation">.</span>name<span class="token operator">=</span>beautyName<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">call</span> myp4<span class="token punctuation">(</span><span class="token string">'adef'</span><span class="token punctuation">,</span><span class="token variable">@name</span><span class="token punctuation">,</span><span class="token variable">@cpnum</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>带INOUT模式的参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> myp5<span class="token punctuation">(</span><span class="token keyword">INOUT</span> a <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">INOUT</span> b <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">set</span> a<span class="token operator">=</span>a<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">set</span> b<span class="token operator">=</span>b<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="存储过程删除"><a href="#存储过程删除" class="headerlink" title="存储过程删除"></a>存储过程删除</h4><p><code>drop&nbsp;procedure&nbsp;procedure_name</code></p><h4 id="存储过程的查看"><a href="#存储过程的查看" class="headerlink" title="存储过程的查看"></a>存储过程的查看</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#利用SHOW [procedure | function ] STATUS [like 'name']</span><span class="token comment">#此时查看存储过程或函数的状态，包括创建修改时间，描述等等。</span><span class="token comment">#利用show create [procedure | function ] name</span><span class="token comment">#查看存储过程或函数的定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-函数"><a href="#4-2-函数" class="headerlink" title="4.2 函数"></a>4.2 函数</h3><h4 id="4-2-1-存储过程与函数对比"><a href="#4-2-1-存储过程与函数对比" class="headerlink" title="4.2.1 存储过程与函数对比"></a>4.2.1 存储过程与函数对比</h4><ul><li>存储过程有0个返回或多个返回，但函数有且仅有一个返回</li><li>存储过程适合做批量操作数据，函数适合做处理数据得到返回</li></ul><h4 id="4-2-2-函数创建"><a href="#4-2-2-函数创建" class="headerlink" title="4.2.2 函数创建"></a>4.2.2 函数创建</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span> <span class="token keyword">returns</span> 返回类型<span class="token keyword">begin</span>函数体<span class="token keyword">end</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-案例演示"><a href="#4-2-3-案例演示" class="headerlink" title="4.2.3 案例演示"></a>4.2.3 案例演示</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#返回公司员工个数</span><span class="token keyword">create</span> <span class="token keyword">function</span> myf1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token keyword">begin</span><span class="token keyword">declare</span> c <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">into</span> c<span class="token keyword">from</span> employees<span class="token punctuation">;</span><span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">select</span> myf1<span class="token punctuation">(</span><span class="token punctuation">)</span>$  <span class="token comment">#调用函数</span><span class="token comment">#根据员工名返回工资</span><span class="token keyword">create</span> <span class="token keyword">function</span> myf2<span class="token punctuation">(</span>empName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">int</span><span class="token keyword">begin</span><span class="token keyword">set</span> <span class="token variable">@sal</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">select</span> salary <span class="token keyword">into</span> <span class="token variable">@sal</span><span class="token keyword">from</span> employees<span class="token keyword">where</span> last_name<span class="token operator">=</span>empName<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">@sal</span><span class="token punctuation">;</span><span class="token keyword">end</span> $<span class="token keyword">select</span> myf2<span class="token punctuation">(</span><span class="token string">'king'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-函数查看与删除"><a href="#4-2-4-函数查看与删除" class="headerlink" title="4.2.4 函数查看与删除"></a>4.2.4 函数查看与删除</h4><p>查看见上文 删除<code>DROP&nbsp;FUNCTION&nbsp;myf3;</code></p><h2 id="第五部分：变量"><a href="#第五部分：变量" class="headerlink" title="第五部分：变量"></a>第五部分：变量</h2><h3 id="5-1-变量概述"><a href="#5-1-变量概述" class="headerlink" title="5.1  变量概述"></a>5.1  变量概述</h3><ul><li>系统变量：系统提供，不是用户定义；<ul><li>查看系统变量：<code>show [global|session] variables like '% %'</code></li><li>查看系统变量的值：<code>select&nbsp;@@[global|session].变量名</code></li><li>设置变量值：<code>set&nbsp;@@[global|session].变量名=值</code></li></ul></li><li>会话变量：仅仅针对于当前会话有效，服务器启动后会重置<ul><li>语法同上，加上session</li></ul></li><li>对于系统定义的变量查看有两种方式show和select @@</li></ul><h3 id="5-2-自定义变量"><a href="#5-2-自定义变量" class="headerlink" title="5.2 自定义变量"></a>5.2 自定义变量</h3><h4 id="5-2-1-用户变量"><a href="#5-2-1-用户变量" class="headerlink" title="5.2.1 用户变量"></a>5.2.1 用户变量</h4><p>使用步骤：声明-&gt;赋值-&gt;使用</p><p>①声明并初始化：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> @用户变量<span class="token operator">=</span>值；<span class="token comment">#方式一</span><span class="token keyword">set</span> @用户变量:<span class="token operator">=</span>值；<span class="token comment">#方式二</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>②赋值</p><ul><li>方式一：语句同上</li><li>方式二：<code>select&nbsp;字段&nbsp;into&nbsp;变量名&nbsp;from&nbsp;表</code>，</li></ul><h4 id="5-2-2-局部变量"><a href="#5-2-2-局部变量" class="headerlink" title="5.2.2 局部变量"></a>5.2.2 局部变量</h4><p>作用域仅仅在begin end里有效</p><ul><li>声明 ：<code>declare&nbsp;变量名&nbsp;类型&nbsp;default&nbsp;值</code></li><li>赋值 ：<code>set&nbsp;局部变量=值</code>，<code>set&nbsp;局部变量:=值</code>，<code>select&nbsp;字段&nbsp;into&nbsp;局部变量&nbsp;from&nbsp;表</code></li><li>使用 ：<code>select&nbsp;局部变量</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
